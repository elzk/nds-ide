/*-----------------------------------------------------------------------------
 * Counter % !NAME % descriptor
 */

#define API_START_SEC_CONST_UNSPECIFIED
#include "tpl_memmap.h"
%
if NAME == "SystemCounter" then
%
CONST(tpl_tick, OS_CONST) OSTICKSPERBASE = % !TICKSPERBASE %;
CONST(tpl_tick, OS_CONST) OSMAXALLOWEDVALUE = % !MAXALLOWEDVALUE %;
CONST(tpl_tick, OS_CONST) OSMINCYCLE = % !MINCYCLE %;
%
else
%
CONST(tpl_tick, OS_CONST) OSTICKSPERBASE_% !NAME % = % !TICKSPERBASE %;
CONST(tpl_tick, OS_CONST) OSMAXALLOWEDVALUE_% !NAME % = % !MAXALLOWEDVALUE %;
CONST(tpl_tick, OS_CONST) OSMINCYCLE_% !NAME % = % !MINCYCLE %;
%
end if
%
#define API_STOP_SEC_CONST_UNSPECIFIED
#include "tpl_memmap.h"

#define OS_START_SEC_VAR_UNSPECIFIED
#include "tpl_memmap.h"

VAR(tpl_counter, OS_VAR) % !NAME %_counter_desc = {
  /* ticks per base       */  % !TICKSPERBASE %,
  /* max allowed value    */  % !MAXALLOWEDVALUE %,
  /* minimum cycle        */  % !MINCYCLE %,
  /* current tick         */  0,
  /* current date         */  0,%
if AUTOSAR then
%
    /* type the counter     */  % !TYPE %,%
end if
%
#if WITH_OSAPPLICATION == YES
    /* OS Application id    */  %
if AUTOSAR then
  if SCALABILITYCLASS >= 3 then
    if NAME == "SystemCounter" then
      %INVALID_OSAPPLICATION_ID,%
    else
      !APPLICATION%_id,%
    end if
  end if
end if
%
#endif
    /* first alarm          */  NULL_PTR,
    /* next alarm to raise  */  NULL_PTR
};

#define OS_STOP_SEC_VAR_UNSPECIFIED
#include "tpl_memmap.h"

