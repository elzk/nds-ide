/* tasks services */
TASK (tpl_os_task_kernel) {
  ActivateTask  -> tpl_activate_task_service;
  TerminateTask -> tpl_terminate_task_service;
  ChainTask     -> tpl_chain_task_service;
  Schedule      -> tpl_schedule_service;
  GetTaskID     -> tpl_get_task_id_service;
  GetTaskState  -> tpl_get_task_state_service;
};

/* interrupts services */
INTERRUPT (tpl_os_it_kernel) {
  EnableAllInterrupts   -> tpl_enable_all_interrupts_service;
  DisableAllInterrupts  -> tpl_disable_all_interrupts_service;
  ResumeAllInterrupts   -> tpl_resume_all_interrupts_service;
  SuspendAllInterrupts  -> tpl_suspend_all_interrupts_service;
  ResumeOSInterrupts    -> tpl_resume_os_interrupts_service;
  SuspendOSInterrupts   -> tpl_suspend_os_interrupts_service;
};

/* resources services */
RESOURCE (tpl_os_rez_kernel) {
  GetResource     -> tpl_get_resource_service;
  ReleaseResource -> tpl_release_resource_service;
};

/* events services */
EVENT (tpl_os_event_kernel) {
  SetEvent    -> tpl_set_event_service;
  ClearEvent  -> tpl_clear_event_service;
  GetEvent    -> tpl_get_event_service;
  WaitEvent   -> tpl_wait_event_service;
};

/* alarms services */
ALARM (tpl_os_alarm_kernel) {
  GetAlarmBase  -> tpl_get_alarm_base_service;
  GetAlarm      -> tpl_get_alarm_service;
  SetRelAlarm   -> tpl_set_rel_alarm_service;
  SetAbsAlarm   -> tpl_set_abs_alarm_service;
  CancelAlarm   -> tpl_cancel_alarm_service;
};

/* os services */
OS (tpl_os_kernel) {
  GetActiveApplicationMode  -> tpl_get_active_application_mode_service;
  StartOS (tpl_start_os)    -> tpl_start_os_service;
  ShutdownOS                -> tpl_shutdown_os_service;
  CallTerminateTask         -> tpl_call_terminate_task_service;
  CallTerminateISR2         -> tpl_call_terminate_isr2_service;
};

/* com services */
COM {
  StartCOM                  -> tpl_start_com_service;
  StopCOM                   -> tpl_stop_com_service;
  GetCOMApplicationMode     -> tpl_get_com_application_mode_service;
  InitMessage               -> tpl_init_message_service;
  StartPeriodic             -> tpl_start_periodic_service;
  StopPeriodic              -> tpl_stop_periodic_service;
  SendMessage               -> tpl_send_message_service;
  ReceiveMessage            -> tpl_receive_message_service;
  SendDynamicMessage        -> tpl_send_dynamic_message_service;
  ReceiveDynamicMessage     -> tpl_receive_dynamic_message_service;
  SendZeroMessage           -> tpl_send_zero_message_service;
  GetMessageStatus          -> tpl_get_message_status_service;
};

/* ISR2 services, available in AUTOSAR */
ISR (tpl_as_isr_kernel) {
  GetISRID                -> tpl_get_isr_id_service;
};

/* counter services, available in AUTOSAR */
COUNTER (tpl_as_counter_kernel) {
  IncrementCounter        -> tpl_increment_counter_service;
  GetCounterValue         -> tpl_get_counter_value_service;
  GetElapsedCounterValue  -> tpl_get_elapsed_counter_value_service;
};

/* schedule tables services, available in AUTOSAR */
SCHEDULETABLE (tpl_as_st_kernel) {
  StartScheduleTableRel   -> tpl_start_schedule_table_rel_service;
  StartScheduleTableAbs   -> tpl_start_schedule_table_abs_service;
  StopScheduleTable       -> tpl_stop_schedule_table_service;
  NextScheduleTable       -> tpl_next_schedule_table_service;
  GetScheduleTableStatus  -> tpl_get_schedule_table_status_service;
};

/* schedule tables global time services, available in AUTOSAR SC2 and SC4 */
GLOBALTIME {
  StartScheduleTableSynchron  -> tpl_start_schedule_table_synchron_service;
  SyncScheduleTable           -> tpl_sync_schedule_table_service;
  SetScheduleTableAsync       -> tpl_set_schedule_table_async_service;
};

/* OS applications services, available in AUTOSAR SC3 and SC4 */
OSAPPLICATION (tpl_as_app_kernel) {
  GetApplicationID      -> tpl_get_application_id_service;
  TerminateApplication  -> tpl_terminate_application_service;
};

/* Memory protection services, available in AUTOSAR SC3 and SC4 */
/*MEMORYPROTECTION {
  CheckISRMemoryAccess  -> tpl_check_isr_memory_access_service;
  CheckTaskMemoryAccess -> tpl_check_task_memory_access_service;
};
*/

/* Service protection services, available in AUTOSAR SC3 and SC4 */
SERVICEPROTECTION {
  CheckObjectAccess     -> tpl_check_object_access_service;
  CheckObjectOwnership  -> tpl_check_object_ownership_service;
};

/* Trusted functions services, available in AUTOSAR SC3 and SC4 */
/*TRUSTEDFUNCTION (tpl_as_trusted_fct_kernel) {
  CallTrustedFunction   -> tpl_call_trusted_function_service;
};*/
