##
# @file resources_verif.ggs
#
# @section File description
#
# routines defined in resources_verif semantics component
# verify resources are Ok and resolve linked resources.
#
# @section Copyright
#
# Goil OIL compiler - Trampoline OS
#
# Trampoline is copyright (c) IRCCyN 2005+
# Trampoline is protected by the french intellectual property law.
#
# This software is distributed under the GNU Public Licence V2
#
# @section File informations
#
# $Date$
# $Rev$
# $Author$
# $URL$
#

semantics resources_verif:

import semantics goil_types_resource in "goil_types_resource.gSemantics";

import "goil_types_resource.gSemantics";

##
# @fn resources_well_formed
#
# resources_well_formed checks each resource has the required
# attribute.
# Required attribute is :
# - RESOURCEPROPERTY
#
# @param resources    the map of resources.
#
routine resources_well_formed
  ??@resource_map resources
:
  foreach resources (@lstring resource_name @resource_obj resource) do

    cast [resource property]:
      when == @resource_property_void_obj do
        error resource_name: "RESOURCEPROPERTY attribute undefined for RESOURCE ".[resource_name string];
      else
    end cast;

  end foreach;
end routine;

##
# @fn resolve_linked_resources
#
# resolve_linked_resources resolves the linked resource chain.
# Each linked resource chain must finish with a STANDARD resource
# 
# @bug the "Cycle detected" error is printed many times (expected: one)
#
# @param resources    the map of resources.
#
routine resolve_linked_resources 
  ?!@resource_map resources
:
  @resource_map resolved [emptyMap];
  @resource_map unresolved := resources;
  @resource_map unresolved_next [emptyMap];
  @bool first_loop := true;

  loop [unresolved count] - [unresolved_next count] + 1 :
    if (first_loop) then first_loop := false;
    else 
      unresolved := unresolved_next;
      unresolved_next := [@resource_map emptyMap];
    end if;
  while ([unresolved count] > 0) do 
    foreach unresolved (@lstring res_key @resource_obj res) do

      @resource_property_obj res_prop;
      res_prop := [res property];

      cast res_prop :

        #current resource is a linked resource : we try to resolve it
        when == @resource_property_linked_obj rplo do

          #target is in resolved : we (try to) resolve
          if ([resolved hasKey ![[rplo linked_resource] string]]) then
            @resource_obj target_resource;
            @resource_property_obj target_property;
            [resolved get ![rplo linked_resource] ?target_resource];
            target_property := [target_resource property];
            cast target_property :

                #linked to a standard resource : ok
              when == @resource_property_standard_obj do
                [!?resolved put !res_key !res];

              #linked to an internal resource : error
              when == @resource_property_internal_obj do 
                error [target_property location]: "RESOURCE ".[res_key string]." is linked to INTERNAL RESOURCE ".[[rplo linked_resource] string];

              #linked to a resolved linked resource : we resolve current resource, with a direct link to the standard resource
              when == @resource_property_linked_obj nrplo do
                @resource_property_linked_obj resolved_prop :=
                    [@resource_property_linked_obj new ![nrplo location] ![nrplo linked_resource]];
                @lstring resolved_desc := [res desc];
                @resource_obj resolved_res := [@resource_obj new !resolved_desc !resolved_prop ![res acc_apps]];
                [!?resolved put !res_key !resolved_res];
              else
            end cast;

          #target not in resolved : we put current resource in unresolved
          else
            [!?unresolved_next put !res_key !res];
          end if;

        #standard or internal resource : resolved
        else [!?resolved put !res_key !res];
      end cast;
    end foreach;
    if ([unresolved count] == [unresolved_next count])
    then
      error here : "Cycle detected in linked resource";
      foreach unresolved_next (@lstring unresolved_key *) do
        error unresolved_key : "Involved in cycle";
      end foreach;
    end if;
  end loop;

  resources := resolved;
end routine;


end semantics;
# End of file resources_verif.ggs
