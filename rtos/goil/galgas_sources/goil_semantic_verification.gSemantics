semantics goil_semantic_verification:

import semantics resources_verif     in "resources_verif.gSemantics";
import semantics scheduletable_verif in "scheduletable_verif.gSemantics";
import semantics tasks_verif         in "tasks_verif.gSemantics";
import semantics isrs_verif          in "isrs_verif.gSemantics";
import semantics goil_message_verif  in "goil_message_verif.gSemantics";
import semantics goil_alarm_verif    in "goil_alarm_verif.gSemantics";
import semantics goil_app_verif      in "goil_app_verif.gSemantics";
import semantics goil_types_root     in "goil_types_root.gSemantics";
import semantics goil_semantic_types in "goil_semantic_types.gSemantics";
import option goil_options           in "goil_options.gOption";

import "resources_verif.gSemantics";
import "scheduletable_verif.gSemantics";
import "tasks_verif.gSemantics";
import "isrs_verif.gSemantics";
import "goil_message_verif.gSemantics";
import "goil_alarm_verif.gSemantics";
import "goil_app_verif.gSemantics";
import "goil_types_root.gSemantics";
import "goil_semantic_types.gSemantics";
import "goil_options.gOption";

#
# Per object static verification
#

##
# @fn counters_well_formed
#
# counters_well_formed checks each counter has all the required
# attributes.
# Required attributes are:
# - MAXALLOWEDVALUE
# - TICKSPERBASE
# - MINCYCLE
#
# @param counters    the map of counters.
#
routine counters_well_formed
  ??@counter_map counters
:
  foreach counters (@lstring counter_name @counter_obj counter) do

    cast [counter max_allowed_value]:
      when == @void do 
        error [counter_name location]: "MAXALLOWEDVALUE attribute not defined for COUNTER ".[counter_name string];
      else
    end cast;

    cast [counter ticks_per_base]:
      when == @void do 
        error [counter_name location]: "TICKSPERBASE attribute not defined for COUNTER ".[counter_name string];
      else
    end cast;

    cast [counter min_cycle]:
      when == @void do 
        error [counter_name location]: "MINCYCLE attribute not defined for COUNTER ".[counter_name string];
      else
    end cast;

  end foreach;
end routine;

##
# @fn alarms_well_formed
#
# alarms_well_formed checks each alarm has all the required
# attributes.
# Required attributes are:
# - COUNTER
# - ACTION
# - AUTOSTART
#
# @param alarms    the map of alarms.
#
routine alarms_well_formed
  ??@alarm_map alarms
:
  foreach alarms (@lstring alarm_name @alarm_obj alarm) do

    if [[alarm counter_name] string] == "" then
        error alarm_name: "COUNTER attribute undefined for ALARM ".[alarm_name string];
    end if;

    cast [alarm action_params]:
      when == @void_action do
        error alarm_name: "ACTION attribute undefined for ALARM ".[alarm_name string];
      else
    end cast;

    cast [alarm autostart_params]:
    when == @autostart_void do
        error alarm_name: "AUTOSTART attribute undefined for ALARM ".[alarm_name string];
    else end cast;

  end foreach;
end routine;

##
# @fn events_well_formed
#
# events_well_formed checks each event has the required
# attribute.
# Required attribute is:
# - MASK
#
# @param events    the map of events.
#
routine events_well_formed
  ??@event_map events
:
  foreach events (@lstring event_name @event_obj event) do

    cast [event mask]:
      when == @event_mask_void_obj mask do
          error event_name: "MASK attribute undefined for EVENT ".[event_name string];
          error [mask location]: "was previously defined here";
      else
    end cast;

  end foreach;
end routine;

routine all_events_and_resources_and_messages_defined_and_used 
    ??@root_obj cpu
:
  @task_map tasks := [cpu tasks];
  @isr_map isrs := [cpu isrs];
  @event_map events := [cpu events];
  @resource_map resources := [cpu resources];
  @message_map messages := [cpu messages];
  @stringset used_events [emptySet];
  @stringset used_resources [emptySet];
  @stringset used_messages [emptySet];

  #Events and resources and messages referenced in a task are defined
  foreach tasks (@lstring task_name @task_obj task) do

    #all referenced events must be defined
    @lstringlist task_events;
    task_events:= [task events];
    foreach task_events (@lstring event_name) do
      used_events += ![event_name string];
      if (not [events hasKey ![event_name string]])
      then error event_name: "EVENT ".[event_name string]." is not defined";
      end if;
    end foreach;

    #all referenced resources must be defined
    @lstringlist task_resources;
    task_resources:= [task resources];
    foreach task_resources (@lstring res_name) do
      used_resources += ![res_name string];
      if (not [resources hasKey ![res_name string]])
      then error res_name: "RESOURCE ".[res_name string]." is not defined";
      end if;
    end foreach;

    #all referenced messages must be defined
    @lstringlist task_messages;
    task_messages:= [task messages];
    foreach task_messages (@lstring mess_name) do
      used_messages += ![mess_name string];
      if (not [messages hasKey ![mess_name string]]) then
        error mess_name: "MESSAGE ".[mess_name string]." is not defined";
      end if;
    end foreach;
  end foreach;

  # Resources and messages referenced in an ISR are defined
  foreach isrs (@lstring isr_name @isr_obj isr) do

    #all referenced resources must be defined
    @lstringlist isr_resources:= [isr resources];
    foreach isr_resources (@lstring res_name) do
      used_resources += ![res_name string];
      if (not [resources hasKey ![res_name string]]) then
        error isr_name: "RESOURCE ".res_name." is not defined";
      end if;
    end foreach;

    #all referenced messages must be defined
    @lstringlist isr_messages;
    isr_messages:= [isr messages];
    foreach isr_messages (@lstring mess_name) do
      used_messages += ![mess_name string];
      if (not [messages hasKey ![mess_name string]]) then
        error isr_name: "MESSAGE ".mess_name." is not defined";
      end if;
    end foreach;

  end foreach;

  #all defined events should be referenced in a task
  foreach events (@lstring event_key *) do
    if (not [used_events hasKey ![event_key string]]) then
      warning event_key: "EVENT ".[event_key string]." is defined but never used";
    end if;
  end foreach;

  #all defined resources should be referenced in a task or an ISR
  foreach resources (@lstring res_key *) do
    if (not [used_resources hasKey ![res_key string]]) then
      warning res_key: "RESOURCE ".[res_key string]." is defined but never used";
    end if;
  end foreach;

  #all defined messages should be referenced in a task or an ISR
  foreach messages (@lstring mess_key *) do
    if (not [used_messages hasKey ![mess_key string]]) then
      warning mess_key: "MESSAGE ".[mess_key string]." is defined but never used";
    end if;
  end foreach;
    
end routine;

routine all_event_masks_different
    ?@event_map events 
:
  @stringset defined_masks [emptySet];
  foreach events (@lstring event_name @event_obj event) do
    @event_mask_obj mask;
    mask:= [event mask];
    cast mask:
      when == @event_mask_user_obj m do 
        @string mask_in_string:= [[[m mask] uint64] string];
        if [defined_masks hasKey !mask_in_string] then
          warning event_name: "Mask ".mask_in_string." already used";
        else
          defined_masks += !mask_in_string;
        end if;
      else
    end cast;
  end foreach;
end routine;

routine all_alarm_actions_correct
  ?@alarm_map   alarms
  ?@task_map    tasks
  ?@counter_map counters
:    
  @stringset defined_task_names;

  defined_task_names:= [tasks allKeys];
  foreach alarms (@lstring alarm_name @alarm_obj alarm_data) do
    @action_obj alarm_action;
    alarm_action:= [alarm_data action_params];
    cast alarm_action:
      when == @setevent_action act do
        if not [defined_task_names hasKey ![[act task_name] string]] then
          error [act task_name]: "TASK ".[[act task_name] string]." is never defined";
        else 
          @task_obj task_data;
          @lstringlist known_events;
          [tasks get ![act task_name] ?task_data];
          known_events:= [task_data events];
          if ([known_events length] == 0) then
             error [act event_name]: "An alarm can't set an Event to a basic task (Task ".[[act task_name] string]." is a basic task).";         
          end if;
          #@bool known;
          #is_in_lstringlist !known_events ![act event_name] ?* ?known;
          #if not known then
          #  error [act event_name]: "EVENT ".[[act event_name] string]." is not defined for TASK ".[[act task_name] string];
          #end if;
        end if;
      when == @activatetask_action act do
        if not [defined_task_names hasKey ![[act task_name] string]] then
          error [act task_name]: "TASK ".[[act task_name] string]." is not defined";
        end if;
      when == @incrementcounter_action act do
        if [counters hasKey ![[act counter_name] string]] then
          @counter_obj cnt;
          [counters getCounter ![act counter_name] ?cnt];
          cast [cnt type]:
            when == @software_counter do
            else
              error [act counter_name]: "OS285 - It is impossible to increment a hardware counter (".[[act counter_name] string]." is not a software counter).";
          end cast;
        else
          error [act counter_name]: "COUNTER ".[[act counter_name] string]." is never defined";
        end if;
      else            
    end cast;
  end foreach;
end routine;

##
# @fn verify_all
#
# routine verify_all does the verification of all the system.
# 
# @param cpu the root object got from the parsing
# 
routine verify_all
  ?!@root_obj cpu
:
  tasks_well_formed ![cpu tasks];
  counters_well_formed ![cpu counters];
  alarms_well_formed ![cpu alarms];
  resources_well_formed ![cpu resources];
  isrs_well_formed ![cpu isrs];
  events_well_formed ![cpu events];
  networkmessages_well_formed ![cpu net_messages];

  # Autosar checking

 # if [option goil_options.autosar_on value] then
 #   schedule_tables_well_formed ![cpu scheduletables];
 # end if;

  # cross-objects static verification
  @resource_map resources:= [cpu resources];
  resolve_linked_resources !?resources;
  [!?cpu setResources !resources];

  all_events_and_resources_and_messages_defined_and_used !cpu;
  #  all_event_masks_different !events;
  all_alarm_actions_correct ![cpu alarms] ![cpu tasks] ![cpu counters];
  counters_of_alarms_defined ![cpu alarms] ![cpu counters];
  networkmessages_exist_and_ok ![cpu messages] ![cpu net_messages];

  # cross-objects Autosar checking
  if [option goil_options.autosar_on value] then
    schedule_tables_well_formed ![cpu scheduletables] !cpu;
    schedule_tables_counters_exist_and_compatible ![cpu scheduletables] ![cpu counters];
    schedule_tables_tasks_and_events_exist !cpu ![cpu tasks];
    apps_well_formed !cpu;
  end if;

end routine;

end semantics;
# vim:ft=ggs:ts=4:sw=4
