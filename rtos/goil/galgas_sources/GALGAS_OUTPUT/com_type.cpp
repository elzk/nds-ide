//---------------------------------------------------------------------------*
//                                                                           *
//                           File 'com_type.cpp'                             *
//                        Generated by version 2.0.0                         *
//                       july 7th, 2010, at 17h16'16"                        *
//                                                                           *
//---------------------------------------------------------------------------*

//--- START OF USER ZONE 1


//--- END OF USER ZONE 1

//---------------------------------------------------------------------------*

#include "version_libpm.h"
#if CURRENT_LIBPM_VERSION != 820
  #error "This file has been compiled with a version of GALGAS that uses libpm version 820, different than the current version (CURRENT_LIBPM_VERSION) of libpm"
#endif

//---------------------------------------------------------------------------*

#include <typeinfo>
#include "utilities/MF_MemoryControl.h"
#include "files/C_TextFileWrite.h"
#include "galgas/C_galgas_CLI_Options.h"
#include "com_type.h"

//---------------------------------------------------------------------------*

#ifndef DO_NOT_GENERATE_CHECKINGS
  #define SOURCE_FILE_AT_LINE(line) "com_type.gSemantics", line
  #define COMMA_SOURCE_FILE_AT_LINE(line) , SOURCE_FILE_AT_LINE(line)
#else
  #define SOURCE_FILE_AT_LINE(line) 
  #define COMMA_SOURCE_FILE_AT_LINE(line) 
#endif


//--- START OF USER ZONE 2


//--- END OF USER ZONE 2

//---------------------------------------------------------------------------*
//                                                                           *
//                             class 'cPtr_com'                              *
//                                                                           *
//---------------------------------------------------------------------------*

cPtr_com::
cPtr_com (const GGS_lstring & argument_0,
                                const GGS_bool& argument_1,
                                const GGS_basic_type & argument_2,
                                const GGS_basic_type & argument_3,
                                const GGS_basic_type & argument_4,
                                const GGS_basic_type & argument_5,
                                const GGS_basic_type & argument_6,
                                const GGS_lstringlist & argument_7,
                                const GGS_lstring & argument_8,
                                const GGS_lstringlist & argument_9
                                COMMA_LOCATION_ARGS)
:cPtr_oil_obj (argument_0 COMMA_THERE),
usecom (argument_1),
timebase (argument_2),
errorhook (argument_3),
usegetserviceid (argument_4),
useparameteraccess (argument_5),
startcomextension (argument_6),
appmodes (argument_7),
status (argument_8),
uses (argument_9) {
}

//---------------------------------------------------------------------------*

#ifndef DO_NOT_GENERATE_CHECKINGS
  cPtr_com * GGS_com::
  operator () (LOCATION_ARGS) const {
    macroValidObjectThere (mPointer, cPtr_com) ;
    return (cPtr_com *) mPointer ;
  }
#endif

//---------------------------------------------------------------------------*

bool cPtr_com::
isEqualToObject (const cPtr__AC_galgas_class * inOperand) const {
  bool equal = typeid (this) == typeid (inOperand) ;
  if (equal) {
    const cPtr_com * ptr = dynamic_cast <const cPtr_com *> (inOperand) ;
    macroValidPointer (ptr) ;
    equal = desc.operator_isEqual (ptr->desc).boolValue ()
         && usecom.operator_isEqual (ptr->usecom).boolValue ()
         && timebase.operator_isEqual (ptr->timebase).boolValue ()
         && errorhook.operator_isEqual (ptr->errorhook).boolValue ()
         && usegetserviceid.operator_isEqual (ptr->usegetserviceid).boolValue ()
         && useparameteraccess.operator_isEqual (ptr->useparameteraccess).boolValue ()
         && startcomextension.operator_isEqual (ptr->startcomextension).boolValue ()
         && appmodes.operator_isEqual (ptr->appmodes).boolValue ()
         && status.operator_isEqual (ptr->status).boolValue ()
         && uses.operator_isEqual (ptr->uses).boolValue () ;
  }
  return equal ;
}

//---------------------------------------------------------------------------*

void cPtr_com::
appendForDescription (C_String & ioString,
                      const PMSInt32 inIndentation) const {
  ioString << "->@com:"
           << desc.reader_description (inIndentation + 1)
           << usecom.reader_description (inIndentation + 1)
           << timebase.reader_description (inIndentation + 1)
           << errorhook.reader_description (inIndentation + 1)
           << usegetserviceid.reader_description (inIndentation + 1)
           << useparameteraccess.reader_description (inIndentation + 1)
           << startcomextension.reader_description (inIndentation + 1)
           << appmodes.reader_description (inIndentation + 1)
           << status.reader_description (inIndentation + 1)
           << uses.reader_description (inIndentation + 1) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                              Class message                                *
//                                                                           *
//---------------------------------------------------------------------------*

const char * cPtr_com::
instanceMessage (void) const {
  return "" ;
}

//---------------------------------------------------------------------------*

const char * cPtr_com::
_static_message (void) {
  return "" ;
}

//---------------------------------------------------------------------------*

C_galgas_class_inspector _gInspectorFor_com (& typeid (cPtr_com), & typeid (cPtr_oil_obj), "") ;

//---------------------------------------------------------------------------*

AC_galgasClassRunTimeInformationEX * cPtr_com::galgasRTTI (void) const {
  return & gClassInfoFor__com ;
}

//---------------------------------------------------------------------------*

cPtr__AC_galgas_class * cPtr_com::makeClone (void) const {
  cPtr__AC_galgas_class * result = NULL ;
  macroMyNew (result, cPtr_com (desc, usecom, timebase, errorhook, usegetserviceid, useparameteraccess, startcomextension, appmodes, status, uses COMMA_HERE)) ;
  return result ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                          GALGAS class 'GGS_com'                           *
//                                                                           *
//---------------------------------------------------------------------------*

const C_galgas_type_descriptorEX kTypeDescriptor_GGS_com ("com", true, & kTypeDescriptor_GGS_oil_obj) ;

//---------------------------------------------------------------------------*

GGS_com::
GGS_com (const cPtr__AC_galgas_class * inPointer) {
  macroAssignObject (mPointer, (cPtr__AC_galgas_class *) inPointer) ;
}

//---------------------------------------------------------------------------*

GGS_com::
GGS_com (cPtr__AC_galgas_class & inObject) {
  macroAssignObject (mPointer, & inObject) ;
}

//---------------------------------------------------------------------------*

//--- castFrom class method (implements cast expression)
GGS_com GGS_com::
castFrom (C_Compiler & inLexique,
           cPtr__AC_galgas_class * inPointer,
           const bool inUseKindOfClass,
           const GGS_location & inErrorLocation
           COMMA_LOCATION_ARGS) {
  GGS_com result ;
  if (inPointer != NULL) {
    macroValidPointer (inPointer) ;
    const bool ok = inUseKindOfClass
      ? (dynamic_cast <cPtr_com *> (inPointer) != NULL)
      : (typeid (cPtr_com) == typeid (*inPointer)) ;
    if (ok) {
      result = GGS_com (inPointer) ;
    }else{
      inErrorLocation.signalCastError (inLexique,
                                       & typeid (cPtr_com),
                                       inUseKindOfClass,
                                       inPointer->instanceMessage ()
                                       COMMA_THERE) ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_com GGS_com::
constructor_new (C_Compiler & /* inLexique */,
                 const GGS_lstring & argument_0,
                 const GGS_bool& argument_1,
                 const GGS_basic_type & argument_2,
                 const GGS_basic_type & argument_3,
                 const GGS_basic_type & argument_4,
                 const GGS_basic_type & argument_5,
                 const GGS_basic_type & argument_6,
                 const GGS_lstringlist & argument_7,
                 const GGS_lstring & argument_8,
                 const GGS_lstringlist & argument_9
                                COMMA_LOCATION_ARGS) {
  GGS_com result ;
  macroMyNew (result.mPointer, cPtr_com (argument_0,
                                argument_1,
                                argument_2,
                                argument_3,
                                argument_4,
                                argument_5,
                                argument_6,
                                argument_7,
                                argument_8,
                                argument_9 COMMA_THERE)) ;
  macroRetainObject (result.mPointer) ;
  return result ;
}

//---------------------------------------------------------------------------*

GGS_bool GGS_com::
reader_usecom (C_Compiler & /* inLexique */ COMMA_UNUSED_LOCATION_ARGS) const {
  GGS_bool  result ;
  if (mPointer != NULL) {
    macroValidPointer (mPointer) ;
    MF_Assert (dynamic_cast <cPtr_com *> (mPointer) != NULL,
               "dynamic cast error", 0, 0) ;
    result = ((cPtr_com *) mPointer)->usecom ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_basic_type  GGS_com::
reader_timebase (C_Compiler & /* inLexique */ COMMA_UNUSED_LOCATION_ARGS) const {
  GGS_basic_type   result ;
  if (mPointer != NULL) {
    macroValidPointer (mPointer) ;
    MF_Assert (dynamic_cast <cPtr_com *> (mPointer) != NULL,
               "dynamic cast error", 0, 0) ;
    result = ((cPtr_com *) mPointer)->timebase ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_basic_type  GGS_com::
reader_errorhook (C_Compiler & /* inLexique */ COMMA_UNUSED_LOCATION_ARGS) const {
  GGS_basic_type   result ;
  if (mPointer != NULL) {
    macroValidPointer (mPointer) ;
    MF_Assert (dynamic_cast <cPtr_com *> (mPointer) != NULL,
               "dynamic cast error", 0, 0) ;
    result = ((cPtr_com *) mPointer)->errorhook ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_basic_type  GGS_com::
reader_usegetserviceid (C_Compiler & /* inLexique */ COMMA_UNUSED_LOCATION_ARGS) const {
  GGS_basic_type   result ;
  if (mPointer != NULL) {
    macroValidPointer (mPointer) ;
    MF_Assert (dynamic_cast <cPtr_com *> (mPointer) != NULL,
               "dynamic cast error", 0, 0) ;
    result = ((cPtr_com *) mPointer)->usegetserviceid ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_basic_type  GGS_com::
reader_useparameteraccess (C_Compiler & /* inLexique */ COMMA_UNUSED_LOCATION_ARGS) const {
  GGS_basic_type   result ;
  if (mPointer != NULL) {
    macroValidPointer (mPointer) ;
    MF_Assert (dynamic_cast <cPtr_com *> (mPointer) != NULL,
               "dynamic cast error", 0, 0) ;
    result = ((cPtr_com *) mPointer)->useparameteraccess ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_basic_type  GGS_com::
reader_startcomextension (C_Compiler & /* inLexique */ COMMA_UNUSED_LOCATION_ARGS) const {
  GGS_basic_type   result ;
  if (mPointer != NULL) {
    macroValidPointer (mPointer) ;
    MF_Assert (dynamic_cast <cPtr_com *> (mPointer) != NULL,
               "dynamic cast error", 0, 0) ;
    result = ((cPtr_com *) mPointer)->startcomextension ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_lstringlist  GGS_com::
reader_appmodes (C_Compiler & /* inLexique */ COMMA_UNUSED_LOCATION_ARGS) const {
  GGS_lstringlist   result ;
  if (mPointer != NULL) {
    macroValidPointer (mPointer) ;
    MF_Assert (dynamic_cast <cPtr_com *> (mPointer) != NULL,
               "dynamic cast error", 0, 0) ;
    result = ((cPtr_com *) mPointer)->appmodes ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_lstring  GGS_com::
reader_status (C_Compiler & /* inLexique */ COMMA_UNUSED_LOCATION_ARGS) const {
  GGS_lstring   result ;
  if (mPointer != NULL) {
    macroValidPointer (mPointer) ;
    MF_Assert (dynamic_cast <cPtr_com *> (mPointer) != NULL,
               "dynamic cast error", 0, 0) ;
    result = ((cPtr_com *) mPointer)->status ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_lstringlist  GGS_com::
reader_uses (C_Compiler & /* inLexique */ COMMA_UNUSED_LOCATION_ARGS) const {
  GGS_lstringlist   result ;
  if (mPointer != NULL) {
    macroValidPointer (mPointer) ;
    MF_Assert (dynamic_cast <cPtr_com *> (mPointer) != NULL,
               "dynamic cast error", 0, 0) ;
    result = ((cPtr_com *) mPointer)->uses ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

const char * GGS_com::actualTypeName (void) const {
  return "com" ;
}

//---------------------------------------------------------------------------*

C_galgasClassRunTimeInformationEX gClassInfoFor__com ("com", gClassInfoFor__oil_obj, & kTypeDescriptor_GGS_com) ;

//---------------------------------------------------------------------------*

GGS_object GGS_com::reader_object (void) const {
  GGS_object result ;
  if (isBuilt ()) {
    GGS_com * p = NULL ;
    macroMyNew (p, GGS_com (*this)) ;
    result = GGS_object (p) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_com GGS_com::castFromObject (C_Compiler & inLexique,
                                   const GGS_object & inObject,
                                   const GGS_location & inErrorLocation
                                   COMMA_LOCATION_ARGS) {
  GGS_com result ;
  const GGS__root * embeddedObject = inObject.embeddedObject () ;
  if (NULL != embeddedObject) {
    const GGS_com * p = dynamic_cast <const GGS_com *> (embeddedObject) ;
    if (NULL != p) {
      result = * p ;
    }else{
      castFromObjectErrorSignaling (inLexique, inErrorLocation, & kTypeDescriptor_GGS_com, embeddedObject COMMA_THERE) ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*

const C_galgas_type_descriptorEX * GGS_com::typeDescriptor (void) const {
  return & kTypeDescriptor_GGS_com ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                Implementation of function "void_com_obj"                  *
//                                                                           *
//---------------------------------------------------------------------------*

GGS_com  function_void_com_obj (C_Compiler & inLexique COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER function_void_com_obj at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  GGS_com  var_cas_com ;
  GGS_void  var_cas_void_obj = GGS_void ::constructor_new (inLexique, GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (85)) ;
  GGS_lstring  var_cas_emptyString = GGS_lstring ::constructor_new (inLexique, GGS_string (""), GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (86)) ;
  var_cas_com = GGS_com ::constructor_new (inLexique, var_cas_emptyString, GGS_bool (false), var_cas_void_obj, var_cas_void_obj, var_cas_void_obj, var_cas_void_obj, var_cas_void_obj, GGS_lstringlist ::constructor_emptyList (), var_cas_emptyString, GGS_lstringlist ::constructor_emptyList () COMMA_SOURCE_FILE_AT_LINE (87)) ;
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE function_void_com_obj\n") ;
  #endif
  return var_cas_com ;
}

//---------------------------------------------------------------------------*

static GGS_object functionForGenericCall_void_com_obj (C_Compiler & inLexique,
                           const GGS_objectlist & /* inEffectiveParameterArray */,
                           const GGS_location & /* inErrorLocation */
                           COMMA_LOCATION_ARGS) {
  const GGS_com  result = function_void_com_obj (inLexique
                            COMMA_THERE) ;
  return result.reader_object () ;
}

//---------------------------------------------------------------------------*

const C_galgas_function_descriptorEX kFunction_descriptor_void_com_obj ("void_com_obj",
                              functionForGenericCall_void_com_obj,
                              & kTypeDescriptor_GGS_com ,
                              0,
                              NULL) ;

//---------------------------------------------------------------------------*

