//---------------------------------------------------------------------------*
//                                                                           *
//                        File 'goil_obj_event.cpp'                          *
//                        Generated by version 2.0.0                         *
//                       july 7th, 2010, at 17h16'43"                        *
//                                                                           *
//---------------------------------------------------------------------------*

//--- START OF USER ZONE 1


//--- END OF USER ZONE 1

//---------------------------------------------------------------------------*

#include "version_libpm.h"
#if CURRENT_LIBPM_VERSION != 820
  #error "This file has been compiled with a version of GALGAS that uses libpm version 820, different than the current version (CURRENT_LIBPM_VERSION) of libpm"
#endif

//---------------------------------------------------------------------------*

#include <typeinfo>
#include "utilities/MF_MemoryControl.h"
#include "files/C_TextFileWrite.h"
#include "galgas/C_galgas_CLI_Options.h"
#include "goil_obj_event.h"

//---------------------------------------------------------------------------*

#ifndef DO_NOT_GENERATE_CHECKINGS
  #define SOURCE_FILE_AT_LINE(line) "goil_obj_event.gSyntax", line
  #define COMMA_SOURCE_FILE_AT_LINE(line) , SOURCE_FILE_AT_LINE(line)
#else
  #define SOURCE_FILE_AT_LINE(line) 
  #define COMMA_SOURCE_FILE_AT_LINE(line) 
#endif


//--- START OF USER ZONE 2


//--- END OF USER ZONE 2

//---------------------------------------------------------------------------*
//                                                                           *
//                Implementation of production rule 'event'                  *
//                                                                           *
//---------------------------------------------------------------------------*

void goil_obj_event::rule_goil_5F_obj_5F_event_event_i0_ (C_Lexique_goil_5F_lexique & inLexique,
                                GGS_event_map  &var_cas_events) {
  GGS_event_obj  var_cas_event ;
  GGS_lstring  var_cas_event_name ;
  GGS_event_mask_obj  var_cas_mask ;
  GGS_lstring  var_cas_desc ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_goil_5F_lexique::kToken_EVENT) COMMA_HERE) ;
  inLexique.assignFromAttribute_att_5F_token (var_cas_event_name) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_goil_5F_lexique::kToken_idf) COMMA_HERE) ;
  const GGS_bool cond_1264 = var_cas_events.reader_hasKey (var_cas_event_name.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (62))) ;
  if (cond_1264.isBuiltAndTrue ()) {
    var_cas_events.modifier_del (inLexique, var_cas_event_name, var_cas_event COMMA_SOURCE_FILE_AT_LINE (63)) ;
    var_cas_mask = var_cas_event.reader_mask (inLexique COMMA_SOURCE_FILE_AT_LINE (64)) ;
    var_cas_desc = var_cas_event.reader_desc (inLexique COMMA_SOURCE_FILE_AT_LINE (65)) ;
  }else if (cond_1264.isBuiltAndFalse ()) {
    var_cas_mask = GGS_event_mask_void_obj ::constructor_new (inLexique, GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (67)) ;
    var_cas_desc = GGS_lstring ::constructor_new (inLexique, GGS_string (""), GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (68)) ;
    var_cas_event = GGS_event_obj ::constructor_new (inLexique, var_cas_desc, var_cas_mask COMMA_SOURCE_FILE_AT_LINE (69)) ;
  }
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_goil_5F_lexique::kToken__7B_) COMMA_HERE) ;
  nt_event_5F_attributes_ (inLexique, var_cas_mask) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_goil_5F_lexique::kToken__7D_) COMMA_HERE) ;
  nt_description_ (inLexique, var_cas_desc) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_goil_5F_lexique::kToken__3B_) COMMA_HERE) ;
  var_cas_event = GGS_event_obj ::constructor_new (inLexique, var_cas_desc, var_cas_mask COMMA_SOURCE_FILE_AT_LINE (77)) ;
  var_cas_events.modifier_put (inLexique, var_cas_event_name, var_cas_event COMMA_SOURCE_FILE_AT_LINE (78)) ;
}

//---------------------------------------------------------------------------*

void goil_obj_event::rule_goil_5F_obj_5F_event_event_i0_parse (C_Lexique_goil_5F_lexique & inLexique) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_goil_5F_lexique::kToken_EVENT) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_goil_5F_lexique::kToken_idf) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_goil_5F_lexique::kToken__7B_) COMMA_HERE) ;
  nt_event_5F_attributes_parse (inLexique) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_goil_5F_lexique::kToken__7D_) COMMA_HERE) ;
  nt_description_parse (inLexique) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_goil_5F_lexique::kToken__3B_) COMMA_HERE) ;
  GGS_lstring::constructor_retrieveAndResetTemplateString (inLexique COMMA_HERE) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//           Implementation of production rule 'event_attributes'            *
//                                                                           *
//---------------------------------------------------------------------------*

void goil_obj_event::rule_goil_5F_obj_5F_event_event_5F_attributes_i1_ (C_Lexique_goil_5F_lexique & inLexique,
                                GGS_event_mask_obj  &var_cas_mask) {
  { bool syntaxRepeat_0 = true ;
    while (syntaxRepeat_0) {
      switch (select_goil_5F_obj_5F_event_0 (inLexique)) {
        case 2 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_goil_5F_lexique::kToken_MASK) COMMA_HERE) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_goil_5F_lexique::kToken__3D_) COMMA_HERE) ;
          switch (select_goil_5F_obj_5F_event_1 (inLexique)) {
            case 1 : {
              inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_goil_5F_lexique::kToken_AUTO) COMMA_HERE) ;
              { const GGS_event_mask_obj _var_2047 = var_cas_mask ; // CAST instruction
                if (_var_2047.getPtr () != NULL) {
                  macroValidPointer (_var_2047.getPtr ()) ;
                  if (typeid (cPtr_event_mask_void_obj) == typeid (* (_var_2047.getPtr ()))) {
                    var_cas_mask = GGS_event_mask_auto_obj ::constructor_new (inLexique, GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (91)) ;
                  }else{
                    GGS_location (inLexique).reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("MASK attribute already defined for this EVENT") COMMA_SOURCE_FILE_AT_LINE (94)) ;
                    var_cas_mask.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (94)).reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("was previously defined here") COMMA_SOURCE_FILE_AT_LINE (95)) ;
                  }
                }
              }
              } break ;
            case 2 : {
              GGS_luint64  var_cas_mask_value ;
              inLexique.assignFromAttribute_integerNumber (var_cas_mask_value) ;
              inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_goil_5F_lexique::kToken_uint_5F_number) COMMA_HERE) ;
              { const GGS_event_mask_obj _var_3164 = var_cas_mask ; // CAST instruction
                if (_var_3164.getPtr () != NULL) {
                  macroValidPointer (_var_3164.getPtr ()) ;
                  if (typeid (cPtr_event_mask_void_obj) == typeid (* (_var_3164.getPtr ()))) {
                    var_cas_mask = GGS_event_mask_user_obj ::constructor_new (inLexique, GGS_location (inLexique), var_cas_mask_value COMMA_SOURCE_FILE_AT_LINE (101)) ;
                    const GGS_bool cond_2444 = (var_cas_mask_value.reader_uint64 (inLexique COMMA_SOURCE_FILE_AT_LINE (102))).operator_strictSup (GGS_uint ::constructor_max (inLexique COMMA_SOURCE_FILE_AT_LINE (102)).reader_uint64 (inLexique COMMA_SOURCE_FILE_AT_LINE (102))) ;
                    if (cond_2444.isBuiltAndTrue ()) {
                      GGS_location (inLexique).reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("MASK attribute should be a 32 bits integer") COMMA_SOURCE_FILE_AT_LINE (104)) ;
                    }else if (cond_2444.isBuiltAndFalse ()) {
                      GGS_uint  var_cas_nbbits = GGS_uint (0U) ;
                      GGS_uint64  var_cas_pof2 = GGS_uint64 (1ULL) ;
                      GGS_uint _variant_2791 = GGS_uint (32U) ;
                      GGS_bool _condition_2791 (_variant_2791.isBuilt (), true) ;
                      while (_condition_2791.isBuiltAndTrue ()) {
                        _condition_2791 = (var_cas_pof2).operator_strictInf (GGS_uint ::constructor_max (inLexique COMMA_SOURCE_FILE_AT_LINE (108)).reader_uint64 (inLexique COMMA_SOURCE_FILE_AT_LINE (108))) ;
                        if (_condition_2791.isBuiltAndTrue ()) {
                          if (_variant_2791.uintValue () == 0) {
                            inLexique.onTheFlyRunTimeError ("loop variant error" COMMA_SOURCE_FILE_AT_LINE (113)) ;
                            _condition_2791 = GGS_bool (false) ;
                          }else{
                            _variant_2791.decrement_operation (inLexique COMMA_HERE) ;
                            const GGS_bool cond_2724 = ((var_cas_pof2).operator_and (var_cas_mask_value.reader_uint64 (inLexique COMMA_SOURCE_FILE_AT_LINE (109)))).operator_isNotEqual (GGS_uint64 (0ULL)) ;
                            if (cond_2724.isBuiltAndTrue ()) {
                              var_cas_nbbits.increment_operation (inLexique COMMA_SOURCE_FILE_AT_LINE (110)) ;
                            }
                            var_cas_pof2 = var_cas_pof2.left_shift_operation (inLexique, GGS_uint (1U) COMMA_SOURCE_FILE_AT_LINE (112)) ;
                          }
                        }
                      }
                      const GGS_bool cond_2932 = (var_cas_nbbits).operator_strictSup (GGS_uint (1U)) ;
                      if (cond_2932.isBuiltAndTrue ()) {
                        GGS_location (inLexique).reader_location (inLexique COMMA_HERE).signalGGSSemanticWarning (inLexique, GGS_string ("MASK attribute uses more than 1 bit") COMMA_SOURCE_FILE_AT_LINE (115)) ;
                      }
                    }
                  }else{
                    GGS_location (inLexique).reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("MASK attribute already defined for this EVENT") COMMA_SOURCE_FILE_AT_LINE (120)) ;
                    var_cas_mask.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (120)).reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("was previously defined here") COMMA_SOURCE_FILE_AT_LINE (121)) ;
                  }
                }
              }
              } break ;
            default :
              break ;
          }
          GGS_lstring  automatic_var_3219_0 ;
          nt_description_ (inLexique, automatic_var_3219_0) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_goil_5F_lexique::kToken__3B_) COMMA_HERE) ;
          } break ;
        default :
          syntaxRepeat_0 = false ;
          break ;
      }
    }
  }
}

//---------------------------------------------------------------------------*

void goil_obj_event::rule_goil_5F_obj_5F_event_event_5F_attributes_i1_parse (C_Lexique_goil_5F_lexique & inLexique) {
  { bool syntaxRepeat_0 = true ;
    while (syntaxRepeat_0) {
      switch (select_goil_5F_obj_5F_event_0 (inLexique)) {
        case 2 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_goil_5F_lexique::kToken_MASK) COMMA_HERE) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_goil_5F_lexique::kToken__3D_) COMMA_HERE) ;
          switch (select_goil_5F_obj_5F_event_1 (inLexique)) {
            case 1 : {
              inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_goil_5F_lexique::kToken_AUTO) COMMA_HERE) ;
              } break ;
            case 2 : {
              inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_goil_5F_lexique::kToken_uint_5F_number) COMMA_HERE) ;
              } break ;
            default :
              break ;
          }
          nt_description_parse (inLexique) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_goil_5F_lexique::kToken__3B_) COMMA_HERE) ;
          } break ;
        default :
          syntaxRepeat_0 = false ;
          break ;
      }
    }
  }
  GGS_lstring::constructor_retrieveAndResetTemplateString (inLexique COMMA_HERE) ;
}

//---------------------------------------------------------------------------*

