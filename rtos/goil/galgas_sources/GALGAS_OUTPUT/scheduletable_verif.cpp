//---------------------------------------------------------------------------*
//                                                                           *
//                      File 'scheduletable_verif.cpp'                       *
//                        Generated by version 2.0.0                         *
//                       july 7th, 2010, at 17h16'14"                        *
//                                                                           *
//---------------------------------------------------------------------------*

//--- START OF USER ZONE 1


//--- END OF USER ZONE 1

//---------------------------------------------------------------------------*

#include "version_libpm.h"
#if CURRENT_LIBPM_VERSION != 820
  #error "This file has been compiled with a version of GALGAS that uses libpm version 820, different than the current version (CURRENT_LIBPM_VERSION) of libpm"
#endif

//---------------------------------------------------------------------------*

#include <typeinfo>
#include "utilities/MF_MemoryControl.h"
#include "files/C_TextFileWrite.h"
#include "galgas/C_galgas_CLI_Options.h"
#include "scheduletable_verif.h"

//---------------------------------------------------------------------------*

#ifndef DO_NOT_GENERATE_CHECKINGS
  #define SOURCE_FILE_AT_LINE(line) "scheduletable_verif.gSemantics", line
  #define COMMA_SOURCE_FILE_AT_LINE(line) , SOURCE_FILE_AT_LINE(line)
#else
  #define SOURCE_FILE_AT_LINE(line) 
  #define COMMA_SOURCE_FILE_AT_LINE(line) 
#endif


//--- START OF USER ZONE 2


//--- END OF USER ZONE 2

//---------------------------------------------------------------------------*
//                                                                           *
//         Implementation of routine "schedule_tables_well_formed"           *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_schedule_tables_well_formed (C_Compiler & inLexique,
                                const GGS_scheduletable_map   var_cas_sts,
                                const GGS_root_obj   var_cas_cpu
                        COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_schedule_tables_well_formed at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  {
    GGS_scheduletable_map::cEnumerator enumerator_546 (var_cas_sts, true) ;
    const GGS_scheduletable_map::cElement * operand_546 = NULL ;
    while (((operand_546 = enumerator_546.nextObject ()))) {
      macroValidPointer (operand_546) ;
      GGS_bool var_cas_perio = function_getBool (inLexique, operand_546->mInfo.scheduletable.reader_periodic (inLexique COMMA_SOURCE_FILE_AT_LINE (19)), GGS_bool (false) COMMA_SOURCE_FILE_AT_LINE (19)) ;
      GGS_uint64  var_cas_len = function_uint64OrError (inLexique, operand_546->mInfo.scheduletable.reader_length (inLexique COMMA_SOURCE_FILE_AT_LINE (21)), GGS_string ("LENGTH") COMMA_SOURCE_FILE_AT_LINE (21)) ;
      { const GGS_ltgt_sync_obj _var_1343 = operand_546->mInfo.scheduletable.reader_ltgt_sync (inLexique COMMA_SOURCE_FILE_AT_LINE (24)) ; // CAST instruction
        if (_var_1343.getPtr () != NULL) {
          macroValidPointer (_var_1343.getPtr ()) ;
          if (typeid (cPtr_ltgt_sync_true) == typeid (* (_var_1343.getPtr ()))) {
            const GGS_ltgt_sync_true var_cas_sync (_var_1343.getPtr ()) ;
            const GGS_bool cond_1068 = (var_cas_perio).operator_isEqual (GGS_bool (false)) ;
            if (cond_1068.isBuiltAndTrue ()) {
              operand_546->mInfo.scheduletable.reader_periodic (inLexique COMMA_SOURCE_FILE_AT_LINE (27)).reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (27)).reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("A synchronized schedule table shall be repeating otherwise, synchronisation can't be done.") COMMA_SOURCE_FILE_AT_LINE (28)) ;
            }
            GGS_uint64  var_cas_prec = function_uint64OrError (inLexique, var_cas_sync.reader_precision (inLexique COMMA_SOURCE_FILE_AT_LINE (29)), GGS_string ("PRECISION") COMMA_SOURCE_FILE_AT_LINE (29)) ;
            const GGS_bool cond_1326 = (var_cas_prec).operator_strictSup (var_cas_len.add_operation (inLexique, GGS_uint64 (1ULL) COMMA_SOURCE_FILE_AT_LINE (30))) ;
            if (cond_1326.isBuiltAndTrue ()) {
              var_cas_sync.reader_precision (inLexique COMMA_SOURCE_FILE_AT_LINE (31)).reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (31)).reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("OS438 - An explicit schedule table shall have a precision in the range 0 to duration.") COMMA_SOURCE_FILE_AT_LINE (32)) ;
            }
          }else{
          }
        }
      }
      const GGS_bool cond_1520 = (var_cas_len).operator_isEqual (GGS_uint64 (0ULL)) ;
      if (cond_1520.isBuiltAndTrue ()) {
        operand_546->mInfo.scheduletable.reader_length (inLexique COMMA_SOURCE_FILE_AT_LINE (37)).reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (37)).reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("The LENGTH attribute should not be 0") COMMA_SOURCE_FILE_AT_LINE (38)) ;
      }
      GGS_expiry_point_list  var_cas_eps = operand_546->mInfo.scheduletable.reader_exp_points (inLexique COMMA_SOURCE_FILE_AT_LINE (40)) ;
      GGS_uint  var_cas_exp_pt_number = var_cas_eps.reader_length () ;
      const GGS_bool cond_1817 = (var_cas_exp_pt_number).operator_isEqual (GGS_uint (0U)) ;
      if (cond_1817.isBuiltAndTrue ()) {
        operand_546->mKey.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, (GGS_string ("OS401 - no EXPIRY_POINT found for SCHEDULETABLE ")).operator_concat (operand_546->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (45))) COMMA_SOURCE_FILE_AT_LINE (46)) ;
      }
      {
        GGS_expiry_point_list::cEnumerator enumerator_1894 (var_cas_eps, true) ;
        const GGS_expiry_point_list::cElement * operand_1894 = NULL ;
        while (((operand_1894 = enumerator_1894.nextObject ()))) {
          macroValidPointer (operand_1894) ;
          const GGS_bool cond_2046 = (operand_1894->point.reader_actions (inLexique COMMA_SOURCE_FILE_AT_LINE (50)).reader_length ()).operator_isEqual (GGS_uint (0U)) ;
          if (cond_2046.isBuiltAndTrue ()) {
            operand_1894->point.reader_name (inLexique COMMA_SOURCE_FILE_AT_LINE (51)).reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, (GGS_string ("OS407 - no ACTION found for EXPIRY_POINT ")).operator_concat (operand_1894->point.reader_name (inLexique COMMA_SOURCE_FILE_AT_LINE (51)).reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (51))) COMMA_SOURCE_FILE_AT_LINE (52)) ;
          }
        }
      }
      GGS_uint64  var_cas_previous_offset = GGS_uint64 (0ULL) ;
      GGS_uint64  var_cas_first_delay = GGS_uint64 (0ULL) ;
      GGS_uint64  var_cas_first_maxret = GGS_uint64 (0ULL) ;
      GGS_uint64  var_cas_first_maxadv = GGS_uint64 (0ULL) ;
      GGS_uint64  var_cas_last_delay = GGS_uint64 (0ULL) ;
      GGS_bool var_cas_first_time = GGS_bool (true) ;
      GGS_uint64  var_cas_previous_delay = GGS_uint64 (0ULL) ;
      GGS_uint64  var_cas_maxret = GGS_uint64 (0ULL) ;
      GGS_uint64  var_cas_maxadv = GGS_uint64 (0ULL) ;
      GGS_uint  var_cas_i = GGS_uint (0U) ;
      GGS_counter_map  var_cas_counters = var_cas_cpu.reader_counters (inLexique COMMA_SOURCE_FILE_AT_LINE (72)) ;
      const GGS_bool cond_10285 = var_cas_counters.reader_hasKey (operand_546->mInfo.scheduletable.reader_counter (inLexique COMMA_SOURCE_FILE_AT_LINE (73)).reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (73))) ;
      if (cond_10285.isBuiltAndTrue ()) {
        GGS_counter_obj  var_cas_cnt ;
        if (var_cas_counters.isBuilt ()) {
          var_cas_counters (HERE)->method_getCounter (inLexique, operand_546->mInfo.scheduletable.reader_counter (inLexique COMMA_SOURCE_FILE_AT_LINE (75)), var_cas_cnt COMMA_SOURCE_FILE_AT_LINE (75)) ;
        }
        GGS_uint64  var_cas_mav = function_uint32_or_error (inLexique, var_cas_cnt.reader_max_allowed_value (inLexique COMMA_SOURCE_FILE_AT_LINE (76)), GGS_string ("MAXALLOWEDVALUE") COMMA_SOURCE_FILE_AT_LINE (76)).reader_uint64 (inLexique COMMA_SOURCE_FILE_AT_LINE (76)) ;
        GGS_uint64  var_cas_mc = function_uint32_or_error (inLexique, var_cas_cnt.reader_min_cycle (inLexique COMMA_SOURCE_FILE_AT_LINE (77)), GGS_string ("MINCYCLE") COMMA_SOURCE_FILE_AT_LINE (77)).reader_uint64 (inLexique COMMA_SOURCE_FILE_AT_LINE (77)) ;
        GGS_bool var_cas_first_ep = GGS_bool (true) ;
        GGS_uint64  var_cas_previous_offset = GGS_uint64 (0ULL) ;
        {
          GGS_expiry_point_list::cEnumerator enumerator_3062 (var_cas_eps, true) ;
          const GGS_expiry_point_list::cElement * operand_3062 = NULL ;
          while (((operand_3062 = enumerator_3062.nextObject ()))) {
            macroValidPointer (operand_3062) ;
            var_cas_i = var_cas_i.add_operation (inLexique, GGS_uint (1U) COMMA_SOURCE_FILE_AT_LINE (83)) ;
            GGS_uint64  var_cas_offset = function_uint64OrError (inLexique, operand_3062->point.reader_offset (inLexique COMMA_SOURCE_FILE_AT_LINE (87)), GGS_string ("OS442 - OFFSET") COMMA_SOURCE_FILE_AT_LINE (87)) ;
            GGS_location  var_cas_off_loc = operand_3062->point.reader_offset (inLexique COMMA_SOURCE_FILE_AT_LINE (88)).reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (88)) ;
            const GGS_bool cond_3517 = (var_cas_offset).operator_strictSup (var_cas_len) ;
            if (cond_3517.isBuiltAndTrue ()) {
              var_cas_off_loc.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, (GGS_string ("OFFSET of expiry point is greater than the LENGTH of the Schedule Table ")).operator_concat (operand_546->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (90))) COMMA_SOURCE_FILE_AT_LINE (91)) ;
            }
            var_cas_previous_delay = var_cas_offset.substract_operation (inLexique, var_cas_previous_offset COMMA_SOURCE_FILE_AT_LINE (96)) ;
            const GGS_bool cond_3885 = (var_cas_previous_offset).operator_isEqual (GGS_uint64 (0ULL)) ;
            if (cond_3885.isBuiltAndTrue ()) {
              var_cas_first_delay = var_cas_offset ;
            }
            GGS_location  var_cas_adj_loc = operand_3062->point.reader_adjust (inLexique COMMA_SOURCE_FILE_AT_LINE (101)).reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (101)) ;
            { const GGS_adjustable_obj _var_5131 = operand_3062->point.reader_adjust (inLexique COMMA_SOURCE_FILE_AT_LINE (102)) ; // CAST instruction
              if (_var_5131.getPtr () != NULL) {
                macroValidPointer (_var_5131.getPtr ()) ;
                if (typeid (cPtr_adjustable_true) == typeid (* (_var_5131.getPtr ()))) {
                  const GGS_adjustable_true var_cas_adj (_var_5131.getPtr ()) ;
                  var_cas_maxret = function_uint64OrError (inLexique, var_cas_adj.reader_max_retard (inLexique COMMA_SOURCE_FILE_AT_LINE (104)), GGS_string ("MAX_RETARD") COMMA_SOURCE_FILE_AT_LINE (104)) ;
                  var_cas_maxadv = function_uint64OrError (inLexique, var_cas_adj.reader_max_advance (inLexique COMMA_SOURCE_FILE_AT_LINE (105)), GGS_string ("MAX_ADVANCE") COMMA_SOURCE_FILE_AT_LINE (105)) ;
                  const GGS_bool cond_4441 = (var_cas_previous_offset).operator_isEqual (GGS_uint64 (0ULL)) ;
                  if (cond_4441.isBuiltAndTrue ()) {
                    var_cas_first_maxret = var_cas_maxret ;
                    var_cas_first_maxadv = var_cas_maxadv ;
                  }else if (cond_4441.isBuiltAndFalse ()) {
                    const GGS_bool cond_4762 = (var_cas_maxret).operator_strictSup (var_cas_previous_delay.substract_operation (inLexique, var_cas_mc COMMA_SOURCE_FILE_AT_LINE (112))) ;
                    if (cond_4762.isBuiltAndTrue ()) {
                      var_cas_adj_loc.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((((((((GGS_string ("OS436 - In expiry point at offset = ")).operator_concat (var_cas_offset.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (113)))).operator_concat (GGS_string (", MaxRetard ("))).operator_concat (var_cas_maxret.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (113)))).operator_concat (GGS_string (") should be inferior to the previous delay ("))).operator_concat (var_cas_previous_delay.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (113)))).operator_concat (GGS_string (") minus MINCYCLE of the counter ("))).operator_concat (var_cas_mc.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (113)))).operator_concat (GGS_string (").")) COMMA_SOURCE_FILE_AT_LINE (114)) ;
                    }
                    const GGS_bool cond_5077 = (var_cas_maxadv).operator_strictSup (var_cas_len.substract_operation (inLexique, var_cas_previous_delay COMMA_SOURCE_FILE_AT_LINE (115))) ;
                    if (cond_5077.isBuiltAndTrue ()) {
                      var_cas_adj_loc.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((((((((GGS_string ("OS437 - In expiry point at offset = ")).operator_concat (var_cas_offset.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (116)))).operator_concat (GGS_string (", MaxAdvance ("))).operator_concat (var_cas_maxadv.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (116)))).operator_concat (GGS_string (") should be inferior to duration ("))).operator_concat (var_cas_len.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (116)))).operator_concat (GGS_string (") minus the previous delay("))).operator_concat (var_cas_previous_delay.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (116)))).operator_concat (GGS_string (").")) COMMA_SOURCE_FILE_AT_LINE (117)) ;
                    }
                  }
                }else{
                }
              }
            }
            const GGS_bool cond_5798 = (var_cas_offset.substract_operation (inLexique, var_cas_previous_offset COMMA_SOURCE_FILE_AT_LINE (124))).operator_strictInf (var_cas_mc) ;
            if (cond_5798.isBuiltAndTrue ()) {
              const GGS_bool cond_5612 = var_cas_first_ep ;
              if (cond_5612.isBuiltAndTrue ()) {
                const GGS_bool cond_5593 = (var_cas_offset).operator_isNotEqual (GGS_uint64 (0ULL)) ;
                if (cond_5593.isBuiltAndTrue ()) {
                  var_cas_off_loc.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("OS443 - OFFSET of first expiry point is lower than MINCYCLE of the driving counter and not equal to 0.") COMMA_SOURCE_FILE_AT_LINE (128)) ;
                }
              }else if (cond_5612.isBuiltAndFalse ()) {
                var_cas_off_loc.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((((GGS_string ("OS408 - Delay between expiry point number ")).operator_concat (var_cas_i.substract_operation (inLexique, GGS_uint (1U) COMMA_SOURCE_FILE_AT_LINE (130)).reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (130)))).operator_concat (GGS_string (" and "))).operator_concat (var_cas_i.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (130)))).operator_concat (GGS_string (" is lower than MINCYCLE of the driving counter")) COMMA_SOURCE_FILE_AT_LINE (131)) ;
              }
            }
            const GGS_bool cond_6207 = (var_cas_offset.substract_operation (inLexique, var_cas_previous_offset COMMA_SOURCE_FILE_AT_LINE (133))).operator_strictSup (var_cas_mav) ;
            if (cond_6207.isBuiltAndTrue ()) {
              const GGS_bool cond_6017 = var_cas_first_ep ;
              if (cond_6017.isBuiltAndTrue ()) {
                var_cas_off_loc.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("OS443 - OFFSET of first expiry point is greater than MAXALLOWEDVALUE of the driving counter") COMMA_SOURCE_FILE_AT_LINE (136)) ;
              }else if (cond_6017.isBuiltAndFalse ()) {
                var_cas_off_loc.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((((GGS_string ("OS408 - Delay between expiry point number ")).operator_concat (var_cas_i.substract_operation (inLexique, GGS_uint (1U) COMMA_SOURCE_FILE_AT_LINE (137)).reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (137)))).operator_concat (GGS_string (" and "))).operator_concat (var_cas_i.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (137)))).operator_concat (GGS_string (" is greater than MAXALLOWEDVALUE of the driving counter")) COMMA_SOURCE_FILE_AT_LINE (138)) ;
              }
            }
            var_cas_first_ep = GGS_bool (false) ;
            var_cas_previous_offset = var_cas_offset ;
            const GGS_bool cond_8027 = (var_cas_i).operator_isEqual (var_cas_exp_pt_number) ;
            if (cond_8027.isBuiltAndTrue ()) {
              { const GGS_adjustable_obj _var_7245 = operand_3062->point.reader_adjust (inLexique COMMA_SOURCE_FILE_AT_LINE (146)) ; // CAST instruction
                if (_var_7245.getPtr () != NULL) {
                  macroValidPointer (_var_7245.getPtr ()) ;
                  if (typeid (cPtr_adjustable_true) == typeid (* (_var_7245.getPtr ()))) {
                    var_cas_last_delay = var_cas_len.substract_operation (inLexique, var_cas_previous_offset COMMA_SOURCE_FILE_AT_LINE (148)).add_operation (inLexique, var_cas_first_delay COMMA_SOURCE_FILE_AT_LINE (148)) ;
                    const GGS_bool cond_6929 = (var_cas_first_maxret).operator_strictSup (var_cas_last_delay.substract_operation (inLexique, var_cas_mc COMMA_SOURCE_FILE_AT_LINE (149))) ;
                    if (cond_6929.isBuiltAndTrue ()) {
                      operand_546->mKey.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((((((GGS_string ("OS436 - In first expiry point, MaxRetard (")).operator_concat (var_cas_first_maxret.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (150)))).operator_concat (GGS_string (") should be inferior to the previous delay ("))).operator_concat (var_cas_last_delay.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (150)))).operator_concat (GGS_string (") minus MINCYCLE of the counter ("))).operator_concat (var_cas_mc.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (150)))).operator_concat (GGS_string (").")) COMMA_SOURCE_FILE_AT_LINE (151)) ;
                    }
                    const GGS_bool cond_7219 = (var_cas_first_maxadv).operator_strictSup (var_cas_len.substract_operation (inLexique, var_cas_first_delay COMMA_SOURCE_FILE_AT_LINE (152))) ;
                    if (cond_7219.isBuiltAndTrue ()) {
                      operand_546->mKey.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((((((GGS_string ("OS437 - In first expiry point, MaxAdvance (")).operator_concat (var_cas_first_maxadv.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (153)))).operator_concat (GGS_string (") should be inferior to duration ("))).operator_concat (var_cas_len.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (153)))).operator_concat (GGS_string (") minus the first delay("))).operator_concat (var_cas_first_delay.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (153)))).operator_concat (GGS_string (").")) COMMA_SOURCE_FILE_AT_LINE (154)) ;
                    }
                  }else{
                  }
                }
              }
              GGS_uint64  var_cas_final_delay = var_cas_len.substract_operation (inLexique, var_cas_previous_offset COMMA_SOURCE_FILE_AT_LINE (157)) ;
              const GGS_bool cond_7775 = (var_cas_final_delay).operator_isEqual (GGS_uint64 (0ULL)) ;
              if (cond_7775.isBuiltAndTrue ()) {
                const GGS_bool cond_7755 = var_cas_perio ;
                if (cond_7755.isBuiltAndTrue ()) {
                  var_cas_off_loc.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((GGS_string ("OS427 - Final delay can be equal to 0 only for single-shot schedule table and ")).operator_concat (operand_546->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (163)))).operator_concat (GGS_string (" is a repeating one")) COMMA_SOURCE_FILE_AT_LINE (164)) ;
                }
              }else if (cond_7775.isBuiltAndFalse ()) {
                const GGS_bool cond_7985 = ((var_cas_final_delay).operator_strictInf (var_cas_mc)).operator_or ((var_cas_final_delay).operator_strictSup (var_cas_mav)) ;
                if (cond_7985.isBuiltAndTrue ()) {
                  var_cas_off_loc.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("OS444 - Final delay should be within MINCYCLE and MAXALLOWEDVALUE of the driving counter") COMMA_SOURCE_FILE_AT_LINE (168)) ;
                }
              }
            }
          }
        }
        { const GGS_ltgt_sync_obj _var_9322 = operand_546->mInfo.scheduletable.reader_ltgt_sync (inLexique COMMA_SOURCE_FILE_AT_LINE (176)) ; // CAST instruction
          if (_var_9322.getPtr () != NULL) {
            macroValidPointer (_var_9322.getPtr ()) ;
            if (typeid (cPtr_ltgt_sync_true) == typeid (* (_var_9322.getPtr ()))) {
              const GGS_ltgt_sync_true var_cas_sst (_var_9322.getPtr ()) ;
              const GGS_bool cond_8995 = (var_cas_sst.reader_strategy (inLexique COMMA_SOURCE_FILE_AT_LINE (178)).reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (178))).operator_isEqual (GGS_string ("IMPLICIT")) ;
              if (cond_8995.isBuiltAndTrue ()) {
                { const GGS_autostart_obj _var_8731 = operand_546->mInfo.scheduletable.reader_autostart (inLexique COMMA_SOURCE_FILE_AT_LINE (179)) ; // CAST instruction
                  if (_var_8731.getPtr () != NULL) {
                    macroValidPointer (_var_8731.getPtr ()) ;
                    if (typeid (cPtr_sd_autostart_relative) == typeid (* (_var_8731.getPtr ()))) {
                      operand_546->mInfo.scheduletable.reader_autostart (inLexique COMMA_SOURCE_FILE_AT_LINE (181)).reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (181)).reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("OS430 - An IMPLICIT schedule table should be started in Absolute mode only") COMMA_SOURCE_FILE_AT_LINE (182)) ;
                    }else if (typeid (cPtr_sd_autostart_synchron) == typeid (* (_var_8731.getPtr ()))) {
                      operand_546->mInfo.scheduletable.reader_autostart (inLexique COMMA_SOURCE_FILE_AT_LINE (183)).reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (183)).reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("OS430 - An IMPLICIT schedule table should be started in Absolute mode only") COMMA_SOURCE_FILE_AT_LINE (184)) ;
                    }else{
                    }
                  }
                }
                const GGS_bool cond_8978 = (var_cas_len).operator_isNotEqual (var_cas_mav.add_operation (inLexique, GGS_uint64 (1ULL) COMMA_SOURCE_FILE_AT_LINE (186))) ;
                if (cond_8978.isBuiltAndTrue ()) {
                  operand_546->mInfo.scheduletable.reader_length (inLexique COMMA_SOURCE_FILE_AT_LINE (187)).reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (187)).reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((GGS_string ("OS429 - An IMPLICIT schedule table should have a duration equal to OSMAXALLOWEDVALUE + 1 (")).operator_concat (var_cas_mav.add_operation (inLexique, GGS_uint64 (1ULL) COMMA_SOURCE_FILE_AT_LINE (187)).reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (187)))).operator_concat (GGS_string (") of its counter.")) COMMA_SOURCE_FILE_AT_LINE (188)) ;
                }
              }
              const GGS_bool cond_9303 = (var_cas_sst.reader_strategy (inLexique COMMA_SOURCE_FILE_AT_LINE (190)).reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (190))).operator_isEqual (GGS_string ("EXPLICIT")) ;
              if (cond_9303.isBuiltAndTrue ()) {
                const GGS_bool cond_9286 = (var_cas_len).operator_strictSup (var_cas_mav.add_operation (inLexique, GGS_uint64 (1ULL) COMMA_SOURCE_FILE_AT_LINE (191))) ;
                if (cond_9286.isBuiltAndTrue ()) {
                  operand_546->mInfo.scheduletable.reader_length (inLexique COMMA_SOURCE_FILE_AT_LINE (192)).reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (192)).reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((GGS_string ("OS431 - An EXPLICIT schedule table shouldn't have a duration greater than OSMAXALLOWEVALUE + 1 (")).operator_concat (var_cas_mav.add_operation (inLexique, GGS_uint64 (1ULL) COMMA_SOURCE_FILE_AT_LINE (192)).reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (192)))).operator_concat (GGS_string (") of its counter.")) COMMA_SOURCE_FILE_AT_LINE (193)) ;
                }
              }
            }else{
            }
          }
        }
        { const GGS_autostart_obj _var_10271 = operand_546->mInfo.scheduletable.reader_autostart (inLexique COMMA_SOURCE_FILE_AT_LINE (199)) ; // CAST instruction
          if (_var_10271.getPtr () != NULL) {
            macroValidPointer (_var_10271.getPtr ()) ;
            if (typeid (cPtr_sd_autostart_relative) == typeid (* (_var_10271.getPtr ()))) {
              const GGS_sd_autostart_relative var_cas_relative_data (_var_10271.getPtr ()) ;
              const GGS_bool cond_9763 = (var_cas_relative_data.reader_offset (inLexique COMMA_SOURCE_FILE_AT_LINE (201)).reader_uint64 (inLexique COMMA_SOURCE_FILE_AT_LINE (201))).operator_isEqual (GGS_uint64 (0ULL)) ;
              if (cond_9763.isBuiltAndTrue ()) {
                operand_546->mKey.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((GGS_string ("OS332 - ")).operator_concat (operand_546->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (202)))).operator_concat (GGS_string (" autostart's offset is equal to 0.")) COMMA_SOURCE_FILE_AT_LINE (203)) ;
              }else if (cond_9763.isBuiltAndFalse ()) {
                const GGS_bool cond_9994 = (var_cas_relative_data.reader_offset (inLexique COMMA_SOURCE_FILE_AT_LINE (203)).reader_uint64 (inLexique COMMA_SOURCE_FILE_AT_LINE (203))).operator_strictSup (var_cas_mav.substract_operation (inLexique, var_cas_first_delay COMMA_SOURCE_FILE_AT_LINE (203))) ;
                if (cond_9994.isBuiltAndTrue ()) {
                  operand_546->mKey.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((GGS_string ("OS276 - ")).operator_concat (operand_546->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (204)))).operator_concat (GGS_string (" autostart's offset is greater than MAXALLOWEDVALUE of the driving counter minus the Initial Offset.")) COMMA_SOURCE_FILE_AT_LINE (205)) ;
                }
              }
            }else if (typeid (cPtr_sd_autostart_absolute) == typeid (* (_var_10271.getPtr ()))) {
              const GGS_sd_autostart_absolute var_cas_absolute_data (_var_10271.getPtr ()) ;
              const GGS_bool cond_10252 = (var_cas_absolute_data.reader_value (inLexique COMMA_SOURCE_FILE_AT_LINE (207)).reader_uint64 (inLexique COMMA_SOURCE_FILE_AT_LINE (207))).operator_strictSup (var_cas_mav) ;
              if (cond_10252.isBuiltAndTrue ()) {
                operand_546->mKey.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((GGS_string ("OS349 - ")).operator_concat (operand_546->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (208)))).operator_concat (GGS_string (" autostart's offset is greater than MAXALLOWEDVALUE of the driving counter.")) COMMA_SOURCE_FILE_AT_LINE (209)) ;
              }
            }else{
            }
          }
        }
      }
    }
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_schedule_tables_well_formed\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//Implementation of routine "schedule_tables_counters_exist_and_compatible"  *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_schedule_tables_counters_exist_and_compatible (C_Compiler & inLexique,
                                const GGS_scheduletable_map   var_cas_sts,
                                const GGS_counter_map   var_cas_cnts
                        COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_schedule_tables_counters_exist_and_compatible at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  {
    GGS_scheduletable_map::cEnumerator enumerator_10448 (var_cas_sts, true) ;
    const GGS_scheduletable_map::cElement * operand_10448 = NULL ;
    while (((operand_10448 = enumerator_10448.nextObject ()))) {
      macroValidPointer (operand_10448) ;
      GGS_lstring  var_cas_cnt = operand_10448->mInfo.scheduletable.reader_counter (inLexique COMMA_SOURCE_FILE_AT_LINE (221)) ;
      const GGS_bool cond_10692 = ((var_cas_cnts.reader_hasKey (var_cas_cnt.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (223)))).operator_not ()).operator_and ((var_cas_cnt.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (223))).operator_isNotEqual (GGS_string ("SystemCounter"))) ;
      if (cond_10692.isBuiltAndTrue ()) {
        var_cas_cnt.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((GGS_string ("OS409 - Counter is not defined in ")).operator_concat (operand_10448->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (224)))).operator_concat (GGS_string (" !")) COMMA_SOURCE_FILE_AT_LINE (225)) ;
      }else if (cond_10692.isBuiltAndFalse ()) {
        GGS_uint64  var_cas_len = GGS_uint64 (0ULL) ;
        GGS_location  var_cas_loc = GGS_location (inLexique) ;
        { const GGS_basic_type _var_10968 = operand_10448->mInfo.scheduletable.reader_length (inLexique COMMA_SOURCE_FILE_AT_LINE (228)) ; // CAST instruction
          if (_var_10968.getPtr () != NULL) {
            macroValidPointer (_var_10968.getPtr ()) ;
            if (typeid (cPtr_uint64_class) == typeid (* (_var_10968.getPtr ()))) {
              const GGS_uint64_class var_cas_ui (_var_10968.getPtr ()) ;
              var_cas_len = var_cas_ui.reader_value (inLexique COMMA_SOURCE_FILE_AT_LINE (229)) ;
              var_cas_loc = var_cas_ui.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (229)) ;
            }else{
              GGS_location (inLexique).reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, (GGS_string ("Internal error, incorrect datatype for LENGTH attribute of schedule table ")).operator_concat (operand_10448->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (230))) COMMA_SOURCE_FILE_AT_LINE (231)) ;
            }
          }
        }
        GGS_counter_obj  var_cas_cpt ;
        if (var_cas_cnts.isBuilt ()) {
          var_cas_cnts (HERE)->method_getCounter (inLexique, var_cas_cnt, var_cas_cpt COMMA_SOURCE_FILE_AT_LINE (236)) ;
        }
        GGS_uint64  var_cas_max = GGS_uint64 (0ULL) ;
        { const GGS_basic_type _var_11417 = var_cas_cpt.reader_max_allowed_value (inLexique COMMA_SOURCE_FILE_AT_LINE (239)) ; // CAST instruction
          if (_var_11417.getPtr () != NULL) {
            macroValidPointer (_var_11417.getPtr ()) ;
            if (typeid (cPtr_uint32_class) == typeid (* (_var_11417.getPtr ()))) {
              const GGS_uint32_class var_cas_ui (_var_11417.getPtr ()) ;
              var_cas_max = var_cas_ui.reader_value (inLexique COMMA_SOURCE_FILE_AT_LINE (241)).reader_uint64 (inLexique COMMA_SOURCE_FILE_AT_LINE (241)) ;
            }else{
              GGS_location (inLexique).reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, (GGS_string ("Internal error, incorrect datatype for MAXALLOWEDVALUE attribute of counter ")).operator_concat (var_cas_cnt.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (243))) COMMA_SOURCE_FILE_AT_LINE (244)) ;
            }
          }
        }
      }
    }
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_schedule_tables_counters_exist_and_compatible\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//    Implementation of routine "schedule_tables_tasks_and_events_exist"     *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_schedule_tables_tasks_and_events_exist (C_Compiler & inLexique,
                                const GGS_root_obj   var_cas_cpu,
                                GGS_task_map   var_cas_tasks
                        COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_schedule_tables_tasks_and_events_exist at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  {
    GGS_scheduletable_map::cEnumerator enumerator_11619 (var_cas_cpu.reader_scheduletables (inLexique COMMA_SOURCE_FILE_AT_LINE (257)), true) ;
    const GGS_scheduletable_map::cElement * operand_11619 = NULL ;
    while (((operand_11619 = enumerator_11619.nextObject ()))) {
      macroValidPointer (operand_11619) ;
      {
        GGS_expiry_point_list::cEnumerator enumerator_11695 (operand_11619->mInfo.scheduletable.reader_exp_points (inLexique COMMA_SOURCE_FILE_AT_LINE (258)), true) ;
        const GGS_expiry_point_list::cElement * operand_11695 = NULL ;
        while (((operand_11695 = enumerator_11695.nextObject ()))) {
          macroValidPointer (operand_11695) ;
          GGS_lstring  var_cas_ep_name = operand_11695->point.reader_name (inLexique COMMA_SOURCE_FILE_AT_LINE (259)) ;
          {
            GGS_action_list::cEnumerator enumerator_11768 (operand_11695->point.reader_actions (inLexique COMMA_SOURCE_FILE_AT_LINE (260)), true) ;
            const GGS_action_list::cElement * operand_11768 = NULL ;
            while (((operand_11768 = enumerator_11768.nextObject ()))) {
              macroValidPointer (operand_11768) ;
              { const GGS_action_obj _var_12989 = operand_11768->actionobj ; // CAST instruction
                if (_var_12989.getPtr () != NULL) {
                  macroValidPointer (_var_12989.getPtr ()) ;
                  if (typeid (cPtr_activatetask_action) == typeid (* (_var_12989.getPtr ()))) {
                    const GGS_activatetask_action var_cas_ata (_var_12989.getPtr ()) ;
                    const GGS_bool cond_12040 = (var_cas_cpu.reader_tasks (inLexique COMMA_SOURCE_FILE_AT_LINE (263)).reader_hasKey (var_cas_ata.reader_task_name (inLexique COMMA_SOURCE_FILE_AT_LINE (263)).reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (263)))).operator_not () ;
                    if (cond_12040.isBuiltAndTrue ()) {
                      operand_11768->actionobj.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (264)).reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("TASK attribute of action does not reference an existing task") COMMA_SOURCE_FILE_AT_LINE (265)) ;
                    }
                  }else if (typeid (cPtr_setevent_action) == typeid (* (_var_12989.getPtr ()))) {
                    const GGS_setevent_action var_cas_sea (_var_12989.getPtr ()) ;
                    const GGS_bool cond_12271 = (var_cas_cpu.reader_tasks (inLexique COMMA_SOURCE_FILE_AT_LINE (267)).reader_hasKey (var_cas_sea.reader_task_name (inLexique COMMA_SOURCE_FILE_AT_LINE (267)).reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (267)))).operator_not () ;
                    if (cond_12271.isBuiltAndTrue ()) {
                      operand_11768->actionobj.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (268)).reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("TASK attribute of action does not reference an existing task") COMMA_SOURCE_FILE_AT_LINE (269)) ;
                    }
                    GGS_task_obj  var_cas_task_data ;
                    GGS_lstringlist  var_cas_known_events ;
                    if (var_cas_tasks.isBuilt ()) {
                      var_cas_tasks (HERE)->method_get (inLexique, var_cas_sea.reader_task_name (inLexique COMMA_SOURCE_FILE_AT_LINE (272)), var_cas_task_data COMMA_SOURCE_FILE_AT_LINE (272)) ;
                    }
                    var_cas_known_events = var_cas_task_data.reader_events (inLexique COMMA_SOURCE_FILE_AT_LINE (273)) ;
                    const GGS_bool cond_12647 = (var_cas_known_events.reader_length ()).operator_isEqual (GGS_uint (0U)) ;
                    if (cond_12647.isBuiltAndTrue ()) {
                      var_cas_sea.reader_event_name (inLexique COMMA_SOURCE_FILE_AT_LINE (275)).reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((GGS_string ("An action can't set an Event to a basic task (Task ")).operator_concat (var_cas_sea.reader_task_name (inLexique COMMA_SOURCE_FILE_AT_LINE (275)).reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (275)))).operator_concat (GGS_string (" is a basic task).")) COMMA_SOURCE_FILE_AT_LINE (276)) ;
                    }
                    const GGS_bool cond_12842 = (var_cas_cpu.reader_events (inLexique COMMA_SOURCE_FILE_AT_LINE (277)).reader_hasKey (var_cas_sea.reader_event_name (inLexique COMMA_SOURCE_FILE_AT_LINE (277)).reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (277)))).operator_not () ;
                    if (cond_12842.isBuiltAndTrue ()) {
                      operand_11768->actionobj.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (278)).reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("EVENT attribute of action does not reference an existing event") COMMA_SOURCE_FILE_AT_LINE (279)) ;
                    }
                  }else{
                    var_cas_ep_name.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, (GGS_string ("Internal error, incorrect datatype for ACTION attribute of expiry point ")).operator_concat (var_cas_ep_name.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (281))) COMMA_SOURCE_FILE_AT_LINE (282)) ;
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_schedule_tables_tasks_and_events_exist\n") ;
  #endif
}

//---------------------------------------------------------------------------*

