//---------------------------------------------------------------------------*
//                                                                           *
//                     File 'goil_code_generation.cpp'                       *
//                        Generated by version 2.0.0                         *
//                       july 7th, 2010, at 17h17'9"                         *
//                                                                           *
//---------------------------------------------------------------------------*

//--- START OF USER ZONE 1


//--- END OF USER ZONE 1

//---------------------------------------------------------------------------*

#include "version_libpm.h"
#if CURRENT_LIBPM_VERSION != 820
  #error "This file has been compiled with a version of GALGAS that uses libpm version 820, different than the current version (CURRENT_LIBPM_VERSION) of libpm"
#endif

//---------------------------------------------------------------------------*

#include <typeinfo>
#include "utilities/MF_MemoryControl.h"
#include "files/C_TextFileWrite.h"
#include "galgas/C_galgas_CLI_Options.h"
#include "goil_code_generation.h"

//---------------------------------------------------------------------------*

#ifndef DO_NOT_GENERATE_CHECKINGS
  #define SOURCE_FILE_AT_LINE(line) "goil_code_generation.gSemantics", line
  #define COMMA_SOURCE_FILE_AT_LINE(line) , SOURCE_FILE_AT_LINE(line)
#else
  #define SOURCE_FILE_AT_LINE(line) 
  #define COMMA_SOURCE_FILE_AT_LINE(line) 
#endif

//---------------------------------------------------------------------------*
//                                                                           *
//             Include directives generated by grammar includes              *
//                                                                           *
//---------------------------------------------------------------------------*

#include "api_grammar.h"
#include "cfg_grammar.h"

//--- START OF USER ZONE 2


//--- END OF USER ZONE 2

//---------------------------------------------------------------------------*
//                                                                           *
//             Implementation of routine "generate_signed_type"              *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_generate_signed_type (C_Compiler & inLexique,
                                GGS_uint64   var_cas_count,
                                GGS_string  var_cas_err,
                                GGS_string & var_cas_type
                        COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_generate_signed_type at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  GGS_uint64  var_cas_max_s8 = GGS_uint64 (1ULL).left_shift_operation (inLexique, GGS_uint (7U) COMMA_SOURCE_FILE_AT_LINE (72)) ;
  GGS_uint64  var_cas_max_s16 = GGS_uint64 (1ULL).left_shift_operation (inLexique, GGS_uint (15U) COMMA_SOURCE_FILE_AT_LINE (73)) ;
  GGS_uint64  var_cas_max_s32 = GGS_uint64 (1ULL).left_shift_operation (inLexique, GGS_uint (31U) COMMA_SOURCE_FILE_AT_LINE (74)) ;
  const GGS_bool cond_2294 = (var_cas_count).operator_strictInf (var_cas_max_s8) ;
  if (cond_2294.isBuiltAndTrue ()) {
    var_cas_type = GGS_string ("s8") ;
  }else if (cond_2294.isBuiltAndFalse ()) {
    const GGS_bool cond_2352 = (var_cas_count).operator_strictInf (var_cas_max_s16) ;
    if (cond_2352.isBuiltAndTrue ()) {
      var_cas_type = GGS_string ("s16") ;
    }else if (cond_2352.isBuiltAndFalse ()) {
      const GGS_bool cond_2416 = (var_cas_count).operator_strictInf (var_cas_max_s32) ;
      if (cond_2416.isBuiltAndTrue ()) {
        var_cas_type = GGS_string ("s32") ;
      }else if (cond_2416.isBuiltAndFalse ()) {
        var_cas_type = GGS_string ("") ;
        GGS_location (inLexique).reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, var_cas_err COMMA_SOURCE_FILE_AT_LINE (87)) ;
      }
    }
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_generate_signed_type\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//            Implementation of routine "generate_unsigned_type"             *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_generate_unsigned_type (C_Compiler & inLexique,
                                GGS_uint64   var_cas_count,
                                GGS_string  var_cas_err,
                                GGS_string & var_cas_type
                        COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_generate_unsigned_type at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  GGS_uint64  var_cas_max_u8 = GGS_uint64 (1ULL).left_shift_operation (inLexique, GGS_uint (8U) COMMA_SOURCE_FILE_AT_LINE (98)) ;
  GGS_uint64  var_cas_max_u16 = GGS_uint64 (1ULL).left_shift_operation (inLexique, GGS_uint (16U) COMMA_SOURCE_FILE_AT_LINE (99)) ;
  GGS_uint64  var_cas_max_u32 = GGS_uint64 (1ULL).left_shift_operation (inLexique, GGS_uint (32U) COMMA_SOURCE_FILE_AT_LINE (100)) ;
  const GGS_bool cond_2770 = (var_cas_count).operator_strictInf (var_cas_max_u8) ;
  if (cond_2770.isBuiltAndTrue ()) {
    var_cas_type = GGS_string ("u8") ;
  }else if (cond_2770.isBuiltAndFalse ()) {
    const GGS_bool cond_2828 = (var_cas_count).operator_strictInf (var_cas_max_u16) ;
    if (cond_2828.isBuiltAndTrue ()) {
      var_cas_type = GGS_string ("u16") ;
    }else if (cond_2828.isBuiltAndFalse ()) {
      const GGS_bool cond_2892 = (var_cas_count).operator_strictInf (var_cas_max_u32) ;
      if (cond_2892.isBuiltAndTrue ()) {
        var_cas_type = GGS_string ("u32") ;
      }else if (cond_2892.isBuiltAndFalse ()) {
        var_cas_type = GGS_string ("") ;
        GGS_location (inLexique).reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, var_cas_err COMMA_SOURCE_FILE_AT_LINE (113)) ;
      }
    }
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_generate_unsigned_type\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//              Implementation of routine "generate_mask_type"               *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_generate_mask_type (C_Compiler & inLexique,
                                GGS_uint64   var_cas_count,
                                GGS_string  var_cas_err,
                                GGS_string & var_cas_type
                        COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_generate_mask_type at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  GGS_uint64  var_cas_max_u8 = GGS_uint64 (8ULL) ;
  GGS_uint64  var_cas_max_u16 = GGS_uint64 (16ULL) ;
  GGS_uint64  var_cas_max_u32 = GGS_uint64 (32ULL) ;
  const GGS_bool cond_3228 = (var_cas_count).operator_infOrEqual (var_cas_max_u8) ;
  if (cond_3228.isBuiltAndTrue ()) {
    var_cas_type = GGS_string ("u8") ;
  }else if (cond_3228.isBuiltAndFalse ()) {
    const GGS_bool cond_3287 = (var_cas_count).operator_infOrEqual (var_cas_max_u16) ;
    if (cond_3287.isBuiltAndTrue ()) {
      var_cas_type = GGS_string ("u16") ;
    }else if (cond_3287.isBuiltAndFalse ()) {
      const GGS_bool cond_3352 = (var_cas_count).operator_infOrEqual (var_cas_max_u32) ;
      if (cond_3352.isBuiltAndTrue ()) {
        var_cas_type = GGS_string ("u32") ;
      }else if (cond_3352.isBuiltAndFalse ()) {
        var_cas_type = GGS_string ("") ;
        GGS_location (inLexique).reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, var_cas_err COMMA_SOURCE_FILE_AT_LINE (139)) ;
      }
    }
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_generate_mask_type\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//                Implementation of routine "generate_types"                 *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_generate_types (C_Compiler & inLexique,
                                GGS_task_map   var_cas_tasks,
                                GGS_isr_map   var_cas_isrs,
                                GGS_alarm_map   var_cas_alarms,
                                GGS_counter_map   var_cas_counters,
                                GGS_resource_map   var_cas_resources,
                                GGS_scheduletable_map   var_cas_schedtables,
                                GGS_app_map   var_cas_apps,
                                GGS_uint   var_cas_max_priority,
                                GGS_string & var_cas_types
                        COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_generate_types at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  GGS_string var_cas_type ;
  GGS_uint64  var_cas_max = GGS_uint64 (0ULL) ;
  GGS_uint64  var_cas_c ;
  var_cas_c = var_cas_tasks.reader_count ().reader_uint64 (inLexique COMMA_SOURCE_FILE_AT_LINE (160)).add_operation (inLexique, var_cas_isrs.reader_count ().reader_uint64 (inLexique COMMA_SOURCE_FILE_AT_LINE (160)) COMMA_SOURCE_FILE_AT_LINE (160)) ;
  const GGS_bool cond_3917 = (var_cas_c).operator_strictSup (var_cas_max) ;
  if (cond_3917.isBuiltAndTrue ()) {
    var_cas_max = var_cas_c ;
  }
  ::routine_generate_signed_type (inLexique,  var_cas_c,  GGS_string ("Too many processes (tasks and ISRs)"),  var_cas_type COMMA_SOURCE_FILE_AT_LINE (162)) ;
  var_cas_types = var_cas_types.reader_stringByReplacingStringByString (inLexique, GGS_string ("$PROC_ID_T$"), var_cas_type COMMA_SOURCE_FILE_AT_LINE (163)) ;
  ::routine_generate_signed_type (inLexique,  var_cas_max_priority.reader_uint64 (inLexique COMMA_SOURCE_FILE_AT_LINE (166)),  GGS_string ("Maximum priority too high"),  var_cas_type COMMA_SOURCE_FILE_AT_LINE (166)) ;
  var_cas_types = var_cas_types.reader_stringByReplacingStringByString (inLexique, GGS_string ("$PRIORITY_T$"), var_cas_type COMMA_SOURCE_FILE_AT_LINE (168)) ;
  GGS_uint  var_cas_max_act = GGS_uint (0U) ;
  {
    GGS_task_map::cEnumerator enumerator_4438 (var_cas_tasks, true) ;
    const GGS_task_map::cElement * operand_4438 = NULL ;
    while (((operand_4438 = enumerator_4438.nextObject ()))) {
      macroValidPointer (operand_4438) ;
      { const GGS_basic_type _var_4709 = operand_4438->mInfo.task.reader_activation (inLexique COMMA_SOURCE_FILE_AT_LINE (174)) ; // CAST instruction
        if (_var_4709.getPtr () != NULL) {
          macroValidPointer (_var_4709.getPtr ()) ;
          if (typeid (cPtr_uint32_class) == typeid (* (_var_4709.getPtr ()))) {
            const GGS_uint32_class var_cas_ui (_var_4709.getPtr ()) ;
            const GGS_bool cond_4589 = (var_cas_ui.reader_value (inLexique COMMA_SOURCE_FILE_AT_LINE (175))).operator_strictSup (var_cas_max_act) ;
            if (cond_4589.isBuiltAndTrue ()) {
              var_cas_max_act = var_cas_ui.reader_value (inLexique COMMA_SOURCE_FILE_AT_LINE (175)) ;
            }
          }else{
            operand_4438->mKey.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((GGS_string ("Internal error, task ")).operator_concat (operand_4438->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (176)))).operator_concat (GGS_string (" has wrong type for the ACTIVATION attribute")) COMMA_SOURCE_FILE_AT_LINE (177)) ;
          }
        }
      }
    }
  }
  ::routine_generate_unsigned_type (inLexique,  var_cas_max_act.reader_uint64 (inLexique COMMA_SOURCE_FILE_AT_LINE (179)),  GGS_string ("Maximum ACTIVATION too high"),  var_cas_type COMMA_SOURCE_FILE_AT_LINE (179)) ;
  var_cas_types = var_cas_types.reader_stringByReplacingStringByString (inLexique, GGS_string ("$ACTIVATION_T$"), var_cas_type COMMA_SOURCE_FILE_AT_LINE (181)) ;
  GGS_uint  var_cas_max_ev = GGS_uint (0U) ;
  {
    GGS_task_map::cEnumerator enumerator_5078 (var_cas_tasks, true) ;
    const GGS_task_map::cElement * operand_5078 = NULL ;
    while (((operand_5078 = enumerator_5078.nextObject ()))) {
      macroValidPointer (operand_5078) ;
      GGS_lstringlist  var_cas_evts = operand_5078->mInfo.task.reader_events (inLexique COMMA_SOURCE_FILE_AT_LINE (187)) ;
      const GGS_bool cond_5216 = (var_cas_evts.reader_length ()).operator_strictSup (var_cas_max_ev) ;
      if (cond_5216.isBuiltAndTrue ()) {
        var_cas_max_ev = var_cas_evts.reader_length () ;
      }
    }
  }
  ::routine_generate_mask_type (inLexique,  var_cas_max_ev.reader_uint64 (inLexique COMMA_SOURCE_FILE_AT_LINE (190)),  GGS_string ("Too much events"),  var_cas_type COMMA_SOURCE_FILE_AT_LINE (190)) ;
  var_cas_types = var_cas_types.reader_stringByReplacingStringByString (inLexique, GGS_string ("$EVENTMASK_T$"), var_cas_type COMMA_SOURCE_FILE_AT_LINE (191)) ;
  var_cas_c = var_cas_alarms.reader_count ().reader_uint64 (inLexique COMMA_SOURCE_FILE_AT_LINE (194)) ;
  const GGS_bool cond_5477 = (var_cas_c).operator_strictSup (var_cas_max) ;
  if (cond_5477.isBuiltAndTrue ()) {
    var_cas_max = var_cas_c ;
  }
  ::routine_generate_unsigned_type (inLexique,  var_cas_c,  GGS_string ("too many alarms"),  var_cas_type COMMA_SOURCE_FILE_AT_LINE (196)) ;
  var_cas_types = var_cas_types.reader_stringByReplacingStringByString (inLexique, GGS_string ("$ALARM_ID_T$"), var_cas_type COMMA_SOURCE_FILE_AT_LINE (198)) ;
  var_cas_c = var_cas_resources.reader_count ().reader_uint64 (inLexique COMMA_SOURCE_FILE_AT_LINE (201)) ;
  const GGS_bool cond_5765 = (var_cas_c).operator_strictSup (var_cas_max) ;
  if (cond_5765.isBuiltAndTrue ()) {
    var_cas_max = var_cas_c ;
  }
  ::routine_generate_unsigned_type (inLexique,  var_cas_c,  GGS_string ("too many resources"),  var_cas_type COMMA_SOURCE_FILE_AT_LINE (203)) ;
  var_cas_types = var_cas_types.reader_stringByReplacingStringByString (inLexique, GGS_string ("$RESOURCE_ID_T$"), var_cas_type COMMA_SOURCE_FILE_AT_LINE (205)) ;
  var_cas_c = var_cas_counters.reader_count ().reader_uint64 (inLexique COMMA_SOURCE_FILE_AT_LINE (208)) ;
  const GGS_bool cond_6057 = (var_cas_c).operator_strictSup (var_cas_max) ;
  if (cond_6057.isBuiltAndTrue ()) {
    var_cas_max = var_cas_c ;
  }
  ::routine_generate_unsigned_type (inLexique,  var_cas_c,  GGS_string ("too many counters"),  var_cas_type COMMA_SOURCE_FILE_AT_LINE (210)) ;
  var_cas_types = var_cas_types.reader_stringByReplacingStringByString (inLexique, GGS_string ("$COUNTER_ID_T$"), var_cas_type COMMA_SOURCE_FILE_AT_LINE (212)) ;
  var_cas_c = var_cas_schedtables.reader_count ().reader_uint64 (inLexique COMMA_SOURCE_FILE_AT_LINE (215)) ;
  const GGS_bool cond_6353 = (var_cas_c).operator_strictSup (var_cas_max) ;
  if (cond_6353.isBuiltAndTrue ()) {
    var_cas_max = var_cas_c ;
  }
  ::routine_generate_unsigned_type (inLexique,  var_cas_c,  GGS_string ("too many schedule tables"),  var_cas_type COMMA_SOURCE_FILE_AT_LINE (217)) ;
  var_cas_types = var_cas_types.reader_stringByReplacingStringByString (inLexique, GGS_string ("$SCHEDTABLE_ID_T$"), var_cas_type COMMA_SOURCE_FILE_AT_LINE (219)) ;
  const GGS_bool cond_6741 = (var_cas_alarms.reader_count ()).operator_strictSup (var_cas_schedtables.reader_count ()) ;
  if (cond_6741.isBuiltAndTrue ()) {
    var_cas_c = var_cas_alarms.reader_count ().reader_uint64 (inLexique COMMA_SOURCE_FILE_AT_LINE (224)) ;
  }else if (cond_6741.isBuiltAndFalse ()) {
    var_cas_c = var_cas_schedtables.reader_count ().reader_uint64 (inLexique COMMA_SOURCE_FILE_AT_LINE (226)) ;
  }
  const GGS_bool cond_6822 = (var_cas_c).operator_strictSup (var_cas_max) ;
  if (cond_6822.isBuiltAndTrue ()) {
    var_cas_max = var_cas_c ;
  }
  ::routine_generate_unsigned_type (inLexique,  var_cas_c,  GGS_string ("too many time objects"),  var_cas_type COMMA_SOURCE_FILE_AT_LINE (229)) ;
  var_cas_types = var_cas_types.reader_stringByReplacingStringByString (inLexique, GGS_string ("$TIMEOBJ_ID_T$"), var_cas_type COMMA_SOURCE_FILE_AT_LINE (230)) ;
  ::routine_generate_unsigned_type (inLexique,  var_cas_apps.reader_count ().reader_uint64 (inLexique COMMA_SOURCE_FILE_AT_LINE (233)).add_operation (inLexique, GGS_uint64 (1ULL) COMMA_SOURCE_FILE_AT_LINE (233)),  GGS_string ("too many OS applications"),  var_cas_type COMMA_SOURCE_FILE_AT_LINE (233)) ;
  ::routine_doReplace (inLexique,  var_cas_types,  GGS_string ("$OSAPPLICATION_ID_T$"),  var_cas_type COMMA_SOURCE_FILE_AT_LINE (235)) ;
  GGS_stringset  var_cas_tfs = GGS_stringset ::constructor_emptySet () ;
  {
    GGS_app_map::cEnumerator enumerator_7289 (var_cas_apps, true) ;
    const GGS_app_map::cElement * operand_7289 = NULL ;
    while (((operand_7289 = enumerator_7289.nextObject ()))) {
      macroValidPointer (operand_7289) ;
      { const GGS_app_trusted_obj _var_7449 = operand_7289->mInfo.app.reader_trusted (inLexique COMMA_SOURCE_FILE_AT_LINE (241)) ; // CAST instruction
        if (_var_7449.getPtr () != NULL) {
          macroValidPointer (_var_7449.getPtr ()) ;
          if (typeid (cPtr_app_trusted_true) == typeid (* (_var_7449.getPtr ()))) {
            const GGS_app_trusted_true var_cas_t (_var_7449.getPtr ()) ;
            {
              GGS_stringset::cEnumerator enumerator_7368 (var_cas_t.reader_trusted_fcts (inLexique COMMA_SOURCE_FILE_AT_LINE (243)), true) ;
              while (enumerator_7368.hasCurrentObject ()) {
                var_cas_tfs.addAssign_operation (enumerator_7368._key (HERE)) ;
                enumerator_7368.next () ;
              }
            }
          }else{
          }
        }
      }
    }
  }
  ::routine_generate_unsigned_type (inLexique,  var_cas_tfs.reader_count ().reader_uint64 (inLexique COMMA_SOURCE_FILE_AT_LINE (249)),  GGS_string ("Too many Trusted Functions"),  var_cas_type COMMA_SOURCE_FILE_AT_LINE (249)) ;
  ::routine_doReplace (inLexique,  var_cas_types,  GGS_string ("$TRUSTED_FCT_ID_T$"),  var_cas_type COMMA_SOURCE_FILE_AT_LINE (250)) ;
  ::routine_generate_unsigned_type (inLexique,  var_cas_max,  GGS_string ("too many objects"),  var_cas_type COMMA_SOURCE_FILE_AT_LINE (253)) ;
  ::routine_doReplace (inLexique,  var_cas_types,  GGS_string ("$GENERIC_ID_T$"),  var_cas_type COMMA_SOURCE_FILE_AT_LINE (255)) ;
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_generate_types\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//             Implementation of routine "generate_timing_prot"              *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_generate_timing_prot (C_Compiler & inLexique,
                                GGS_task_map   var_cas_tasks,
                                GGS_resource_map   var_cas_rez,
                                GGS_string & var_cas_obj_header
                        COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_generate_timing_prot at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  GGS_uint  var_cas_max_sched_wd = var_cas_rez.reader_count ().add_operation (inLexique, GGS_uint (4U).multiply_operation (inLexique, var_cas_tasks.reader_count () COMMA_SOURCE_FILE_AT_LINE (265)) COMMA_SOURCE_FILE_AT_LINE (265)) ;
  var_cas_obj_header = var_cas_obj_header.reader_stringByReplacingStringByString (inLexique, GGS_string ("$MAX_WATCH_DOG$"), var_cas_max_sched_wd.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (267)) COMMA_SOURCE_FILE_AT_LINE (267)) ;
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_generate_timing_prot\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//         Implementation of routine "compute_actual_task_priority"          *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_compute_actual_task_priority (C_Compiler & inLexique,
                                GGS_task_map   var_cas_tasks,
                                GGS_prio_map  & var_cas_prio_for_task,
                                GGS_uint  & var_cas_max_prio
                        COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_compute_actual_task_priority at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  GGS_objs_by_prio  var_cas_tl = GGS_objs_by_prio ::constructor_emptySortedList () ;
  {
    GGS_task_map::cEnumerator enumerator_8646 (var_cas_tasks, true) ;
    const GGS_task_map::cElement * operand_8646 = NULL ;
    while (((operand_8646 = enumerator_8646.nextObject ()))) {
      macroValidPointer (operand_8646) ;
      GGS_basic_type  var_cas_prio_as_basic ;
      GGS_basic_type  var_cas_act_as_basic ;
      GGS_uint  var_cas_prio = GGS_uint (0U) ;
      GGS_uint  var_cas_act = GGS_uint (0U) ;
      var_cas_prio_as_basic = operand_8646->mInfo.task.reader_priority (inLexique COMMA_SOURCE_FILE_AT_LINE (290)) ;
      var_cas_act_as_basic = operand_8646->mInfo.task.reader_activation (inLexique COMMA_SOURCE_FILE_AT_LINE (291)) ;
      { const GGS_basic_type _var_9069 = var_cas_prio_as_basic ; // CAST instruction
        if (_var_9069.getPtr () != NULL) {
          macroValidPointer (_var_9069.getPtr ()) ;
          if (typeid (cPtr_uint32_class) == typeid (* (_var_9069.getPtr ()))) {
            const GGS_uint32_class var_cas_ui (_var_9069.getPtr ()) ;
            var_cas_prio = var_cas_ui.reader_value (inLexique COMMA_SOURCE_FILE_AT_LINE (294)) ;
          }else{
            var_cas_prio_as_basic.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (295)).reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("TASK PRIORITY attribute undefined") COMMA_SOURCE_FILE_AT_LINE (296)) ;
          }
        }
      }
      { const GGS_basic_type _var_9255 = var_cas_act_as_basic ; // CAST instruction
        if (_var_9255.getPtr () != NULL) {
          macroValidPointer (_var_9255.getPtr ()) ;
          if (typeid (cPtr_uint32_class) == typeid (* (_var_9255.getPtr ()))) {
            const GGS_uint32_class var_cas_ui (_var_9255.getPtr ()) ;
            var_cas_act = var_cas_ui.reader_value (inLexique COMMA_SOURCE_FILE_AT_LINE (299)) ;
          }else{
            var_cas_act_as_basic.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (300)).reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("TASK ACTIVATION attribute undefined") COMMA_SOURCE_FILE_AT_LINE (301)) ;
          }
        }
      }
      var_cas_tl.addAssign_operation (var_cas_prio, var_cas_act, operand_8646->mKey) ;
    }
  }
  GGS_uint  var_cas_actual_prio = GGS_uint (1U) ;
  GGS_uint  var_cas_cur_rel_prio = GGS_uint (0U) ;
  const GGS_bool cond_9496 = (var_cas_tl.reader_length ()).operator_strictSup (GGS_uint (0U)) ;
  if (cond_9496.isBuiltAndTrue ()) {
    GGS_uint  automatic_var_9487_0 ;
    GGS_lstring  automatic_var_9487_1 ;
    if (var_cas_tl.isBuilt ()) {
      var_cas_tl (HERE)->method_smallest (inLexique, var_cas_cur_rel_prio, automatic_var_9487_0, automatic_var_9487_1 COMMA_SOURCE_FILE_AT_LINE (312)) ;
    }
  }
  {
    GGS_objs_by_prio::cEnumerator enumerator_9591 (var_cas_tl, true) ;
    const GGS_objs_by_prio::cElement * operand_9591 = NULL ;
    while (((operand_9591 = enumerator_9591.nextObject ()))) {
      macroValidPointer (operand_9591) ;
      const GGS_bool cond_9847 = (operand_9591->prio).operator_strictSup (var_cas_cur_rel_prio) ;
      if (cond_9847.isBuiltAndTrue ()) {
        var_cas_cur_rel_prio = operand_9591->prio ;
        var_cas_actual_prio.increment_operation (inLexique COMMA_SOURCE_FILE_AT_LINE (322)) ;
      }
      var_cas_prio_for_task.modifier_put (inLexique, operand_9591->name, var_cas_actual_prio, operand_9591->act COMMA_SOURCE_FILE_AT_LINE (325)) ;
    }
  }
  var_cas_max_prio = var_cas_actual_prio ;
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_compute_actual_task_priority\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//         Implementation of routine "compute_actual_isr_priority"           *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_compute_actual_isr_priority (C_Compiler & inLexique,
                                GGS_isr_map   var_cas_isrs,
                                GGS_prio_map  & var_cas_prio_for_isr,
                                GGS_uint   var_cas_floor,
                                GGS_uint  & var_cas_max_prio
                        COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_compute_actual_isr_priority at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  GGS_objs_by_prio  var_cas_il = GGS_objs_by_prio ::constructor_emptySortedList () ;
  const GGS_bool cond_12111 = (var_cas_isrs.reader_count ()).operator_isNotEqual (GGS_uint (0U)) ;
  if (cond_12111.isBuiltAndTrue ()) {
    {
      GGS_isr_map::cEnumerator enumerator_10599 (var_cas_isrs, true) ;
      const GGS_isr_map::cElement * operand_10599 = NULL ;
      while (((operand_10599 = enumerator_10599.nextObject ()))) {
        macroValidPointer (operand_10599) ;
        GGS_basic_type  var_cas_prio_as_basic ;
        GGS_uint  var_cas_prio = GGS_uint (0U) ;
        var_cas_prio_as_basic = operand_10599->mInfo.isr.reader_priority (inLexique COMMA_SOURCE_FILE_AT_LINE (354)) ;
        { const GGS_basic_type _var_11014 = var_cas_prio_as_basic ; // CAST instruction
          if (_var_11014.getPtr () != NULL) {
            macroValidPointer (_var_11014.getPtr ()) ;
            if (typeid (cPtr_uint32_class) == typeid (* (_var_11014.getPtr ()))) {
              const GGS_uint32_class var_cas_ui (_var_11014.getPtr ()) ;
              var_cas_prio = var_cas_ui.reader_value (inLexique COMMA_SOURCE_FILE_AT_LINE (358)) ;
            }else{
              var_cas_prio_as_basic.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (359)).reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("ISR PRIORITY attribute undefined") COMMA_SOURCE_FILE_AT_LINE (360)) ;
            }
          }
        }
        var_cas_il.addAssign_operation (var_cas_prio, GGS_uint (1U), operand_10599->mKey) ;
      }
    }
    GGS_uint  var_cas_actual_prio = var_cas_floor.add_operation (inLexique, GGS_uint (1U) COMMA_SOURCE_FILE_AT_LINE (373)) ;
    GGS_uint  var_cas_cur_rel_prio = GGS_uint (0U) ;
    const GGS_bool cond_11505 = (var_cas_il.reader_length ()).operator_strictSup (GGS_uint (0U)) ;
    if (cond_11505.isBuiltAndTrue ()) {
      GGS_uint  automatic_var_11492_0 ;
      GGS_lstring  automatic_var_11492_1 ;
      if (var_cas_il.isBuilt ()) {
        var_cas_il (HERE)->method_smallest (inLexique, var_cas_cur_rel_prio, automatic_var_11492_0, automatic_var_11492_1 COMMA_SOURCE_FILE_AT_LINE (376)) ;
      }
    }
    {
      GGS_objs_by_prio::cEnumerator enumerator_11623 (var_cas_il, true) ;
      const GGS_objs_by_prio::cElement * operand_11623 = NULL ;
      while (((operand_11623 = enumerator_11623.nextObject ()))) {
        macroValidPointer (operand_11623) ;
        const GGS_bool cond_11899 = (operand_11623->prio).operator_strictSup (var_cas_cur_rel_prio) ;
        if (cond_11899.isBuiltAndTrue ()) {
          var_cas_cur_rel_prio = operand_11623->prio ;
          var_cas_actual_prio.increment_operation (inLexique COMMA_SOURCE_FILE_AT_LINE (386)) ;
        }
        var_cas_prio_for_isr.modifier_put (inLexique, operand_11623->name, var_cas_actual_prio, operand_11623->act COMMA_SOURCE_FILE_AT_LINE (389)) ;
      }
    }
    var_cas_max_prio = var_cas_actual_prio ;
  }else if (cond_12111.isBuiltAndFalse ()) {
    var_cas_max_prio = var_cas_floor ;
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_compute_actual_isr_priority\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//             Implementation of routine "compute_rez_priority"              *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_compute_rez_priority (C_Compiler & inLexique,
                                GGS_resource_map   var_cas_rez,
                                GGS_task_map   var_cas_tasks,
                                GGS_isr_map   var_cas_isrs,
                                GGS_prio_map   var_cas_prio_for_process,
                                GGS_prio_map  & var_cas_prio_for_rez,
                                GGS_stringMap  & var_cas_comments
                        COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_compute_rez_priority at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  var_cas_prio_for_rez = GGS_prio_map ::constructor_emptyMap (inLexique COMMA_SOURCE_FILE_AT_LINE (410)) ;
  var_cas_comments = GGS_stringMap ::constructor_emptyMap (inLexique COMMA_SOURCE_FILE_AT_LINE (411)) ;
  {
    GGS_resource_map::cEnumerator enumerator_12976 (var_cas_rez, true) ;
    const GGS_resource_map::cElement * operand_12976 = NULL ;
    while (((operand_12976 = enumerator_12976.nextObject ()))) {
      macroValidPointer (operand_12976) ;
      GGS_uint  var_cas_rez_prio = GGS_uint (0U) ;
      GGS_uint  var_cas_rez_act = GGS_uint (0U) ;
      GGS_string var_cas_rez_comment = GGS_string ("") ;
      {
        GGS_task_map::cEnumerator enumerator_13117 (var_cas_tasks, true) ;
        const GGS_task_map::cElement * operand_13117 = NULL ;
        while (((operand_13117 = enumerator_13117.nextObject ()))) {
          macroValidPointer (operand_13117) ;
          GGS_lstringlist  var_cas_owned_rez = operand_13117->mInfo.task.reader_resources (inLexique COMMA_SOURCE_FILE_AT_LINE (427)) ;
          GGS_bool var_cas_owned ;
          GGS_lstring  automatic_var_13286_0 ;
          ::routine_is_in_lstringlist (inLexique,  var_cas_owned_rez,  operand_12976->mKey,  automatic_var_13286_0,  var_cas_owned COMMA_SOURCE_FILE_AT_LINE (429)) ;
          const GGS_bool cond_13668 = var_cas_owned ;
          if (cond_13668.isBuiltAndTrue ()) {
            GGS_uint  var_cas_prio ;
            GGS_uint  var_cas_act ;
            if (var_cas_prio_for_process.isBuilt ()) {
              var_cas_prio_for_process (HERE)->method_get (inLexique, operand_13117->mKey, var_cas_prio, var_cas_act COMMA_SOURCE_FILE_AT_LINE (433)) ;
            }
            const GGS_bool cond_13520 = (var_cas_prio).operator_strictSup (var_cas_rez_prio) ;
            if (cond_13520.isBuiltAndTrue ()) {
              var_cas_rez_prio = var_cas_prio ;
            }
            var_cas_rez_act = var_cas_rez_act.add_operation (inLexique, var_cas_act COMMA_SOURCE_FILE_AT_LINE (437)) ;
            var_cas_rez_comment.appendCString (" used by task ") ;
            var_cas_rez_comment.dotAssign_operation (operand_13117->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (438))) ;
            var_cas_rez_comment.appendCString (" (") ;
            var_cas_rez_comment.dotAssign_operation (var_cas_prio.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (438))) ;
            var_cas_rez_comment.appendCString (")\n") ;
          }
        }
      }
      {
        GGS_isr_map::cEnumerator enumerator_13714 (var_cas_isrs, true) ;
        const GGS_isr_map::cElement * operand_13714 = NULL ;
        while (((operand_13714 = enumerator_13714.nextObject ()))) {
          macroValidPointer (operand_13714) ;
          GGS_lstringlist  var_cas_owned_rez = operand_13714->mInfo.isr.reader_resources (inLexique COMMA_SOURCE_FILE_AT_LINE (442)) ;
          GGS_bool var_cas_owned ;
          GGS_lstring  automatic_var_13883_0 ;
          ::routine_is_in_lstringlist (inLexique,  var_cas_owned_rez,  operand_12976->mKey,  automatic_var_13883_0,  var_cas_owned COMMA_SOURCE_FILE_AT_LINE (444)) ;
          const GGS_bool cond_14266 = var_cas_owned ;
          if (cond_14266.isBuiltAndTrue ()) {
            GGS_uint  var_cas_prio ;
            GGS_uint  var_cas_act ;
            if (var_cas_prio_for_process.isBuilt ()) {
              var_cas_prio_for_process (HERE)->method_get (inLexique, operand_13714->mKey, var_cas_prio, var_cas_act COMMA_SOURCE_FILE_AT_LINE (448)) ;
            }
            const GGS_bool cond_14118 = (var_cas_prio).operator_strictSup (var_cas_rez_prio) ;
            if (cond_14118.isBuiltAndTrue ()) {
              var_cas_rez_prio = var_cas_prio ;
            }
            var_cas_rez_act = var_cas_rez_act.add_operation (inLexique, var_cas_act COMMA_SOURCE_FILE_AT_LINE (452)) ;
            var_cas_rez_comment.appendCString (" used by isr ") ;
            var_cas_rez_comment.dotAssign_operation (operand_13714->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (453))) ;
            var_cas_rez_comment.appendCString (" (") ;
            var_cas_rez_comment.dotAssign_operation (var_cas_prio.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (453))) ;
            var_cas_rez_comment.appendCString (")\n") ;
          }
        }
      }
      const GGS_bool cond_14376 = (var_cas_rez_comment).operator_isEqual (GGS_string ("")) ;
      if (cond_14376.isBuiltAndTrue ()) {
        var_cas_rez_comment = GGS_string (" none\n") ;
      }
      {
        GGS_task_map::cEnumerator enumerator_14565 (var_cas_tasks, true) ;
        const GGS_task_map::cElement * operand_14565 = NULL ;
        while (((operand_14565 = enumerator_14565.nextObject ()))) {
          macroValidPointer (operand_14565) ;
          GGS_lstringlist  var_cas_owned_rez = operand_14565->mInfo.task.reader_resources (inLexique COMMA_SOURCE_FILE_AT_LINE (466)) ;
          GGS_bool var_cas_owned ;
          GGS_lstring  automatic_var_14734_0 ;
          ::routine_is_in_lstringlist (inLexique,  var_cas_owned_rez,  operand_12976->mKey,  automatic_var_14734_0,  var_cas_owned COMMA_SOURCE_FILE_AT_LINE (468)) ;
          const GGS_bool cond_14997 = var_cas_owned ;
          if (cond_14997.isBuiltAndTrue ()) {
            GGS_uint  var_cas_prio ;
            GGS_uint  var_cas_act ;
            if (var_cas_prio_for_process.isBuilt ()) {
              var_cas_prio_for_process (HERE)->method_get (inLexique, operand_14565->mKey, var_cas_prio, var_cas_act COMMA_SOURCE_FILE_AT_LINE (472)) ;
            }
            const GGS_bool cond_14977 = (var_cas_prio).operator_isEqual (var_cas_rez_prio) ;
            if (cond_14977.isBuiltAndTrue ()) {
              var_cas_rez_act = var_cas_rez_act.substract_operation (inLexique, var_cas_act COMMA_SOURCE_FILE_AT_LINE (474)) ;
            }
          }
        }
      }
      {
        GGS_isr_map::cEnumerator enumerator_15043 (var_cas_isrs, true) ;
        const GGS_isr_map::cElement * operand_15043 = NULL ;
        while (((operand_15043 = enumerator_15043.nextObject ()))) {
          macroValidPointer (operand_15043) ;
          GGS_lstringlist  var_cas_owned_rez = operand_15043->mInfo.isr.reader_resources (inLexique COMMA_SOURCE_FILE_AT_LINE (479)) ;
          GGS_bool var_cas_owned ;
          GGS_lstring  automatic_var_15212_0 ;
          ::routine_is_in_lstringlist (inLexique,  var_cas_owned_rez,  operand_12976->mKey,  automatic_var_15212_0,  var_cas_owned COMMA_SOURCE_FILE_AT_LINE (481)) ;
          const GGS_bool cond_15476 = var_cas_owned ;
          if (cond_15476.isBuiltAndTrue ()) {
            GGS_uint  var_cas_prio ;
            GGS_uint  var_cas_act ;
            if (var_cas_prio_for_process.isBuilt ()) {
              var_cas_prio_for_process (HERE)->method_get (inLexique, operand_15043->mKey, var_cas_prio, var_cas_act COMMA_SOURCE_FILE_AT_LINE (485)) ;
            }
            const GGS_bool cond_15456 = (var_cas_prio).operator_isEqual (var_cas_rez_prio) ;
            if (cond_15456.isBuiltAndTrue ()) {
              var_cas_rez_act = var_cas_rez_act.substract_operation (inLexique, var_cas_act COMMA_SOURCE_FILE_AT_LINE (487)) ;
            }
          }
        }
      }
      var_cas_prio_for_rez.modifier_put (inLexique, operand_12976->mKey, var_cas_rez_prio, var_cas_rez_act COMMA_SOURCE_FILE_AT_LINE (492)) ;
      var_cas_comments.modifier_put (inLexique, operand_12976->mKey, var_cas_rez_comment COMMA_SOURCE_FILE_AT_LINE (493)) ;
    }
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_compute_rez_priority\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//              Implementation of routine "compute_ready_list"               *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_compute_ready_list (C_Compiler & inLexique,
                                GGS_prio_map   var_cas_prio_for_process,
                                GGS_prio_map   var_cas_prio_for_rez,
                                GGS_uint   var_cas_max_task_prio,
                                GGS_uint   var_cas_max_prio,
                                GGS_prio_list  & var_cas_ready_list
                        COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_compute_ready_list at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  var_cas_ready_list = GGS_prio_list ::constructor_emptyList () ;
  var_cas_ready_list.addAssign_operation (GGS_uint (1U)) ;
  GGS_uint  var_cas_prio = GGS_uint (1U) ;
  GGS_uint _variant_16951 = var_cas_max_prio ;
  GGS_bool _condition_16951 (_variant_16951.isBuilt (), true) ;
  while (_condition_16951.isBuiltAndTrue ()) {
    _condition_16951 = (var_cas_prio).operator_infOrEqual (var_cas_max_prio) ;
    if (_condition_16951.isBuiltAndTrue ()) {
      if (_variant_16951.uintValue () == 0) {
        inLexique.onTheFlyRunTimeError ("loop variant error" COMMA_SOURCE_FILE_AT_LINE (534)) ;
        _condition_16951 = GGS_bool (false) ;
      }else{
        _variant_16951.decrement_operation (inLexique COMMA_HERE) ;
        GGS_uint  var_cas_fifosize = GGS_uint (0U) ;
        {
          GGS_prio_map::cEnumerator enumerator_16454 (var_cas_prio_for_process, true) ;
          const GGS_prio_map::cElement * operand_16454 = NULL ;
          while (((operand_16454 = enumerator_16454.nextObject ()))) {
            macroValidPointer (operand_16454) ;
            const GGS_bool cond_16546 = (operand_16454->mInfo.prio).operator_isEqual (var_cas_prio) ;
            if (cond_16546.isBuiltAndTrue ()) {
              var_cas_fifosize = var_cas_fifosize.add_operation (inLexique, operand_16454->mInfo.act COMMA_SOURCE_FILE_AT_LINE (522)) ;
            }
          }
        }
        {
          GGS_prio_map::cEnumerator enumerator_16600 (var_cas_prio_for_rez, true) ;
          const GGS_prio_map::cElement * operand_16600 = NULL ;
          while (((operand_16600 = enumerator_16600.nextObject ()))) {
            macroValidPointer (operand_16600) ;
            const GGS_bool cond_16692 = (operand_16600->mInfo.prio).operator_isEqual (var_cas_prio) ;
            if (cond_16692.isBuiltAndTrue ()) {
              var_cas_fifosize = var_cas_fifosize.add_operation (inLexique, operand_16600->mInfo.act COMMA_SOURCE_FILE_AT_LINE (525)) ;
            }
          }
        }
        const GGS_bool cond_16889 = (var_cas_prio).operator_isEqual (var_cas_max_task_prio) ;
        if (cond_16889.isBuiltAndTrue ()) {
          var_cas_fifosize.increment_operation (inLexique COMMA_SOURCE_FILE_AT_LINE (530)) ;
        }
        var_cas_ready_list.addAssign_operation (var_cas_fifosize) ;
        var_cas_prio.increment_operation (inLexique COMMA_SOURCE_FILE_AT_LINE (533)) ;
      }
    }
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_compute_ready_list\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//             Implementation of routine "compute_app_for_obj"               *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_compute_app_for_obj (C_Compiler & inLexique,
                                GGS_app_map   var_cas_apps,
                                GGS_stringMap  & var_cas_app_for_obj
                        COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_compute_app_for_obj at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  var_cas_app_for_obj = GGS_stringMap ::constructor_emptyMap (inLexique COMMA_SOURCE_FILE_AT_LINE (543)) ;
  {
    GGS_app_map::cEnumerator enumerator_17125 (var_cas_apps, true) ;
    const GGS_app_map::cElement * operand_17125 = NULL ;
    while (((operand_17125 = enumerator_17125.nextObject ()))) {
      macroValidPointer (operand_17125) ;
      GGS_string var_cas_app_name = operand_17125->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (546)) ;
      {
        GGS_ident_map::cEnumerator enumerator_17181 (operand_17125->mInfo.app.reader_tasks (inLexique COMMA_SOURCE_FILE_AT_LINE (547)), true) ;
        const GGS_ident_map::cElement * operand_17181 = NULL ;
        while (((operand_17181 = enumerator_17181.nextObject ()))) {
          macroValidPointer (operand_17181) ;
          const GGS_bool cond_17303 = (var_cas_app_for_obj.reader_hasKey (operand_17181->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (548)))).operator_not () ;
          if (cond_17303.isBuiltAndTrue ()) {
            var_cas_app_for_obj.modifier_put (inLexique, operand_17181->mKey, var_cas_app_name COMMA_SOURCE_FILE_AT_LINE (549)) ;
          }
        }
      }
      {
        GGS_ident_map::cEnumerator enumerator_17338 (operand_17125->mInfo.app.reader_isrs (inLexique COMMA_SOURCE_FILE_AT_LINE (552)), true) ;
        const GGS_ident_map::cElement * operand_17338 = NULL ;
        while (((operand_17338 = enumerator_17338.nextObject ()))) {
          macroValidPointer (operand_17338) ;
          const GGS_bool cond_17459 = (var_cas_app_for_obj.reader_hasKey (operand_17338->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (553)))).operator_not () ;
          if (cond_17459.isBuiltAndTrue ()) {
            var_cas_app_for_obj.modifier_put (inLexique, operand_17338->mKey, var_cas_app_name COMMA_SOURCE_FILE_AT_LINE (554)) ;
          }
        }
      }
      {
        GGS_ident_map::cEnumerator enumerator_17494 (operand_17125->mInfo.app.reader_alarms (inLexique COMMA_SOURCE_FILE_AT_LINE (557)), true) ;
        const GGS_ident_map::cElement * operand_17494 = NULL ;
        while (((operand_17494 = enumerator_17494.nextObject ()))) {
          macroValidPointer (operand_17494) ;
          const GGS_bool cond_17617 = (var_cas_app_for_obj.reader_hasKey (operand_17494->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (558)))).operator_not () ;
          if (cond_17617.isBuiltAndTrue ()) {
            var_cas_app_for_obj.modifier_put (inLexique, operand_17494->mKey, var_cas_app_name COMMA_SOURCE_FILE_AT_LINE (559)) ;
          }
        }
      }
      {
        GGS_ident_map::cEnumerator enumerator_17652 (operand_17125->mInfo.app.reader_scheduletables (inLexique COMMA_SOURCE_FILE_AT_LINE (562)), true) ;
        const GGS_ident_map::cElement * operand_17652 = NULL ;
        while (((operand_17652 = enumerator_17652.nextObject ()))) {
          macroValidPointer (operand_17652) ;
          const GGS_bool cond_17783 = (var_cas_app_for_obj.reader_hasKey (operand_17652->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (563)))).operator_not () ;
          if (cond_17783.isBuiltAndTrue ()) {
            var_cas_app_for_obj.modifier_put (inLexique, operand_17652->mKey, var_cas_app_name COMMA_SOURCE_FILE_AT_LINE (564)) ;
          }
        }
      }
      {
        GGS_ident_map::cEnumerator enumerator_17818 (operand_17125->mInfo.app.reader_counters (inLexique COMMA_SOURCE_FILE_AT_LINE (567)), true) ;
        const GGS_ident_map::cElement * operand_17818 = NULL ;
        while (((operand_17818 = enumerator_17818.nextObject ()))) {
          macroValidPointer (operand_17818) ;
          const GGS_bool cond_17943 = (var_cas_app_for_obj.reader_hasKey (operand_17818->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (568)))).operator_not () ;
          if (cond_17943.isBuiltAndTrue ()) {
            var_cas_app_for_obj.modifier_put (inLexique, operand_17818->mKey, var_cas_app_name COMMA_SOURCE_FILE_AT_LINE (569)) ;
          }
        }
      }
      {
        GGS_ident_map::cEnumerator enumerator_17978 (operand_17125->mInfo.app.reader_resources (inLexique COMMA_SOURCE_FILE_AT_LINE (572)), true) ;
        const GGS_ident_map::cElement * operand_17978 = NULL ;
        while (((operand_17978 = enumerator_17978.nextObject ()))) {
          macroValidPointer (operand_17978) ;
          const GGS_bool cond_18104 = (var_cas_app_for_obj.reader_hasKey (operand_17978->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (573)))).operator_not () ;
          if (cond_18104.isBuiltAndTrue ()) {
            var_cas_app_for_obj.modifier_put (inLexique, operand_17978->mKey, var_cas_app_name COMMA_SOURCE_FILE_AT_LINE (574)) ;
          }
        }
      }
    }
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_compute_app_for_obj\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//                Implementation of routine "computeEvents"                  *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_computeEvents (C_Compiler & inLexique,
                                const GGS_root_obj   var_cas_cpu,
                                GGS_eventMaskMap  & var_cas_eventMasks
                        COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_computeEvents at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  var_cas_eventMasks = GGS_eventMaskMap ::constructor_emptyMap (inLexique COMMA_SOURCE_FILE_AT_LINE (587)) ;
  GGS_task_mask  var_cas_maskForTask = GGS_task_mask ::constructor_emptyMap (inLexique COMMA_SOURCE_FILE_AT_LINE (588)) ;
  GGS_event_usage_map  var_cas_evt_usage = GGS_event_usage_map ::constructor_emptyMap (inLexique COMMA_SOURCE_FILE_AT_LINE (601)) ;
  GGS_stringset_map  var_cas_tasksForEvent = GGS_stringset_map ::constructor_emptyMap (inLexique COMMA_SOURCE_FILE_AT_LINE (602)) ;
  {
    GGS_task_map::cEnumerator enumerator_19005 (var_cas_cpu.reader_tasks (inLexique COMMA_SOURCE_FILE_AT_LINE (604)), true) ;
    const GGS_task_map::cElement * operand_19005 = NULL ;
    while (((operand_19005 = enumerator_19005.nextObject ()))) {
      macroValidPointer (operand_19005) ;
      GGS_lstringlist  var_cas_events_used ;
      var_cas_events_used = operand_19005->mInfo.task.reader_events (inLexique COMMA_SOURCE_FILE_AT_LINE (606)) ;
      GGS_uint64  var_cas_event_mask = GGS_uint64 (0ULL) ;
      {
        GGS_lstringlist::cEnumerator enumerator_19171 (var_cas_events_used, true) ;
        const GGS_lstringlist::cElement * operand_19171 = NULL ;
        while (((operand_19171 = enumerator_19171.nextObject ()))) {
          macroValidPointer (operand_19171) ;
          GGS_event_obj  var_cas_event ;
          const GGS_event_map  temp_19242 = var_cas_cpu.reader_events (inLexique COMMA_SOURCE_FILE_AT_LINE (610)) ;
          if (temp_19242.isBuilt ()) {
            temp_19242 (HERE)->method_get (inLexique, operand_19171->mValue, var_cas_event COMMA_SOURCE_FILE_AT_LINE (610)) ;
          }
          GGS_event_mask_obj  var_cas_mask_obj ;
          var_cas_mask_obj = var_cas_event.reader_mask (inLexique COMMA_SOURCE_FILE_AT_LINE (612)) ;
          { const GGS_event_mask_obj _var_19944 = var_cas_mask_obj ; // CAST instruction
            if (_var_19944.getPtr () != NULL) {
              macroValidPointer (_var_19944.getPtr ()) ;
              if (typeid (cPtr_event_mask_user_obj) == typeid (* (_var_19944.getPtr ()))) {
                const GGS_event_mask_user_obj var_cas_emu (_var_19944.getPtr ()) ;
                const GGS_bool cond_19517 = ((var_cas_event_mask).operator_and (var_cas_emu.reader_mask (inLexique COMMA_SOURCE_FILE_AT_LINE (615)).reader_uint64 (inLexique COMMA_SOURCE_FILE_AT_LINE (615)))).operator_isEqual (GGS_uint64 (0ULL)) ;
                if (cond_19517.isBuiltAndTrue ()) {
                  var_cas_event_mask = (var_cas_event_mask).operator_or (var_cas_emu.reader_mask (inLexique COMMA_SOURCE_FILE_AT_LINE (616)).reader_uint64 (inLexique COMMA_SOURCE_FILE_AT_LINE (616))) ;
                }else if (cond_19517.isBuiltAndFalse ()) {
                  var_cas_emu.reader_mask (inLexique COMMA_SOURCE_FILE_AT_LINE (618)).reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((GGS_string ("MASK of event ")).operator_concat (operand_19171->mValue.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (618)))).operator_concat (GGS_string (" conflicts with previous declarations")) COMMA_SOURCE_FILE_AT_LINE (619)) ;
                }
              }else if (typeid (cPtr_event_mask_auto_obj) == typeid (* (_var_19944.getPtr ()))) {
                GGS_uint  var_cas_count ;
                const GGS_bool cond_19832 = var_cas_evt_usage.reader_hasKey (operand_19171->mValue.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (622))) ;
                if (cond_19832.isBuiltAndTrue ()) {
                  var_cas_evt_usage.modifier_delete (inLexique, operand_19171->mValue, var_cas_count COMMA_SOURCE_FILE_AT_LINE (623)) ;
                  var_cas_count.increment_operation (inLexique COMMA_SOURCE_FILE_AT_LINE (624)) ;
                }else if (cond_19832.isBuiltAndFalse ()) {
                  var_cas_count = GGS_uint (1U) ;
                }
                var_cas_evt_usage.modifier_insert_count (inLexique, operand_19171->mValue, var_cas_count COMMA_SOURCE_FILE_AT_LINE (628)) ;
              }else{
              }
            }
          }
          GGS_stringset  var_cas_refTasks = GGS_stringset ::constructor_emptySet () ;
          const GGS_bool cond_20108 = var_cas_tasksForEvent.reader_hasKey (operand_19171->mValue.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (632))) ;
          if (cond_20108.isBuiltAndTrue ()) {
            var_cas_tasksForEvent.modifier_delete (inLexique, operand_19171->mValue, var_cas_refTasks COMMA_SOURCE_FILE_AT_LINE (633)) ;
          }
          var_cas_refTasks.addAssign_operation (operand_19005->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (635))) ;
          var_cas_tasksForEvent.modifier_add (inLexique, operand_19171->mValue, var_cas_refTasks COMMA_SOURCE_FILE_AT_LINE (636)) ;
        }
      }
      var_cas_maskForTask.modifier_insert_mask (inLexique, operand_19005->mKey, var_cas_event_mask COMMA_SOURCE_FILE_AT_LINE (638)) ;
    }
  }
  {
    GGS_event_map::cEnumerator enumerator_20334 (var_cas_cpu.reader_events (inLexique COMMA_SOURCE_FILE_AT_LINE (644)), true) ;
    const GGS_event_map::cElement * operand_20334 = NULL ;
    while (((operand_20334 = enumerator_20334.nextObject ()))) {
      macroValidPointer (operand_20334) ;
      GGS_event_mask_obj  var_cas_eventMask = operand_20334->mInfo.event.reader_mask (inLexique COMMA_SOURCE_FILE_AT_LINE (645)) ;
      { const GGS_event_mask_obj _var_20565 = var_cas_eventMask ; // CAST instruction
        if (_var_20565.getPtr () != NULL) {
          macroValidPointer (_var_20565.getPtr ()) ;
          if (typeid (cPtr_event_mask_user_obj) == typeid (* (_var_20565.getPtr ()))) {
            const GGS_event_mask_user_obj var_cas_emu (_var_20565.getPtr ()) ;
            var_cas_eventMasks.modifier_put (inLexique, operand_20334->mKey, var_cas_emu.reader_mask (inLexique COMMA_SOURCE_FILE_AT_LINE (648)).reader_uint64 (inLexique COMMA_SOURCE_FILE_AT_LINE (648)) COMMA_SOURCE_FILE_AT_LINE (648)) ;
          }else{
          }
        }
      }
    }
  }
  GGS_sorted_events  var_cas_sortedEvents = GGS_sorted_events ::constructor_emptySortedList () ;
  {
    GGS_event_usage_map::cEnumerator enumerator_20729 (var_cas_evt_usage, true) ;
    const GGS_event_usage_map::cElement * operand_20729 = NULL ;
    while (((operand_20729 = enumerator_20729.nextObject ()))) {
      macroValidPointer (operand_20729) ;
      var_cas_sortedEvents.addAssign_operation (operand_20729->mKey, operand_20729->mInfo.count) ;
    }
  }
  {
    GGS_sorted_events::cEnumerator enumerator_20906 (var_cas_sortedEvents, true) ;
    const GGS_sorted_events::cElement * operand_20906 = NULL ;
    while (((operand_20906 = enumerator_20906.nextObject ()))) {
      macroValidPointer (operand_20906) ;
      const GGS_bool cond_22291 = var_cas_tasksForEvent.reader_hasKey (operand_20906->event_name.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (668))) ;
      if (cond_22291.isBuiltAndTrue ()) {
        GGS_stringset  var_cas_tasks ;
        if (var_cas_tasksForEvent.isBuilt ()) {
          var_cas_tasksForEvent (HERE)->method_get (inLexique, operand_20906->event_name, var_cas_tasks COMMA_SOURCE_FILE_AT_LINE (670)) ;
        }
        GGS_uint64  var_cas_mask = GGS_uint64 (0ULL) ;
        {
          GGS_stringset::cEnumerator enumerator_21081 (var_cas_tasks, true) ;
          while (enumerator_21081.hasCurrentObject ()) {
            GGS_uint64  var_cas_tm ;
            if (var_cas_maskForTask.isBuilt ()) {
              var_cas_maskForTask (HERE)->method_get_mask (inLexique, GGS_lstring ::constructor_new (inLexique, enumerator_21081._key (HERE), GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (674)), var_cas_tm COMMA_SOURCE_FILE_AT_LINE (674)) ;
            }
            var_cas_mask = (var_cas_mask).operator_or (var_cas_tm) ;
            enumerator_21081.next () ;
          }
        }
        GGS_uint64  var_cas_bit = GGS_uint64 (1ULL) ;
        GGS_uint _variant_21473 = GGS_uint (32U) ;
        GGS_bool _condition_21473 (_variant_21473.isBuilt (), true) ;
        while (_condition_21473.isBuiltAndTrue ()) {
          _condition_21473 = ((var_cas_bit).operator_strictInf (GGS_uint ::constructor_max (inLexique COMMA_SOURCE_FILE_AT_LINE (681)).reader_uint64 (inLexique COMMA_SOURCE_FILE_AT_LINE (681)))).operator_and (((var_cas_bit).operator_and ((var_cas_mask).operator_tilde ())).operator_isEqual (GGS_uint64 (0ULL))) ;
          if (_condition_21473.isBuiltAndTrue ()) {
            if (_variant_21473.uintValue () == 0) {
              inLexique.onTheFlyRunTimeError ("loop variant error" COMMA_SOURCE_FILE_AT_LINE (683)) ;
              _condition_21473 = GGS_bool (false) ;
            }else{
              _variant_21473.decrement_operation (inLexique COMMA_HERE) ;
              var_cas_bit = var_cas_bit.left_shift_operation (inLexique, GGS_uint (1U) COMMA_SOURCE_FILE_AT_LINE (682)) ;
            }
          }
        }
        const GGS_bool cond_21644 = (var_cas_bit).operator_strictSup (GGS_uint ::constructor_max (inLexique COMMA_SOURCE_FILE_AT_LINE (684)).reader_uint64 (inLexique COMMA_SOURCE_FILE_AT_LINE (684))) ;
        if (cond_21644.isBuiltAndTrue ()) {
          operand_20906->event_name.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((GGS_string ("All event mask bits are already use, event ")).operator_concat (operand_20906->event_name.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (685)))).operator_concat (GGS_string (" can't be created")) COMMA_SOURCE_FILE_AT_LINE (686)) ;
        }
        {
          GGS_stringset::cEnumerator enumerator_21768 (var_cas_tasks, true) ;
          while (enumerator_21768.hasCurrentObject ()) {
            GGS_uint64  var_cas_tm ;
            var_cas_maskForTask.modifier_del_mask (inLexique, GGS_lstring ::constructor_new (inLexique, enumerator_21768._key (HERE), GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (691)), var_cas_tm COMMA_SOURCE_FILE_AT_LINE (691)) ;
            var_cas_tm = (var_cas_bit).operator_or (var_cas_tm) ;
            var_cas_maskForTask.modifier_insert_mask (inLexique, GGS_lstring ::constructor_new (inLexique, enumerator_21768._key (HERE), GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (693)), var_cas_tm COMMA_SOURCE_FILE_AT_LINE (693)) ;
            enumerator_21768.next () ;
          }
        }
        var_cas_eventMasks.modifier_put (inLexique, operand_20906->event_name, var_cas_bit COMMA_SOURCE_FILE_AT_LINE (696)) ;
      }
    }
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_computeEvents\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//                 Implementation of routine "generate_all"                  *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_generate_all (C_Compiler & inLexique,
                                const GGS_root_obj   var_cas_cpu
                        COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_generate_all at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  GGS_string var_cas_temp_dir = function_templates_directory (inLexique, GGS_string ("code") COMMA_SOURCE_FILE_AT_LINE (720)) ;
  const GGS_bool cond_27162 = (var_cas_temp_dir).operator_isNotEqual (GGS_string ("")) ;
  if (cond_27162.isBuiltAndTrue ()) {
    GGS_string var_cas_target = gOption_goil_5F_options_target_5F_platform.reader_value () ;
    const GGS_bool cond_27074 = (var_cas_target).operator_isNotEqual (GGS_string ("")) ;
    if (cond_27074.isBuiltAndTrue ()) {
      GGS_string var_cas_types = function_template_string (inLexique, GGS_string ("code"), GGS_string ("types") COMMA_SOURCE_FILE_AT_LINE (726)) ;
      GGS_config  var_cas_cfg = GGS_config ::constructor_emptyMap (inLexique COMMA_SOURCE_FILE_AT_LINE (728)) ;
      GGS_lstring  var_cas_cfg_file = function_config_file (inLexique COMMA_SOURCE_FILE_AT_LINE (729)) ;
      const GGS_bool cond_23015 = (var_cas_cfg_file.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (730))).operator_isNotEqual (GGS_string ("")) ;
      if (cond_23015.isBuiltAndTrue ()) {
        const GGS_string _depExtension = GGS_string ("") ;
        const GGS_string _depPath = GGS_string ("") ;
        if (_depExtension.isBuilt () && _depPath.isBuilt ()) {
          C_Grammar_cfg_5F_grammar::_performSourceFileParsing_ (inLexique,
                                        _depExtension.string (),
                                        _depPath.string (),
                                        NULL,
                                        var_cas_cfg_file,
                                        var_cas_cfg
                                        COMMA_SOURCE_FILE_AT_LINE (731)) ;
        }
      }
      GGS_lstring  var_cas_extra_cfg_file = function_extra_config_file (inLexique COMMA_SOURCE_FILE_AT_LINE (734)) ;
      const GGS_bool cond_23198 = (var_cas_extra_cfg_file.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (735))).operator_isNotEqual (GGS_string ("")) ;
      if (cond_23198.isBuiltAndTrue ()) {
        const GGS_string _depExtension = GGS_string ("") ;
        const GGS_string _depPath = GGS_string ("") ;
        if (_depExtension.isBuilt () && _depPath.isBuilt ()) {
          C_Grammar_cfg_5F_grammar::_performSourceFileParsing_ (inLexique,
                                        _depExtension.string (),
                                        _depPath.string (),
                                        NULL,
                                        var_cas_extra_cfg_file,
                                        var_cas_cfg
                                        COMMA_SOURCE_FILE_AT_LINE (736)) ;
        }
      }
      GGS_os_config  var_cas_generated_conf = function_os_cfg (inLexique, var_cas_cpu COMMA_SOURCE_FILE_AT_LINE (739)) ;
      GGS_uint  var_cas_max_task_prio ;
      GGS_uint  var_cas_max_prio ;
      GGS_prio_map  var_cas_actual_prio = GGS_prio_map ::constructor_emptyMap (inLexique COMMA_SOURCE_FILE_AT_LINE (743)) ;
      ::routine_compute_actual_task_priority (inLexique,  var_cas_cpu.reader_tasks (inLexique COMMA_SOURCE_FILE_AT_LINE (745)),  var_cas_actual_prio,  var_cas_max_task_prio COMMA_SOURCE_FILE_AT_LINE (744)) ;
      ::routine_compute_actual_isr_priority (inLexique,  var_cas_cpu.reader_isrs (inLexique COMMA_SOURCE_FILE_AT_LINE (750)),  var_cas_actual_prio,  var_cas_max_task_prio,  var_cas_max_prio COMMA_SOURCE_FILE_AT_LINE (749)) ;
      GGS_prio_map  var_cas_rez_actual_prio ;
      GGS_stringMap  var_cas_rez_comments ;
      ::routine_compute_rez_priority (inLexique,  var_cas_cpu.reader_resources (inLexique COMMA_SOURCE_FILE_AT_LINE (758)),  var_cas_cpu.reader_tasks (inLexique COMMA_SOURCE_FILE_AT_LINE (759)),  var_cas_cpu.reader_isrs (inLexique COMMA_SOURCE_FILE_AT_LINE (760)),  var_cas_actual_prio,  var_cas_rez_actual_prio,  var_cas_rez_comments COMMA_SOURCE_FILE_AT_LINE (757)) ;
      GGS_prio_list  var_cas_ready_list ;
      ::routine_compute_ready_list (inLexique,  var_cas_actual_prio,  var_cas_rez_actual_prio,  var_cas_max_task_prio,  var_cas_max_prio,  var_cas_ready_list COMMA_SOURCE_FILE_AT_LINE (766)) ;
      GGS_stringMap  var_cas_app_for_obj ;
      ::routine_compute_app_for_obj (inLexique,  var_cas_cpu.reader_applis (inLexique COMMA_SOURCE_FILE_AT_LINE (775)),  var_cas_app_for_obj COMMA_SOURCE_FILE_AT_LINE (774)) ;
      ::routine_generate_types (inLexique,  var_cas_cpu.reader_tasks (inLexique COMMA_SOURCE_FILE_AT_LINE (780)),  var_cas_cpu.reader_isrs (inLexique COMMA_SOURCE_FILE_AT_LINE (781)),  var_cas_cpu.reader_alarms (inLexique COMMA_SOURCE_FILE_AT_LINE (782)),  var_cas_cpu.reader_counters (inLexique COMMA_SOURCE_FILE_AT_LINE (783)),  var_cas_cpu.reader_resources (inLexique COMMA_SOURCE_FILE_AT_LINE (784)),  var_cas_cpu.reader_scheduletables (inLexique COMMA_SOURCE_FILE_AT_LINE (785)),  var_cas_cpu.reader_applis (inLexique COMMA_SOURCE_FILE_AT_LINE (786)),  var_cas_max_prio,  var_cas_types COMMA_SOURCE_FILE_AT_LINE (779)) ;
      GGS_eventMaskMap  var_cas_eventMasks ;
      ::routine_computeEvents (inLexique,  var_cas_cpu,  var_cas_eventMasks COMMA_SOURCE_FILE_AT_LINE (791)) ;
      GGS_goilTemplateVariableMap  var_cas_sysCfg = GGS_goilTemplateVariableMap ::constructor_emptyMap (inLexique COMMA_SOURCE_FILE_AT_LINE (793)) ;
      ::routine_setEnvData (inLexique,  var_cas_cpu,  var_cas_sysCfg COMMA_SOURCE_FILE_AT_LINE (795)) ;
      ::routine_setProcessesList (inLexique,  var_cas_cpu,  var_cas_actual_prio,  var_cas_app_for_obj,  var_cas_sysCfg COMMA_SOURCE_FILE_AT_LINE (796)) ;
      ::routine_setBasicTasksList (inLexique,  var_cas_cpu,  var_cas_actual_prio,  var_cas_app_for_obj,  var_cas_sysCfg COMMA_SOURCE_FILE_AT_LINE (797)) ;
      ::routine_setExtendedTasksList (inLexique,  var_cas_cpu,  var_cas_actual_prio,  var_cas_app_for_obj,  var_cas_sysCfg COMMA_SOURCE_FILE_AT_LINE (798)) ;
      ::routine_setTasksList (inLexique,  var_cas_cpu,  var_cas_actual_prio,  var_cas_app_for_obj,  var_cas_sysCfg COMMA_SOURCE_FILE_AT_LINE (799)) ;
      ::routine_setISRs1List (inLexique,  var_cas_cpu,  var_cas_actual_prio,  var_cas_app_for_obj,  var_cas_sysCfg COMMA_SOURCE_FILE_AT_LINE (800)) ;
      ::routine_setISRs2List (inLexique,  var_cas_cpu,  var_cas_actual_prio,  var_cas_app_for_obj,  var_cas_sysCfg COMMA_SOURCE_FILE_AT_LINE (801)) ;
      ::routine_setCountersList (inLexique,  var_cas_cpu,  var_cas_app_for_obj,  var_cas_sysCfg COMMA_SOURCE_FILE_AT_LINE (802)) ;
      ::routine_setEventsList (inLexique,  var_cas_cpu,  var_cas_eventMasks,  var_cas_sysCfg COMMA_SOURCE_FILE_AT_LINE (803)) ;
      ::routine_setAlarmsList (inLexique,  var_cas_cpu,  var_cas_app_for_obj,  var_cas_sysCfg COMMA_SOURCE_FILE_AT_LINE (804)) ;
      ::routine_setResourcesList (inLexique,  var_cas_cpu,  var_cas_rez_actual_prio,  var_cas_app_for_obj,  var_cas_sysCfg COMMA_SOURCE_FILE_AT_LINE (805)) ;
      ::routine_setMessagesList (inLexique,  var_cas_cpu,  var_cas_app_for_obj,  var_cas_sysCfg COMMA_SOURCE_FILE_AT_LINE (806)) ;
      ::routine_setScheduletablesList (inLexique,  var_cas_cpu,  var_cas_app_for_obj,  var_cas_sysCfg COMMA_SOURCE_FILE_AT_LINE (807)) ;
      ::routine_setOsapplicationsList (inLexique,  var_cas_cpu,  var_cas_app_for_obj,  var_cas_sysCfg COMMA_SOURCE_FILE_AT_LINE (808)) ;
      ::routine_setProcessCount (inLexique,  var_cas_cpu,  var_cas_sysCfg COMMA_SOURCE_FILE_AT_LINE (809)) ;
      ::routine_setBuildConfig (inLexique,  var_cas_cpu,  var_cas_sysCfg COMMA_SOURCE_FILE_AT_LINE (810)) ;
      ::routine_setReadyList (inLexique,  var_cas_cpu,  var_cas_ready_list,  var_cas_sysCfg COMMA_SOURCE_FILE_AT_LINE (811)) ;
      ::routine_addBoolValue (inLexique,  var_cas_sysCfg,  GGS_lstring ::constructor_new (inLexique, GGS_string ("AUTOSAR"), GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (812)),  gOption_goil_5F_options_autosar_5F_on.reader_value () COMMA_SOURCE_FILE_AT_LINE (812)) ;
      ::routine_addUnsignedValue (inLexique,  var_cas_sysCfg,  function_lstringWith (inLexique, GGS_string ("MAXTASKPRIORITY") COMMA_SOURCE_FILE_AT_LINE (813)),  var_cas_max_task_prio.reader_uint64 (inLexique COMMA_SOURCE_FILE_AT_LINE (813)) COMMA_SOURCE_FILE_AT_LINE (813)) ;
      ::routine_setOsConfig (inLexique,  var_cas_cpu,  var_cas_sysCfg COMMA_SOURCE_FILE_AT_LINE (814)) ;
      ::routine_setInterruptSources (inLexique,  var_cas_cfg,  var_cas_sysCfg COMMA_SOURCE_FILE_AT_LINE (815)) ;
      GGS_string var_cas_apiDescriptionFile = function_templateFilePath (inLexique, GGS_string ("config"), GGS_string ("api.desc") COMMA_SOURCE_FILE_AT_LINE (822)) ;
      const GGS_bool cond_26250 = (var_cas_apiDescriptionFile).operator_isNotEqual (GGS_string ("")) ;
      if (cond_26250.isBuiltAndTrue ()) {
        const GGS_string _depExtension = GGS_string ("") ;
        const GGS_string _depPath = GGS_string ("") ;
        if (_depExtension.isBuilt () && _depPath.isBuilt ()) {
          C_Grammar_api_5F_grammar::_performSourceFileParsing_ (inLexique,
                                        _depExtension.string (),
                                        _depPath.string (),
                                        NULL,
                                        function_lstringWith (inLexique, var_cas_apiDescriptionFile COMMA_SOURCE_FILE_AT_LINE (824)),
                                        var_cas_sysCfg
                                        COMMA_SOURCE_FILE_AT_LINE (824)) ;
        }
      }else if (cond_26250.isBuiltAndFalse ()) {
        GGS_location (inLexique).reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("No api.desc file found in config templates") COMMA_SOURCE_FILE_AT_LINE (827)) ;
      }
      GGS_string var_cas_goilLog = function_computeTemplate (inLexique, GGS_string (""), var_cas_sysCfg, GGS_string ("root") COMMA_SOURCE_FILE_AT_LINE (829)) ;
      const GGS_bool cond_26536 = gOption_goil_5F_options_generate_5F_log.reader_value () ;
      if (cond_26536.isBuiltAndTrue ()) {
        if (var_cas_goilLog.isBuilt ()) {
          var_cas_goilLog (HERE)->method_writeToFile (inLexique, GGS_string ("goil.log") COMMA_SOURCE_FILE_AT_LINE (831)) ;
        }
      }
      GGS_string var_cas_directory = function_projectName (inLexique COMMA_SOURCE_FILE_AT_LINE (835)) ;
      GGS_string var_cas_types_file = GGS_string ("tpl_app_custom_types.h") ;
      GGS_uint  var_cas_error_count = GGS_uint ::constructor_errorCount (inLexique COMMA_SOURCE_FILE_AT_LINE (839)) ;
      var_cas_types_file = ((var_cas_directory).operator_concat (GGS_string ("/"))).operator_concat (var_cas_types_file) ;
      const GGS_bool cond_27059 = (var_cas_error_count).operator_isEqual (GGS_uint (0U)) ;
      if (cond_27059.isBuiltAndTrue ()) {
        const GGS_bool cond_26977 = gOption_galgas_5F_cli_5F_options_verbose_5F_output.reader_value () ;
        if (cond_26977.isBuiltAndTrue ()) {
          inLexique.printMessage (((GGS_string ("creating ")).operator_concat (var_cas_types_file)).operator_concat (GGS_string ("\n")) COMMA_SOURCE_FILE_AT_LINE (845)) ;
        }
        if (var_cas_types.isBuilt ()) {
          var_cas_types (HERE)->method_makeDirectoryAndWriteToFile (inLexique, var_cas_types_file COMMA_SOURCE_FILE_AT_LINE (847)) ;
        }
      }
    }else if (cond_27074.isBuiltAndFalse ()) {
      inLexique.printMessage (GGS_string ("No target platform given, compiling aborted\n") COMMA_SOURCE_FILE_AT_LINE (851)) ;
    }
  }else if (cond_27162.isBuiltAndFalse ()) {
    inLexique.printMessage (GGS_string ("No template directory defined, compiling aborted\n") COMMA_SOURCE_FILE_AT_LINE (854)) ;
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_generate_all\n") ;
  #endif
}

//---------------------------------------------------------------------------*

