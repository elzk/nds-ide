//---------------------------------------------------------------------------*
//                                                                           *
//                          File 'tasks_verif.cpp'                           *
//                        Generated by version 2.0.0                         *
//                       july 7th, 2010, at 17h16'14"                        *
//                                                                           *
//---------------------------------------------------------------------------*

//--- START OF USER ZONE 1


//--- END OF USER ZONE 1

//---------------------------------------------------------------------------*

#include "version_libpm.h"
#if CURRENT_LIBPM_VERSION != 820
  #error "This file has been compiled with a version of GALGAS that uses libpm version 820, different than the current version (CURRENT_LIBPM_VERSION) of libpm"
#endif

//---------------------------------------------------------------------------*

#include <typeinfo>
#include "utilities/MF_MemoryControl.h"
#include "files/C_TextFileWrite.h"
#include "galgas/C_galgas_CLI_Options.h"
#include "tasks_verif.h"

//---------------------------------------------------------------------------*

#ifndef DO_NOT_GENERATE_CHECKINGS
  #define SOURCE_FILE_AT_LINE(line) "tasks_verif.gSemantics", line
  #define COMMA_SOURCE_FILE_AT_LINE(line) , SOURCE_FILE_AT_LINE(line)
#else
  #define SOURCE_FILE_AT_LINE(line) 
  #define COMMA_SOURCE_FILE_AT_LINE(line) 
#endif


//--- START OF USER ZONE 2


//--- END OF USER ZONE 2

//---------------------------------------------------------------------------*
//                                                                           *
//              Implementation of routine "tasks_well_formed"                *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_tasks_well_formed (C_Compiler & inLexique,
                                const GGS_task_map   var_cas_tasks
                        COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_tasks_well_formed at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  {
    GGS_task_map::cEnumerator enumerator_906 (var_cas_tasks, true) ;
    const GGS_task_map::cElement * operand_906 = NULL ;
    while (((operand_906 = enumerator_906.nextObject ()))) {
      macroValidPointer (operand_906) ;
      { const GGS_basic_type _var_1102 = operand_906->mInfo.task.reader_priority (inLexique COMMA_SOURCE_FILE_AT_LINE (50)) ; // CAST instruction
        if (_var_1102.getPtr () != NULL) {
          macroValidPointer (_var_1102.getPtr ()) ;
          if (typeid (cPtr_void) == typeid (* (_var_1102.getPtr ()))) {
            operand_906->mKey.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, (GGS_string ("PRIORITY attribute not defined for TASK ")).operator_concat (operand_906->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (52))) COMMA_SOURCE_FILE_AT_LINE (53)) ;
          }else{
          }
        }
      }
      { const GGS_basic_type _var_1735 = operand_906->mInfo.task.reader_activation (inLexique COMMA_SOURCE_FILE_AT_LINE (56)) ; // CAST instruction
        if (_var_1735.getPtr () != NULL) {
          macroValidPointer (_var_1735.getPtr ()) ;
          if (typeid (cPtr_void) == typeid (* (_var_1735.getPtr ()))) {
            operand_906->mKey.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, (GGS_string ("ACTIVATION attribute not defined for TASK ")).operator_concat (operand_906->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (58))) COMMA_SOURCE_FILE_AT_LINE (59)) ;
          }else if (typeid (cPtr_uint32_class) == typeid (* (_var_1735.getPtr ()))) {
            const GGS_uint32_class var_cas_ui (_var_1735.getPtr ()) ;
            GGS_lstringlist  var_cas_defined_events = operand_906->mInfo.task.reader_events (inLexique COMMA_SOURCE_FILE_AT_LINE (60)) ;
            const GGS_bool cond_1615 = ((var_cas_defined_events.reader_length ()).operator_strictSup (GGS_uint (0U))).operator_and ((var_cas_ui.reader_value (inLexique COMMA_SOURCE_FILE_AT_LINE (61))).operator_strictSup (GGS_uint (1U))) ;
            if (cond_1615.isBuiltAndTrue ()) {
              operand_906->mKey.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((GGS_string ("ACTIVATION attribute for extended task ")).operator_concat (operand_906->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (62)))).operator_concat (GGS_string (" should be set to 1")) COMMA_SOURCE_FILE_AT_LINE (63)) ;
              var_cas_ui.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (63)).reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((GGS_string ("ACTIVATION attribute set to ")).operator_concat (var_cas_ui.reader_value (inLexique COMMA_SOURCE_FILE_AT_LINE (63)).reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (63)))).operator_concat (GGS_string (" here")) COMMA_SOURCE_FILE_AT_LINE (64)) ;
            }
          }else{
            GGS_location (inLexique).reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, (GGS_string ("Internal error, wrong datatype for ACTIVATION in task ")).operator_concat (operand_906->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (66))) COMMA_SOURCE_FILE_AT_LINE (67)) ;
          }
        }
      }
      const GGS_bool cond_1879 = (operand_906->mInfo.task.reader_schedule (inLexique COMMA_SOURCE_FILE_AT_LINE (69)).reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (69))).operator_isEqual (GGS_string ("")) ;
      if (cond_1879.isBuiltAndTrue ()) {
        operand_906->mKey.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, (GGS_string ("SCHEDULE attribute not defined for TASK ")).operator_concat (operand_906->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (70))) COMMA_SOURCE_FILE_AT_LINE (71)) ;
      }
      { const GGS_task_autostart_obj _var_2057 = operand_906->mInfo.task.reader_autostart (inLexique COMMA_SOURCE_FILE_AT_LINE (73)) ; // CAST instruction
        if (_var_2057.getPtr () != NULL) {
          macroValidPointer (_var_2057.getPtr ()) ;
          if (typeid (cPtr_task_autostart_void) == typeid (* (_var_2057.getPtr ()))) {
            operand_906->mKey.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, (GGS_string ("AUTOSTART attribute not defined for TASK ")).operator_concat (operand_906->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (75))) COMMA_SOURCE_FILE_AT_LINE (76)) ;
          }else{
          }
        }
      }
    }
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_tasks_well_formed\n") ;
  #endif
}

//---------------------------------------------------------------------------*

