//---------------------------------------------------------------------------*
//                                                                           *
//                          File 'xml_to_goil.cpp'                           *
//                 Generated by version GALGAS_BETA_VERSION                  *
//                      june 12th, 2009, at 14h44'48"                        *
//                                                                           *
//---------------------------------------------------------------------------*

//--- START OF USER ZONE 1


//--- END OF USER ZONE 1

//---------------------------------------------------------------------------*

#include "version_libpm.h"
#if LIBPM_VERSION != 502
  #error "This file has been compiled with a version of GALGAS different than the version of libpm"
#endif

//---------------------------------------------------------------------------*

#include <typeinfo>
#include "utilities/MF_MemoryControl.h"
#include "files/C_TextFileWrite.h"
#include "xml_to_goil.h"

//---------------------------------------------------------------------------*

#ifndef DO_NOT_GENERATE_CHECKINGS
  #define SOURCE_FILE_AT_LINE(line) "xml_to_goil.ggs", line
  #define COMMA_SOURCE_FILE_AT_LINE(line) , SOURCE_FILE_AT_LINE(line)
#else
  #define SOURCE_FILE_AT_LINE(line) 
  #define COMMA_SOURCE_FILE_AT_LINE(line) 
#endif


//--- START OF USER ZONE 2


//--- END OF USER ZONE 2

//---------------------------------------------------------------------------*
//                                                                           *
//                   Implementation of routine "parse_os"                    *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_parse_os (C_Compiler & inLexique,
                                const GGS_xmlNodeList   var_cas_os_elems,
                                GGS_root_obj  & var_cas_cpu COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_parse_os at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  {
    GGS_xmlNodeList::cEnumerator enumerator_754 (var_cas_os_elems, true) ;
    const GGS_xmlNodeList::cElement * operand_754 = NULL ;
    while (((operand_754 = enumerator_754.nextObject ()))) {
      macroValidPointer (operand_754) ;
      if ((function_is_elem (inLexique, operand_754->node, GGS_string ("CONTAINERS") COMMA_SOURCE_FILE_AT_LINE (38))).isBuiltAndTrue ()) {
        inLexique.printMessage (GGS_string ("CONTAINERS trouve\n") COMMA_SOURCE_FILE_AT_LINE (39)) ;
        GGS_xmlNodeList  var_cas_nl ;
        var_cas_nl = operand_754->node.reader_nodeList (inLexique COMMA_SOURCE_FILE_AT_LINE (40)) ;
        {
          GGS_xmlNodeList::cEnumerator enumerator_893 (var_cas_nl, true) ;
          const GGS_xmlNodeList::cElement * operand_893 = NULL ;
          while (((operand_893 = enumerator_893.nextObject ()))) {
            macroValidPointer (operand_893) ;
            if ((function_is_elem (inLexique, operand_893->node, GGS_string ("CONTAINER") COMMA_SOURCE_FILE_AT_LINE (42))).isBuiltAndTrue ()) {
              inLexique.printMessage (GGS_string ("CONTAINER trouve\n") COMMA_SOURCE_FILE_AT_LINE (43)) ;
              ::routine_parse_container (inLexique,  operand_893->node.reader_nodeList (inLexique COMMA_SOURCE_FILE_AT_LINE (44)),  var_cas_cpu COMMA_SOURCE_FILE_AT_LINE (44)) ;
            }
          }
        }
      }
    }
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_parse_os\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//            Implementation of function "transform_xml_to_goil"             *
//                                                                           *
//---------------------------------------------------------------------------*

GGS_root_obj  function_transform_xml_to_goil (C_Compiler & inLexique,
                                const GGS_xmlNodeList   var_cas_nodes COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER function_transform_xml_to_goil at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  GGS_root_obj  var_cas_cpu ;
  var_cas_cpu = function_void_root_obj (inLexique COMMA_SOURCE_FILE_AT_LINE (55)) ;
  if (((var_cas_nodes.reader_length (inLexique COMMA_SOURCE_FILE_AT_LINE (57))).operator_isEqual (GGS_uint (0U))).isBuiltAndTrue ()) {
    GGS_location (inLexique).reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("Empty epc file") COMMA_SOURCE_FILE_AT_LINE (59)) ;
  }else{
    GGS_bool var_cas_root_found ;
    var_cas_root_found = GGS_bool (false) ;
    {
      GGS_xmlNodeList::cEnumerator enumerator_1329 (var_cas_nodes, true) ;
      const GGS_xmlNodeList::cElement * operand_1329 = NULL ;
      while (((operand_1329 = enumerator_1329.nextObject ()))
          && ((var_cas_root_found).operator_isEqual (GGS_bool (false)).isBuiltAndTrue ())) {
        macroValidPointer (operand_1329) ;
        if ((function_is_elem (inLexique, operand_1329->node, GGS_string ("AUTOSAR") COMMA_SOURCE_FILE_AT_LINE (64))).isBuiltAndTrue ()) {
          GGS_xmlNodeList  var_cas_nl ;
          var_cas_nl = operand_1329->node.reader_nodeList (inLexique COMMA_SOURCE_FILE_AT_LINE (65)) ;
          {
            GGS_xmlNodeList::cEnumerator enumerator_1468 (var_cas_nl, true) ;
            const GGS_xmlNodeList::cElement * operand_1468 = NULL ;
            while (((operand_1468 = enumerator_1468.nextObject ()))) {
              macroValidPointer (operand_1468) ;
              if ((function_is_elem (inLexique, operand_1468->node, GGS_string ("TOP-LEVEL-PACKAGES") COMMA_SOURCE_FILE_AT_LINE (67))).isBuiltAndTrue ()) {
                GGS_xmlNodeList  var_cas_nl ;
                var_cas_nl = operand_1468->node.reader_nodeList (inLexique COMMA_SOURCE_FILE_AT_LINE (68)) ;
                {
                  GGS_xmlNodeList::cEnumerator enumerator_1596 (var_cas_nl, true) ;
                  const GGS_xmlNodeList::cElement * operand_1596 = NULL ;
                  while (((operand_1596 = enumerator_1596.nextObject ()))) {
                    macroValidPointer (operand_1596) ;
                    if ((function_is_elem (inLexique, operand_1596->node, GGS_string ("AR-PACKAGE") COMMA_SOURCE_FILE_AT_LINE (70))).isBuiltAndTrue ()) {
                      GGS_xmlNodeList  var_cas_nl ;
                      var_cas_nl = operand_1596->node.reader_nodeList (inLexique COMMA_SOURCE_FILE_AT_LINE (71)) ;
                      {
                        GGS_xmlNodeList::cEnumerator enumerator_1728 (var_cas_nl, true) ;
                        const GGS_xmlNodeList::cElement * operand_1728 = NULL ;
                        while (((operand_1728 = enumerator_1728.nextObject ()))) {
                          macroValidPointer (operand_1728) ;
                          if ((function_is_elem (inLexique, operand_1728->node, GGS_string ("ELEMENTS") COMMA_SOURCE_FILE_AT_LINE (73))).isBuiltAndTrue ()) {
                            GGS_xmlNodeList  var_cas_nl ;
                            var_cas_nl = operand_1728->node.reader_nodeList (inLexique COMMA_SOURCE_FILE_AT_LINE (74)) ;
                            {
                              GGS_xmlNodeList::cEnumerator enumerator_1870 (var_cas_nl, true) ;
                              const GGS_xmlNodeList::cElement * operand_1870 = NULL ;
                              while (((operand_1870 = enumerator_1870.nextObject ()))) {
                                macroValidPointer (operand_1870) ;
                                if ((function_is_elem (inLexique, operand_1870->node, GGS_string ("MODULE-CONFIGURATION") COMMA_SOURCE_FILE_AT_LINE (76))).isBuiltAndTrue ()) {
                                  GGS_xmlNode  var_cas_module ;
                                  var_cas_module = operand_1870->node ;
                                  GGS_xmlNodeList  var_cas_nl ;
                                  var_cas_nl = operand_1870->node.reader_nodeList (inLexique COMMA_SOURCE_FILE_AT_LINE (78)) ;
                                  {
                                    GGS_xmlNodeList::cEnumerator enumerator_2085 (var_cas_nl, true) ;
                                    const GGS_xmlNodeList::cElement * operand_2085 = NULL ;
                                    while (((operand_2085 = enumerator_2085.nextObject ()))) {
                                      macroValidPointer (operand_2085) ;
                                      if ((function_is_elem (inLexique, operand_2085->node, GGS_string ("SHORT-NAME") COMMA_SOURCE_FILE_AT_LINE (80))).isBuiltAndTrue ()) {
                                        GGS_xmlNodeList  var_cas_nl ;
                                        var_cas_nl = operand_2085->node.reader_nodeList (inLexique COMMA_SOURCE_FILE_AT_LINE (81)) ;
                                        GGS_xmlNode  var_cas_module_name ;
                                        const GGS_xmlNodeList  _temp_2302 = var_cas_nl ;
                                        if (_temp_2302.isBuilt ()) {
                                          _temp_2302 (HERE)->method_first (inLexique, var_cas_module_name COMMA_SOURCE_FILE_AT_LINE (83)) ;
                                        }
                                        if ((function_is_text (inLexique, var_cas_module_name, GGS_string ("Os_Configuration") COMMA_SOURCE_FILE_AT_LINE (84))).isBuiltAndTrue ()) {
                                          ::routine_parse_os (inLexique,  var_cas_module.reader_nodeList (inLexique COMMA_SOURCE_FILE_AT_LINE (85)),  var_cas_cpu COMMA_SOURCE_FILE_AT_LINE (85)) ;
                                          var_cas_root_found = GGS_bool (true) ;
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE function_transform_xml_to_goil\n") ;
  #endif
  return var_cas_cpu ;
}

//---------------------------------------------------------------------------*

