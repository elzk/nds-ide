//---------------------------------------------------------------------------*
//                                                                           *
//                          File 'cfg_grammar.cpp'                           *
//                        Generated by version 2.0.0                         *
//                       july 7th, 2010, at 17h17'10"                        *
//                                                                           *
//---------------------------------------------------------------------------*

//--- START OF USER ZONE 1


//--- END OF USER ZONE 1

//---------------------------------------------------------------------------*

#include "version_libpm.h"
#if CURRENT_LIBPM_VERSION != 820
  #error "This file has been compiled with a version of GALGAS that uses libpm version 820, different than the current version (CURRENT_LIBPM_VERSION) of libpm"
#endif

//---------------------------------------------------------------------------*

#include "utilities/MF_MemoryControl.h"

//---------------------------------------------------------------------------*

#include "cfg_grammar.h"

//---------------------------------------------------------------------------*

#ifndef DO_NOT_GENERATE_CHECKINGS
  #define SOURCE_FILE_AT_LINE(line) "", line
  #define COMMA_SOURCE_FILE_AT_LINE(line) , SOURCE_FILE_AT_LINE(line)
#else
  #define SOURCE_FILE_AT_LINE(line) 
  #define COMMA_SOURCE_FILE_AT_LINE(line) 
#endif

//--- START OF USER ZONE 2


//--- END OF USER ZONE 2

//---------------------------------------------------------------------------*
//                                                                           *
//              L L ( 1 )    P R O D U C T I O N    R U L E S                *
//                                                                           *
//---------------------------------------------------------------------------*

#define TERMINAL(t)     ((t)+1)
#define NONTERMINAL(nt) ((-nt)-1)
#define END_PRODUCTION  (0)

static const PMSInt16 gProductions [] = {
// At index 0 : <cfg_start>, in file 'cfg_syntax.ggs', line 38
  NONTERMINAL (3) // <select_cfg_5F_syntax_0>
, END_PRODUCTION
// At index 2 : <cfg_attrs>, in file 'cfg_syntax.ggs', line 104
, NONTERMINAL (4) // <select_cfg_5F_syntax_1>
, END_PRODUCTION
// At index 4 : <interrupts>, in file 'cfg_syntax.ggs', line 116
, TERMINAL (C_Lexique_cfg_5F_lexique::kToken_interrupts) // $interrupts$
, TERMINAL (C_Lexique_cfg_5F_lexique::kToken__5B_) // $[$
, TERMINAL (C_Lexique_cfg_5F_lexique::kToken_uint) // $uint$
, TERMINAL (C_Lexique_cfg_5F_lexique::kToken__5D_) // $]$
, TERMINAL (C_Lexique_cfg_5F_lexique::kToken__7B_) // ${$
, NONTERMINAL (5) // <select_cfg_5F_syntax_2>
, TERMINAL (C_Lexique_cfg_5F_lexique::kToken__7D_) // $}$
, TERMINAL (C_Lexique_cfg_5F_lexique::kToken__3B_) // $;$
, END_PRODUCTION
//---- Added productions from 'select' and 'repeat' instructions
// At index 13 : <select_cfg_5F_syntax_0>, in file 'cfg_syntax.ggs', line 50
, END_PRODUCTION
// At index 14 : <select_cfg_5F_syntax_0>, in file 'cfg_syntax.ggs', line 50
, TERMINAL (C_Lexique_cfg_5F_lexique::kToken_tp_5F_ns_5F_per_5F_counter_5F_tick) // $tp_ns_per_counter_tick$
, TERMINAL (C_Lexique_cfg_5F_lexique::kToken__3D_) // $=$
, TERMINAL (C_Lexique_cfg_5F_lexique::kToken_uint) // $uint$
, TERMINAL (C_Lexique_cfg_5F_lexique::kToken__3B_) // $;$
, NONTERMINAL (3) // <select_cfg_5F_syntax_0>
, END_PRODUCTION
// At index 20 : <select_cfg_5F_syntax_0>, in file 'cfg_syntax.ggs', line 50
, TERMINAL (C_Lexique_cfg_5F_lexique::kToken_stack_5F_alignment) // $stack_alignment$
, TERMINAL (C_Lexique_cfg_5F_lexique::kToken__3D_) // $=$
, TERMINAL (C_Lexique_cfg_5F_lexique::kToken_uint) // $uint$
, TERMINAL (C_Lexique_cfg_5F_lexique::kToken__3B_) // $;$
, NONTERMINAL (3) // <select_cfg_5F_syntax_0>
, END_PRODUCTION
// At index 26 : <select_cfg_5F_syntax_0>, in file 'cfg_syntax.ggs', line 50
, TERMINAL (C_Lexique_cfg_5F_lexique::kToken_task) // $task$
, TERMINAL (C_Lexique_cfg_5F_lexique::kToken__7B_) // ${$
, NONTERMINAL (1) // <cfg_attrs>
, TERMINAL (C_Lexique_cfg_5F_lexique::kToken__7D_) // $}$
, TERMINAL (C_Lexique_cfg_5F_lexique::kToken__3B_) // $;$
, NONTERMINAL (3) // <select_cfg_5F_syntax_0>
, END_PRODUCTION
// At index 33 : <select_cfg_5F_syntax_0>, in file 'cfg_syntax.ggs', line 50
, TERMINAL (C_Lexique_cfg_5F_lexique::kToken_isr) // $isr$
, TERMINAL (C_Lexique_cfg_5F_lexique::kToken__7B_) // ${$
, NONTERMINAL (1) // <cfg_attrs>
, TERMINAL (C_Lexique_cfg_5F_lexique::kToken__7D_) // $}$
, TERMINAL (C_Lexique_cfg_5F_lexique::kToken__3B_) // $;$
, NONTERMINAL (3) // <select_cfg_5F_syntax_0>
, END_PRODUCTION
// At index 40 : <select_cfg_5F_syntax_0>, in file 'cfg_syntax.ggs', line 50
, TERMINAL (C_Lexique_cfg_5F_lexique::kToken_isr_5F_code) // $isr_code$
, TERMINAL (C_Lexique_cfg_5F_lexique::kToken__7B_) // ${$
, NONTERMINAL (1) // <cfg_attrs>
, TERMINAL (C_Lexique_cfg_5F_lexique::kToken__7D_) // $}$
, TERMINAL (C_Lexique_cfg_5F_lexique::kToken__3B_) // $;$
, NONTERMINAL (3) // <select_cfg_5F_syntax_0>
, END_PRODUCTION
// At index 47 : <select_cfg_5F_syntax_0>, in file 'cfg_syntax.ggs', line 50
, TERMINAL (C_Lexique_cfg_5F_lexique::kToken_counter_5F_code) // $counter_code$
, TERMINAL (C_Lexique_cfg_5F_lexique::kToken__7B_) // ${$
, NONTERMINAL (1) // <cfg_attrs>
, TERMINAL (C_Lexique_cfg_5F_lexique::kToken__7D_) // $}$
, TERMINAL (C_Lexique_cfg_5F_lexique::kToken__3B_) // $;$
, NONTERMINAL (3) // <select_cfg_5F_syntax_0>
, END_PRODUCTION
// At index 54 : <select_cfg_5F_syntax_0>, in file 'cfg_syntax.ggs', line 50
, NONTERMINAL (2) // <interrupts>
, NONTERMINAL (3) // <select_cfg_5F_syntax_0>
, END_PRODUCTION
// At index 57 : <select_cfg_5F_syntax_1>, in file 'cfg_syntax.ggs', line 108
, END_PRODUCTION
// At index 58 : <select_cfg_5F_syntax_1>, in file 'cfg_syntax.ggs', line 108
, TERMINAL (C_Lexique_cfg_5F_lexique::kToken_idf) // $idf$
, TERMINAL (C_Lexique_cfg_5F_lexique::kToken__3D_) // $=$
, TERMINAL (C_Lexique_cfg_5F_lexique::kToken_idf) // $idf$
, TERMINAL (C_Lexique_cfg_5F_lexique::kToken__3B_) // $;$
, NONTERMINAL (4) // <select_cfg_5F_syntax_1>
, END_PRODUCTION
// At index 64 : <select_cfg_5F_syntax_2>, in file 'cfg_syntax.ggs', line 124
, END_PRODUCTION
// At index 65 : <select_cfg_5F_syntax_2>, in file 'cfg_syntax.ggs', line 124
, TERMINAL (C_Lexique_cfg_5F_lexique::kToken_idf) // $idf$
, TERMINAL (C_Lexique_cfg_5F_lexique::kToken__3D_) // $=$
, TERMINAL (C_Lexique_cfg_5F_lexique::kToken_uint) // $uint$
, TERMINAL (C_Lexique_cfg_5F_lexique::kToken__3B_) // $;$
, NONTERMINAL (5) // <select_cfg_5F_syntax_2>
, END_PRODUCTION
// At index 71 : <>, in file '.ggs', line 0
, NONTERMINAL (0) // <cfg_start>
, END_PRODUCTION
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                     P R O D U C T I O N    N A M E S                      *
//                                                                           *
//---------------------------------------------------------------------------*

static const cProductionNameDescriptor gProductionNames [16] = {
 {"<cfg_start>", "cfg_syntax", 0}, // at index 0
 {"<cfg_attrs>", "cfg_syntax", 2}, // at index 1
 {"<interrupts>", "cfg_syntax", 4}, // at index 2
 {"<select_cfg_5F_syntax_0>", "cfg_syntax", 13}, // at index 3
 {"<select_cfg_5F_syntax_0>", "cfg_syntax", 14}, // at index 4
 {"<select_cfg_5F_syntax_0>", "cfg_syntax", 20}, // at index 5
 {"<select_cfg_5F_syntax_0>", "cfg_syntax", 26}, // at index 6
 {"<select_cfg_5F_syntax_0>", "cfg_syntax", 33}, // at index 7
 {"<select_cfg_5F_syntax_0>", "cfg_syntax", 40}, // at index 8
 {"<select_cfg_5F_syntax_0>", "cfg_syntax", 47}, // at index 9
 {"<select_cfg_5F_syntax_0>", "cfg_syntax", 54}, // at index 10
 {"<select_cfg_5F_syntax_1>", "cfg_syntax", 57}, // at index 11
 {"<select_cfg_5F_syntax_1>", "cfg_syntax", 58}, // at index 12
 {"<select_cfg_5F_syntax_2>", "cfg_syntax", 64}, // at index 13
 {"<select_cfg_5F_syntax_2>", "cfg_syntax", 65}, // at index 14
 {"<>", "", 71} // at index 15
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//            L L ( 1 )    P R O D U C T I O N    I N D E X E S              *
//                                                                           *
//---------------------------------------------------------------------------*

static const PMSInt16 gProductionIndexes [16] = {
0, // index 0 : <cfg_start>, in file 'cfg_syntax.ggs', line 38
2, // index 1 : <cfg_attrs>, in file 'cfg_syntax.ggs', line 104
4, // index 2 : <interrupts>, in file 'cfg_syntax.ggs', line 116
13, // index 3 : <select_cfg_5F_syntax_0>, in file 'cfg_syntax.ggs', line 50
14, // index 4 : <select_cfg_5F_syntax_0>, in file 'cfg_syntax.ggs', line 50
20, // index 5 : <select_cfg_5F_syntax_0>, in file 'cfg_syntax.ggs', line 50
26, // index 6 : <select_cfg_5F_syntax_0>, in file 'cfg_syntax.ggs', line 50
33, // index 7 : <select_cfg_5F_syntax_0>, in file 'cfg_syntax.ggs', line 50
40, // index 8 : <select_cfg_5F_syntax_0>, in file 'cfg_syntax.ggs', line 50
47, // index 9 : <select_cfg_5F_syntax_0>, in file 'cfg_syntax.ggs', line 50
54, // index 10 : <select_cfg_5F_syntax_0>, in file 'cfg_syntax.ggs', line 50
57, // index 11 : <select_cfg_5F_syntax_1>, in file 'cfg_syntax.ggs', line 108
58, // index 12 : <select_cfg_5F_syntax_1>, in file 'cfg_syntax.ggs', line 108
64, // index 13 : <select_cfg_5F_syntax_2>, in file 'cfg_syntax.ggs', line 124
65, // index 14 : <select_cfg_5F_syntax_2>, in file 'cfg_syntax.ggs', line 124
71 // index 15 : <>, in file '.ggs', line 0
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//      L L ( 1 )    F I R S T    P R O D U C T I O N    I N D E X E S       *
//                                                                           *
//---------------------------------------------------------------------------*

static const PMSInt16 gFirstProductionIndexes [8] = {
0, // at 0 : <cfg_start>
1, // at 1 : <cfg_attrs>
2, // at 2 : <interrupts>
3, // at 3 : <select_cfg_5F_syntax_0>
11, // at 4 : <select_cfg_5F_syntax_1>
13, // at 5 : <select_cfg_5F_syntax_2>
15, // at 6 : <>
0} ;

//---------------------------------------------------------------------------*
//                                                                           *
//               L L ( 1 )    D E C I S I O N    T A B L E S                 *
//                                                                           *
//---------------------------------------------------------------------------*

static const PMSInt16 gDecision [] = {
// At index 0 : <cfg_start> only one production, no choice
  -1,
// At index 1 : <cfg_attrs> only one production, no choice
  -1,
// At index 2 : <interrupts> only one production, no choice
  -1,
//---- Added non terminal symbols from 'select' and 'repeat' instructions
// At index 3 : <select_cfg_5F_syntax_0>
C_Lexique_cfg_5F_lexique::kToken_, -1, // Choice 1
C_Lexique_cfg_5F_lexique::kToken_tp_5F_ns_5F_per_5F_counter_5F_tick, -1, // Choice 2
C_Lexique_cfg_5F_lexique::kToken_stack_5F_alignment, -1, // Choice 3
C_Lexique_cfg_5F_lexique::kToken_task, -1, // Choice 4
C_Lexique_cfg_5F_lexique::kToken_isr, -1, // Choice 5
C_Lexique_cfg_5F_lexique::kToken_isr_5F_code, -1, // Choice 6
C_Lexique_cfg_5F_lexique::kToken_counter_5F_code, -1, // Choice 7
C_Lexique_cfg_5F_lexique::kToken_interrupts, -1, // Choice 8
  -1,
// At index 20 : <select_cfg_5F_syntax_1>
C_Lexique_cfg_5F_lexique::kToken__7D_, -1, // Choice 1
C_Lexique_cfg_5F_lexique::kToken_idf, -1, // Choice 2
  -1,
// At index 25 : <select_cfg_5F_syntax_2>
C_Lexique_cfg_5F_lexique::kToken__7D_, -1, // Choice 1
C_Lexique_cfg_5F_lexique::kToken_idf, -1, // Choice 2
  -1,
// At index 30 : <> only one production, no choice
  -1,
0} ;

//---------------------------------------------------------------------------*
//                                                                           *
//       L L ( 1 )    D E C I S I O N    T A B L E S    I N D E X E S        *
//                                                                           *
//---------------------------------------------------------------------------*

static const PMSInt16 gDecisionIndexes [8] = {
0, // at 0 : <cfg_start>
1, // at 1 : <cfg_attrs>
2, // at 2 : <interrupts>
3, // at 3 : <select_cfg_5F_syntax_0>
20, // at 4 : <select_cfg_5F_syntax_1>
25, // at 5 : <select_cfg_5F_syntax_2>
30, // at 6 : <>
0} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                 'cfg_start' non terminal implementation                   *
//                                                                           *
//---------------------------------------------------------------------------*

void C_Grammar_cfg_5F_grammar::
nt_cfg_5F_start_ (C_Lexique_cfg_5F_lexique & inLexique,
                                GGS_config & parameter_1) {
  rule_cfg_5F_syntax_cfg_5F_start_i0_(inLexique, parameter_1) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                   Grammar start symbol implementation                     *
//                                                                           *
//---------------------------------------------------------------------------*

void C_Grammar_cfg_5F_grammar::_performSourceFileParsing_ (C_Compiler & inCompiler,
                                const C_String & inDependancyExtension,
                                const C_String & inDependancyPath,
                                GGS_string * inSentStringPtr,
                                const GGS_lstring inFilePath,
                                GGS_config & parameter_1
                                COMMA_LOCATION_ARGS) {
  const C_String sourceFileName = inFilePath.string ().isAbsolutePath ()
    ? inFilePath.string ()
    : inCompiler.sourceFileName ().stringByDeletingLastPathComponent ().stringByAppendingPathComponent (inFilePath.string ()) ;
  if (sourceFileName.fileExists ()) {
    C_Lexique_cfg_5F_lexique * scanner = NULL ;
    macroMyNew (scanner, C_Lexique_cfg_5F_lexique (& inCompiler, inDependancyExtension, inDependancyPath, inCompiler.ioParametersPtr (), sourceFileName COMMA_HERE)) ;
    macroRetainObject (scanner) ;
    if (scanner->needsCompiling ()) {
      if (scanner->sourceText () != NULL) {
        scanner->mPerformGeneration = inCompiler.mPerformGeneration ;
        const bool ok = scanner->performTopDownParsing (gProductions, gProductionNames, gProductionIndexes,
                                                         gFirstProductionIndexes, gDecision, gDecisionIndexes, 71) ;
        if (ok && ! scanner->mParseOnlyFlag) {
          C_Grammar_cfg_5F_grammar _grammar ;
          _grammar.nt_cfg_5F_start_ (*scanner, parameter_1) ;
          if (inSentStringPtr != NULL) {
            inSentStringPtr->dotAssign_operation (scanner->sentStringEX ()) ;
          }
        }
      }else{
        C_String message ;
        message << "the '" << sourceFileName << "' file exits, but cannot be read" ;
        inFilePath.signalSemanticError (inCompiler, message COMMA_THERE) ;
        parameter_1.drop () ;
      }
    }
    macroReleaseObject (scanner) ;
  }else{
    C_String message ;
    message << "the '" << sourceFileName << "' file does not exist" ;
    inFilePath.signalSemanticError (inCompiler, message COMMA_THERE) ;
    parameter_1.drop () ;
  }
}

//---------------------------------------------------------------------------*

void C_Grammar_cfg_5F_grammar::_performSourceStringParsing_ (C_Compiler & inCompiler,
                                GGS_string * inSentStringPtr,
                                const GGS_string inSourceString,
                                GGS_config & parameter_1
                                COMMA_UNUSED_LOCATION_ARGS) {
  C_Lexique_cfg_5F_lexique * scanner = NULL ;
  macroMyNew (scanner, C_Lexique_cfg_5F_lexique (& inCompiler, inCompiler.ioParametersPtr (), inSourceString.string (), "Error when parsing dynamic string" COMMA_HERE)) ;
  macroRetainObject (scanner) ;
  scanner->mPerformGeneration = inCompiler.mPerformGeneration ;
  const bool ok = scanner->performTopDownParsing (gProductions, gProductionNames, gProductionIndexes,
                                                   gFirstProductionIndexes, gDecision, gDecisionIndexes, 71) ;
  if (ok && ! scanner->mParseOnlyFlag) {
    C_Grammar_cfg_5F_grammar _grammar ;
    _grammar.nt_cfg_5F_start_ (*scanner, parameter_1) ;
    if (inSentStringPtr != NULL) {
      inSentStringPtr->dotAssign_operation (scanner->sentStringEX ()) ;
    }
  }
  macroReleaseObject (scanner) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                 'cfg_attrs' non terminal implementation                   *
//                                                                           *
//---------------------------------------------------------------------------*

void C_Grammar_cfg_5F_grammar::
nt_cfg_5F_attrs_ (C_Lexique_cfg_5F_lexique & inLexique,
                                GGS_cfg_attrs & parameter_1) {
  rule_cfg_5F_syntax_cfg_5F_attrs_i1_(inLexique, parameter_1) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                 'interrupts' non terminal implementation                  *
//                                                                           *
//---------------------------------------------------------------------------*

void C_Grammar_cfg_5F_grammar::
nt_interrupts_ (C_Lexique_cfg_5F_lexique & inLexique,
                                GGS_basic_type & parameter_1) {
  rule_cfg_5F_syntax_interrupts_i2_(inLexique, parameter_1) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//        'select_cfg_5F_syntax_0' added non terminal implementation         *
//                                                                           *
//---------------------------------------------------------------------------*

PMSInt16 C_Grammar_cfg_5F_grammar::select_cfg_5F_syntax_0 (C_Lexique_cfg_5F_lexique & inLexique) {
  return inLexique.nextProductionIndex () ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//        'select_cfg_5F_syntax_1' added non terminal implementation         *
//                                                                           *
//---------------------------------------------------------------------------*

PMSInt16 C_Grammar_cfg_5F_grammar::select_cfg_5F_syntax_1 (C_Lexique_cfg_5F_lexique & inLexique) {
  return inLexique.nextProductionIndex () ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//        'select_cfg_5F_syntax_2' added non terminal implementation         *
//                                                                           *
//---------------------------------------------------------------------------*

PMSInt16 C_Grammar_cfg_5F_grammar::select_cfg_5F_syntax_2 (C_Lexique_cfg_5F_lexique & inLexique) {
  return inLexique.nextProductionIndex () ;
}

//---------------------------------------------------------------------------*

