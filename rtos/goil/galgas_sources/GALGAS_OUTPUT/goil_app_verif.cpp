//---------------------------------------------------------------------------*
//                                                                           *
//                        File 'goil_app_verif.cpp'                          *
//                        Generated by version 2.0.0                         *
//                       july 7th, 2010, at 17h16'15"                        *
//                                                                           *
//---------------------------------------------------------------------------*

//--- START OF USER ZONE 1


//--- END OF USER ZONE 1

//---------------------------------------------------------------------------*

#include "version_libpm.h"
#if CURRENT_LIBPM_VERSION != 820
  #error "This file has been compiled with a version of GALGAS that uses libpm version 820, different than the current version (CURRENT_LIBPM_VERSION) of libpm"
#endif

//---------------------------------------------------------------------------*

#include <typeinfo>
#include "utilities/MF_MemoryControl.h"
#include "files/C_TextFileWrite.h"
#include "galgas/C_galgas_CLI_Options.h"
#include "goil_app_verif.h"

//---------------------------------------------------------------------------*

#ifndef DO_NOT_GENERATE_CHECKINGS
  #define SOURCE_FILE_AT_LINE(line) "goil_app_verif.gSemantics", line
  #define COMMA_SOURCE_FILE_AT_LINE(line) , SOURCE_FILE_AT_LINE(line)
#else
  #define SOURCE_FILE_AT_LINE(line) 
  #define COMMA_SOURCE_FILE_AT_LINE(line) 
#endif


//--- START OF USER ZONE 2


//--- END OF USER ZONE 2

//---------------------------------------------------------------------------*
//                                                                           *
//                Implementation of routine "object_exists"                  *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_object_exists (C_Compiler & inLexique,
                                GGS_stringset   var_cas_def,
                                GGS_lstringlist   var_cas_ref,
                                GGS_string  var_cas_obj_type
                        COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_object_exists at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  {
    GGS_lstringlist::cEnumerator enumerator_496 (var_cas_ref, true) ;
    const GGS_lstringlist::cElement * operand_496 = NULL ;
    while (((operand_496 = enumerator_496.nextObject ()))) {
      macroValidPointer (operand_496) ;
      const GGS_bool cond_632 = (var_cas_def.reader_hasKey (operand_496->mValue.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (17)))).operator_not () ;
      if (cond_632.isBuiltAndTrue ()) {
        operand_496->mValue.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, (((var_cas_obj_type).operator_concat (GGS_string (" "))).operator_concat (operand_496->mValue.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (18)))).operator_concat (GGS_string (" referenced does not exist")) COMMA_SOURCE_FILE_AT_LINE (19)) ;
      }
    }
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_object_exists\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//                Implementation of routine "object_in_one"                  *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_object_in_one (C_Compiler & inLexique,
                                GGS_lstringlist  & var_cas_objects,
                                GGS_lstring   var_cas_sName,
                                GGS_string  var_cas_kind
                        COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_object_in_one at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  GGS_bool var_cas_not_found = GGS_bool (true) ;
  {
    GGS_lstringlist::cEnumerator enumerator_808 (var_cas_objects, true) ;
    const GGS_lstringlist::cElement * operand_808 = NULL ;
    while (((operand_808 = enumerator_808.nextObject ()))) {
      macroValidPointer (operand_808) ;
      const GGS_bool cond_1075 = (operand_808->mValue.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (31))).operator_isEqual (var_cas_sName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (31))) ;
      if (cond_1075.isBuiltAndTrue ()) {
        var_cas_not_found = GGS_bool (false) ;
        var_cas_sName.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, (((var_cas_kind).operator_concat (GGS_string (" "))).operator_concat (var_cas_sName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (33)))).operator_concat (GGS_string (" is already part of an OS Application")) COMMA_SOURCE_FILE_AT_LINE (34)) ;
        operand_808->mValue.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("It has been declared here") COMMA_SOURCE_FILE_AT_LINE (35)) ;
      }
    }
  }
  const GGS_bool cond_1147 = var_cas_not_found ;
  if (cond_1147.isBuiltAndTrue ()) {
    var_cas_objects.addAssign_operation (var_cas_sName) ;
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_object_in_one\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//              Implementation of routine "object_not_in_any"                *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_object_not_in_any (C_Compiler & inLexique,
                                GGS_lstringlist   var_cas_objs,
                                GGS_stringset   var_cas_app_objs,
                                GGS_string  var_cas_obj_kind
                        COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_object_not_in_any at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  {
    GGS_lstringlist::cEnumerator enumerator_1281 (var_cas_objs, true) ;
    const GGS_lstringlist::cElement * operand_1281 = NULL ;
    while (((operand_1281 = enumerator_1281.nextObject ()))) {
      macroValidPointer (operand_1281) ;
      GGS_string var_cas_name = operand_1281->mValue.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (49)) ;
      const GGS_bool cond_1467 = (var_cas_app_objs.reader_hasKey (var_cas_name)).operator_not () ;
      if (cond_1467.isBuiltAndTrue ()) {
        operand_1281->mValue.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, (((var_cas_obj_kind).operator_concat (GGS_string (" "))).operator_concat (var_cas_name)).operator_concat (GGS_string (" does not belong to any OS Application")) COMMA_SOURCE_FILE_AT_LINE (52)) ;
      }
    }
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_object_not_in_any\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//               Implementation of routine "apps_well_formed"                *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_apps_well_formed (C_Compiler & inLexique,
                                const GGS_root_obj   var_cas_cpu
                        COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_apps_well_formed at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  GGS_app_map  var_cas_apps = var_cas_cpu.reader_applis (inLexique COMMA_SOURCE_FILE_AT_LINE (67)) ;
  GGS_task_map  var_cas_tasks = var_cas_cpu.reader_tasks (inLexique COMMA_SOURCE_FILE_AT_LINE (68)) ;
  GGS_isr_map  var_cas_isrs = var_cas_cpu.reader_isrs (inLexique COMMA_SOURCE_FILE_AT_LINE (69)) ;
  GGS_alarm_map  var_cas_alarms = var_cas_cpu.reader_alarms (inLexique COMMA_SOURCE_FILE_AT_LINE (70)) ;
  GGS_scheduletable_map  var_cas_schedtables = var_cas_cpu.reader_scheduletables (inLexique COMMA_SOURCE_FILE_AT_LINE (71)) ;
  GGS_counter_map  var_cas_counters = var_cas_cpu.reader_counters (inLexique COMMA_SOURCE_FILE_AT_LINE (72)) ;
  GGS_resource_map  var_cas_resources = var_cas_cpu.reader_resources (inLexique COMMA_SOURCE_FILE_AT_LINE (73)) ;
  GGS_message_map  var_cas_messages = var_cas_cpu.reader_messages (inLexique COMMA_SOURCE_FILE_AT_LINE (74)) ;
  const GGS_bool cond_17794 = (var_cas_apps.reader_count ()).operator_strictSup (GGS_uint (0U)) ;
  if (cond_17794.isBuiltAndTrue ()) {
    {
      GGS_app_map::cEnumerator enumerator_2315 (var_cas_apps, true) ;
      const GGS_app_map::cElement * operand_2315 = NULL ;
      while (((operand_2315 = enumerator_2315.nextObject ()))) {
        macroValidPointer (operand_2315) ;
        ::routine_object_exists (inLexique,  var_cas_tasks.reader_allKeys (inLexique COMMA_SOURCE_FILE_AT_LINE (79)),  operand_2315->mInfo.app.reader_tasks (inLexique COMMA_SOURCE_FILE_AT_LINE (79)).reader_allKeyList (inLexique COMMA_SOURCE_FILE_AT_LINE (79)),  GGS_string ("Task") COMMA_SOURCE_FILE_AT_LINE (79)) ;
        ::routine_object_exists (inLexique,  var_cas_isrs.reader_allKeys (inLexique COMMA_SOURCE_FILE_AT_LINE (80)),  operand_2315->mInfo.app.reader_isrs (inLexique COMMA_SOURCE_FILE_AT_LINE (80)).reader_allKeyList (inLexique COMMA_SOURCE_FILE_AT_LINE (80)),  GGS_string ("ISR") COMMA_SOURCE_FILE_AT_LINE (80)) ;
        ::routine_object_exists (inLexique,  var_cas_alarms.reader_allKeys (inLexique COMMA_SOURCE_FILE_AT_LINE (81)),  operand_2315->mInfo.app.reader_alarms (inLexique COMMA_SOURCE_FILE_AT_LINE (81)).reader_allKeyList (inLexique COMMA_SOURCE_FILE_AT_LINE (81)),  GGS_string ("Alarm") COMMA_SOURCE_FILE_AT_LINE (81)) ;
        ::routine_object_exists (inLexique,  var_cas_schedtables.reader_allKeys (inLexique COMMA_SOURCE_FILE_AT_LINE (82)),  operand_2315->mInfo.app.reader_scheduletables (inLexique COMMA_SOURCE_FILE_AT_LINE (82)).reader_allKeyList (inLexique COMMA_SOURCE_FILE_AT_LINE (82)),  GGS_string ("Schedule Table") COMMA_SOURCE_FILE_AT_LINE (82)) ;
        ::routine_object_exists (inLexique,  var_cas_counters.reader_allKeys (inLexique COMMA_SOURCE_FILE_AT_LINE (83)),  operand_2315->mInfo.app.reader_counters (inLexique COMMA_SOURCE_FILE_AT_LINE (83)).reader_allKeyList (inLexique COMMA_SOURCE_FILE_AT_LINE (83)),  GGS_string ("Counter") COMMA_SOURCE_FILE_AT_LINE (83)) ;
        ::routine_object_exists (inLexique,  var_cas_resources.reader_allKeys (inLexique COMMA_SOURCE_FILE_AT_LINE (84)),  operand_2315->mInfo.app.reader_resources (inLexique COMMA_SOURCE_FILE_AT_LINE (84)).reader_allKeyList (inLexique COMMA_SOURCE_FILE_AT_LINE (84)),  GGS_string ("Resource") COMMA_SOURCE_FILE_AT_LINE (84)) ;
      }
    }
    GGS_stringset  var_cas_all_apps = var_cas_apps.reader_allKeys (inLexique COMMA_SOURCE_FILE_AT_LINE (89)) ;
    {
      GGS_task_map::cEnumerator enumerator_3024 (var_cas_tasks, true) ;
      const GGS_task_map::cElement * operand_3024 = NULL ;
      while (((operand_3024 = enumerator_3024.nextObject ()))) {
        macroValidPointer (operand_3024) ;
        ::routine_object_exists (inLexique,  var_cas_all_apps,  operand_3024->mInfo.task.reader_acc_apps (inLexique COMMA_SOURCE_FILE_AT_LINE (91)),  GGS_string ("Application") COMMA_SOURCE_FILE_AT_LINE (91)) ;
      }
    }
    {
      GGS_isr_map::cEnumerator enumerator_3126 (var_cas_isrs, true) ;
      const GGS_isr_map::cElement * operand_3126 = NULL ;
      while (((operand_3126 = enumerator_3126.nextObject ()))) {
        macroValidPointer (operand_3126) ;
        ::routine_object_exists (inLexique,  var_cas_all_apps,  operand_3126->mInfo.isr.reader_acc_apps (inLexique COMMA_SOURCE_FILE_AT_LINE (94)),  GGS_string ("Application") COMMA_SOURCE_FILE_AT_LINE (94)) ;
      }
    }
    {
      GGS_alarm_map::cEnumerator enumerator_3229 (var_cas_alarms, true) ;
      const GGS_alarm_map::cElement * operand_3229 = NULL ;
      while (((operand_3229 = enumerator_3229.nextObject ()))) {
        macroValidPointer (operand_3229) ;
        ::routine_object_exists (inLexique,  var_cas_all_apps,  operand_3229->mInfo.alarm.reader_acc_apps (inLexique COMMA_SOURCE_FILE_AT_LINE (97)),  GGS_string ("Application") COMMA_SOURCE_FILE_AT_LINE (97)) ;
      }
    }
    {
      GGS_scheduletable_map::cEnumerator enumerator_3339 (var_cas_schedtables, true) ;
      const GGS_scheduletable_map::cElement * operand_3339 = NULL ;
      while (((operand_3339 = enumerator_3339.nextObject ()))) {
        macroValidPointer (operand_3339) ;
        ::routine_object_exists (inLexique,  var_cas_all_apps,  operand_3339->mInfo.scheduletable.reader_acc_apps (inLexique COMMA_SOURCE_FILE_AT_LINE (100)),  GGS_string ("Application") COMMA_SOURCE_FILE_AT_LINE (100)) ;
      }
    }
    {
      GGS_counter_map::cEnumerator enumerator_3454 (var_cas_counters, true) ;
      const GGS_counter_map::cElement * operand_3454 = NULL ;
      while (((operand_3454 = enumerator_3454.nextObject ()))) {
        macroValidPointer (operand_3454) ;
        ::routine_object_exists (inLexique,  var_cas_all_apps,  operand_3454->mInfo.counter.reader_acc_apps (inLexique COMMA_SOURCE_FILE_AT_LINE (103)),  GGS_string ("Application") COMMA_SOURCE_FILE_AT_LINE (103)) ;
      }
    }
    {
      GGS_resource_map::cEnumerator enumerator_3564 (var_cas_resources, true) ;
      const GGS_resource_map::cElement * operand_3564 = NULL ;
      while (((operand_3564 = enumerator_3564.nextObject ()))) {
        macroValidPointer (operand_3564) ;
        ::routine_object_exists (inLexique,  var_cas_all_apps,  operand_3564->mInfo.resource.reader_acc_apps (inLexique COMMA_SOURCE_FILE_AT_LINE (106)),  GGS_string ("Application") COMMA_SOURCE_FILE_AT_LINE (106)) ;
      }
    }
    {
      GGS_message_map::cEnumerator enumerator_3674 (var_cas_messages, true) ;
      const GGS_message_map::cElement * operand_3674 = NULL ;
      while (((operand_3674 = enumerator_3674.nextObject ()))) {
        macroValidPointer (operand_3674) ;
        ::routine_object_exists (inLexique,  var_cas_all_apps,  operand_3674->mInfo.mess.reader_acc_apps (inLexique COMMA_SOURCE_FILE_AT_LINE (109)),  GGS_string ("Application") COMMA_SOURCE_FILE_AT_LINE (109)) ;
      }
    }
    GGS_lstringlist  var_cas_objects = GGS_lstringlist ::constructor_emptyList () ;
    {
      GGS_app_map::cEnumerator enumerator_3866 (var_cas_apps, true) ;
      const GGS_app_map::cElement * operand_3866 = NULL ;
      while (((operand_3866 = enumerator_3866.nextObject ()))) {
        macroValidPointer (operand_3866) ;
        {
          GGS_ident_map::cEnumerator enumerator_3885 (operand_3866->mInfo.app.reader_tasks (inLexique COMMA_SOURCE_FILE_AT_LINE (115)), true) ;
          const GGS_ident_map::cElement * operand_3885 = NULL ;
          while (((operand_3885 = enumerator_3885.nextObject ()))) {
            macroValidPointer (operand_3885) ;
            ::routine_object_in_one (inLexique,  var_cas_objects,  operand_3885->mKey,  GGS_string ("TASK") COMMA_SOURCE_FILE_AT_LINE (115)) ;
          }
        }
        {
          GGS_ident_map::cEnumerator enumerator_3968 (operand_3866->mInfo.app.reader_isrs (inLexique COMMA_SOURCE_FILE_AT_LINE (116)), true) ;
          const GGS_ident_map::cElement * operand_3968 = NULL ;
          while (((operand_3968 = enumerator_3968.nextObject ()))) {
            macroValidPointer (operand_3968) ;
            ::routine_object_in_one (inLexique,  var_cas_objects,  operand_3968->mKey,  GGS_string ("ISR") COMMA_SOURCE_FILE_AT_LINE (116)) ;
          }
        }
        {
          GGS_ident_map::cEnumerator enumerator_4049 (operand_3866->mInfo.app.reader_alarms (inLexique COMMA_SOURCE_FILE_AT_LINE (117)), true) ;
          const GGS_ident_map::cElement * operand_4049 = NULL ;
          while (((operand_4049 = enumerator_4049.nextObject ()))) {
            macroValidPointer (operand_4049) ;
            ::routine_object_in_one (inLexique,  var_cas_objects,  operand_4049->mKey,  GGS_string ("ALARM") COMMA_SOURCE_FILE_AT_LINE (117)) ;
          }
        }
        {
          GGS_ident_map::cEnumerator enumerator_4134 (operand_3866->mInfo.app.reader_scheduletables (inLexique COMMA_SOURCE_FILE_AT_LINE (118)), true) ;
          const GGS_ident_map::cElement * operand_4134 = NULL ;
          while (((operand_4134 = enumerator_4134.nextObject ()))) {
            macroValidPointer (operand_4134) ;
            ::routine_object_in_one (inLexique,  var_cas_objects,  operand_4134->mKey,  GGS_string ("SCHEDULETABLE") COMMA_SOURCE_FILE_AT_LINE (118)) ;
          }
        }
        {
          GGS_ident_map::cEnumerator enumerator_4235 (operand_3866->mInfo.app.reader_counters (inLexique COMMA_SOURCE_FILE_AT_LINE (119)), true) ;
          const GGS_ident_map::cElement * operand_4235 = NULL ;
          while (((operand_4235 = enumerator_4235.nextObject ()))) {
            macroValidPointer (operand_4235) ;
            ::routine_object_in_one (inLexique,  var_cas_objects,  operand_4235->mKey,  GGS_string ("COUNTER") COMMA_SOURCE_FILE_AT_LINE (119)) ;
          }
        }
        {
          GGS_ident_map::cEnumerator enumerator_4324 (operand_3866->mInfo.app.reader_resources (inLexique COMMA_SOURCE_FILE_AT_LINE (120)), true) ;
          const GGS_ident_map::cElement * operand_4324 = NULL ;
          while (((operand_4324 = enumerator_4324.nextObject ()))) {
            macroValidPointer (operand_4324) ;
            ::routine_object_in_one (inLexique,  var_cas_objects,  operand_4324->mKey,  GGS_string ("RESOURCE") COMMA_SOURCE_FILE_AT_LINE (120)) ;
          }
        }
      }
    }
    GGS_stringset  var_cas_all_tasks_in_app = GGS_stringset ::constructor_emptySet () ;
    GGS_stringset  var_cas_all_isrs_in_app = GGS_stringset ::constructor_emptySet () ;
    GGS_stringset  var_cas_all_alarms_in_app = GGS_stringset ::constructor_emptySet () ;
    GGS_stringset  var_cas_all_sts_in_app = GGS_stringset ::constructor_emptySet () ;
    GGS_stringset  var_cas_all_cnts_in_app = GGS_stringset ::constructor_emptySet () ;
    GGS_stringset  var_cas_all_rezs_in_app = GGS_stringset ::constructor_emptySet () ;
    {
      GGS_app_map::cEnumerator enumerator_4841 (var_cas_apps, true) ;
      const GGS_app_map::cElement * operand_4841 = NULL ;
      while (((operand_4841 = enumerator_4841.nextObject ()))) {
        macroValidPointer (operand_4841) ;
        var_cas_all_tasks_in_app = (var_cas_all_tasks_in_app).operator_or (operand_4841->mInfo.app.reader_tasks (inLexique COMMA_SOURCE_FILE_AT_LINE (133)).reader_allKeys (inLexique COMMA_SOURCE_FILE_AT_LINE (133))) ;
        var_cas_all_isrs_in_app = (var_cas_all_isrs_in_app).operator_or (operand_4841->mInfo.app.reader_isrs (inLexique COMMA_SOURCE_FILE_AT_LINE (134)).reader_allKeys (inLexique COMMA_SOURCE_FILE_AT_LINE (134))) ;
        var_cas_all_alarms_in_app = (var_cas_all_alarms_in_app).operator_or (operand_4841->mInfo.app.reader_alarms (inLexique COMMA_SOURCE_FILE_AT_LINE (135)).reader_allKeys (inLexique COMMA_SOURCE_FILE_AT_LINE (135))) ;
        var_cas_all_sts_in_app = (var_cas_all_sts_in_app).operator_or (operand_4841->mInfo.app.reader_scheduletables (inLexique COMMA_SOURCE_FILE_AT_LINE (136)).reader_allKeys (inLexique COMMA_SOURCE_FILE_AT_LINE (136))) ;
        var_cas_all_cnts_in_app = (var_cas_all_cnts_in_app).operator_or (operand_4841->mInfo.app.reader_counters (inLexique COMMA_SOURCE_FILE_AT_LINE (137)).reader_allKeys (inLexique COMMA_SOURCE_FILE_AT_LINE (137))) ;
        var_cas_all_rezs_in_app = (var_cas_all_rezs_in_app).operator_or (operand_4841->mInfo.app.reader_resources (inLexique COMMA_SOURCE_FILE_AT_LINE (138)).reader_allKeys (inLexique COMMA_SOURCE_FILE_AT_LINE (138))) ;
      }
    }
    ::routine_object_not_in_any (inLexique,  var_cas_tasks.reader_allKeyList (inLexique COMMA_SOURCE_FILE_AT_LINE (142)),  var_cas_all_tasks_in_app,  GGS_string ("TASK") COMMA_SOURCE_FILE_AT_LINE (142)) ;
    ::routine_object_not_in_any (inLexique,  var_cas_isrs.reader_allKeyList (inLexique COMMA_SOURCE_FILE_AT_LINE (144)),  var_cas_all_isrs_in_app,  GGS_string ("ISR") COMMA_SOURCE_FILE_AT_LINE (144)) ;
    ::routine_object_not_in_any (inLexique,  var_cas_alarms.reader_allKeyList (inLexique COMMA_SOURCE_FILE_AT_LINE (146)),  var_cas_all_alarms_in_app,  GGS_string ("ALARM") COMMA_SOURCE_FILE_AT_LINE (146)) ;
    ::routine_object_not_in_any (inLexique,  var_cas_schedtables.reader_allKeyList (inLexique COMMA_SOURCE_FILE_AT_LINE (148)),  var_cas_all_sts_in_app,  GGS_string ("SCHEDULETABLE") COMMA_SOURCE_FILE_AT_LINE (148)) ;
    GGS_lstringlist  var_cas_counter_keys = GGS_lstringlist ::constructor_emptyList () ;
    {
      GGS_counter_map::cEnumerator enumerator_5861 (var_cas_counters, true) ;
      const GGS_counter_map::cElement * operand_5861 = NULL ;
      while (((operand_5861 = enumerator_5861.nextObject ()))) {
        macroValidPointer (operand_5861) ;
        const GGS_bool cond_5952 = (operand_5861->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (153))).operator_isNotEqual (GGS_string ("SystemCounter")) ;
        if (cond_5952.isBuiltAndTrue ()) {
          var_cas_counter_keys.addAssign_operation (operand_5861->mKey) ;
        }
      }
    }
    ::routine_object_not_in_any (inLexique,  var_cas_counter_keys,  var_cas_all_cnts_in_app,  GGS_string ("COUNTER") COMMA_SOURCE_FILE_AT_LINE (157)) ;
    ::routine_object_not_in_any (inLexique,  var_cas_resources.reader_allKeyList (inLexique COMMA_SOURCE_FILE_AT_LINE (159)),  var_cas_all_rezs_in_app,  GGS_string ("RESOURCE") COMMA_SOURCE_FILE_AT_LINE (159)) ;
    {
      GGS_app_map::cEnumerator enumerator_6241 (var_cas_apps, true) ;
      const GGS_app_map::cElement * operand_6241 = NULL ;
      while (((operand_6241 = enumerator_6241.nextObject ()))) {
        macroValidPointer (operand_6241) ;
        const GGS_bool cond_6588 = ((operand_6241->mInfo.app.reader_tasks (inLexique COMMA_SOURCE_FILE_AT_LINE (164)).reader_allKeyList (inLexique COMMA_SOURCE_FILE_AT_LINE (164)).reader_length ()).operator_isEqual (GGS_uint (0U))).operator_and ((operand_6241->mInfo.app.reader_isrs (inLexique COMMA_SOURCE_FILE_AT_LINE (164)).reader_allKeyList (inLexique COMMA_SOURCE_FILE_AT_LINE (164)).reader_length ()).operator_isEqual (GGS_uint (0U))) ;
        if (cond_6588.isBuiltAndTrue ()) {
          operand_6241->mKey.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("OS445 - An application should have at least one Task OR ISR2.") COMMA_SOURCE_FILE_AT_LINE (166)) ;
        }
      }
    }
    GGS_bool var_cas_right_app = GGS_bool (false) ;
    GGS_bool var_cas_access_app = GGS_bool (false) ;
    {
      GGS_alarm_map::cEnumerator enumerator_6823 (var_cas_alarms, true) ;
      const GGS_alarm_map::cElement * operand_6823 = NULL ;
      while (((operand_6823 = enumerator_6823.nextObject ()))) {
        macroValidPointer (operand_6823) ;
        {
          GGS_app_map::cEnumerator enumerator_6959 (var_cas_apps, true) ;
          const GGS_app_map::cElement * operand_6959 = NULL ;
          while (((operand_6959 = enumerator_6959.nextObject ()))) {
            macroValidPointer (operand_6959) ;
            {
              GGS_ident_map::cEnumerator enumerator_7040 (operand_6959->mInfo.app.reader_counters (inLexique COMMA_SOURCE_FILE_AT_LINE (176)), true) ;
              const GGS_ident_map::cElement * operand_7040 = NULL ;
              while (((operand_7040 = enumerator_7040.nextObject ()))) {
                macroValidPointer (operand_7040) ;
                const GGS_bool cond_8159 = (operand_7040->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (177))).operator_isEqual (operand_6823->mInfo.alarm.reader_counter_name (inLexique COMMA_SOURCE_FILE_AT_LINE (177)).reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (177))) ;
                if (cond_8159.isBuiltAndTrue ()) {
                  {
                    GGS_ident_map::cEnumerator enumerator_7292 (operand_6959->mInfo.app.reader_alarms (inLexique COMMA_SOURCE_FILE_AT_LINE (179)), true) ;
                    const GGS_ident_map::cElement * operand_7292 = NULL ;
                    while (((operand_7292 = enumerator_7292.nextObject ()))) {
                      macroValidPointer (operand_7292) ;
                      const GGS_bool cond_7486 = (operand_7292->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (180))).operator_isEqual (operand_6823->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (180))) ;
                      if (cond_7486.isBuiltAndTrue ()) {
                        var_cas_right_app = GGS_bool (true) ;
                      }
                    }
                  }
                  const GGS_bool cond_8089 = (var_cas_right_app).operator_isEqual (GGS_bool (false)) ;
                  if (cond_8089.isBuiltAndTrue ()) {
                    {
                      GGS_lstringlist::cEnumerator enumerator_7600 (operand_6823->mInfo.alarm.reader_acc_apps (inLexique COMMA_SOURCE_FILE_AT_LINE (185)), true) ;
                      const GGS_lstringlist::cElement * operand_7600 = NULL ;
                      while (((operand_7600 = enumerator_7600.nextObject ()))) {
                        macroValidPointer (operand_7600) ;
                        const GGS_bool cond_7762 = (operand_7600->mValue.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (186))).operator_isEqual (operand_6959->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (186))) ;
                        if (cond_7762.isBuiltAndTrue ()) {
                          var_cas_access_app = GGS_bool (true) ;
                        }
                      }
                    }
                    const GGS_bool cond_8025 = (var_cas_access_app).operator_isEqual (GGS_bool (false)) ;
                    if (cond_8025.isBuiltAndTrue ()) {
                      operand_6823->mKey.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, (((GGS_string ("Counter ")).operator_concat (operand_6823->mInfo.alarm.reader_counter_name (inLexique COMMA_SOURCE_FILE_AT_LINE (191)).reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (191)))).operator_concat (GGS_string (" doesn't belong to the same application of alarm "))).operator_concat (operand_6823->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (191))) COMMA_SOURCE_FILE_AT_LINE (192)) ;
                    }
                    var_cas_access_app = GGS_bool (false) ;
                  }
                  var_cas_right_app = GGS_bool (false) ;
                }
              }
            }
          }
        }
        GGS_action_obj  var_cas_alarm_action ;
        var_cas_alarm_action = operand_6823->mInfo.alarm.reader_action_params (inLexique COMMA_SOURCE_FILE_AT_LINE (202)) ;
        { const GGS_action_obj _var_12700 = var_cas_alarm_action ; // CAST instruction
          if (_var_12700.getPtr () != NULL) {
            macroValidPointer (_var_12700.getPtr ()) ;
            if (typeid (cPtr_setevent_action) == typeid (* (_var_12700.getPtr ()))) {
              const GGS_setevent_action var_cas_sea (_var_12700.getPtr ()) ;
              {
                GGS_app_map::cEnumerator enumerator_8466 (var_cas_apps, true) ;
                const GGS_app_map::cElement * operand_8466 = NULL ;
                while (((operand_8466 = enumerator_8466.nextObject ()))) {
                  macroValidPointer (operand_8466) ;
                  {
                    GGS_ident_map::cEnumerator enumerator_8551 (operand_8466->mInfo.app.reader_tasks (inLexique COMMA_SOURCE_FILE_AT_LINE (207)), true) ;
                    const GGS_ident_map::cElement * operand_8551 = NULL ;
                    while (((operand_8551 = enumerator_8551.nextObject ()))) {
                      macroValidPointer (operand_8551) ;
                      const GGS_bool cond_9725 = (operand_8551->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (208))).operator_isEqual (var_cas_sea.reader_task_name (inLexique COMMA_SOURCE_FILE_AT_LINE (208)).reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (208))) ;
                      if (cond_9725.isBuiltAndTrue ()) {
                        {
                          GGS_ident_map::cEnumerator enumerator_8798 (operand_8466->mInfo.app.reader_alarms (inLexique COMMA_SOURCE_FILE_AT_LINE (210)), true) ;
                          const GGS_ident_map::cElement * operand_8798 = NULL ;
                          while (((operand_8798 = enumerator_8798.nextObject ()))) {
                            macroValidPointer (operand_8798) ;
                            const GGS_bool cond_9004 = (operand_8798->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (211))).operator_isEqual (operand_6823->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (211))) ;
                            if (cond_9004.isBuiltAndTrue ()) {
                              var_cas_right_app = GGS_bool (true) ;
                            }
                          }
                        }
                        const GGS_bool cond_9647 = (var_cas_right_app).operator_isEqual (GGS_bool (false)) ;
                        if (cond_9647.isBuiltAndTrue ()) {
                          {
                            GGS_lstringlist::cEnumerator enumerator_9130 (operand_6823->mInfo.alarm.reader_acc_apps (inLexique COMMA_SOURCE_FILE_AT_LINE (216)), true) ;
                            const GGS_lstringlist::cElement * operand_9130 = NULL ;
                            while (((operand_9130 = enumerator_9130.nextObject ()))) {
                              macroValidPointer (operand_9130) ;
                              const GGS_bool cond_9304 = (operand_9130->mValue.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (217))).operator_isEqual (operand_8466->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (217))) ;
                              if (cond_9304.isBuiltAndTrue ()) {
                                var_cas_access_app = GGS_bool (true) ;
                              }
                            }
                          }
                          const GGS_bool cond_9575 = (var_cas_access_app).operator_isEqual (GGS_bool (false)) ;
                          if (cond_9575.isBuiltAndTrue ()) {
                            operand_6823->mKey.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, (((GGS_string ("Task ")).operator_concat (var_cas_sea.reader_task_name (inLexique COMMA_SOURCE_FILE_AT_LINE (222)).reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (222)))).operator_concat (GGS_string (" doesn't belong to the same application of alarm "))).operator_concat (operand_6823->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (222))) COMMA_SOURCE_FILE_AT_LINE (223)) ;
                          }
                          var_cas_access_app = GGS_bool (false) ;
                        }
                        var_cas_right_app = GGS_bool (false) ;
                      }
                    }
                  }
                }
              }
            }else if (typeid (cPtr_activatetask_action) == typeid (* (_var_12700.getPtr ()))) {
              const GGS_activatetask_action var_cas_ata (_var_12700.getPtr ()) ;
              {
                GGS_app_map::cEnumerator enumerator_9893 (var_cas_apps, true) ;
                const GGS_app_map::cElement * operand_9893 = NULL ;
                while (((operand_9893 = enumerator_9893.nextObject ()))) {
                  macroValidPointer (operand_9893) ;
                  {
                    GGS_ident_map::cEnumerator enumerator_9978 (operand_9893->mInfo.app.reader_tasks (inLexique COMMA_SOURCE_FILE_AT_LINE (233)), true) ;
                    const GGS_ident_map::cElement * operand_9978 = NULL ;
                    while (((operand_9978 = enumerator_9978.nextObject ()))) {
                      macroValidPointer (operand_9978) ;
                      const GGS_bool cond_11152 = (operand_9978->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (234))).operator_isEqual (var_cas_ata.reader_task_name (inLexique COMMA_SOURCE_FILE_AT_LINE (234)).reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (234))) ;
                      if (cond_11152.isBuiltAndTrue ()) {
                        {
                          GGS_ident_map::cEnumerator enumerator_10225 (operand_9893->mInfo.app.reader_alarms (inLexique COMMA_SOURCE_FILE_AT_LINE (236)), true) ;
                          const GGS_ident_map::cElement * operand_10225 = NULL ;
                          while (((operand_10225 = enumerator_10225.nextObject ()))) {
                            macroValidPointer (operand_10225) ;
                            const GGS_bool cond_10431 = (operand_10225->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (237))).operator_isEqual (operand_6823->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (237))) ;
                            if (cond_10431.isBuiltAndTrue ()) {
                              var_cas_right_app = GGS_bool (true) ;
                            }
                          }
                        }
                        const GGS_bool cond_11074 = (var_cas_right_app).operator_isEqual (GGS_bool (false)) ;
                        if (cond_11074.isBuiltAndTrue ()) {
                          {
                            GGS_lstringlist::cEnumerator enumerator_10557 (operand_6823->mInfo.alarm.reader_acc_apps (inLexique COMMA_SOURCE_FILE_AT_LINE (242)), true) ;
                            const GGS_lstringlist::cElement * operand_10557 = NULL ;
                            while (((operand_10557 = enumerator_10557.nextObject ()))) {
                              macroValidPointer (operand_10557) ;
                              const GGS_bool cond_10731 = (operand_10557->mValue.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (243))).operator_isEqual (operand_9893->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (243))) ;
                              if (cond_10731.isBuiltAndTrue ()) {
                                var_cas_access_app = GGS_bool (true) ;
                              }
                            }
                          }
                          const GGS_bool cond_11002 = (var_cas_access_app).operator_isEqual (GGS_bool (false)) ;
                          if (cond_11002.isBuiltAndTrue ()) {
                            operand_6823->mKey.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, (((GGS_string ("Task ")).operator_concat (var_cas_ata.reader_task_name (inLexique COMMA_SOURCE_FILE_AT_LINE (248)).reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (248)))).operator_concat (GGS_string (" doesn't belong to the same application of alarm "))).operator_concat (operand_6823->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (248))) COMMA_SOURCE_FILE_AT_LINE (249)) ;
                          }
                          var_cas_access_app = GGS_bool (false) ;
                        }
                        var_cas_right_app = GGS_bool (false) ;
                      }
                    }
                  }
                }
              }
            }else if (typeid (cPtr_incrementcounter_action) == typeid (* (_var_12700.getPtr ()))) {
              const GGS_incrementcounter_action var_cas_ica (_var_12700.getPtr ()) ;
              {
                GGS_app_map::cEnumerator enumerator_11335 (var_cas_apps, true) ;
                const GGS_app_map::cElement * operand_11335 = NULL ;
                while (((operand_11335 = enumerator_11335.nextObject ()))) {
                  macroValidPointer (operand_11335) ;
                  {
                    GGS_ident_map::cEnumerator enumerator_11420 (operand_11335->mInfo.app.reader_counters (inLexique COMMA_SOURCE_FILE_AT_LINE (259)), true) ;
                    const GGS_ident_map::cElement * operand_11420 = NULL ;
                    while (((operand_11420 = enumerator_11420.nextObject ()))) {
                      macroValidPointer (operand_11420) ;
                      const GGS_bool cond_12615 = (operand_11420->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (260))).operator_isEqual (var_cas_ica.reader_counter_name (inLexique COMMA_SOURCE_FILE_AT_LINE (260)).reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (260))) ;
                      if (cond_12615.isBuiltAndTrue ()) {
                        {
                          GGS_ident_map::cEnumerator enumerator_11682 (operand_11335->mInfo.app.reader_alarms (inLexique COMMA_SOURCE_FILE_AT_LINE (262)), true) ;
                          const GGS_ident_map::cElement * operand_11682 = NULL ;
                          while (((operand_11682 = enumerator_11682.nextObject ()))) {
                            macroValidPointer (operand_11682) ;
                            const GGS_bool cond_11888 = (operand_11682->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (263))).operator_isEqual (operand_6823->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (263))) ;
                            if (cond_11888.isBuiltAndTrue ()) {
                              var_cas_right_app = GGS_bool (true) ;
                            }
                          }
                        }
                        const GGS_bool cond_12537 = (var_cas_right_app).operator_isEqual (GGS_bool (false)) ;
                        if (cond_12537.isBuiltAndTrue ()) {
                          {
                            GGS_lstringlist::cEnumerator enumerator_12014 (operand_6823->mInfo.alarm.reader_acc_apps (inLexique COMMA_SOURCE_FILE_AT_LINE (268)), true) ;
                            const GGS_lstringlist::cElement * operand_12014 = NULL ;
                            while (((operand_12014 = enumerator_12014.nextObject ()))) {
                              macroValidPointer (operand_12014) ;
                              const GGS_bool cond_12188 = (operand_12014->mValue.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (269))).operator_isEqual (operand_11335->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (269))) ;
                              if (cond_12188.isBuiltAndTrue ()) {
                                var_cas_access_app = GGS_bool (true) ;
                              }
                            }
                          }
                          const GGS_bool cond_12465 = (var_cas_access_app).operator_isEqual (GGS_bool (false)) ;
                          if (cond_12465.isBuiltAndTrue ()) {
                            operand_6823->mKey.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, (((GGS_string ("Counter ")).operator_concat (var_cas_ica.reader_counter_name (inLexique COMMA_SOURCE_FILE_AT_LINE (274)).reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (274)))).operator_concat (GGS_string (" doesn't belong to the same application of alarm "))).operator_concat (operand_6823->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (274))) COMMA_SOURCE_FILE_AT_LINE (275)) ;
                          }
                          var_cas_access_app = GGS_bool (false) ;
                        }
                        var_cas_right_app = GGS_bool (false) ;
                      }
                    }
                  }
                }
              }
            }else{
            }
          }
        }
      }
    }
    {
      GGS_scheduletable_map::cEnumerator enumerator_12759 (var_cas_schedtables, true) ;
      const GGS_scheduletable_map::cElement * operand_12759 = NULL ;
      while (((operand_12759 = enumerator_12759.nextObject ()))) {
        macroValidPointer (operand_12759) ;
        {
          GGS_app_map::cEnumerator enumerator_12903 (var_cas_apps, true) ;
          const GGS_app_map::cElement * operand_12903 = NULL ;
          while (((operand_12903 = enumerator_12903.nextObject ()))) {
            macroValidPointer (operand_12903) ;
            {
              GGS_ident_map::cEnumerator enumerator_12984 (operand_12903->mInfo.app.reader_counters (inLexique COMMA_SOURCE_FILE_AT_LINE (289)), true) ;
              const GGS_ident_map::cElement * operand_12984 = NULL ;
              while (((operand_12984 = enumerator_12984.nextObject ()))) {
                macroValidPointer (operand_12984) ;
                const GGS_bool cond_14135 = (operand_12984->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (290))).operator_isEqual (operand_12759->mInfo.scheduletable.reader_counter (inLexique COMMA_SOURCE_FILE_AT_LINE (290)).reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (290))) ;
                if (cond_14135.isBuiltAndTrue ()) {
                  {
                    GGS_ident_map::cEnumerator enumerator_13240 (operand_12903->mInfo.app.reader_scheduletables (inLexique COMMA_SOURCE_FILE_AT_LINE (292)), true) ;
                    const GGS_ident_map::cElement * operand_13240 = NULL ;
                    while (((operand_13240 = enumerator_13240.nextObject ()))) {
                      macroValidPointer (operand_13240) ;
                      const GGS_bool cond_13441 = (operand_13240->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (293))).operator_isEqual (operand_12759->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (293))) ;
                      if (cond_13441.isBuiltAndTrue ()) {
                        var_cas_right_app = GGS_bool (true) ;
                      }
                    }
                  }
                  const GGS_bool cond_14065 = (var_cas_right_app).operator_isEqual (GGS_bool (false)) ;
                  if (cond_14065.isBuiltAndTrue ()) {
                    {
                      GGS_lstringlist::cEnumerator enumerator_13555 (operand_12759->mInfo.scheduletable.reader_acc_apps (inLexique COMMA_SOURCE_FILE_AT_LINE (298)), true) ;
                      const GGS_lstringlist::cElement * operand_13555 = NULL ;
                      while (((operand_13555 = enumerator_13555.nextObject ()))) {
                        macroValidPointer (operand_13555) ;
                        const GGS_bool cond_13717 = (operand_13555->mValue.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (299))).operator_isEqual (operand_12903->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (299))) ;
                        if (cond_13717.isBuiltAndTrue ()) {
                          var_cas_access_app = GGS_bool (true) ;
                        }
                      }
                    }
                    const GGS_bool cond_14001 = (var_cas_access_app).operator_isEqual (GGS_bool (false)) ;
                    if (cond_14001.isBuiltAndTrue ()) {
                      operand_12759->mKey.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, (((GGS_string ("Counter ")).operator_concat (operand_12759->mInfo.scheduletable.reader_counter (inLexique COMMA_SOURCE_FILE_AT_LINE (304)).reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (304)))).operator_concat (GGS_string (" doesn't belong to the same application of schedule table "))).operator_concat (operand_12759->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (304))) COMMA_SOURCE_FILE_AT_LINE (305)) ;
                    }
                    var_cas_access_app = GGS_bool (false) ;
                  }
                  var_cas_right_app = GGS_bool (false) ;
                }
              }
            }
          }
        }
        GGS_expiry_point_list  var_cas_eps = operand_12759->mInfo.scheduletable.reader_exp_points (inLexique COMMA_SOURCE_FILE_AT_LINE (314)) ;
        {
          GGS_expiry_point_list::cEnumerator enumerator_14310 (var_cas_eps, true) ;
          const GGS_expiry_point_list::cElement * operand_14310 = NULL ;
          while (((operand_14310 = enumerator_14310.nextObject ()))) {
            macroValidPointer (operand_14310) ;
            GGS_action_list  var_cas_eps_action ;
            var_cas_eps_action = operand_14310->point.reader_actions (inLexique COMMA_SOURCE_FILE_AT_LINE (320)) ;
            {
              GGS_action_list::cEnumerator enumerator_14550 (var_cas_eps_action, true) ;
              const GGS_action_list::cElement * operand_14550 = NULL ;
              while (((operand_14550 = enumerator_14550.nextObject ()))) {
                macroValidPointer (operand_14550) ;
                { const GGS_action_obj _var_17704 = operand_14550->actionobj ; // CAST instruction
                  if (_var_17704.getPtr () != NULL) {
                    macroValidPointer (_var_17704.getPtr ()) ;
                    if (typeid (cPtr_setevent_action) == typeid (* (_var_17704.getPtr ()))) {
                      const GGS_setevent_action var_cas_sea (_var_17704.getPtr ()) ;
                      {
                        GGS_app_map::cEnumerator enumerator_14742 (var_cas_apps, true) ;
                        const GGS_app_map::cElement * operand_14742 = NULL ;
                        while (((operand_14742 = enumerator_14742.nextObject ()))) {
                          macroValidPointer (operand_14742) ;
                          {
                            GGS_ident_map::cEnumerator enumerator_14829 (operand_14742->mInfo.app.reader_tasks (inLexique COMMA_SOURCE_FILE_AT_LINE (326)), true) ;
                            const GGS_ident_map::cElement * operand_14829 = NULL ;
                            while (((operand_14829 = enumerator_14829.nextObject ()))) {
                              macroValidPointer (operand_14829) ;
                              const GGS_bool cond_16073 = (operand_14829->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (327))).operator_isEqual (var_cas_sea.reader_task_name (inLexique COMMA_SOURCE_FILE_AT_LINE (327)).reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (327))) ;
                              if (cond_16073.isBuiltAndTrue ()) {
                                {
                                  GGS_ident_map::cEnumerator enumerator_15091 (operand_14742->mInfo.app.reader_scheduletables (inLexique COMMA_SOURCE_FILE_AT_LINE (329)), true) ;
                                  const GGS_ident_map::cElement * operand_15091 = NULL ;
                                  while (((operand_15091 = enumerator_15091.nextObject ()))) {
                                    macroValidPointer (operand_15091) ;
                                    const GGS_bool cond_15310 = (operand_15091->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (330))).operator_isEqual (operand_12759->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (330))) ;
                                    if (cond_15310.isBuiltAndTrue ()) {
                                      var_cas_right_app = GGS_bool (true) ;
                                    }
                                  }
                                }
                                const GGS_bool cond_15991 = (var_cas_right_app).operator_isEqual (GGS_bool (false)) ;
                                if (cond_15991.isBuiltAndTrue ()) {
                                  {
                                    GGS_lstringlist::cEnumerator enumerator_15447 (operand_12759->mInfo.scheduletable.reader_acc_apps (inLexique COMMA_SOURCE_FILE_AT_LINE (335)), true) ;
                                    const GGS_lstringlist::cElement * operand_15447 = NULL ;
                                    while (((operand_15447 = enumerator_15447.nextObject ()))) {
                                      macroValidPointer (operand_15447) ;
                                      const GGS_bool cond_15627 = (operand_15447->mValue.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (336))).operator_isEqual (operand_14742->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (336))) ;
                                      if (cond_15627.isBuiltAndTrue ()) {
                                        var_cas_access_app = GGS_bool (true) ;
                                      }
                                    }
                                  }
                                  const GGS_bool cond_15915 = (var_cas_access_app).operator_isEqual (GGS_bool (false)) ;
                                  if (cond_15915.isBuiltAndTrue ()) {
                                    operand_12759->mKey.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, (((GGS_string ("Task ")).operator_concat (var_cas_sea.reader_task_name (inLexique COMMA_SOURCE_FILE_AT_LINE (341)).reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (341)))).operator_concat (GGS_string (" doesn't belong to the same application of schedule table "))).operator_concat (operand_12759->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (341))) COMMA_SOURCE_FILE_AT_LINE (342)) ;
                                  }
                                  var_cas_access_app = GGS_bool (false) ;
                                }
                                var_cas_right_app = GGS_bool (false) ;
                              }
                            }
                          }
                        }
                      }
                    }else if (typeid (cPtr_activatetask_action) == typeid (* (_var_17704.getPtr ()))) {
                      const GGS_activatetask_action var_cas_ata (_var_17704.getPtr ()) ;
                      {
                        GGS_app_map::cEnumerator enumerator_16257 (var_cas_apps, true) ;
                        const GGS_app_map::cElement * operand_16257 = NULL ;
                        while (((operand_16257 = enumerator_16257.nextObject ()))) {
                          macroValidPointer (operand_16257) ;
                          {
                            GGS_ident_map::cEnumerator enumerator_16344 (operand_16257->mInfo.app.reader_tasks (inLexique COMMA_SOURCE_FILE_AT_LINE (352)), true) ;
                            const GGS_ident_map::cElement * operand_16344 = NULL ;
                            while (((operand_16344 = enumerator_16344.nextObject ()))) {
                              macroValidPointer (operand_16344) ;
                              const GGS_bool cond_17610 = (operand_16344->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (353))).operator_isEqual (var_cas_ata.reader_task_name (inLexique COMMA_SOURCE_FILE_AT_LINE (353)).reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (353))) ;
                              if (cond_17610.isBuiltAndTrue ()) {
                                {
                                  GGS_ident_map::cEnumerator enumerator_16606 (operand_16257->mInfo.app.reader_scheduletables (inLexique COMMA_SOURCE_FILE_AT_LINE (355)), true) ;
                                  const GGS_ident_map::cElement * operand_16606 = NULL ;
                                  while (((operand_16606 = enumerator_16606.nextObject ()))) {
                                    macroValidPointer (operand_16606) ;
                                    const GGS_bool cond_16825 = (operand_16606->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (356))).operator_isEqual (operand_12759->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (356))) ;
                                    if (cond_16825.isBuiltAndTrue ()) {
                                      var_cas_right_app = GGS_bool (true) ;
                                    }
                                  }
                                }
                                const GGS_bool cond_17528 = (var_cas_right_app).operator_isEqual (GGS_bool (false)) ;
                                if (cond_17528.isBuiltAndTrue ()) {
                                  {
                                    GGS_lstringlist::cEnumerator enumerator_16962 (operand_12759->mInfo.scheduletable.reader_acc_apps (inLexique COMMA_SOURCE_FILE_AT_LINE (361)), true) ;
                                    const GGS_lstringlist::cElement * operand_16962 = NULL ;
                                    while (((operand_16962 = enumerator_16962.nextObject ()))) {
                                      macroValidPointer (operand_16962) ;
                                      const GGS_bool cond_17142 = (operand_16962->mValue.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (362))).operator_isEqual (operand_16257->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (362))) ;
                                      if (cond_17142.isBuiltAndTrue ()) {
                                        var_cas_access_app = GGS_bool (true) ;
                                      }
                                    }
                                  }
                                  const GGS_bool cond_17452 = (var_cas_access_app).operator_isEqual (GGS_bool (false)) ;
                                  if (cond_17452.isBuiltAndTrue ()) {
                                    operand_12759->mKey.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, (((GGS_string ("Task ")).operator_concat (var_cas_ata.reader_task_name (inLexique COMMA_SOURCE_FILE_AT_LINE (367)).reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (367)))).operator_concat (GGS_string (" doesn't belong to the same application of schedule table "))).operator_concat (operand_12759->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (367))) COMMA_SOURCE_FILE_AT_LINE (368)) ;
                                  }
                                  var_cas_access_app = GGS_bool (false) ;
                                }
                                var_cas_right_app = GGS_bool (false) ;
                              }
                            }
                          }
                        }
                      }
                    }else{
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_apps_well_formed\n") ;
  #endif
}

//---------------------------------------------------------------------------*

