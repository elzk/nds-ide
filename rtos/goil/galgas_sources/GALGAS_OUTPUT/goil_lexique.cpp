//---------------------------------------------------------------------------*
//                                                                           *
//                         File 'goil_lexique.cpp'                           *
//                        Generated by version 2.0.0                         *
//                       july 9th, 2010, at 9h38'48"                         *
//                                                                           *
//---------------------------------------------------------------------------*

//--- START OF USER ZONE 1


//--- END OF USER ZONE 1


//---------------------------------------------------------------------------*

#include "version_libpm.h"
#if CURRENT_LIBPM_VERSION != 820
  #error "This file has been compiled with a version of GALGAS that uses libpm version 820, different than the current version (CURRENT_LIBPM_VERSION) of libpm"
#endif

//---------------------------------------------------------------------------*

#include <ctype.h>
#include <string.h>

#include "utilities/MF_MemoryControl.h"
#include "goil_lexique.h"

#include "strings/unicode_character_cpp.h"
#include "galgas/scanner_actions.h"
#ifndef DO_NOT_GENERATE_CHECKINGS
  #define LINE_AND_SOURCE_FILE sourceText ()->sourceFileName ().cString (HERE), lineNumber ()
  #define COMMA_LINE_AND_SOURCE_FILE , LINE_AND_SOURCE_FILE
#else
  #define LINE_AND_SOURCE_FILE
  #define COMMA_LINE_AND_SOURCE_FILE
#endif

//---------------------------------------------------------------------------*
//                                                                           *
//                               Constructors                                *
//                                                                           *
//---------------------------------------------------------------------------*

cTokenFor_goil_5F_lexique::cTokenFor_goil_5F_lexique (void) :
mLexicalAttribute_a_5F_string (),
mLexicalAttribute_att_5F_token (),
mLexicalAttribute_floatNumber (),
mLexicalAttribute_integerNumber (),
mLexicalAttribute_number () {
}

//---------------------------------------------------------------------------*

C_Lexique_goil_5F_lexique::C_Lexique_goil_5F_lexique (C_Compiler * inCallerCompiler,
                const C_String & inDependencyFileExtension,
                const C_String & inDependencyFilePath,
                C_galgas_io * inParametersPtr,
                const C_String & inSourceFileName
                COMMA_LOCATION_ARGS) :
C_Lexique (inCallerCompiler, inDependencyFileExtension, inDependencyFilePath, inParametersPtr, inSourceFileName COMMA_THERE) {
}

//---------------------------------------------------------------------------*

C_Lexique_goil_5F_lexique::C_Lexique_goil_5F_lexique (C_Compiler * inCallerCompiler,
                C_galgas_io * inParametersPtr,
                const C_String & inSourceString,
                const C_String & inStringForError
                COMMA_LOCATION_ARGS) :
C_Lexique (inCallerCompiler, inParametersPtr, inSourceString, inStringForError COMMA_THERE) {
}

//---------------------------------------------------------------------------*
//                                                                           *
//                        Lexical error message list                         *
//                                                                           *
//---------------------------------------------------------------------------*

static const utf32 gLexicalMessage_decimalNumberTooLarge [] = {
  TO_UNICODE ('d'),
  TO_UNICODE ('e'),
  TO_UNICODE ('c'),
  TO_UNICODE ('i'),
  TO_UNICODE ('m'),
  TO_UNICODE ('a'),
  TO_UNICODE ('l'),
  TO_UNICODE (' '),
  TO_UNICODE ('n'),
  TO_UNICODE ('u'),
  TO_UNICODE ('m'),
  TO_UNICODE ('b'),
  TO_UNICODE ('e'),
  TO_UNICODE ('r'),
  TO_UNICODE (' '),
  TO_UNICODE ('t'),
  TO_UNICODE ('o'),
  TO_UNICODE ('o'),
  TO_UNICODE (' '),
  TO_UNICODE ('l'),
  TO_UNICODE ('a'),
  TO_UNICODE ('r'),
  TO_UNICODE ('g'),
  TO_UNICODE ('e'),
  TO_UNICODE (0)
} ;

static const utf32 gLexicalMessage_internalError [] = {
  TO_UNICODE ('i'),
  TO_UNICODE ('n'),
  TO_UNICODE ('t'),
  TO_UNICODE ('e'),
  TO_UNICODE ('r'),
  TO_UNICODE ('n'),
  TO_UNICODE ('a'),
  TO_UNICODE ('l'),
  TO_UNICODE (' '),
  TO_UNICODE ('e'),
  TO_UNICODE ('r'),
  TO_UNICODE ('r'),
  TO_UNICODE ('o'),
  TO_UNICODE ('r'),
  TO_UNICODE (0)
} ;

static const utf32 gLexicalMessage_unableToConvertToDouble [] = {
  TO_UNICODE ('U'),
  TO_UNICODE ('n'),
  TO_UNICODE ('a'),
  TO_UNICODE ('b'),
  TO_UNICODE ('l'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('t'),
  TO_UNICODE ('o'),
  TO_UNICODE (' '),
  TO_UNICODE ('c'),
  TO_UNICODE ('o'),
  TO_UNICODE ('n'),
  TO_UNICODE ('v'),
  TO_UNICODE ('e'),
  TO_UNICODE ('r'),
  TO_UNICODE ('t'),
  TO_UNICODE (' '),
  TO_UNICODE ('t'),
  TO_UNICODE ('h'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('s'),
  TO_UNICODE ('t'),
  TO_UNICODE ('r'),
  TO_UNICODE ('i'),
  TO_UNICODE ('n'),
  TO_UNICODE ('g'),
  TO_UNICODE (' '),
  TO_UNICODE ('t'),
  TO_UNICODE ('o'),
  TO_UNICODE (' '),
  TO_UNICODE ('d'),
  TO_UNICODE ('o'),
  TO_UNICODE ('u'),
  TO_UNICODE ('b'),
  TO_UNICODE ('l'),
  TO_UNICODE ('e'),
  TO_UNICODE (0)
} ;

static const utf32 gLexicalMessage_unterminatedLitteralString [] = {
  TO_UNICODE ('U'),
  TO_UNICODE ('n'),
  TO_UNICODE ('t'),
  TO_UNICODE ('e'),
  TO_UNICODE ('r'),
  TO_UNICODE ('m'),
  TO_UNICODE ('i'),
  TO_UNICODE ('n'),
  TO_UNICODE ('a'),
  TO_UNICODE ('t'),
  TO_UNICODE ('e'),
  TO_UNICODE ('d'),
  TO_UNICODE (' '),
  TO_UNICODE ('l'),
  TO_UNICODE ('i'),
  TO_UNICODE ('t'),
  TO_UNICODE ('e'),
  TO_UNICODE ('r'),
  TO_UNICODE ('a'),
  TO_UNICODE ('l'),
  TO_UNICODE (' '),
  TO_UNICODE ('s'),
  TO_UNICODE ('t'),
  TO_UNICODE ('r'),
  TO_UNICODE ('i'),
  TO_UNICODE ('n'),
  TO_UNICODE ('g'),
  TO_UNICODE (0)
} ;

static const utf32 gLexicalMessage_unterminated_comment_error [] = {
  TO_UNICODE ('u'),
  TO_UNICODE ('n'),
  TO_UNICODE ('t'),
  TO_UNICODE ('e'),
  TO_UNICODE ('r'),
  TO_UNICODE ('m'),
  TO_UNICODE ('i'),
  TO_UNICODE ('n'),
  TO_UNICODE ('a'),
  TO_UNICODE ('t'),
  TO_UNICODE ('e'),
  TO_UNICODE ('d'),
  TO_UNICODE (' '),
  TO_UNICODE ('c'),
  TO_UNICODE ('o'),
  TO_UNICODE ('m'),
  TO_UNICODE ('m'),
  TO_UNICODE ('e'),
  TO_UNICODE ('n'),
  TO_UNICODE ('t'),
  TO_UNICODE (0)
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//          Syntax error messages, for every terminal symbol                 *
//                                                                           *
//---------------------------------------------------------------------------*

//--- Syntax error message for terminal '$comment$' :
static const utf32 gSyntaxErrorMessage_comment [] = {
  TO_UNICODE ('a'),
  TO_UNICODE (' '),
  TO_UNICODE ('c'),
  TO_UNICODE ('o'),
  TO_UNICODE ('m'),
  TO_UNICODE ('m'),
  TO_UNICODE ('e'),
  TO_UNICODE ('n'),
  TO_UNICODE ('t'),
  TO_UNICODE (0)
} ;

//--- Syntax error message for terminal '$idf$' :
static const utf32 gSyntaxErrorMessage_idf [] = {
  TO_UNICODE ('i'),
  TO_UNICODE ('d'),
  TO_UNICODE ('e'),
  TO_UNICODE ('n'),
  TO_UNICODE ('t'),
  TO_UNICODE ('i'),
  TO_UNICODE ('f'),
  TO_UNICODE ('i'),
  TO_UNICODE ('e'),
  TO_UNICODE ('r'),
  TO_UNICODE (0)
} ;

//--- Syntax error message for terminal '$string$' :
static const utf32 gSyntaxErrorMessage_string [] = {
  TO_UNICODE ('l'),
  TO_UNICODE ('i'),
  TO_UNICODE ('t'),
  TO_UNICODE ('e'),
  TO_UNICODE ('r'),
  TO_UNICODE ('a'),
  TO_UNICODE ('l'),
  TO_UNICODE (' '),
  TO_UNICODE ('s'),
  TO_UNICODE ('t'),
  TO_UNICODE ('r'),
  TO_UNICODE ('i'),
  TO_UNICODE ('n'),
  TO_UNICODE ('g'),
  TO_UNICODE (0)
} ;

//--- Syntax error message for terminal '$g_string$' :
static const utf32 gSyntaxErrorMessage_g_5F_string [] = {
  TO_UNICODE ('i'),
  TO_UNICODE ('n'),
  TO_UNICODE (' '),
  TO_UNICODE ('s'),
  TO_UNICODE ('e'),
  TO_UNICODE ('a'),
  TO_UNICODE ('r'),
  TO_UNICODE ('c'),
  TO_UNICODE ('h'),
  TO_UNICODE (' '),
  TO_UNICODE ('p'),
  TO_UNICODE ('a'),
  TO_UNICODE ('t'),
  TO_UNICODE ('h'),
  TO_UNICODE (0)
} ;

//--- Syntax error message for terminal '$uint_number$' :
static const utf32 gSyntaxErrorMessage_uint_5F_number [] = {
  TO_UNICODE ('l'),
  TO_UNICODE ('i'),
  TO_UNICODE ('t'),
  TO_UNICODE ('e'),
  TO_UNICODE ('r'),
  TO_UNICODE ('a'),
  TO_UNICODE ('l'),
  TO_UNICODE (' '),
  TO_UNICODE ('u'),
  TO_UNICODE ('n'),
  TO_UNICODE ('s'),
  TO_UNICODE ('i'),
  TO_UNICODE ('g'),
  TO_UNICODE ('n'),
  TO_UNICODE ('e'),
  TO_UNICODE ('d'),
  TO_UNICODE (' '),
  TO_UNICODE ('6'),
  TO_UNICODE ('4'),
  TO_UNICODE (' '),
  TO_UNICODE ('b'),
  TO_UNICODE ('i'),
  TO_UNICODE ('t'),
  TO_UNICODE ('s'),
  TO_UNICODE (' '),
  TO_UNICODE ('i'),
  TO_UNICODE ('n'),
  TO_UNICODE ('t'),
  TO_UNICODE ('e'),
  TO_UNICODE ('g'),
  TO_UNICODE ('e'),
  TO_UNICODE ('r'),
  TO_UNICODE (0)
} ;

//--- Syntax error message for terminal '$float_number$' :
static const utf32 gSyntaxErrorMessage_float_5F_number [] = {
  TO_UNICODE ('l'),
  TO_UNICODE ('i'),
  TO_UNICODE ('t'),
  TO_UNICODE ('e'),
  TO_UNICODE ('r'),
  TO_UNICODE ('a'),
  TO_UNICODE ('l'),
  TO_UNICODE (' '),
  TO_UNICODE ('f'),
  TO_UNICODE ('l'),
  TO_UNICODE ('o'),
  TO_UNICODE ('a'),
  TO_UNICODE ('t'),
  TO_UNICODE (0)
} ;

//--- Syntax error message for terminal '$set_start_uint_number$' :
static const utf32 gSyntaxErrorMessage_set_5F_start_5F_uint_5F_number [] = {
  TO_UNICODE ('l'),
  TO_UNICODE ('i'),
  TO_UNICODE ('t'),
  TO_UNICODE ('e'),
  TO_UNICODE ('r'),
  TO_UNICODE ('a'),
  TO_UNICODE ('l'),
  TO_UNICODE (' '),
  TO_UNICODE ('u'),
  TO_UNICODE ('n'),
  TO_UNICODE ('s'),
  TO_UNICODE ('i'),
  TO_UNICODE ('g'),
  TO_UNICODE ('n'),
  TO_UNICODE ('e'),
  TO_UNICODE ('d'),
  TO_UNICODE (' '),
  TO_UNICODE ('6'),
  TO_UNICODE ('4'),
  TO_UNICODE (' '),
  TO_UNICODE ('b'),
  TO_UNICODE ('i'),
  TO_UNICODE ('t'),
  TO_UNICODE ('s'),
  TO_UNICODE (' '),
  TO_UNICODE ('i'),
  TO_UNICODE ('n'),
  TO_UNICODE ('t'),
  TO_UNICODE ('e'),
  TO_UNICODE ('g'),
  TO_UNICODE ('e'),
  TO_UNICODE ('r'),
  TO_UNICODE (0)
} ;

//--- Syntax error message for terminal '$command$' :
static const utf32 gSyntaxErrorMessage_command [] = {
  TO_UNICODE ('c'),
  TO_UNICODE ('o'),
  TO_UNICODE ('m'),
  TO_UNICODE ('m'),
  TO_UNICODE ('a'),
  TO_UNICODE ('n'),
  TO_UNICODE ('d'),
  TO_UNICODE (0)
} ;

//--- Syntax error message for terminal '$APP_SRC$' :
static const utf32 gSyntaxErrorMessage_APP_5F_SRC [] = {
  TO_UNICODE ('M'),
  TO_UNICODE ('a'),
  TO_UNICODE ('k'),
  TO_UNICODE ('e'),
  TO_UNICODE ('f'),
  TO_UNICODE ('i'),
  TO_UNICODE ('l'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('a'),
  TO_UNICODE ('t'),
  TO_UNICODE ('t'),
  TO_UNICODE ('r'),
  TO_UNICODE ('i'),
  TO_UNICODE ('b'),
  TO_UNICODE ('u'),
  TO_UNICODE ('t'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('A'),
  TO_UNICODE ('P'),
  TO_UNICODE ('P'),
  TO_UNICODE ('_'),
  TO_UNICODE ('S'),
  TO_UNICODE ('R'),
  TO_UNICODE ('C'),
  TO_UNICODE ('\''),
  TO_UNICODE (0)
} ;

//--- Syntax error message for terminal '$COMPILER$' :
static const utf32 gSyntaxErrorMessage_COMPILER [] = {
  TO_UNICODE ('M'),
  TO_UNICODE ('a'),
  TO_UNICODE ('k'),
  TO_UNICODE ('e'),
  TO_UNICODE ('f'),
  TO_UNICODE ('i'),
  TO_UNICODE ('l'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('a'),
  TO_UNICODE ('t'),
  TO_UNICODE ('t'),
  TO_UNICODE ('r'),
  TO_UNICODE ('i'),
  TO_UNICODE ('b'),
  TO_UNICODE ('u'),
  TO_UNICODE ('t'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('C'),
  TO_UNICODE ('O'),
  TO_UNICODE ('M'),
  TO_UNICODE ('P'),
  TO_UNICODE ('I'),
  TO_UNICODE ('L'),
  TO_UNICODE ('E'),
  TO_UNICODE ('R'),
  TO_UNICODE ('\''),
  TO_UNICODE (0)
} ;

//--- Syntax error message for terminal '$ASSEMBLER$' :
static const utf32 gSyntaxErrorMessage_ASSEMBLER [] = {
  TO_UNICODE ('M'),
  TO_UNICODE ('a'),
  TO_UNICODE ('k'),
  TO_UNICODE ('e'),
  TO_UNICODE ('f'),
  TO_UNICODE ('i'),
  TO_UNICODE ('l'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('a'),
  TO_UNICODE ('t'),
  TO_UNICODE ('t'),
  TO_UNICODE ('r'),
  TO_UNICODE ('i'),
  TO_UNICODE ('b'),
  TO_UNICODE ('u'),
  TO_UNICODE ('t'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('A'),
  TO_UNICODE ('S'),
  TO_UNICODE ('S'),
  TO_UNICODE ('E'),
  TO_UNICODE ('M'),
  TO_UNICODE ('B'),
  TO_UNICODE ('L'),
  TO_UNICODE ('E'),
  TO_UNICODE ('R'),
  TO_UNICODE ('\''),
  TO_UNICODE (0)
} ;

//--- Syntax error message for terminal '$LINKER$' :
static const utf32 gSyntaxErrorMessage_LINKER [] = {
  TO_UNICODE ('M'),
  TO_UNICODE ('a'),
  TO_UNICODE ('k'),
  TO_UNICODE ('e'),
  TO_UNICODE ('f'),
  TO_UNICODE ('i'),
  TO_UNICODE ('l'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('a'),
  TO_UNICODE ('t'),
  TO_UNICODE ('t'),
  TO_UNICODE ('r'),
  TO_UNICODE ('i'),
  TO_UNICODE ('b'),
  TO_UNICODE ('u'),
  TO_UNICODE ('t'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('L'),
  TO_UNICODE ('I'),
  TO_UNICODE ('N'),
  TO_UNICODE ('K'),
  TO_UNICODE ('E'),
  TO_UNICODE ('R'),
  TO_UNICODE ('\''),
  TO_UNICODE (0)
} ;

//--- Syntax error message for terminal '$SCRIPT$' :
static const utf32 gSyntaxErrorMessage_SCRIPT [] = {
  TO_UNICODE ('M'),
  TO_UNICODE ('a'),
  TO_UNICODE ('k'),
  TO_UNICODE ('e'),
  TO_UNICODE ('f'),
  TO_UNICODE ('i'),
  TO_UNICODE ('l'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('a'),
  TO_UNICODE ('t'),
  TO_UNICODE ('t'),
  TO_UNICODE ('r'),
  TO_UNICODE ('i'),
  TO_UNICODE ('b'),
  TO_UNICODE ('u'),
  TO_UNICODE ('t'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('S'),
  TO_UNICODE ('C'),
  TO_UNICODE ('R'),
  TO_UNICODE ('I'),
  TO_UNICODE ('P'),
  TO_UNICODE ('T'),
  TO_UNICODE ('\''),
  TO_UNICODE (0)
} ;

//--- Syntax error message for terminal '$CFLAGS$' :
static const utf32 gSyntaxErrorMessage_CFLAGS [] = {
  TO_UNICODE ('M'),
  TO_UNICODE ('a'),
  TO_UNICODE ('k'),
  TO_UNICODE ('e'),
  TO_UNICODE ('f'),
  TO_UNICODE ('i'),
  TO_UNICODE ('l'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('a'),
  TO_UNICODE ('t'),
  TO_UNICODE ('t'),
  TO_UNICODE ('r'),
  TO_UNICODE ('i'),
  TO_UNICODE ('b'),
  TO_UNICODE ('u'),
  TO_UNICODE ('t'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('C'),
  TO_UNICODE ('F'),
  TO_UNICODE ('L'),
  TO_UNICODE ('A'),
  TO_UNICODE ('G'),
  TO_UNICODE ('S'),
  TO_UNICODE ('\''),
  TO_UNICODE (0)
} ;

//--- Syntax error message for terminal '$CPPFLAGS$' :
static const utf32 gSyntaxErrorMessage_CPPFLAGS [] = {
  TO_UNICODE ('M'),
  TO_UNICODE ('a'),
  TO_UNICODE ('k'),
  TO_UNICODE ('e'),
  TO_UNICODE ('f'),
  TO_UNICODE ('i'),
  TO_UNICODE ('l'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('a'),
  TO_UNICODE ('t'),
  TO_UNICODE ('t'),
  TO_UNICODE ('r'),
  TO_UNICODE ('i'),
  TO_UNICODE ('b'),
  TO_UNICODE ('u'),
  TO_UNICODE ('t'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('C'),
  TO_UNICODE ('P'),
  TO_UNICODE ('P'),
  TO_UNICODE ('F'),
  TO_UNICODE ('L'),
  TO_UNICODE ('A'),
  TO_UNICODE ('G'),
  TO_UNICODE ('S'),
  TO_UNICODE ('\''),
  TO_UNICODE (0)
} ;

//--- Syntax error message for terminal '$ASFLAGS$' :
static const utf32 gSyntaxErrorMessage_ASFLAGS [] = {
  TO_UNICODE ('M'),
  TO_UNICODE ('a'),
  TO_UNICODE ('k'),
  TO_UNICODE ('e'),
  TO_UNICODE ('f'),
  TO_UNICODE ('i'),
  TO_UNICODE ('l'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('a'),
  TO_UNICODE ('t'),
  TO_UNICODE ('t'),
  TO_UNICODE ('r'),
  TO_UNICODE ('i'),
  TO_UNICODE ('b'),
  TO_UNICODE ('u'),
  TO_UNICODE ('t'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('A'),
  TO_UNICODE ('S'),
  TO_UNICODE ('F'),
  TO_UNICODE ('L'),
  TO_UNICODE ('A'),
  TO_UNICODE ('G'),
  TO_UNICODE ('S'),
  TO_UNICODE ('\''),
  TO_UNICODE (0)
} ;

//--- Syntax error message for terminal '$LDFLAGS$' :
static const utf32 gSyntaxErrorMessage_LDFLAGS [] = {
  TO_UNICODE ('M'),
  TO_UNICODE ('a'),
  TO_UNICODE ('k'),
  TO_UNICODE ('e'),
  TO_UNICODE ('f'),
  TO_UNICODE ('i'),
  TO_UNICODE ('l'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('a'),
  TO_UNICODE ('t'),
  TO_UNICODE ('t'),
  TO_UNICODE ('r'),
  TO_UNICODE ('i'),
  TO_UNICODE ('b'),
  TO_UNICODE ('u'),
  TO_UNICODE ('t'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('L'),
  TO_UNICODE ('D'),
  TO_UNICODE ('F'),
  TO_UNICODE ('L'),
  TO_UNICODE ('A'),
  TO_UNICODE ('G'),
  TO_UNICODE ('S'),
  TO_UNICODE ('\''),
  TO_UNICODE (0)
} ;

//--- Syntax error message for terminal '$APP_NAME$' :
static const utf32 gSyntaxErrorMessage_APP_5F_NAME [] = {
  TO_UNICODE ('M'),
  TO_UNICODE ('a'),
  TO_UNICODE ('k'),
  TO_UNICODE ('e'),
  TO_UNICODE ('f'),
  TO_UNICODE ('i'),
  TO_UNICODE ('l'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('a'),
  TO_UNICODE ('t'),
  TO_UNICODE ('t'),
  TO_UNICODE ('r'),
  TO_UNICODE ('i'),
  TO_UNICODE ('b'),
  TO_UNICODE ('u'),
  TO_UNICODE ('t'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('A'),
  TO_UNICODE ('P'),
  TO_UNICODE ('P'),
  TO_UNICODE ('_'),
  TO_UNICODE ('N'),
  TO_UNICODE ('A'),
  TO_UNICODE ('M'),
  TO_UNICODE ('E'),
  TO_UNICODE ('\''),
  TO_UNICODE (0)
} ;

//--- Syntax error message for terminal '$TRAMPOLINE_BASE_PATH$' :
static const utf32 gSyntaxErrorMessage_TRAMPOLINE_5F_BASE_5F_PATH [] = {
  TO_UNICODE ('M'),
  TO_UNICODE ('a'),
  TO_UNICODE ('k'),
  TO_UNICODE ('e'),
  TO_UNICODE ('f'),
  TO_UNICODE ('i'),
  TO_UNICODE ('l'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('a'),
  TO_UNICODE ('t'),
  TO_UNICODE ('t'),
  TO_UNICODE ('r'),
  TO_UNICODE ('i'),
  TO_UNICODE ('b'),
  TO_UNICODE ('u'),
  TO_UNICODE ('t'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('T'),
  TO_UNICODE ('R'),
  TO_UNICODE ('A'),
  TO_UNICODE ('M'),
  TO_UNICODE ('P'),
  TO_UNICODE ('O'),
  TO_UNICODE ('L'),
  TO_UNICODE ('I'),
  TO_UNICODE ('N'),
  TO_UNICODE ('E'),
  TO_UNICODE ('_'),
  TO_UNICODE ('B'),
  TO_UNICODE ('A'),
  TO_UNICODE ('S'),
  TO_UNICODE ('E'),
  TO_UNICODE ('_'),
  TO_UNICODE ('P'),
  TO_UNICODE ('A'),
  TO_UNICODE ('T'),
  TO_UNICODE ('H'),
  TO_UNICODE ('\''),
  TO_UNICODE (0)
} ;

//--- Syntax error message for terminal '$OIL_VERSION$' :
static const utf32 gSyntaxErrorMessage_OIL_5F_VERSION [] = {
  TO_UNICODE ('O'),
  TO_UNICODE ('I'),
  TO_UNICODE ('L'),
  TO_UNICODE (' '),
  TO_UNICODE ('v'),
  TO_UNICODE ('e'),
  TO_UNICODE ('r'),
  TO_UNICODE ('s'),
  TO_UNICODE ('i'),
  TO_UNICODE ('o'),
  TO_UNICODE ('n'),
  TO_UNICODE (0)
} ;

//--- Syntax error message for terminal '$IMPLEMENTATION$' :
static const utf32 gSyntaxErrorMessage_IMPLEMENTATION [] = {
  TO_UNICODE ('O'),
  TO_UNICODE ('I'),
  TO_UNICODE ('L'),
  TO_UNICODE (' '),
  TO_UNICODE ('i'),
  TO_UNICODE ('m'),
  TO_UNICODE ('p'),
  TO_UNICODE ('l'),
  TO_UNICODE ('e'),
  TO_UNICODE ('m'),
  TO_UNICODE ('e'),
  TO_UNICODE ('n'),
  TO_UNICODE ('t'),
  TO_UNICODE ('a'),
  TO_UNICODE ('t'),
  TO_UNICODE ('i'),
  TO_UNICODE ('o'),
  TO_UNICODE ('n'),
  TO_UNICODE (' '),
  TO_UNICODE ('d'),
  TO_UNICODE ('e'),
  TO_UNICODE ('f'),
  TO_UNICODE ('i'),
  TO_UNICODE ('n'),
  TO_UNICODE ('i'),
  TO_UNICODE ('t'),
  TO_UNICODE ('i'),
  TO_UNICODE ('o'),
  TO_UNICODE ('n'),
  TO_UNICODE (0)
} ;

//--- Syntax error message for terminal '$OS$' :
static const utf32 gSyntaxErrorMessage_OS [] = {
  TO_UNICODE ('O'),
  TO_UNICODE ('b'),
  TO_UNICODE ('j'),
  TO_UNICODE ('e'),
  TO_UNICODE ('c'),
  TO_UNICODE ('t'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('O'),
  TO_UNICODE ('S'),
  TO_UNICODE ('\''),
  TO_UNICODE (0)
} ;

//--- Syntax error message for terminal '$TASK$' :
static const utf32 gSyntaxErrorMessage_TASK [] = {
  TO_UNICODE ('O'),
  TO_UNICODE ('b'),
  TO_UNICODE ('j'),
  TO_UNICODE ('e'),
  TO_UNICODE ('c'),
  TO_UNICODE ('t'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('T'),
  TO_UNICODE ('A'),
  TO_UNICODE ('S'),
  TO_UNICODE ('K'),
  TO_UNICODE ('\''),
  TO_UNICODE (0)
} ;

//--- Syntax error message for terminal '$COUNTER$' :
static const utf32 gSyntaxErrorMessage_COUNTER [] = {
  TO_UNICODE ('O'),
  TO_UNICODE ('b'),
  TO_UNICODE ('j'),
  TO_UNICODE ('e'),
  TO_UNICODE ('c'),
  TO_UNICODE ('t'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('C'),
  TO_UNICODE ('O'),
  TO_UNICODE ('U'),
  TO_UNICODE ('N'),
  TO_UNICODE ('T'),
  TO_UNICODE ('E'),
  TO_UNICODE ('R'),
  TO_UNICODE ('\''),
  TO_UNICODE (0)
} ;

//--- Syntax error message for terminal '$ALARM$' :
static const utf32 gSyntaxErrorMessage_ALARM [] = {
  TO_UNICODE ('O'),
  TO_UNICODE ('b'),
  TO_UNICODE ('j'),
  TO_UNICODE ('e'),
  TO_UNICODE ('c'),
  TO_UNICODE ('t'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('A'),
  TO_UNICODE ('L'),
  TO_UNICODE ('A'),
  TO_UNICODE ('R'),
  TO_UNICODE ('M'),
  TO_UNICODE ('\''),
  TO_UNICODE (0)
} ;

//--- Syntax error message for terminal '$RESOURCE$' :
static const utf32 gSyntaxErrorMessage_RESOURCE [] = {
  TO_UNICODE ('O'),
  TO_UNICODE ('b'),
  TO_UNICODE ('j'),
  TO_UNICODE ('e'),
  TO_UNICODE ('c'),
  TO_UNICODE ('t'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('R'),
  TO_UNICODE ('E'),
  TO_UNICODE ('S'),
  TO_UNICODE ('O'),
  TO_UNICODE ('U'),
  TO_UNICODE ('R'),
  TO_UNICODE ('C'),
  TO_UNICODE ('E'),
  TO_UNICODE ('\''),
  TO_UNICODE (0)
} ;

//--- Syntax error message for terminal '$EVENT$' :
static const utf32 gSyntaxErrorMessage_EVENT [] = {
  TO_UNICODE ('O'),
  TO_UNICODE ('b'),
  TO_UNICODE ('j'),
  TO_UNICODE ('e'),
  TO_UNICODE ('c'),
  TO_UNICODE ('t'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('E'),
  TO_UNICODE ('V'),
  TO_UNICODE ('E'),
  TO_UNICODE ('N'),
  TO_UNICODE ('T'),
  TO_UNICODE ('\''),
  TO_UNICODE (0)
} ;

//--- Syntax error message for terminal '$ISR$' :
static const utf32 gSyntaxErrorMessage_ISR [] = {
  TO_UNICODE ('O'),
  TO_UNICODE ('b'),
  TO_UNICODE ('j'),
  TO_UNICODE ('e'),
  TO_UNICODE ('c'),
  TO_UNICODE ('t'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('I'),
  TO_UNICODE ('S'),
  TO_UNICODE ('R'),
  TO_UNICODE ('\''),
  TO_UNICODE (0)
} ;

//--- Syntax error message for terminal '$MESSAGE$' :
static const utf32 gSyntaxErrorMessage_MESSAGE [] = {
  TO_UNICODE ('O'),
  TO_UNICODE ('b'),
  TO_UNICODE ('j'),
  TO_UNICODE ('e'),
  TO_UNICODE ('c'),
  TO_UNICODE ('t'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('M'),
  TO_UNICODE ('E'),
  TO_UNICODE ('S'),
  TO_UNICODE ('S'),
  TO_UNICODE ('A'),
  TO_UNICODE ('G'),
  TO_UNICODE ('E'),
  TO_UNICODE ('\''),
  TO_UNICODE (0)
} ;

//--- Syntax error message for terminal '$COM$' :
static const utf32 gSyntaxErrorMessage_COM [] = {
  TO_UNICODE ('O'),
  TO_UNICODE ('b'),
  TO_UNICODE ('j'),
  TO_UNICODE ('e'),
  TO_UNICODE ('c'),
  TO_UNICODE ('t'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('C'),
  TO_UNICODE ('O'),
  TO_UNICODE ('M'),
  TO_UNICODE ('\''),
  TO_UNICODE (0)
} ;

//--- Syntax error message for terminal '$NM$' :
static const utf32 gSyntaxErrorMessage_NM [] = {
  TO_UNICODE ('O'),
  TO_UNICODE ('b'),
  TO_UNICODE ('j'),
  TO_UNICODE ('e'),
  TO_UNICODE ('c'),
  TO_UNICODE ('t'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('N'),
  TO_UNICODE ('M'),
  TO_UNICODE ('\''),
  TO_UNICODE (0)
} ;

//--- Syntax error message for terminal '$APPMODE$' :
static const utf32 gSyntaxErrorMessage_APPMODE [] = {
  TO_UNICODE ('O'),
  TO_UNICODE ('b'),
  TO_UNICODE ('j'),
  TO_UNICODE ('e'),
  TO_UNICODE ('c'),
  TO_UNICODE ('t'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('A'),
  TO_UNICODE ('P'),
  TO_UNICODE ('P'),
  TO_UNICODE ('M'),
  TO_UNICODE ('O'),
  TO_UNICODE ('D'),
  TO_UNICODE ('E'),
  TO_UNICODE ('\''),
  TO_UNICODE (0)
} ;

//--- Syntax error message for terminal '$IPDU$' :
static const utf32 gSyntaxErrorMessage_IPDU [] = {
  TO_UNICODE ('O'),
  TO_UNICODE ('b'),
  TO_UNICODE ('j'),
  TO_UNICODE ('e'),
  TO_UNICODE ('c'),
  TO_UNICODE ('t'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('I'),
  TO_UNICODE ('P'),
  TO_UNICODE ('D'),
  TO_UNICODE ('U'),
  TO_UNICODE ('\''),
  TO_UNICODE (0)
} ;

//--- Syntax error message for terminal '$CPU$' :
static const utf32 gSyntaxErrorMessage_CPU [] = {
  TO_UNICODE ('O'),
  TO_UNICODE ('b'),
  TO_UNICODE ('j'),
  TO_UNICODE ('e'),
  TO_UNICODE ('c'),
  TO_UNICODE ('t'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('C'),
  TO_UNICODE ('P'),
  TO_UNICODE ('U'),
  TO_UNICODE ('\''),
  TO_UNICODE (0)
} ;

//--- Syntax error message for terminal '$UINT32$' :
static const utf32 gSyntaxErrorMessage_UINT_33__32_ [] = {
  TO_UNICODE ('t'),
  TO_UNICODE ('y'),
  TO_UNICODE ('p'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('U'),
  TO_UNICODE ('I'),
  TO_UNICODE ('N'),
  TO_UNICODE ('T'),
  TO_UNICODE ('3'),
  TO_UNICODE ('2'),
  TO_UNICODE ('\''),
  TO_UNICODE (0)
} ;

//--- Syntax error message for terminal '$INT32$' :
static const utf32 gSyntaxErrorMessage_INT_33__32_ [] = {
  TO_UNICODE ('t'),
  TO_UNICODE ('y'),
  TO_UNICODE ('p'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('I'),
  TO_UNICODE ('N'),
  TO_UNICODE ('T'),
  TO_UNICODE ('3'),
  TO_UNICODE ('2'),
  TO_UNICODE ('\''),
  TO_UNICODE (0)
} ;

//--- Syntax error message for terminal '$UINT64$' :
static const utf32 gSyntaxErrorMessage_UINT_36__34_ [] = {
  TO_UNICODE ('t'),
  TO_UNICODE ('y'),
  TO_UNICODE ('p'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('U'),
  TO_UNICODE ('I'),
  TO_UNICODE ('N'),
  TO_UNICODE ('T'),
  TO_UNICODE ('6'),
  TO_UNICODE ('4'),
  TO_UNICODE ('\''),
  TO_UNICODE (0)
} ;

//--- Syntax error message for terminal '$INT64$' :
static const utf32 gSyntaxErrorMessage_INT_36__34_ [] = {
  TO_UNICODE ('t'),
  TO_UNICODE ('y'),
  TO_UNICODE ('p'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('I'),
  TO_UNICODE ('N'),
  TO_UNICODE ('T'),
  TO_UNICODE ('6'),
  TO_UNICODE ('4'),
  TO_UNICODE ('\''),
  TO_UNICODE (0)
} ;

//--- Syntax error message for terminal '$FLOAT$' :
static const utf32 gSyntaxErrorMessage_FLOAT [] = {
  TO_UNICODE ('t'),
  TO_UNICODE ('y'),
  TO_UNICODE ('p'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('F'),
  TO_UNICODE ('L'),
  TO_UNICODE ('O'),
  TO_UNICODE ('A'),
  TO_UNICODE ('T'),
  TO_UNICODE ('\''),
  TO_UNICODE (0)
} ;

//--- Syntax error message for terminal '$ENUM$' :
static const utf32 gSyntaxErrorMessage_ENUM [] = {
  TO_UNICODE ('t'),
  TO_UNICODE ('y'),
  TO_UNICODE ('p'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('E'),
  TO_UNICODE ('N'),
  TO_UNICODE ('U'),
  TO_UNICODE ('M'),
  TO_UNICODE ('\''),
  TO_UNICODE (0)
} ;

//--- Syntax error message for terminal '$STRING$' :
static const utf32 gSyntaxErrorMessage_STRING [] = {
  TO_UNICODE ('t'),
  TO_UNICODE ('y'),
  TO_UNICODE ('p'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('S'),
  TO_UNICODE ('T'),
  TO_UNICODE ('R'),
  TO_UNICODE ('I'),
  TO_UNICODE ('N'),
  TO_UNICODE ('G'),
  TO_UNICODE ('\''),
  TO_UNICODE (0)
} ;

//--- Syntax error message for terminal '$BOOLEAN$' :
static const utf32 gSyntaxErrorMessage_BOOLEAN [] = {
  TO_UNICODE ('t'),
  TO_UNICODE ('y'),
  TO_UNICODE ('p'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('B'),
  TO_UNICODE ('O'),
  TO_UNICODE ('O'),
  TO_UNICODE ('L'),
  TO_UNICODE ('E'),
  TO_UNICODE ('A'),
  TO_UNICODE ('N'),
  TO_UNICODE ('\''),
  TO_UNICODE (0)
} ;

//--- Syntax error message for terminal '$WITH_AUTO$' :
static const utf32 gSyntaxErrorMessage_WITH_5F_AUTO [] = {
  TO_UNICODE ('s'),
  TO_UNICODE ('p'),
  TO_UNICODE ('e'),
  TO_UNICODE ('c'),
  TO_UNICODE ('i'),
  TO_UNICODE ('f'),
  TO_UNICODE ('i'),
  TO_UNICODE ('e'),
  TO_UNICODE ('r'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('W'),
  TO_UNICODE ('I'),
  TO_UNICODE ('T'),
  TO_UNICODE ('H'),
  TO_UNICODE ('_'),
  TO_UNICODE ('A'),
  TO_UNICODE ('U'),
  TO_UNICODE ('T'),
  TO_UNICODE ('O'),
  TO_UNICODE ('\''),
  TO_UNICODE (0)
} ;

//--- Syntax error message for terminal '$NO_DEFAULT$' :
static const utf32 gSyntaxErrorMessage_NO_5F_DEFAULT [] = {
  TO_UNICODE ('s'),
  TO_UNICODE ('p'),
  TO_UNICODE ('e'),
  TO_UNICODE ('c'),
  TO_UNICODE ('i'),
  TO_UNICODE ('f'),
  TO_UNICODE ('i'),
  TO_UNICODE ('e'),
  TO_UNICODE ('r'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('N'),
  TO_UNICODE ('O'),
  TO_UNICODE ('_'),
  TO_UNICODE ('D'),
  TO_UNICODE ('E'),
  TO_UNICODE ('F'),
  TO_UNICODE ('A'),
  TO_UNICODE ('U'),
  TO_UNICODE ('L'),
  TO_UNICODE ('T'),
  TO_UNICODE ('\''),
  TO_UNICODE (0)
} ;

//--- Syntax error message for terminal '$AUTO$' :
static const utf32 gSyntaxErrorMessage_AUTO [] = {
  TO_UNICODE ('s'),
  TO_UNICODE ('p'),
  TO_UNICODE ('e'),
  TO_UNICODE ('c'),
  TO_UNICODE ('i'),
  TO_UNICODE ('f'),
  TO_UNICODE ('i'),
  TO_UNICODE ('e'),
  TO_UNICODE ('r'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('A'),
  TO_UNICODE ('U'),
  TO_UNICODE ('T'),
  TO_UNICODE ('O'),
  TO_UNICODE ('\''),
  TO_UNICODE (0)
} ;

//--- Syntax error message for terminal '$MASK$' :
static const utf32 gSyntaxErrorMessage_MASK [] = {
  TO_UNICODE ('s'),
  TO_UNICODE ('p'),
  TO_UNICODE ('e'),
  TO_UNICODE ('c'),
  TO_UNICODE ('i'),
  TO_UNICODE ('f'),
  TO_UNICODE ('i'),
  TO_UNICODE ('e'),
  TO_UNICODE ('r'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('M'),
  TO_UNICODE ('A'),
  TO_UNICODE ('S'),
  TO_UNICODE ('K'),
  TO_UNICODE ('\''),
  TO_UNICODE (0)
} ;

//--- Syntax error message for terminal '$CATEGORY$' :
static const utf32 gSyntaxErrorMessage_CATEGORY [] = {
  TO_UNICODE ('s'),
  TO_UNICODE ('p'),
  TO_UNICODE ('e'),
  TO_UNICODE ('c'),
  TO_UNICODE ('i'),
  TO_UNICODE ('f'),
  TO_UNICODE ('i'),
  TO_UNICODE ('e'),
  TO_UNICODE ('r'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('C'),
  TO_UNICODE ('A'),
  TO_UNICODE ('T'),
  TO_UNICODE ('E'),
  TO_UNICODE ('G'),
  TO_UNICODE ('O'),
  TO_UNICODE ('R'),
  TO_UNICODE ('Y'),
  TO_UNICODE ('\''),
  TO_UNICODE (0)
} ;

//--- Syntax error message for terminal '$OS_TYPE$' :
static const utf32 gSyntaxErrorMessage_OS_5F_TYPE [] = {
  TO_UNICODE ('o'),
  TO_UNICODE ('b'),
  TO_UNICODE ('j'),
  TO_UNICODE ('e'),
  TO_UNICODE ('c'),
  TO_UNICODE ('t'),
  TO_UNICODE (' '),
  TO_UNICODE ('r'),
  TO_UNICODE ('e'),
  TO_UNICODE ('f'),
  TO_UNICODE ('e'),
  TO_UNICODE ('r'),
  TO_UNICODE ('e'),
  TO_UNICODE ('n'),
  TO_UNICODE ('c'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('t'),
  TO_UNICODE ('y'),
  TO_UNICODE ('p'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('O'),
  TO_UNICODE ('S'),
  TO_UNICODE ('_'),
  TO_UNICODE ('T'),
  TO_UNICODE ('Y'),
  TO_UNICODE ('P'),
  TO_UNICODE ('E'),
  TO_UNICODE ('\''),
  TO_UNICODE (0)
} ;

//--- Syntax error message for terminal '$TASK_TYPE$' :
static const utf32 gSyntaxErrorMessage_TASK_5F_TYPE [] = {
  TO_UNICODE ('o'),
  TO_UNICODE ('b'),
  TO_UNICODE ('j'),
  TO_UNICODE ('e'),
  TO_UNICODE ('c'),
  TO_UNICODE ('t'),
  TO_UNICODE (' '),
  TO_UNICODE ('r'),
  TO_UNICODE ('e'),
  TO_UNICODE ('f'),
  TO_UNICODE ('e'),
  TO_UNICODE ('r'),
  TO_UNICODE ('e'),
  TO_UNICODE ('n'),
  TO_UNICODE ('c'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('t'),
  TO_UNICODE ('y'),
  TO_UNICODE ('p'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('T'),
  TO_UNICODE ('A'),
  TO_UNICODE ('S'),
  TO_UNICODE ('K'),
  TO_UNICODE ('_'),
  TO_UNICODE ('T'),
  TO_UNICODE ('Y'),
  TO_UNICODE ('P'),
  TO_UNICODE ('E'),
  TO_UNICODE ('\''),
  TO_UNICODE (0)
} ;

//--- Syntax error message for terminal '$COUNTER_TYPE$' :
static const utf32 gSyntaxErrorMessage_COUNTER_5F_TYPE [] = {
  TO_UNICODE ('o'),
  TO_UNICODE ('b'),
  TO_UNICODE ('j'),
  TO_UNICODE ('e'),
  TO_UNICODE ('c'),
  TO_UNICODE ('t'),
  TO_UNICODE (' '),
  TO_UNICODE ('r'),
  TO_UNICODE ('e'),
  TO_UNICODE ('f'),
  TO_UNICODE ('e'),
  TO_UNICODE ('r'),
  TO_UNICODE ('e'),
  TO_UNICODE ('n'),
  TO_UNICODE ('c'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('t'),
  TO_UNICODE ('y'),
  TO_UNICODE ('p'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('C'),
  TO_UNICODE ('O'),
  TO_UNICODE ('U'),
  TO_UNICODE ('N'),
  TO_UNICODE ('T'),
  TO_UNICODE ('E'),
  TO_UNICODE ('R'),
  TO_UNICODE ('_'),
  TO_UNICODE ('T'),
  TO_UNICODE ('Y'),
  TO_UNICODE ('P'),
  TO_UNICODE ('E'),
  TO_UNICODE ('\''),
  TO_UNICODE (0)
} ;

//--- Syntax error message for terminal '$ALARM_TYPE$' :
static const utf32 gSyntaxErrorMessage_ALARM_5F_TYPE [] = {
  TO_UNICODE ('o'),
  TO_UNICODE ('b'),
  TO_UNICODE ('j'),
  TO_UNICODE ('e'),
  TO_UNICODE ('c'),
  TO_UNICODE ('t'),
  TO_UNICODE (' '),
  TO_UNICODE ('r'),
  TO_UNICODE ('e'),
  TO_UNICODE ('f'),
  TO_UNICODE ('e'),
  TO_UNICODE ('r'),
  TO_UNICODE ('e'),
  TO_UNICODE ('n'),
  TO_UNICODE ('c'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('t'),
  TO_UNICODE ('y'),
  TO_UNICODE ('p'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('A'),
  TO_UNICODE ('L'),
  TO_UNICODE ('A'),
  TO_UNICODE ('R'),
  TO_UNICODE ('M'),
  TO_UNICODE ('_'),
  TO_UNICODE ('T'),
  TO_UNICODE ('Y'),
  TO_UNICODE ('P'),
  TO_UNICODE ('E'),
  TO_UNICODE ('\''),
  TO_UNICODE (0)
} ;

//--- Syntax error message for terminal '$RESOURCE_TYPE$' :
static const utf32 gSyntaxErrorMessage_RESOURCE_5F_TYPE [] = {
  TO_UNICODE ('o'),
  TO_UNICODE ('b'),
  TO_UNICODE ('j'),
  TO_UNICODE ('e'),
  TO_UNICODE ('c'),
  TO_UNICODE ('t'),
  TO_UNICODE (' '),
  TO_UNICODE ('r'),
  TO_UNICODE ('e'),
  TO_UNICODE ('f'),
  TO_UNICODE ('e'),
  TO_UNICODE ('r'),
  TO_UNICODE ('e'),
  TO_UNICODE ('n'),
  TO_UNICODE ('c'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('t'),
  TO_UNICODE ('y'),
  TO_UNICODE ('p'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('R'),
  TO_UNICODE ('E'),
  TO_UNICODE ('S'),
  TO_UNICODE ('O'),
  TO_UNICODE ('U'),
  TO_UNICODE ('R'),
  TO_UNICODE ('C'),
  TO_UNICODE ('E'),
  TO_UNICODE ('_'),
  TO_UNICODE ('T'),
  TO_UNICODE ('Y'),
  TO_UNICODE ('P'),
  TO_UNICODE ('E'),
  TO_UNICODE ('\''),
  TO_UNICODE (0)
} ;

//--- Syntax error message for terminal '$EVENT_TYPE$' :
static const utf32 gSyntaxErrorMessage_EVENT_5F_TYPE [] = {
  TO_UNICODE ('o'),
  TO_UNICODE ('b'),
  TO_UNICODE ('j'),
  TO_UNICODE ('e'),
  TO_UNICODE ('c'),
  TO_UNICODE ('t'),
  TO_UNICODE (' '),
  TO_UNICODE ('r'),
  TO_UNICODE ('e'),
  TO_UNICODE ('f'),
  TO_UNICODE ('e'),
  TO_UNICODE ('r'),
  TO_UNICODE ('e'),
  TO_UNICODE ('n'),
  TO_UNICODE ('c'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('t'),
  TO_UNICODE ('y'),
  TO_UNICODE ('p'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('E'),
  TO_UNICODE ('V'),
  TO_UNICODE ('E'),
  TO_UNICODE ('N'),
  TO_UNICODE ('T'),
  TO_UNICODE ('_'),
  TO_UNICODE ('T'),
  TO_UNICODE ('Y'),
  TO_UNICODE ('P'),
  TO_UNICODE ('E'),
  TO_UNICODE ('\''),
  TO_UNICODE (0)
} ;

//--- Syntax error message for terminal '$ISR_TYPE$' :
static const utf32 gSyntaxErrorMessage_ISR_5F_TYPE [] = {
  TO_UNICODE ('o'),
  TO_UNICODE ('b'),
  TO_UNICODE ('j'),
  TO_UNICODE ('e'),
  TO_UNICODE ('c'),
  TO_UNICODE ('t'),
  TO_UNICODE (' '),
  TO_UNICODE ('r'),
  TO_UNICODE ('e'),
  TO_UNICODE ('f'),
  TO_UNICODE ('e'),
  TO_UNICODE ('r'),
  TO_UNICODE ('e'),
  TO_UNICODE ('n'),
  TO_UNICODE ('c'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('t'),
  TO_UNICODE ('y'),
  TO_UNICODE ('p'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('I'),
  TO_UNICODE ('S'),
  TO_UNICODE ('R'),
  TO_UNICODE ('_'),
  TO_UNICODE ('T'),
  TO_UNICODE ('Y'),
  TO_UNICODE ('P'),
  TO_UNICODE ('E'),
  TO_UNICODE ('\''),
  TO_UNICODE (0)
} ;

//--- Syntax error message for terminal '$MESSAGE_TYPE$' :
static const utf32 gSyntaxErrorMessage_MESSAGE_5F_TYPE [] = {
  TO_UNICODE ('o'),
  TO_UNICODE ('b'),
  TO_UNICODE ('j'),
  TO_UNICODE ('e'),
  TO_UNICODE ('c'),
  TO_UNICODE ('t'),
  TO_UNICODE (' '),
  TO_UNICODE ('r'),
  TO_UNICODE ('e'),
  TO_UNICODE ('f'),
  TO_UNICODE ('e'),
  TO_UNICODE ('r'),
  TO_UNICODE ('e'),
  TO_UNICODE ('n'),
  TO_UNICODE ('c'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('t'),
  TO_UNICODE ('y'),
  TO_UNICODE ('p'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('M'),
  TO_UNICODE ('E'),
  TO_UNICODE ('S'),
  TO_UNICODE ('S'),
  TO_UNICODE ('A'),
  TO_UNICODE ('G'),
  TO_UNICODE ('E'),
  TO_UNICODE ('_'),
  TO_UNICODE ('T'),
  TO_UNICODE ('Y'),
  TO_UNICODE ('P'),
  TO_UNICODE ('E'),
  TO_UNICODE ('\''),
  TO_UNICODE (0)
} ;

//--- Syntax error message for terminal '$COM_TYPE$' :
static const utf32 gSyntaxErrorMessage_COM_5F_TYPE [] = {
  TO_UNICODE ('o'),
  TO_UNICODE ('b'),
  TO_UNICODE ('j'),
  TO_UNICODE ('e'),
  TO_UNICODE ('c'),
  TO_UNICODE ('t'),
  TO_UNICODE (' '),
  TO_UNICODE ('r'),
  TO_UNICODE ('e'),
  TO_UNICODE ('f'),
  TO_UNICODE ('e'),
  TO_UNICODE ('r'),
  TO_UNICODE ('e'),
  TO_UNICODE ('n'),
  TO_UNICODE ('c'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('t'),
  TO_UNICODE ('y'),
  TO_UNICODE ('p'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('C'),
  TO_UNICODE ('O'),
  TO_UNICODE ('M'),
  TO_UNICODE ('_'),
  TO_UNICODE ('T'),
  TO_UNICODE ('Y'),
  TO_UNICODE ('P'),
  TO_UNICODE ('E'),
  TO_UNICODE ('\''),
  TO_UNICODE (0)
} ;

//--- Syntax error message for terminal '$NM_TYPE$' :
static const utf32 gSyntaxErrorMessage_NM_5F_TYPE [] = {
  TO_UNICODE ('o'),
  TO_UNICODE ('b'),
  TO_UNICODE ('j'),
  TO_UNICODE ('e'),
  TO_UNICODE ('c'),
  TO_UNICODE ('t'),
  TO_UNICODE (' '),
  TO_UNICODE ('r'),
  TO_UNICODE ('e'),
  TO_UNICODE ('f'),
  TO_UNICODE ('e'),
  TO_UNICODE ('r'),
  TO_UNICODE ('e'),
  TO_UNICODE ('n'),
  TO_UNICODE ('c'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('t'),
  TO_UNICODE ('y'),
  TO_UNICODE ('p'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('N'),
  TO_UNICODE ('M'),
  TO_UNICODE ('_'),
  TO_UNICODE ('T'),
  TO_UNICODE ('Y'),
  TO_UNICODE ('P'),
  TO_UNICODE ('E'),
  TO_UNICODE ('\''),
  TO_UNICODE (0)
} ;

//--- Syntax error message for terminal '$APPMODE_TYPE$' :
static const utf32 gSyntaxErrorMessage_APPMODE_5F_TYPE [] = {
  TO_UNICODE ('o'),
  TO_UNICODE ('b'),
  TO_UNICODE ('j'),
  TO_UNICODE ('e'),
  TO_UNICODE ('c'),
  TO_UNICODE ('t'),
  TO_UNICODE (' '),
  TO_UNICODE ('r'),
  TO_UNICODE ('e'),
  TO_UNICODE ('f'),
  TO_UNICODE ('e'),
  TO_UNICODE ('r'),
  TO_UNICODE ('e'),
  TO_UNICODE ('n'),
  TO_UNICODE ('c'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('t'),
  TO_UNICODE ('y'),
  TO_UNICODE ('p'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('A'),
  TO_UNICODE ('P'),
  TO_UNICODE ('P'),
  TO_UNICODE ('M'),
  TO_UNICODE ('O'),
  TO_UNICODE ('D'),
  TO_UNICODE ('E'),
  TO_UNICODE ('_'),
  TO_UNICODE ('T'),
  TO_UNICODE ('Y'),
  TO_UNICODE ('P'),
  TO_UNICODE ('E'),
  TO_UNICODE ('\''),
  TO_UNICODE (0)
} ;

//--- Syntax error message for terminal '$IPDU_TYPE$' :
static const utf32 gSyntaxErrorMessage_IPDU_5F_TYPE [] = {
  TO_UNICODE ('o'),
  TO_UNICODE ('b'),
  TO_UNICODE ('j'),
  TO_UNICODE ('e'),
  TO_UNICODE ('c'),
  TO_UNICODE ('t'),
  TO_UNICODE (' '),
  TO_UNICODE ('r'),
  TO_UNICODE ('e'),
  TO_UNICODE ('f'),
  TO_UNICODE ('e'),
  TO_UNICODE ('r'),
  TO_UNICODE ('e'),
  TO_UNICODE ('n'),
  TO_UNICODE ('c'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('t'),
  TO_UNICODE ('y'),
  TO_UNICODE ('p'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('I'),
  TO_UNICODE ('P'),
  TO_UNICODE ('D'),
  TO_UNICODE ('U'),
  TO_UNICODE ('_'),
  TO_UNICODE ('T'),
  TO_UNICODE ('Y'),
  TO_UNICODE ('P'),
  TO_UNICODE ('E'),
  TO_UNICODE ('\''),
  TO_UNICODE (0)
} ;

//--- Syntax error message for terminal '$STATUS$' :
static const utf32 gSyntaxErrorMessage_STATUS [] = {
  TO_UNICODE ('o'),
  TO_UNICODE ('s'),
  TO_UNICODE (' '),
  TO_UNICODE ('a'),
  TO_UNICODE ('t'),
  TO_UNICODE ('t'),
  TO_UNICODE ('r'),
  TO_UNICODE ('i'),
  TO_UNICODE ('b'),
  TO_UNICODE ('u'),
  TO_UNICODE ('t'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('S'),
  TO_UNICODE ('T'),
  TO_UNICODE ('A'),
  TO_UNICODE ('T'),
  TO_UNICODE ('U'),
  TO_UNICODE ('S'),
  TO_UNICODE ('\''),
  TO_UNICODE (0)
} ;

//--- Syntax error message for terminal '$EXTENDED$' :
static const utf32 gSyntaxErrorMessage_EXTENDED [] = {
  TO_UNICODE ('o'),
  TO_UNICODE ('s'),
  TO_UNICODE (' '),
  TO_UNICODE ('a'),
  TO_UNICODE ('t'),
  TO_UNICODE ('t'),
  TO_UNICODE ('r'),
  TO_UNICODE ('i'),
  TO_UNICODE ('b'),
  TO_UNICODE ('u'),
  TO_UNICODE ('t'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('E'),
  TO_UNICODE ('X'),
  TO_UNICODE ('T'),
  TO_UNICODE ('E'),
  TO_UNICODE ('N'),
  TO_UNICODE ('D'),
  TO_UNICODE ('E'),
  TO_UNICODE ('D'),
  TO_UNICODE ('\''),
  TO_UNICODE (0)
} ;

//--- Syntax error message for terminal '$STARTUPHOOK$' :
static const utf32 gSyntaxErrorMessage_STARTUPHOOK [] = {
  TO_UNICODE ('o'),
  TO_UNICODE ('s'),
  TO_UNICODE (' '),
  TO_UNICODE ('a'),
  TO_UNICODE ('t'),
  TO_UNICODE ('t'),
  TO_UNICODE ('r'),
  TO_UNICODE ('i'),
  TO_UNICODE ('b'),
  TO_UNICODE ('u'),
  TO_UNICODE ('t'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('S'),
  TO_UNICODE ('T'),
  TO_UNICODE ('A'),
  TO_UNICODE ('R'),
  TO_UNICODE ('T'),
  TO_UNICODE ('U'),
  TO_UNICODE ('P'),
  TO_UNICODE ('H'),
  TO_UNICODE ('O'),
  TO_UNICODE ('O'),
  TO_UNICODE ('K'),
  TO_UNICODE ('\''),
  TO_UNICODE (0)
} ;

//--- Syntax error message for terminal '$ERRORHOOK$' :
static const utf32 gSyntaxErrorMessage_ERRORHOOK [] = {
  TO_UNICODE ('o'),
  TO_UNICODE ('s'),
  TO_UNICODE (' '),
  TO_UNICODE ('a'),
  TO_UNICODE ('t'),
  TO_UNICODE ('t'),
  TO_UNICODE ('r'),
  TO_UNICODE ('i'),
  TO_UNICODE ('b'),
  TO_UNICODE ('u'),
  TO_UNICODE ('t'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('E'),
  TO_UNICODE ('R'),
  TO_UNICODE ('R'),
  TO_UNICODE ('O'),
  TO_UNICODE ('R'),
  TO_UNICODE ('H'),
  TO_UNICODE ('O'),
  TO_UNICODE ('O'),
  TO_UNICODE ('K'),
  TO_UNICODE ('\''),
  TO_UNICODE (0)
} ;

//--- Syntax error message for terminal '$SHUTDOWNHOOK$' :
static const utf32 gSyntaxErrorMessage_SHUTDOWNHOOK [] = {
  TO_UNICODE ('o'),
  TO_UNICODE ('s'),
  TO_UNICODE (' '),
  TO_UNICODE ('a'),
  TO_UNICODE ('t'),
  TO_UNICODE ('t'),
  TO_UNICODE ('r'),
  TO_UNICODE ('i'),
  TO_UNICODE ('b'),
  TO_UNICODE ('u'),
  TO_UNICODE ('t'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('S'),
  TO_UNICODE ('H'),
  TO_UNICODE ('U'),
  TO_UNICODE ('T'),
  TO_UNICODE ('D'),
  TO_UNICODE ('O'),
  TO_UNICODE ('W'),
  TO_UNICODE ('N'),
  TO_UNICODE ('H'),
  TO_UNICODE ('O'),
  TO_UNICODE ('O'),
  TO_UNICODE ('K'),
  TO_UNICODE ('\''),
  TO_UNICODE (0)
} ;

//--- Syntax error message for terminal '$PRETASKHOOK$' :
static const utf32 gSyntaxErrorMessage_PRETASKHOOK [] = {
  TO_UNICODE ('o'),
  TO_UNICODE ('s'),
  TO_UNICODE (' '),
  TO_UNICODE ('a'),
  TO_UNICODE ('t'),
  TO_UNICODE ('t'),
  TO_UNICODE ('r'),
  TO_UNICODE ('i'),
  TO_UNICODE ('b'),
  TO_UNICODE ('u'),
  TO_UNICODE ('t'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('P'),
  TO_UNICODE ('R'),
  TO_UNICODE ('E'),
  TO_UNICODE ('T'),
  TO_UNICODE ('A'),
  TO_UNICODE ('S'),
  TO_UNICODE ('K'),
  TO_UNICODE ('H'),
  TO_UNICODE ('O'),
  TO_UNICODE ('O'),
  TO_UNICODE ('K'),
  TO_UNICODE ('\''),
  TO_UNICODE (0)
} ;

//--- Syntax error message for terminal '$POSTTASKHOOK$' :
static const utf32 gSyntaxErrorMessage_POSTTASKHOOK [] = {
  TO_UNICODE ('o'),
  TO_UNICODE ('s'),
  TO_UNICODE (' '),
  TO_UNICODE ('a'),
  TO_UNICODE ('t'),
  TO_UNICODE ('t'),
  TO_UNICODE ('r'),
  TO_UNICODE ('i'),
  TO_UNICODE ('b'),
  TO_UNICODE ('u'),
  TO_UNICODE ('t'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('P'),
  TO_UNICODE ('O'),
  TO_UNICODE ('S'),
  TO_UNICODE ('T'),
  TO_UNICODE ('T'),
  TO_UNICODE ('A'),
  TO_UNICODE ('S'),
  TO_UNICODE ('K'),
  TO_UNICODE ('H'),
  TO_UNICODE ('O'),
  TO_UNICODE ('O'),
  TO_UNICODE ('K'),
  TO_UNICODE ('\''),
  TO_UNICODE (0)
} ;

//--- Syntax error message for terminal '$USEGETSERVICEID$' :
static const utf32 gSyntaxErrorMessage_USEGETSERVICEID [] = {
  TO_UNICODE ('o'),
  TO_UNICODE ('s'),
  TO_UNICODE (' '),
  TO_UNICODE ('a'),
  TO_UNICODE ('t'),
  TO_UNICODE ('t'),
  TO_UNICODE ('r'),
  TO_UNICODE ('i'),
  TO_UNICODE ('b'),
  TO_UNICODE ('u'),
  TO_UNICODE ('t'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('U'),
  TO_UNICODE ('S'),
  TO_UNICODE ('E'),
  TO_UNICODE ('G'),
  TO_UNICODE ('E'),
  TO_UNICODE ('T'),
  TO_UNICODE ('S'),
  TO_UNICODE ('E'),
  TO_UNICODE ('R'),
  TO_UNICODE ('V'),
  TO_UNICODE ('I'),
  TO_UNICODE ('C'),
  TO_UNICODE ('E'),
  TO_UNICODE ('I'),
  TO_UNICODE ('D'),
  TO_UNICODE ('\''),
  TO_UNICODE (0)
} ;

//--- Syntax error message for terminal '$USEPARAMETERACCESS$' :
static const utf32 gSyntaxErrorMessage_USEPARAMETERACCESS [] = {
  TO_UNICODE ('o'),
  TO_UNICODE ('s'),
  TO_UNICODE (' '),
  TO_UNICODE ('a'),
  TO_UNICODE ('t'),
  TO_UNICODE ('t'),
  TO_UNICODE ('r'),
  TO_UNICODE ('i'),
  TO_UNICODE ('b'),
  TO_UNICODE ('u'),
  TO_UNICODE ('t'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('U'),
  TO_UNICODE ('S'),
  TO_UNICODE ('E'),
  TO_UNICODE ('P'),
  TO_UNICODE ('A'),
  TO_UNICODE ('R'),
  TO_UNICODE ('A'),
  TO_UNICODE ('M'),
  TO_UNICODE ('E'),
  TO_UNICODE ('T'),
  TO_UNICODE ('E'),
  TO_UNICODE ('R'),
  TO_UNICODE ('A'),
  TO_UNICODE ('C'),
  TO_UNICODE ('C'),
  TO_UNICODE ('E'),
  TO_UNICODE ('S'),
  TO_UNICODE ('S'),
  TO_UNICODE ('\''),
  TO_UNICODE (0)
} ;

//--- Syntax error message for terminal '$USERESSCHEDULER$' :
static const utf32 gSyntaxErrorMessage_USERESSCHEDULER [] = {
  TO_UNICODE ('o'),
  TO_UNICODE ('s'),
  TO_UNICODE (' '),
  TO_UNICODE ('a'),
  TO_UNICODE ('t'),
  TO_UNICODE ('t'),
  TO_UNICODE ('r'),
  TO_UNICODE ('i'),
  TO_UNICODE ('b'),
  TO_UNICODE ('u'),
  TO_UNICODE ('t'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('U'),
  TO_UNICODE ('S'),
  TO_UNICODE ('E'),
  TO_UNICODE ('R'),
  TO_UNICODE ('E'),
  TO_UNICODE ('S'),
  TO_UNICODE ('S'),
  TO_UNICODE ('C'),
  TO_UNICODE ('H'),
  TO_UNICODE ('E'),
  TO_UNICODE ('D'),
  TO_UNICODE ('U'),
  TO_UNICODE ('L'),
  TO_UNICODE ('E'),
  TO_UNICODE ('R'),
  TO_UNICODE ('\''),
  TO_UNICODE (0)
} ;

//--- Syntax error message for terminal '$SYSTEM_CALL$' :
static const utf32 gSyntaxErrorMessage_SYSTEM_5F_CALL [] = {
  TO_UNICODE ('o'),
  TO_UNICODE ('s'),
  TO_UNICODE (' '),
  TO_UNICODE ('a'),
  TO_UNICODE ('t'),
  TO_UNICODE ('t'),
  TO_UNICODE ('r'),
  TO_UNICODE ('i'),
  TO_UNICODE ('b'),
  TO_UNICODE ('u'),
  TO_UNICODE ('t'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('S'),
  TO_UNICODE ('Y'),
  TO_UNICODE ('S'),
  TO_UNICODE ('T'),
  TO_UNICODE ('E'),
  TO_UNICODE ('M'),
  TO_UNICODE ('_'),
  TO_UNICODE ('C'),
  TO_UNICODE ('A'),
  TO_UNICODE ('L'),
  TO_UNICODE ('L'),
  TO_UNICODE ('\''),
  TO_UNICODE (0)
} ;

//--- Syntax error message for terminal '$MEMMAP$' :
static const utf32 gSyntaxErrorMessage_MEMMAP [] = {
  TO_UNICODE ('o'),
  TO_UNICODE ('s'),
  TO_UNICODE (' '),
  TO_UNICODE ('a'),
  TO_UNICODE ('t'),
  TO_UNICODE ('t'),
  TO_UNICODE ('r'),
  TO_UNICODE ('i'),
  TO_UNICODE ('b'),
  TO_UNICODE ('u'),
  TO_UNICODE ('t'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('M'),
  TO_UNICODE ('E'),
  TO_UNICODE ('M'),
  TO_UNICODE ('M'),
  TO_UNICODE ('A'),
  TO_UNICODE ('P'),
  TO_UNICODE ('\''),
  TO_UNICODE (0)
} ;

//--- Syntax error message for terminal '$MEMORY_PROTECTION$' :
static const utf32 gSyntaxErrorMessage_MEMORY_5F_PROTECTION [] = {
  TO_UNICODE ('o'),
  TO_UNICODE ('s'),
  TO_UNICODE (' '),
  TO_UNICODE ('a'),
  TO_UNICODE ('t'),
  TO_UNICODE ('t'),
  TO_UNICODE ('r'),
  TO_UNICODE ('i'),
  TO_UNICODE ('b'),
  TO_UNICODE ('u'),
  TO_UNICODE ('t'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('M'),
  TO_UNICODE ('E'),
  TO_UNICODE ('M'),
  TO_UNICODE ('O'),
  TO_UNICODE ('R'),
  TO_UNICODE ('Y'),
  TO_UNICODE ('_'),
  TO_UNICODE ('P'),
  TO_UNICODE ('R'),
  TO_UNICODE ('O'),
  TO_UNICODE ('T'),
  TO_UNICODE ('E'),
  TO_UNICODE ('C'),
  TO_UNICODE ('T'),
  TO_UNICODE ('I'),
  TO_UNICODE ('O'),
  TO_UNICODE ('N'),
  TO_UNICODE ('\''),
  TO_UNICODE (0)
} ;

//--- Syntax error message for terminal '$TRACE$' :
static const utf32 gSyntaxErrorMessage_TRACE [] = {
  TO_UNICODE ('o'),
  TO_UNICODE ('s'),
  TO_UNICODE (' '),
  TO_UNICODE ('a'),
  TO_UNICODE ('t'),
  TO_UNICODE ('t'),
  TO_UNICODE ('r'),
  TO_UNICODE ('i'),
  TO_UNICODE ('b'),
  TO_UNICODE ('u'),
  TO_UNICODE ('t'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('T'),
  TO_UNICODE ('R'),
  TO_UNICODE ('A'),
  TO_UNICODE ('C'),
  TO_UNICODE ('E'),
  TO_UNICODE ('\''),
  TO_UNICODE (0)
} ;

//--- Syntax error message for terminal '$DEBUG$' :
static const utf32 gSyntaxErrorMessage_DEBUG [] = {
  TO_UNICODE ('o'),
  TO_UNICODE ('s'),
  TO_UNICODE (' '),
  TO_UNICODE ('a'),
  TO_UNICODE ('t'),
  TO_UNICODE ('t'),
  TO_UNICODE ('r'),
  TO_UNICODE ('i'),
  TO_UNICODE ('b'),
  TO_UNICODE ('u'),
  TO_UNICODE ('t'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('D'),
  TO_UNICODE ('E'),
  TO_UNICODE ('B'),
  TO_UNICODE ('U'),
  TO_UNICODE ('G'),
  TO_UNICODE ('\''),
  TO_UNICODE (0)
} ;

//--- Syntax error message for terminal '$FILE$' :
static const utf32 gSyntaxErrorMessage_FILE [] = {
  TO_UNICODE ('t'),
  TO_UNICODE ('r'),
  TO_UNICODE ('a'),
  TO_UNICODE ('c'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('a'),
  TO_UNICODE ('t'),
  TO_UNICODE ('t'),
  TO_UNICODE ('r'),
  TO_UNICODE ('i'),
  TO_UNICODE ('b'),
  TO_UNICODE ('u'),
  TO_UNICODE ('t'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('F'),
  TO_UNICODE ('I'),
  TO_UNICODE ('L'),
  TO_UNICODE ('E'),
  TO_UNICODE ('\''),
  TO_UNICODE (0)
} ;

//--- Syntax error message for terminal '$METHOD$' :
static const utf32 gSyntaxErrorMessage_METHOD [] = {
  TO_UNICODE ('t'),
  TO_UNICODE ('r'),
  TO_UNICODE ('a'),
  TO_UNICODE ('c'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('a'),
  TO_UNICODE ('t'),
  TO_UNICODE ('t'),
  TO_UNICODE ('r'),
  TO_UNICODE ('i'),
  TO_UNICODE ('b'),
  TO_UNICODE ('u'),
  TO_UNICODE ('t'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('M'),
  TO_UNICODE ('E'),
  TO_UNICODE ('T'),
  TO_UNICODE ('H'),
  TO_UNICODE ('O'),
  TO_UNICODE ('D'),
  TO_UNICODE ('\''),
  TO_UNICODE (0)
} ;

//--- Syntax error message for terminal '$FORMAT$' :
static const utf32 gSyntaxErrorMessage_FORMAT [] = {
  TO_UNICODE ('t'),
  TO_UNICODE ('r'),
  TO_UNICODE ('a'),
  TO_UNICODE ('c'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('a'),
  TO_UNICODE ('t'),
  TO_UNICODE ('t'),
  TO_UNICODE ('r'),
  TO_UNICODE ('i'),
  TO_UNICODE ('b'),
  TO_UNICODE ('u'),
  TO_UNICODE ('t'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('F'),
  TO_UNICODE ('O'),
  TO_UNICODE ('R'),
  TO_UNICODE ('M'),
  TO_UNICODE ('A'),
  TO_UNICODE ('T'),
  TO_UNICODE ('\''),
  TO_UNICODE (0)
} ;

//--- Syntax error message for terminal '$TRACE_TASK$' :
static const utf32 gSyntaxErrorMessage_TRACE_5F_TASK [] = {
  TO_UNICODE ('t'),
  TO_UNICODE ('r'),
  TO_UNICODE ('a'),
  TO_UNICODE ('c'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('a'),
  TO_UNICODE ('t'),
  TO_UNICODE ('t'),
  TO_UNICODE ('r'),
  TO_UNICODE ('i'),
  TO_UNICODE ('b'),
  TO_UNICODE ('u'),
  TO_UNICODE ('t'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('T'),
  TO_UNICODE ('R'),
  TO_UNICODE ('A'),
  TO_UNICODE ('C'),
  TO_UNICODE ('E'),
  TO_UNICODE ('_'),
  TO_UNICODE ('T'),
  TO_UNICODE ('A'),
  TO_UNICODE ('S'),
  TO_UNICODE ('K'),
  TO_UNICODE ('\''),
  TO_UNICODE (0)
} ;

//--- Syntax error message for terminal '$TRACE_ISR$' :
static const utf32 gSyntaxErrorMessage_TRACE_5F_ISR [] = {
  TO_UNICODE ('t'),
  TO_UNICODE ('r'),
  TO_UNICODE ('a'),
  TO_UNICODE ('c'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('a'),
  TO_UNICODE ('t'),
  TO_UNICODE ('t'),
  TO_UNICODE ('r'),
  TO_UNICODE ('i'),
  TO_UNICODE ('b'),
  TO_UNICODE ('u'),
  TO_UNICODE ('t'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('T'),
  TO_UNICODE ('R'),
  TO_UNICODE ('A'),
  TO_UNICODE ('C'),
  TO_UNICODE ('E'),
  TO_UNICODE ('_'),
  TO_UNICODE ('I'),
  TO_UNICODE ('S'),
  TO_UNICODE ('R'),
  TO_UNICODE ('\''),
  TO_UNICODE (0)
} ;

//--- Syntax error message for terminal '$TRACE_RESOURCE$' :
static const utf32 gSyntaxErrorMessage_TRACE_5F_RESOURCE [] = {
  TO_UNICODE ('t'),
  TO_UNICODE ('r'),
  TO_UNICODE ('a'),
  TO_UNICODE ('c'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('a'),
  TO_UNICODE ('t'),
  TO_UNICODE ('t'),
  TO_UNICODE ('r'),
  TO_UNICODE ('i'),
  TO_UNICODE ('b'),
  TO_UNICODE ('u'),
  TO_UNICODE ('t'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('T'),
  TO_UNICODE ('R'),
  TO_UNICODE ('A'),
  TO_UNICODE ('C'),
  TO_UNICODE ('E'),
  TO_UNICODE ('_'),
  TO_UNICODE ('R'),
  TO_UNICODE ('E'),
  TO_UNICODE ('S'),
  TO_UNICODE ('O'),
  TO_UNICODE ('U'),
  TO_UNICODE ('R'),
  TO_UNICODE ('C'),
  TO_UNICODE ('E'),
  TO_UNICODE ('\''),
  TO_UNICODE (0)
} ;

//--- Syntax error message for terminal '$TRACE_ALARM$' :
static const utf32 gSyntaxErrorMessage_TRACE_5F_ALARM [] = {
  TO_UNICODE ('t'),
  TO_UNICODE ('r'),
  TO_UNICODE ('a'),
  TO_UNICODE ('c'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('a'),
  TO_UNICODE ('t'),
  TO_UNICODE ('t'),
  TO_UNICODE ('r'),
  TO_UNICODE ('i'),
  TO_UNICODE ('b'),
  TO_UNICODE ('u'),
  TO_UNICODE ('t'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('T'),
  TO_UNICODE ('R'),
  TO_UNICODE ('A'),
  TO_UNICODE ('C'),
  TO_UNICODE ('E'),
  TO_UNICODE ('_'),
  TO_UNICODE ('A'),
  TO_UNICODE ('L'),
  TO_UNICODE ('A'),
  TO_UNICODE ('R'),
  TO_UNICODE ('M'),
  TO_UNICODE ('\''),
  TO_UNICODE (0)
} ;

//--- Syntax error message for terminal '$TRACE_USER$' :
static const utf32 gSyntaxErrorMessage_TRACE_5F_USER [] = {
  TO_UNICODE ('t'),
  TO_UNICODE ('r'),
  TO_UNICODE ('a'),
  TO_UNICODE ('c'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('a'),
  TO_UNICODE ('t'),
  TO_UNICODE ('t'),
  TO_UNICODE ('r'),
  TO_UNICODE ('i'),
  TO_UNICODE ('b'),
  TO_UNICODE ('u'),
  TO_UNICODE ('t'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('T'),
  TO_UNICODE ('R'),
  TO_UNICODE ('A'),
  TO_UNICODE ('C'),
  TO_UNICODE ('E'),
  TO_UNICODE ('_'),
  TO_UNICODE ('U'),
  TO_UNICODE ('S'),
  TO_UNICODE ('E'),
  TO_UNICODE ('R'),
  TO_UNICODE ('\''),
  TO_UNICODE (0)
} ;

//--- Syntax error message for terminal '$DESCRIPTION$' :
static const utf32 gSyntaxErrorMessage_DESCRIPTION [] = {
  TO_UNICODE ('t'),
  TO_UNICODE ('r'),
  TO_UNICODE ('a'),
  TO_UNICODE ('c'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('a'),
  TO_UNICODE ('t'),
  TO_UNICODE ('t'),
  TO_UNICODE ('r'),
  TO_UNICODE ('i'),
  TO_UNICODE ('b'),
  TO_UNICODE ('u'),
  TO_UNICODE ('t'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('D'),
  TO_UNICODE ('E'),
  TO_UNICODE ('S'),
  TO_UNICODE ('C'),
  TO_UNICODE ('R'),
  TO_UNICODE ('I'),
  TO_UNICODE ('P'),
  TO_UNICODE ('T'),
  TO_UNICODE ('I'),
  TO_UNICODE ('O'),
  TO_UNICODE ('N'),
  TO_UNICODE ('\''),
  TO_UNICODE (0)
} ;

//--- Syntax error message for terminal '$PRIORITY$' :
static const utf32 gSyntaxErrorMessage_PRIORITY [] = {
  TO_UNICODE ('t'),
  TO_UNICODE ('a'),
  TO_UNICODE ('s'),
  TO_UNICODE ('k'),
  TO_UNICODE (' '),
  TO_UNICODE ('a'),
  TO_UNICODE ('t'),
  TO_UNICODE ('t'),
  TO_UNICODE ('r'),
  TO_UNICODE ('i'),
  TO_UNICODE ('b'),
  TO_UNICODE ('u'),
  TO_UNICODE ('t'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('P'),
  TO_UNICODE ('R'),
  TO_UNICODE ('I'),
  TO_UNICODE ('O'),
  TO_UNICODE ('R'),
  TO_UNICODE ('I'),
  TO_UNICODE ('T'),
  TO_UNICODE ('Y'),
  TO_UNICODE ('\''),
  TO_UNICODE (0)
} ;

//--- Syntax error message for terminal '$SCHEDULE$' :
static const utf32 gSyntaxErrorMessage_SCHEDULE [] = {
  TO_UNICODE ('t'),
  TO_UNICODE ('a'),
  TO_UNICODE ('s'),
  TO_UNICODE ('k'),
  TO_UNICODE (' '),
  TO_UNICODE ('a'),
  TO_UNICODE ('t'),
  TO_UNICODE ('t'),
  TO_UNICODE ('r'),
  TO_UNICODE ('i'),
  TO_UNICODE ('b'),
  TO_UNICODE ('u'),
  TO_UNICODE ('t'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('S'),
  TO_UNICODE ('C'),
  TO_UNICODE ('H'),
  TO_UNICODE ('E'),
  TO_UNICODE ('D'),
  TO_UNICODE ('U'),
  TO_UNICODE ('L'),
  TO_UNICODE ('E'),
  TO_UNICODE ('\''),
  TO_UNICODE (0)
} ;

//--- Syntax error message for terminal '$ACTIVATION$' :
static const utf32 gSyntaxErrorMessage_ACTIVATION [] = {
  TO_UNICODE ('t'),
  TO_UNICODE ('a'),
  TO_UNICODE ('s'),
  TO_UNICODE ('k'),
  TO_UNICODE (' '),
  TO_UNICODE ('a'),
  TO_UNICODE ('t'),
  TO_UNICODE ('t'),
  TO_UNICODE ('r'),
  TO_UNICODE ('i'),
  TO_UNICODE ('b'),
  TO_UNICODE ('u'),
  TO_UNICODE ('t'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('A'),
  TO_UNICODE ('C'),
  TO_UNICODE ('T'),
  TO_UNICODE ('I'),
  TO_UNICODE ('V'),
  TO_UNICODE ('A'),
  TO_UNICODE ('T'),
  TO_UNICODE ('I'),
  TO_UNICODE ('O'),
  TO_UNICODE ('N'),
  TO_UNICODE ('\''),
  TO_UNICODE (0)
} ;

//--- Syntax error message for terminal '$AUTOSTART$' :
static const utf32 gSyntaxErrorMessage_AUTOSTART [] = {
  TO_UNICODE ('t'),
  TO_UNICODE ('a'),
  TO_UNICODE ('s'),
  TO_UNICODE ('k'),
  TO_UNICODE (' '),
  TO_UNICODE ('a'),
  TO_UNICODE ('t'),
  TO_UNICODE ('t'),
  TO_UNICODE ('r'),
  TO_UNICODE ('i'),
  TO_UNICODE ('b'),
  TO_UNICODE ('u'),
  TO_UNICODE ('t'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('A'),
  TO_UNICODE ('U'),
  TO_UNICODE ('T'),
  TO_UNICODE ('O'),
  TO_UNICODE ('S'),
  TO_UNICODE ('T'),
  TO_UNICODE ('A'),
  TO_UNICODE ('R'),
  TO_UNICODE ('T'),
  TO_UNICODE ('\''),
  TO_UNICODE (0)
} ;

//--- Syntax error message for terminal '$MAXALLOWEDVALUE$' :
static const utf32 gSyntaxErrorMessage_MAXALLOWEDVALUE [] = {
  TO_UNICODE ('c'),
  TO_UNICODE ('o'),
  TO_UNICODE ('u'),
  TO_UNICODE ('n'),
  TO_UNICODE ('t'),
  TO_UNICODE ('e'),
  TO_UNICODE ('r'),
  TO_UNICODE (' '),
  TO_UNICODE ('a'),
  TO_UNICODE ('t'),
  TO_UNICODE ('t'),
  TO_UNICODE ('r'),
  TO_UNICODE ('i'),
  TO_UNICODE ('b'),
  TO_UNICODE ('u'),
  TO_UNICODE ('t'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('M'),
  TO_UNICODE ('A'),
  TO_UNICODE ('X'),
  TO_UNICODE ('A'),
  TO_UNICODE ('L'),
  TO_UNICODE ('L'),
  TO_UNICODE ('O'),
  TO_UNICODE ('W'),
  TO_UNICODE ('E'),
  TO_UNICODE ('D'),
  TO_UNICODE ('V'),
  TO_UNICODE ('A'),
  TO_UNICODE ('L'),
  TO_UNICODE ('U'),
  TO_UNICODE ('E'),
  TO_UNICODE ('\''),
  TO_UNICODE (0)
} ;

//--- Syntax error message for terminal '$TICKSPERBASE$' :
static const utf32 gSyntaxErrorMessage_TICKSPERBASE [] = {
  TO_UNICODE ('c'),
  TO_UNICODE ('o'),
  TO_UNICODE ('u'),
  TO_UNICODE ('n'),
  TO_UNICODE ('t'),
  TO_UNICODE ('e'),
  TO_UNICODE ('r'),
  TO_UNICODE (' '),
  TO_UNICODE ('a'),
  TO_UNICODE ('t'),
  TO_UNICODE ('t'),
  TO_UNICODE ('r'),
  TO_UNICODE ('i'),
  TO_UNICODE ('b'),
  TO_UNICODE ('u'),
  TO_UNICODE ('t'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('T'),
  TO_UNICODE ('I'),
  TO_UNICODE ('C'),
  TO_UNICODE ('K'),
  TO_UNICODE ('S'),
  TO_UNICODE ('P'),
  TO_UNICODE ('E'),
  TO_UNICODE ('R'),
  TO_UNICODE ('B'),
  TO_UNICODE ('A'),
  TO_UNICODE ('S'),
  TO_UNICODE ('E'),
  TO_UNICODE ('\''),
  TO_UNICODE (0)
} ;

//--- Syntax error message for terminal '$MINCYCLE$' :
static const utf32 gSyntaxErrorMessage_MINCYCLE [] = {
  TO_UNICODE ('c'),
  TO_UNICODE ('o'),
  TO_UNICODE ('u'),
  TO_UNICODE ('n'),
  TO_UNICODE ('t'),
  TO_UNICODE ('e'),
  TO_UNICODE ('r'),
  TO_UNICODE (' '),
  TO_UNICODE ('a'),
  TO_UNICODE ('t'),
  TO_UNICODE ('t'),
  TO_UNICODE ('r'),
  TO_UNICODE ('i'),
  TO_UNICODE ('b'),
  TO_UNICODE ('u'),
  TO_UNICODE ('t'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('M'),
  TO_UNICODE ('I'),
  TO_UNICODE ('N'),
  TO_UNICODE ('C'),
  TO_UNICODE ('Y'),
  TO_UNICODE ('C'),
  TO_UNICODE ('L'),
  TO_UNICODE ('E'),
  TO_UNICODE ('\''),
  TO_UNICODE (0)
} ;

//--- Syntax error message for terminal '$TYPE$' :
static const utf32 gSyntaxErrorMessage_TYPE [] = {
  TO_UNICODE ('c'),
  TO_UNICODE ('o'),
  TO_UNICODE ('u'),
  TO_UNICODE ('n'),
  TO_UNICODE ('t'),
  TO_UNICODE ('e'),
  TO_UNICODE ('r'),
  TO_UNICODE (' '),
  TO_UNICODE ('a'),
  TO_UNICODE ('t'),
  TO_UNICODE ('t'),
  TO_UNICODE ('r'),
  TO_UNICODE ('i'),
  TO_UNICODE ('b'),
  TO_UNICODE ('u'),
  TO_UNICODE ('t'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('T'),
  TO_UNICODE ('Y'),
  TO_UNICODE ('P'),
  TO_UNICODE ('E'),
  TO_UNICODE ('\''),
  TO_UNICODE (0)
} ;

//--- Syntax error message for terminal '$UNIT$' :
static const utf32 gSyntaxErrorMessage_UNIT [] = {
  TO_UNICODE ('c'),
  TO_UNICODE ('o'),
  TO_UNICODE ('u'),
  TO_UNICODE ('n'),
  TO_UNICODE ('t'),
  TO_UNICODE ('e'),
  TO_UNICODE ('r'),
  TO_UNICODE (' '),
  TO_UNICODE ('a'),
  TO_UNICODE ('t'),
  TO_UNICODE ('t'),
  TO_UNICODE ('r'),
  TO_UNICODE ('i'),
  TO_UNICODE ('b'),
  TO_UNICODE ('u'),
  TO_UNICODE ('t'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('U'),
  TO_UNICODE ('N'),
  TO_UNICODE ('I'),
  TO_UNICODE ('T'),
  TO_UNICODE ('\''),
  TO_UNICODE (0)
} ;

//--- Syntax error message for terminal '$ACTION$' :
static const utf32 gSyntaxErrorMessage_ACTION [] = {
  TO_UNICODE ('a'),
  TO_UNICODE ('l'),
  TO_UNICODE ('a'),
  TO_UNICODE ('r'),
  TO_UNICODE ('m'),
  TO_UNICODE (' '),
  TO_UNICODE ('a'),
  TO_UNICODE ('t'),
  TO_UNICODE ('t'),
  TO_UNICODE ('r'),
  TO_UNICODE ('i'),
  TO_UNICODE ('b'),
  TO_UNICODE ('u'),
  TO_UNICODE ('t'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('A'),
  TO_UNICODE ('C'),
  TO_UNICODE ('T'),
  TO_UNICODE ('I'),
  TO_UNICODE ('O'),
  TO_UNICODE ('N'),
  TO_UNICODE ('\''),
  TO_UNICODE (0)
} ;

//--- Syntax error message for terminal '$SETEVENT$' :
static const utf32 gSyntaxErrorMessage_SETEVENT [] = {
  TO_UNICODE ('a'),
  TO_UNICODE ('l'),
  TO_UNICODE ('a'),
  TO_UNICODE ('r'),
  TO_UNICODE ('m'),
  TO_UNICODE (' '),
  TO_UNICODE ('a'),
  TO_UNICODE ('t'),
  TO_UNICODE ('t'),
  TO_UNICODE ('r'),
  TO_UNICODE ('i'),
  TO_UNICODE ('b'),
  TO_UNICODE ('u'),
  TO_UNICODE ('t'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('S'),
  TO_UNICODE ('E'),
  TO_UNICODE ('T'),
  TO_UNICODE ('E'),
  TO_UNICODE ('V'),
  TO_UNICODE ('E'),
  TO_UNICODE ('N'),
  TO_UNICODE ('T'),
  TO_UNICODE ('\''),
  TO_UNICODE (0)
} ;

//--- Syntax error message for terminal '$ACTIVATETASK$' :
static const utf32 gSyntaxErrorMessage_ACTIVATETASK [] = {
  TO_UNICODE ('a'),
  TO_UNICODE ('l'),
  TO_UNICODE ('a'),
  TO_UNICODE ('r'),
  TO_UNICODE ('m'),
  TO_UNICODE (' '),
  TO_UNICODE ('a'),
  TO_UNICODE ('t'),
  TO_UNICODE ('t'),
  TO_UNICODE ('r'),
  TO_UNICODE ('i'),
  TO_UNICODE ('b'),
  TO_UNICODE ('u'),
  TO_UNICODE ('t'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('A'),
  TO_UNICODE ('C'),
  TO_UNICODE ('T'),
  TO_UNICODE ('I'),
  TO_UNICODE ('V'),
  TO_UNICODE ('A'),
  TO_UNICODE ('T'),
  TO_UNICODE ('E'),
  TO_UNICODE ('T'),
  TO_UNICODE ('A'),
  TO_UNICODE ('S'),
  TO_UNICODE ('K'),
  TO_UNICODE ('\''),
  TO_UNICODE (0)
} ;

//--- Syntax error message for terminal '$ALARMCALLBACK$' :
static const utf32 gSyntaxErrorMessage_ALARMCALLBACK [] = {
  TO_UNICODE ('a'),
  TO_UNICODE ('l'),
  TO_UNICODE ('a'),
  TO_UNICODE ('r'),
  TO_UNICODE ('m'),
  TO_UNICODE (' '),
  TO_UNICODE ('a'),
  TO_UNICODE ('t'),
  TO_UNICODE ('t'),
  TO_UNICODE ('r'),
  TO_UNICODE ('i'),
  TO_UNICODE ('b'),
  TO_UNICODE ('u'),
  TO_UNICODE ('t'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('A'),
  TO_UNICODE ('L'),
  TO_UNICODE ('A'),
  TO_UNICODE ('R'),
  TO_UNICODE ('M'),
  TO_UNICODE ('C'),
  TO_UNICODE ('A'),
  TO_UNICODE ('L'),
  TO_UNICODE ('L'),
  TO_UNICODE ('B'),
  TO_UNICODE ('A'),
  TO_UNICODE ('C'),
  TO_UNICODE ('K'),
  TO_UNICODE ('\''),
  TO_UNICODE (0)
} ;

//--- Syntax error message for terminal '$ALARMCALLBACKNAME$' :
static const utf32 gSyntaxErrorMessage_ALARMCALLBACKNAME [] = {
  TO_UNICODE ('a'),
  TO_UNICODE ('l'),
  TO_UNICODE ('a'),
  TO_UNICODE ('r'),
  TO_UNICODE ('m'),
  TO_UNICODE (' '),
  TO_UNICODE ('a'),
  TO_UNICODE ('t'),
  TO_UNICODE ('t'),
  TO_UNICODE ('r'),
  TO_UNICODE ('i'),
  TO_UNICODE ('b'),
  TO_UNICODE ('u'),
  TO_UNICODE ('t'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('A'),
  TO_UNICODE ('L'),
  TO_UNICODE ('A'),
  TO_UNICODE ('R'),
  TO_UNICODE ('M'),
  TO_UNICODE ('C'),
  TO_UNICODE ('A'),
  TO_UNICODE ('L'),
  TO_UNICODE ('L'),
  TO_UNICODE ('B'),
  TO_UNICODE ('A'),
  TO_UNICODE ('C'),
  TO_UNICODE ('K'),
  TO_UNICODE ('N'),
  TO_UNICODE ('A'),
  TO_UNICODE ('M'),
  TO_UNICODE ('E'),
  TO_UNICODE ('\''),
  TO_UNICODE (0)
} ;

//--- Syntax error message for terminal '$ALARMTIME$' :
static const utf32 gSyntaxErrorMessage_ALARMTIME [] = {
  TO_UNICODE ('a'),
  TO_UNICODE ('l'),
  TO_UNICODE ('a'),
  TO_UNICODE ('r'),
  TO_UNICODE ('m'),
  TO_UNICODE (' '),
  TO_UNICODE ('a'),
  TO_UNICODE ('t'),
  TO_UNICODE ('t'),
  TO_UNICODE ('r'),
  TO_UNICODE ('i'),
  TO_UNICODE ('b'),
  TO_UNICODE ('u'),
  TO_UNICODE ('t'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('A'),
  TO_UNICODE ('L'),
  TO_UNICODE ('A'),
  TO_UNICODE ('R'),
  TO_UNICODE ('M'),
  TO_UNICODE ('T'),
  TO_UNICODE ('I'),
  TO_UNICODE ('M'),
  TO_UNICODE ('E'),
  TO_UNICODE ('\''),
  TO_UNICODE (0)
} ;

//--- Syntax error message for terminal '$CYCLETIME$' :
static const utf32 gSyntaxErrorMessage_CYCLETIME [] = {
  TO_UNICODE ('a'),
  TO_UNICODE ('l'),
  TO_UNICODE ('a'),
  TO_UNICODE ('r'),
  TO_UNICODE ('m'),
  TO_UNICODE (' '),
  TO_UNICODE ('a'),
  TO_UNICODE ('t'),
  TO_UNICODE ('t'),
  TO_UNICODE ('r'),
  TO_UNICODE ('i'),
  TO_UNICODE ('b'),
  TO_UNICODE ('u'),
  TO_UNICODE ('t'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('C'),
  TO_UNICODE ('Y'),
  TO_UNICODE ('C'),
  TO_UNICODE ('L'),
  TO_UNICODE ('E'),
  TO_UNICODE ('T'),
  TO_UNICODE ('I'),
  TO_UNICODE ('M'),
  TO_UNICODE ('E'),
  TO_UNICODE ('\''),
  TO_UNICODE (0)
} ;

//--- Syntax error message for terminal '$INCREMENTCOUNTER$' :
static const utf32 gSyntaxErrorMessage_INCREMENTCOUNTER [] = {
  TO_UNICODE ('a'),
  TO_UNICODE ('l'),
  TO_UNICODE ('a'),
  TO_UNICODE ('r'),
  TO_UNICODE ('m'),
  TO_UNICODE (' '),
  TO_UNICODE ('a'),
  TO_UNICODE ('t'),
  TO_UNICODE ('t'),
  TO_UNICODE ('r'),
  TO_UNICODE ('i'),
  TO_UNICODE ('b'),
  TO_UNICODE ('u'),
  TO_UNICODE ('t'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('I'),
  TO_UNICODE ('N'),
  TO_UNICODE ('C'),
  TO_UNICODE ('R'),
  TO_UNICODE ('E'),
  TO_UNICODE ('M'),
  TO_UNICODE ('E'),
  TO_UNICODE ('N'),
  TO_UNICODE ('T'),
  TO_UNICODE ('C'),
  TO_UNICODE ('O'),
  TO_UNICODE ('U'),
  TO_UNICODE ('N'),
  TO_UNICODE ('T'),
  TO_UNICODE ('E'),
  TO_UNICODE ('R'),
  TO_UNICODE ('\''),
  TO_UNICODE (0)
} ;

//--- Syntax error message for terminal '$RESOURCEPROPERTY$' :
static const utf32 gSyntaxErrorMessage_RESOURCEPROPERTY [] = {
  TO_UNICODE ('r'),
  TO_UNICODE ('e'),
  TO_UNICODE ('s'),
  TO_UNICODE ('o'),
  TO_UNICODE ('u'),
  TO_UNICODE ('r'),
  TO_UNICODE ('c'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('a'),
  TO_UNICODE ('t'),
  TO_UNICODE ('t'),
  TO_UNICODE ('r'),
  TO_UNICODE ('i'),
  TO_UNICODE ('b'),
  TO_UNICODE ('u'),
  TO_UNICODE ('t'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('R'),
  TO_UNICODE ('E'),
  TO_UNICODE ('S'),
  TO_UNICODE ('O'),
  TO_UNICODE ('U'),
  TO_UNICODE ('R'),
  TO_UNICODE ('C'),
  TO_UNICODE ('E'),
  TO_UNICODE ('P'),
  TO_UNICODE ('R'),
  TO_UNICODE ('O'),
  TO_UNICODE ('P'),
  TO_UNICODE ('E'),
  TO_UNICODE ('R'),
  TO_UNICODE ('T'),
  TO_UNICODE ('Y'),
  TO_UNICODE ('\''),
  TO_UNICODE (0)
} ;

//--- Syntax error message for terminal '$STANDARD$' :
static const utf32 gSyntaxErrorMessage_STANDARD [] = {
  TO_UNICODE ('r'),
  TO_UNICODE ('e'),
  TO_UNICODE ('s'),
  TO_UNICODE ('o'),
  TO_UNICODE ('u'),
  TO_UNICODE ('r'),
  TO_UNICODE ('c'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('a'),
  TO_UNICODE ('t'),
  TO_UNICODE ('t'),
  TO_UNICODE ('r'),
  TO_UNICODE ('i'),
  TO_UNICODE ('b'),
  TO_UNICODE ('u'),
  TO_UNICODE ('t'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('S'),
  TO_UNICODE ('T'),
  TO_UNICODE ('A'),
  TO_UNICODE ('N'),
  TO_UNICODE ('D'),
  TO_UNICODE ('A'),
  TO_UNICODE ('R'),
  TO_UNICODE ('D'),
  TO_UNICODE ('\''),
  TO_UNICODE (0)
} ;

//--- Syntax error message for terminal '$LINKED$' :
static const utf32 gSyntaxErrorMessage_LINKED [] = {
  TO_UNICODE ('r'),
  TO_UNICODE ('e'),
  TO_UNICODE ('s'),
  TO_UNICODE ('o'),
  TO_UNICODE ('u'),
  TO_UNICODE ('r'),
  TO_UNICODE ('c'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('a'),
  TO_UNICODE ('t'),
  TO_UNICODE ('t'),
  TO_UNICODE ('r'),
  TO_UNICODE ('i'),
  TO_UNICODE ('b'),
  TO_UNICODE ('u'),
  TO_UNICODE ('t'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('L'),
  TO_UNICODE ('I'),
  TO_UNICODE ('N'),
  TO_UNICODE ('K'),
  TO_UNICODE ('E'),
  TO_UNICODE ('D'),
  TO_UNICODE ('\''),
  TO_UNICODE (0)
} ;

//--- Syntax error message for terminal '$LINKEDRESOURCE$' :
static const utf32 gSyntaxErrorMessage_LINKEDRESOURCE [] = {
  TO_UNICODE ('r'),
  TO_UNICODE ('e'),
  TO_UNICODE ('s'),
  TO_UNICODE ('o'),
  TO_UNICODE ('u'),
  TO_UNICODE ('r'),
  TO_UNICODE ('c'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('a'),
  TO_UNICODE ('t'),
  TO_UNICODE ('t'),
  TO_UNICODE ('r'),
  TO_UNICODE ('i'),
  TO_UNICODE ('b'),
  TO_UNICODE ('u'),
  TO_UNICODE ('t'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('L'),
  TO_UNICODE ('I'),
  TO_UNICODE ('N'),
  TO_UNICODE ('K'),
  TO_UNICODE ('E'),
  TO_UNICODE ('D'),
  TO_UNICODE ('R'),
  TO_UNICODE ('E'),
  TO_UNICODE ('S'),
  TO_UNICODE ('O'),
  TO_UNICODE ('U'),
  TO_UNICODE ('R'),
  TO_UNICODE ('C'),
  TO_UNICODE ('E'),
  TO_UNICODE ('\''),
  TO_UNICODE (0)
} ;

//--- Syntax error message for terminal '$INTERNAL$' :
static const utf32 gSyntaxErrorMessage_INTERNAL [] = {
  TO_UNICODE ('r'),
  TO_UNICODE ('e'),
  TO_UNICODE ('s'),
  TO_UNICODE ('o'),
  TO_UNICODE ('u'),
  TO_UNICODE ('r'),
  TO_UNICODE ('c'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('a'),
  TO_UNICODE ('t'),
  TO_UNICODE ('t'),
  TO_UNICODE ('r'),
  TO_UNICODE ('i'),
  TO_UNICODE ('b'),
  TO_UNICODE ('u'),
  TO_UNICODE ('t'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('I'),
  TO_UNICODE ('N'),
  TO_UNICODE ('T'),
  TO_UNICODE ('E'),
  TO_UNICODE ('R'),
  TO_UNICODE ('N'),
  TO_UNICODE ('A'),
  TO_UNICODE ('L'),
  TO_UNICODE ('\''),
  TO_UNICODE (0)
} ;

//--- Syntax error message for terminal '$MESSAGEPROPERTY$' :
static const utf32 gSyntaxErrorMessage_MESSAGEPROPERTY [] = {
  TO_UNICODE ('m'),
  TO_UNICODE ('e'),
  TO_UNICODE ('s'),
  TO_UNICODE ('s'),
  TO_UNICODE ('a'),
  TO_UNICODE ('g'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('a'),
  TO_UNICODE ('t'),
  TO_UNICODE ('t'),
  TO_UNICODE ('r'),
  TO_UNICODE ('i'),
  TO_UNICODE ('b'),
  TO_UNICODE ('u'),
  TO_UNICODE ('t'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('M'),
  TO_UNICODE ('E'),
  TO_UNICODE ('S'),
  TO_UNICODE ('S'),
  TO_UNICODE ('A'),
  TO_UNICODE ('G'),
  TO_UNICODE ('E'),
  TO_UNICODE ('P'),
  TO_UNICODE ('R'),
  TO_UNICODE ('O'),
  TO_UNICODE ('P'),
  TO_UNICODE ('E'),
  TO_UNICODE ('R'),
  TO_UNICODE ('T'),
  TO_UNICODE ('Y'),
  TO_UNICODE ('\''),
  TO_UNICODE (0)
} ;

//--- Syntax error message for terminal '$NOTIFICATION$' :
static const utf32 gSyntaxErrorMessage_NOTIFICATION [] = {
  TO_UNICODE ('m'),
  TO_UNICODE ('e'),
  TO_UNICODE ('s'),
  TO_UNICODE ('s'),
  TO_UNICODE ('a'),
  TO_UNICODE ('g'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('a'),
  TO_UNICODE ('t'),
  TO_UNICODE ('t'),
  TO_UNICODE ('r'),
  TO_UNICODE ('i'),
  TO_UNICODE ('b'),
  TO_UNICODE ('u'),
  TO_UNICODE ('t'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('N'),
  TO_UNICODE ('O'),
  TO_UNICODE ('T'),
  TO_UNICODE ('I'),
  TO_UNICODE ('F'),
  TO_UNICODE ('I'),
  TO_UNICODE ('C'),
  TO_UNICODE ('A'),
  TO_UNICODE ('T'),
  TO_UNICODE ('I'),
  TO_UNICODE ('O'),
  TO_UNICODE ('N'),
  TO_UNICODE ('\''),
  TO_UNICODE (0)
} ;

//--- Syntax error message for terminal '$NOTIFICATIONERROR$' :
static const utf32 gSyntaxErrorMessage_NOTIFICATIONERROR [] = {
  TO_UNICODE ('m'),
  TO_UNICODE ('e'),
  TO_UNICODE ('s'),
  TO_UNICODE ('s'),
  TO_UNICODE ('a'),
  TO_UNICODE ('g'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('a'),
  TO_UNICODE ('t'),
  TO_UNICODE ('t'),
  TO_UNICODE ('r'),
  TO_UNICODE ('i'),
  TO_UNICODE ('b'),
  TO_UNICODE ('u'),
  TO_UNICODE ('t'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('N'),
  TO_UNICODE ('O'),
  TO_UNICODE ('T'),
  TO_UNICODE ('I'),
  TO_UNICODE ('F'),
  TO_UNICODE ('I'),
  TO_UNICODE ('C'),
  TO_UNICODE ('A'),
  TO_UNICODE ('T'),
  TO_UNICODE ('I'),
  TO_UNICODE ('O'),
  TO_UNICODE ('N'),
  TO_UNICODE ('E'),
  TO_UNICODE ('R'),
  TO_UNICODE ('R'),
  TO_UNICODE ('O'),
  TO_UNICODE ('R'),
  TO_UNICODE ('\''),
  TO_UNICODE (0)
} ;

//--- Syntax error message for terminal '$SEND_STATIC_INTERNAL$' :
static const utf32 gSyntaxErrorMessage_SEND_5F_STATIC_5F_INTERNAL [] = {
  TO_UNICODE ('m'),
  TO_UNICODE ('e'),
  TO_UNICODE ('s'),
  TO_UNICODE ('s'),
  TO_UNICODE ('a'),
  TO_UNICODE ('g'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('a'),
  TO_UNICODE ('t'),
  TO_UNICODE ('t'),
  TO_UNICODE ('r'),
  TO_UNICODE ('i'),
  TO_UNICODE ('b'),
  TO_UNICODE ('u'),
  TO_UNICODE ('t'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('S'),
  TO_UNICODE ('E'),
  TO_UNICODE ('N'),
  TO_UNICODE ('D'),
  TO_UNICODE ('_'),
  TO_UNICODE ('S'),
  TO_UNICODE ('T'),
  TO_UNICODE ('A'),
  TO_UNICODE ('T'),
  TO_UNICODE ('I'),
  TO_UNICODE ('C'),
  TO_UNICODE ('_'),
  TO_UNICODE ('I'),
  TO_UNICODE ('N'),
  TO_UNICODE ('T'),
  TO_UNICODE ('E'),
  TO_UNICODE ('R'),
  TO_UNICODE ('N'),
  TO_UNICODE ('A'),
  TO_UNICODE ('L'),
  TO_UNICODE ('\''),
  TO_UNICODE (0)
} ;

//--- Syntax error message for terminal '$SEND_STATIC_EXTERNAL$' :
static const utf32 gSyntaxErrorMessage_SEND_5F_STATIC_5F_EXTERNAL [] = {
  TO_UNICODE ('m'),
  TO_UNICODE ('e'),
  TO_UNICODE ('s'),
  TO_UNICODE ('s'),
  TO_UNICODE ('a'),
  TO_UNICODE ('g'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('a'),
  TO_UNICODE ('t'),
  TO_UNICODE ('t'),
  TO_UNICODE ('r'),
  TO_UNICODE ('i'),
  TO_UNICODE ('b'),
  TO_UNICODE ('u'),
  TO_UNICODE ('t'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('S'),
  TO_UNICODE ('E'),
  TO_UNICODE ('N'),
  TO_UNICODE ('D'),
  TO_UNICODE ('_'),
  TO_UNICODE ('S'),
  TO_UNICODE ('T'),
  TO_UNICODE ('A'),
  TO_UNICODE ('T'),
  TO_UNICODE ('I'),
  TO_UNICODE ('C'),
  TO_UNICODE ('_'),
  TO_UNICODE ('E'),
  TO_UNICODE ('X'),
  TO_UNICODE ('T'),
  TO_UNICODE ('E'),
  TO_UNICODE ('R'),
  TO_UNICODE ('N'),
  TO_UNICODE ('A'),
  TO_UNICODE ('L'),
  TO_UNICODE ('\''),
  TO_UNICODE (0)
} ;

//--- Syntax error message for terminal '$SEND_DYNAMIC_EXTERNAL$' :
static const utf32 gSyntaxErrorMessage_SEND_5F_DYNAMIC_5F_EXTERNAL [] = {
  TO_UNICODE ('m'),
  TO_UNICODE ('e'),
  TO_UNICODE ('s'),
  TO_UNICODE ('s'),
  TO_UNICODE ('a'),
  TO_UNICODE ('g'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('a'),
  TO_UNICODE ('t'),
  TO_UNICODE ('t'),
  TO_UNICODE ('r'),
  TO_UNICODE ('i'),
  TO_UNICODE ('b'),
  TO_UNICODE ('u'),
  TO_UNICODE ('t'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('S'),
  TO_UNICODE ('E'),
  TO_UNICODE ('N'),
  TO_UNICODE ('D'),
  TO_UNICODE ('_'),
  TO_UNICODE ('D'),
  TO_UNICODE ('Y'),
  TO_UNICODE ('N'),
  TO_UNICODE ('A'),
  TO_UNICODE ('M'),
  TO_UNICODE ('I'),
  TO_UNICODE ('C'),
  TO_UNICODE ('_'),
  TO_UNICODE ('E'),
  TO_UNICODE ('X'),
  TO_UNICODE ('T'),
  TO_UNICODE ('E'),
  TO_UNICODE ('R'),
  TO_UNICODE ('N'),
  TO_UNICODE ('A'),
  TO_UNICODE ('L'),
  TO_UNICODE ('\''),
  TO_UNICODE (0)
} ;

//--- Syntax error message for terminal '$SEND_ZERO_INTERNAL$' :
static const utf32 gSyntaxErrorMessage_SEND_5F_ZERO_5F_INTERNAL [] = {
  TO_UNICODE ('m'),
  TO_UNICODE ('e'),
  TO_UNICODE ('s'),
  TO_UNICODE ('s'),
  TO_UNICODE ('a'),
  TO_UNICODE ('g'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('a'),
  TO_UNICODE ('t'),
  TO_UNICODE ('t'),
  TO_UNICODE ('r'),
  TO_UNICODE ('i'),
  TO_UNICODE ('b'),
  TO_UNICODE ('u'),
  TO_UNICODE ('t'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('S'),
  TO_UNICODE ('E'),
  TO_UNICODE ('N'),
  TO_UNICODE ('D'),
  TO_UNICODE ('_'),
  TO_UNICODE ('Z'),
  TO_UNICODE ('E'),
  TO_UNICODE ('R'),
  TO_UNICODE ('O'),
  TO_UNICODE ('_'),
  TO_UNICODE ('I'),
  TO_UNICODE ('N'),
  TO_UNICODE ('T'),
  TO_UNICODE ('E'),
  TO_UNICODE ('R'),
  TO_UNICODE ('N'),
  TO_UNICODE ('A'),
  TO_UNICODE ('L'),
  TO_UNICODE ('\''),
  TO_UNICODE (0)
} ;

//--- Syntax error message for terminal '$SEND_ZERO_EXTERNAL$' :
static const utf32 gSyntaxErrorMessage_SEND_5F_ZERO_5F_EXTERNAL [] = {
  TO_UNICODE ('m'),
  TO_UNICODE ('e'),
  TO_UNICODE ('s'),
  TO_UNICODE ('s'),
  TO_UNICODE ('a'),
  TO_UNICODE ('g'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('a'),
  TO_UNICODE ('t'),
  TO_UNICODE ('t'),
  TO_UNICODE ('r'),
  TO_UNICODE ('i'),
  TO_UNICODE ('b'),
  TO_UNICODE ('u'),
  TO_UNICODE ('t'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('S'),
  TO_UNICODE ('E'),
  TO_UNICODE ('N'),
  TO_UNICODE ('D'),
  TO_UNICODE ('_'),
  TO_UNICODE ('Z'),
  TO_UNICODE ('E'),
  TO_UNICODE ('R'),
  TO_UNICODE ('O'),
  TO_UNICODE ('_'),
  TO_UNICODE ('E'),
  TO_UNICODE ('X'),
  TO_UNICODE ('T'),
  TO_UNICODE ('E'),
  TO_UNICODE ('R'),
  TO_UNICODE ('N'),
  TO_UNICODE ('A'),
  TO_UNICODE ('L'),
  TO_UNICODE ('\''),
  TO_UNICODE (0)
} ;

//--- Syntax error message for terminal '$RECEIVE_ZERO_INTERNAL$' :
static const utf32 gSyntaxErrorMessage_RECEIVE_5F_ZERO_5F_INTERNAL [] = {
  TO_UNICODE ('m'),
  TO_UNICODE ('e'),
  TO_UNICODE ('s'),
  TO_UNICODE ('s'),
  TO_UNICODE ('a'),
  TO_UNICODE ('g'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('a'),
  TO_UNICODE ('t'),
  TO_UNICODE ('t'),
  TO_UNICODE ('r'),
  TO_UNICODE ('i'),
  TO_UNICODE ('b'),
  TO_UNICODE ('u'),
  TO_UNICODE ('t'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('R'),
  TO_UNICODE ('E'),
  TO_UNICODE ('C'),
  TO_UNICODE ('E'),
  TO_UNICODE ('I'),
  TO_UNICODE ('V'),
  TO_UNICODE ('E'),
  TO_UNICODE ('_'),
  TO_UNICODE ('Z'),
  TO_UNICODE ('E'),
  TO_UNICODE ('R'),
  TO_UNICODE ('O'),
  TO_UNICODE ('_'),
  TO_UNICODE ('I'),
  TO_UNICODE ('N'),
  TO_UNICODE ('T'),
  TO_UNICODE ('E'),
  TO_UNICODE ('R'),
  TO_UNICODE ('N'),
  TO_UNICODE ('A'),
  TO_UNICODE ('L'),
  TO_UNICODE ('\''),
  TO_UNICODE (0)
} ;

//--- Syntax error message for terminal '$RECEIVE_ZERO_EXTERNAL$' :
static const utf32 gSyntaxErrorMessage_RECEIVE_5F_ZERO_5F_EXTERNAL [] = {
  TO_UNICODE ('m'),
  TO_UNICODE ('e'),
  TO_UNICODE ('s'),
  TO_UNICODE ('s'),
  TO_UNICODE ('a'),
  TO_UNICODE ('g'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('a'),
  TO_UNICODE ('t'),
  TO_UNICODE ('t'),
  TO_UNICODE ('r'),
  TO_UNICODE ('i'),
  TO_UNICODE ('b'),
  TO_UNICODE ('u'),
  TO_UNICODE ('t'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('R'),
  TO_UNICODE ('E'),
  TO_UNICODE ('C'),
  TO_UNICODE ('E'),
  TO_UNICODE ('I'),
  TO_UNICODE ('V'),
  TO_UNICODE ('E'),
  TO_UNICODE ('_'),
  TO_UNICODE ('Z'),
  TO_UNICODE ('E'),
  TO_UNICODE ('R'),
  TO_UNICODE ('O'),
  TO_UNICODE ('_'),
  TO_UNICODE ('E'),
  TO_UNICODE ('X'),
  TO_UNICODE ('T'),
  TO_UNICODE ('E'),
  TO_UNICODE ('R'),
  TO_UNICODE ('N'),
  TO_UNICODE ('A'),
  TO_UNICODE ('L'),
  TO_UNICODE ('\''),
  TO_UNICODE (0)
} ;

//--- Syntax error message for terminal '$RECEIVE_UNQUEUED_INTERNAL$' :
static const utf32 gSyntaxErrorMessage_RECEIVE_5F_UNQUEUED_5F_INTERNAL [] = {
  TO_UNICODE ('m'),
  TO_UNICODE ('e'),
  TO_UNICODE ('s'),
  TO_UNICODE ('s'),
  TO_UNICODE ('a'),
  TO_UNICODE ('g'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('a'),
  TO_UNICODE ('t'),
  TO_UNICODE ('t'),
  TO_UNICODE ('r'),
  TO_UNICODE ('i'),
  TO_UNICODE ('b'),
  TO_UNICODE ('u'),
  TO_UNICODE ('t'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('R'),
  TO_UNICODE ('E'),
  TO_UNICODE ('C'),
  TO_UNICODE ('E'),
  TO_UNICODE ('I'),
  TO_UNICODE ('V'),
  TO_UNICODE ('E'),
  TO_UNICODE ('_'),
  TO_UNICODE ('U'),
  TO_UNICODE ('N'),
  TO_UNICODE ('Q'),
  TO_UNICODE ('U'),
  TO_UNICODE ('E'),
  TO_UNICODE ('U'),
  TO_UNICODE ('E'),
  TO_UNICODE ('D'),
  TO_UNICODE ('_'),
  TO_UNICODE ('I'),
  TO_UNICODE ('N'),
  TO_UNICODE ('T'),
  TO_UNICODE ('E'),
  TO_UNICODE ('R'),
  TO_UNICODE ('N'),
  TO_UNICODE ('A'),
  TO_UNICODE ('L'),
  TO_UNICODE ('\''),
  TO_UNICODE (0)
} ;

//--- Syntax error message for terminal '$RECEIVE_QUEUED_INTERNAL$' :
static const utf32 gSyntaxErrorMessage_RECEIVE_5F_QUEUED_5F_INTERNAL [] = {
  TO_UNICODE ('m'),
  TO_UNICODE ('e'),
  TO_UNICODE ('s'),
  TO_UNICODE ('s'),
  TO_UNICODE ('a'),
  TO_UNICODE ('g'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('a'),
  TO_UNICODE ('t'),
  TO_UNICODE ('t'),
  TO_UNICODE ('r'),
  TO_UNICODE ('i'),
  TO_UNICODE ('b'),
  TO_UNICODE ('u'),
  TO_UNICODE ('t'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('R'),
  TO_UNICODE ('E'),
  TO_UNICODE ('C'),
  TO_UNICODE ('E'),
  TO_UNICODE ('I'),
  TO_UNICODE ('V'),
  TO_UNICODE ('E'),
  TO_UNICODE ('_'),
  TO_UNICODE ('Q'),
  TO_UNICODE ('U'),
  TO_UNICODE ('E'),
  TO_UNICODE ('U'),
  TO_UNICODE ('E'),
  TO_UNICODE ('D'),
  TO_UNICODE ('_'),
  TO_UNICODE ('I'),
  TO_UNICODE ('N'),
  TO_UNICODE ('T'),
  TO_UNICODE ('E'),
  TO_UNICODE ('R'),
  TO_UNICODE ('N'),
  TO_UNICODE ('A'),
  TO_UNICODE ('L'),
  TO_UNICODE ('\''),
  TO_UNICODE (0)
} ;

//--- Syntax error message for terminal '$RECEIVE_UNQUEUED_EXTERNAL$' :
static const utf32 gSyntaxErrorMessage_RECEIVE_5F_UNQUEUED_5F_EXTERNAL [] = {
  TO_UNICODE ('m'),
  TO_UNICODE ('e'),
  TO_UNICODE ('s'),
  TO_UNICODE ('s'),
  TO_UNICODE ('a'),
  TO_UNICODE ('g'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('a'),
  TO_UNICODE ('t'),
  TO_UNICODE ('t'),
  TO_UNICODE ('r'),
  TO_UNICODE ('i'),
  TO_UNICODE ('b'),
  TO_UNICODE ('u'),
  TO_UNICODE ('t'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('R'),
  TO_UNICODE ('E'),
  TO_UNICODE ('C'),
  TO_UNICODE ('E'),
  TO_UNICODE ('I'),
  TO_UNICODE ('V'),
  TO_UNICODE ('E'),
  TO_UNICODE ('_'),
  TO_UNICODE ('U'),
  TO_UNICODE ('N'),
  TO_UNICODE ('Q'),
  TO_UNICODE ('U'),
  TO_UNICODE ('E'),
  TO_UNICODE ('U'),
  TO_UNICODE ('E'),
  TO_UNICODE ('D'),
  TO_UNICODE ('_'),
  TO_UNICODE ('E'),
  TO_UNICODE ('X'),
  TO_UNICODE ('T'),
  TO_UNICODE ('E'),
  TO_UNICODE ('R'),
  TO_UNICODE ('N'),
  TO_UNICODE ('A'),
  TO_UNICODE ('L'),
  TO_UNICODE ('\''),
  TO_UNICODE (0)
} ;

//--- Syntax error message for terminal '$RECEIVE_QUEUED_EXTERNAL$' :
static const utf32 gSyntaxErrorMessage_RECEIVE_5F_QUEUED_5F_EXTERNAL [] = {
  TO_UNICODE ('m'),
  TO_UNICODE ('e'),
  TO_UNICODE ('s'),
  TO_UNICODE ('s'),
  TO_UNICODE ('a'),
  TO_UNICODE ('g'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('a'),
  TO_UNICODE ('t'),
  TO_UNICODE ('t'),
  TO_UNICODE ('r'),
  TO_UNICODE ('i'),
  TO_UNICODE ('b'),
  TO_UNICODE ('u'),
  TO_UNICODE ('t'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('R'),
  TO_UNICODE ('E'),
  TO_UNICODE ('C'),
  TO_UNICODE ('E'),
  TO_UNICODE ('I'),
  TO_UNICODE ('V'),
  TO_UNICODE ('E'),
  TO_UNICODE ('_'),
  TO_UNICODE ('Q'),
  TO_UNICODE ('U'),
  TO_UNICODE ('E'),
  TO_UNICODE ('U'),
  TO_UNICODE ('E'),
  TO_UNICODE ('D'),
  TO_UNICODE ('_'),
  TO_UNICODE ('E'),
  TO_UNICODE ('X'),
  TO_UNICODE ('T'),
  TO_UNICODE ('E'),
  TO_UNICODE ('R'),
  TO_UNICODE ('N'),
  TO_UNICODE ('A'),
  TO_UNICODE ('L'),
  TO_UNICODE ('\''),
  TO_UNICODE (0)
} ;

//--- Syntax error message for terminal '$RECEIVE_DYNAMIC_EXTERNAL$' :
static const utf32 gSyntaxErrorMessage_RECEIVE_5F_DYNAMIC_5F_EXTERNAL [] = {
  TO_UNICODE ('m'),
  TO_UNICODE ('e'),
  TO_UNICODE ('s'),
  TO_UNICODE ('s'),
  TO_UNICODE ('a'),
  TO_UNICODE ('g'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('a'),
  TO_UNICODE ('t'),
  TO_UNICODE ('t'),
  TO_UNICODE ('r'),
  TO_UNICODE ('i'),
  TO_UNICODE ('b'),
  TO_UNICODE ('u'),
  TO_UNICODE ('t'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('R'),
  TO_UNICODE ('E'),
  TO_UNICODE ('C'),
  TO_UNICODE ('E'),
  TO_UNICODE ('I'),
  TO_UNICODE ('V'),
  TO_UNICODE ('E'),
  TO_UNICODE ('_'),
  TO_UNICODE ('D'),
  TO_UNICODE ('Y'),
  TO_UNICODE ('N'),
  TO_UNICODE ('A'),
  TO_UNICODE ('M'),
  TO_UNICODE ('I'),
  TO_UNICODE ('C'),
  TO_UNICODE ('_'),
  TO_UNICODE ('E'),
  TO_UNICODE ('X'),
  TO_UNICODE ('T'),
  TO_UNICODE ('E'),
  TO_UNICODE ('R'),
  TO_UNICODE ('N'),
  TO_UNICODE ('A'),
  TO_UNICODE ('L'),
  TO_UNICODE ('\''),
  TO_UNICODE (0)
} ;

//--- Syntax error message for terminal '$RECEIVE_ZERO_SENDERS$' :
static const utf32 gSyntaxErrorMessage_RECEIVE_5F_ZERO_5F_SENDERS [] = {
  TO_UNICODE ('m'),
  TO_UNICODE ('e'),
  TO_UNICODE ('s'),
  TO_UNICODE ('s'),
  TO_UNICODE ('a'),
  TO_UNICODE ('g'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('a'),
  TO_UNICODE ('t'),
  TO_UNICODE ('t'),
  TO_UNICODE ('r'),
  TO_UNICODE ('i'),
  TO_UNICODE ('b'),
  TO_UNICODE ('u'),
  TO_UNICODE ('t'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('R'),
  TO_UNICODE ('E'),
  TO_UNICODE ('C'),
  TO_UNICODE ('E'),
  TO_UNICODE ('I'),
  TO_UNICODE ('V'),
  TO_UNICODE ('E'),
  TO_UNICODE ('_'),
  TO_UNICODE ('Z'),
  TO_UNICODE ('E'),
  TO_UNICODE ('R'),
  TO_UNICODE ('O'),
  TO_UNICODE ('_'),
  TO_UNICODE ('S'),
  TO_UNICODE ('E'),
  TO_UNICODE ('N'),
  TO_UNICODE ('D'),
  TO_UNICODE ('E'),
  TO_UNICODE ('R'),
  TO_UNICODE ('S'),
  TO_UNICODE ('\''),
  TO_UNICODE (0)
} ;

//--- Syntax error message for terminal '$CDATATYPE$' :
static const utf32 gSyntaxErrorMessage_CDATATYPE [] = {
  TO_UNICODE ('m'),
  TO_UNICODE ('e'),
  TO_UNICODE ('s'),
  TO_UNICODE ('s'),
  TO_UNICODE ('a'),
  TO_UNICODE ('g'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('a'),
  TO_UNICODE ('t'),
  TO_UNICODE ('t'),
  TO_UNICODE ('r'),
  TO_UNICODE ('i'),
  TO_UNICODE ('b'),
  TO_UNICODE ('u'),
  TO_UNICODE ('t'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('C'),
  TO_UNICODE ('D'),
  TO_UNICODE ('A'),
  TO_UNICODE ('T'),
  TO_UNICODE ('A'),
  TO_UNICODE ('T'),
  TO_UNICODE ('Y'),
  TO_UNICODE ('P'),
  TO_UNICODE ('E'),
  TO_UNICODE ('\''),
  TO_UNICODE (0)
} ;

//--- Syntax error message for terminal '$SENDINGMESSAGE$' :
static const utf32 gSyntaxErrorMessage_SENDINGMESSAGE [] = {
  TO_UNICODE ('m'),
  TO_UNICODE ('e'),
  TO_UNICODE ('s'),
  TO_UNICODE ('s'),
  TO_UNICODE ('a'),
  TO_UNICODE ('g'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('a'),
  TO_UNICODE ('t'),
  TO_UNICODE ('t'),
  TO_UNICODE ('r'),
  TO_UNICODE ('i'),
  TO_UNICODE ('b'),
  TO_UNICODE ('u'),
  TO_UNICODE ('t'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('S'),
  TO_UNICODE ('E'),
  TO_UNICODE ('N'),
  TO_UNICODE ('D'),
  TO_UNICODE ('I'),
  TO_UNICODE ('N'),
  TO_UNICODE ('G'),
  TO_UNICODE ('M'),
  TO_UNICODE ('E'),
  TO_UNICODE ('S'),
  TO_UNICODE ('S'),
  TO_UNICODE ('A'),
  TO_UNICODE ('G'),
  TO_UNICODE ('E'),
  TO_UNICODE ('\''),
  TO_UNICODE (0)
} ;

//--- Syntax error message for terminal '$NONE$' :
static const utf32 gSyntaxErrorMessage_NONE [] = {
  TO_UNICODE ('m'),
  TO_UNICODE ('e'),
  TO_UNICODE ('s'),
  TO_UNICODE ('s'),
  TO_UNICODE ('a'),
  TO_UNICODE ('g'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('a'),
  TO_UNICODE ('t'),
  TO_UNICODE ('t'),
  TO_UNICODE ('r'),
  TO_UNICODE ('i'),
  TO_UNICODE ('b'),
  TO_UNICODE ('u'),
  TO_UNICODE ('t'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('N'),
  TO_UNICODE ('O'),
  TO_UNICODE ('N'),
  TO_UNICODE ('E'),
  TO_UNICODE ('\''),
  TO_UNICODE (0)
} ;

//--- Syntax error message for terminal '$COMCALLBACK$' :
static const utf32 gSyntaxErrorMessage_COMCALLBACK [] = {
  TO_UNICODE ('m'),
  TO_UNICODE ('e'),
  TO_UNICODE ('s'),
  TO_UNICODE ('s'),
  TO_UNICODE ('a'),
  TO_UNICODE ('g'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('a'),
  TO_UNICODE ('t'),
  TO_UNICODE ('t'),
  TO_UNICODE ('r'),
  TO_UNICODE ('i'),
  TO_UNICODE ('b'),
  TO_UNICODE ('u'),
  TO_UNICODE ('t'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('C'),
  TO_UNICODE ('O'),
  TO_UNICODE ('M'),
  TO_UNICODE ('C'),
  TO_UNICODE ('A'),
  TO_UNICODE ('L'),
  TO_UNICODE ('L'),
  TO_UNICODE ('B'),
  TO_UNICODE ('A'),
  TO_UNICODE ('C'),
  TO_UNICODE ('K'),
  TO_UNICODE ('\''),
  TO_UNICODE (0)
} ;

//--- Syntax error message for terminal '$COMCALLBACKNAME$' :
static const utf32 gSyntaxErrorMessage_COMCALLBACKNAME [] = {
  TO_UNICODE ('m'),
  TO_UNICODE ('e'),
  TO_UNICODE ('s'),
  TO_UNICODE ('s'),
  TO_UNICODE ('a'),
  TO_UNICODE ('g'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('a'),
  TO_UNICODE ('t'),
  TO_UNICODE ('t'),
  TO_UNICODE ('r'),
  TO_UNICODE ('i'),
  TO_UNICODE ('b'),
  TO_UNICODE ('u'),
  TO_UNICODE ('t'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('C'),
  TO_UNICODE ('O'),
  TO_UNICODE ('M'),
  TO_UNICODE ('C'),
  TO_UNICODE ('A'),
  TO_UNICODE ('L'),
  TO_UNICODE ('L'),
  TO_UNICODE ('B'),
  TO_UNICODE ('A'),
  TO_UNICODE ('C'),
  TO_UNICODE ('K'),
  TO_UNICODE ('N'),
  TO_UNICODE ('A'),
  TO_UNICODE ('M'),
  TO_UNICODE ('E'),
  TO_UNICODE ('\''),
  TO_UNICODE (0)
} ;

//--- Syntax error message for terminal '$INMCALLBACK$' :
static const utf32 gSyntaxErrorMessage_INMCALLBACK [] = {
  TO_UNICODE ('m'),
  TO_UNICODE ('e'),
  TO_UNICODE ('s'),
  TO_UNICODE ('s'),
  TO_UNICODE ('a'),
  TO_UNICODE ('g'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('a'),
  TO_UNICODE ('t'),
  TO_UNICODE ('t'),
  TO_UNICODE ('r'),
  TO_UNICODE ('i'),
  TO_UNICODE ('b'),
  TO_UNICODE ('u'),
  TO_UNICODE ('t'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('I'),
  TO_UNICODE ('N'),
  TO_UNICODE ('M'),
  TO_UNICODE ('C'),
  TO_UNICODE ('A'),
  TO_UNICODE ('L'),
  TO_UNICODE ('L'),
  TO_UNICODE ('B'),
  TO_UNICODE ('A'),
  TO_UNICODE ('C'),
  TO_UNICODE ('K'),
  TO_UNICODE ('\''),
  TO_UNICODE (0)
} ;

//--- Syntax error message for terminal '$CALLBACKROUTINENAME$' :
static const utf32 gSyntaxErrorMessage_CALLBACKROUTINENAME [] = {
  TO_UNICODE ('m'),
  TO_UNICODE ('e'),
  TO_UNICODE ('s'),
  TO_UNICODE ('s'),
  TO_UNICODE ('a'),
  TO_UNICODE ('g'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('a'),
  TO_UNICODE ('t'),
  TO_UNICODE ('t'),
  TO_UNICODE ('r'),
  TO_UNICODE ('i'),
  TO_UNICODE ('b'),
  TO_UNICODE ('u'),
  TO_UNICODE ('t'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('C'),
  TO_UNICODE ('A'),
  TO_UNICODE ('L'),
  TO_UNICODE ('L'),
  TO_UNICODE ('B'),
  TO_UNICODE ('A'),
  TO_UNICODE ('C'),
  TO_UNICODE ('K'),
  TO_UNICODE ('R'),
  TO_UNICODE ('O'),
  TO_UNICODE ('U'),
  TO_UNICODE ('T'),
  TO_UNICODE ('I'),
  TO_UNICODE ('N'),
  TO_UNICODE ('E'),
  TO_UNICODE ('N'),
  TO_UNICODE ('A'),
  TO_UNICODE ('M'),
  TO_UNICODE ('E'),
  TO_UNICODE ('\''),
  TO_UNICODE (0)
} ;

//--- Syntax error message for terminal '$MONITOREDIPDU$' :
static const utf32 gSyntaxErrorMessage_MONITOREDIPDU [] = {
  TO_UNICODE ('m'),
  TO_UNICODE ('e'),
  TO_UNICODE ('s'),
  TO_UNICODE ('s'),
  TO_UNICODE ('a'),
  TO_UNICODE ('g'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('a'),
  TO_UNICODE ('t'),
  TO_UNICODE ('t'),
  TO_UNICODE ('r'),
  TO_UNICODE ('i'),
  TO_UNICODE ('b'),
  TO_UNICODE ('u'),
  TO_UNICODE ('t'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('M'),
  TO_UNICODE ('O'),
  TO_UNICODE ('N'),
  TO_UNICODE ('I'),
  TO_UNICODE ('T'),
  TO_UNICODE ('O'),
  TO_UNICODE ('R'),
  TO_UNICODE ('E'),
  TO_UNICODE ('D'),
  TO_UNICODE ('I'),
  TO_UNICODE ('P'),
  TO_UNICODE ('D'),
  TO_UNICODE ('U'),
  TO_UNICODE ('\''),
  TO_UNICODE (0)
} ;

//--- Syntax error message for terminal '$TRANSFERPROPERTY$' :
static const utf32 gSyntaxErrorMessage_TRANSFERPROPERTY [] = {
  TO_UNICODE ('m'),
  TO_UNICODE ('e'),
  TO_UNICODE ('s'),
  TO_UNICODE ('s'),
  TO_UNICODE ('a'),
  TO_UNICODE ('g'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('a'),
  TO_UNICODE ('t'),
  TO_UNICODE ('t'),
  TO_UNICODE ('r'),
  TO_UNICODE ('i'),
  TO_UNICODE ('b'),
  TO_UNICODE ('u'),
  TO_UNICODE ('t'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('T'),
  TO_UNICODE ('R'),
  TO_UNICODE ('A'),
  TO_UNICODE ('N'),
  TO_UNICODE ('S'),
  TO_UNICODE ('F'),
  TO_UNICODE ('E'),
  TO_UNICODE ('R'),
  TO_UNICODE ('P'),
  TO_UNICODE ('R'),
  TO_UNICODE ('O'),
  TO_UNICODE ('P'),
  TO_UNICODE ('E'),
  TO_UNICODE ('R'),
  TO_UNICODE ('T'),
  TO_UNICODE ('Y'),
  TO_UNICODE ('\''),
  TO_UNICODE (0)
} ;

//--- Syntax error message for terminal '$TRIGGERED$' :
static const utf32 gSyntaxErrorMessage_TRIGGERED [] = {
  TO_UNICODE ('m'),
  TO_UNICODE ('e'),
  TO_UNICODE ('s'),
  TO_UNICODE ('s'),
  TO_UNICODE ('a'),
  TO_UNICODE ('g'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('a'),
  TO_UNICODE ('t'),
  TO_UNICODE ('t'),
  TO_UNICODE ('r'),
  TO_UNICODE ('i'),
  TO_UNICODE ('b'),
  TO_UNICODE ('u'),
  TO_UNICODE ('t'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('T'),
  TO_UNICODE ('R'),
  TO_UNICODE ('I'),
  TO_UNICODE ('G'),
  TO_UNICODE ('G'),
  TO_UNICODE ('E'),
  TO_UNICODE ('R'),
  TO_UNICODE ('E'),
  TO_UNICODE ('D'),
  TO_UNICODE ('\''),
  TO_UNICODE (0)
} ;

//--- Syntax error message for terminal '$PENDING$' :
static const utf32 gSyntaxErrorMessage_PENDING [] = {
  TO_UNICODE ('m'),
  TO_UNICODE ('e'),
  TO_UNICODE ('s'),
  TO_UNICODE ('s'),
  TO_UNICODE ('a'),
  TO_UNICODE ('g'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('a'),
  TO_UNICODE ('t'),
  TO_UNICODE ('t'),
  TO_UNICODE ('r'),
  TO_UNICODE ('i'),
  TO_UNICODE ('b'),
  TO_UNICODE ('u'),
  TO_UNICODE ('t'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('P'),
  TO_UNICODE ('E'),
  TO_UNICODE ('N'),
  TO_UNICODE ('D'),
  TO_UNICODE ('I'),
  TO_UNICODE ('N'),
  TO_UNICODE ('G'),
  TO_UNICODE ('\''),
  TO_UNICODE (0)
} ;

//--- Syntax error message for terminal '$NETWORKMESSAGE$' :
static const utf32 gSyntaxErrorMessage_NETWORKMESSAGE [] = {
  TO_UNICODE ('m'),
  TO_UNICODE ('e'),
  TO_UNICODE ('s'),
  TO_UNICODE ('s'),
  TO_UNICODE ('a'),
  TO_UNICODE ('g'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('a'),
  TO_UNICODE ('t'),
  TO_UNICODE ('t'),
  TO_UNICODE ('r'),
  TO_UNICODE ('i'),
  TO_UNICODE ('b'),
  TO_UNICODE ('u'),
  TO_UNICODE ('t'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('N'),
  TO_UNICODE ('E'),
  TO_UNICODE ('T'),
  TO_UNICODE ('W'),
  TO_UNICODE ('O'),
  TO_UNICODE ('R'),
  TO_UNICODE ('K'),
  TO_UNICODE ('M'),
  TO_UNICODE ('E'),
  TO_UNICODE ('S'),
  TO_UNICODE ('S'),
  TO_UNICODE ('A'),
  TO_UNICODE ('G'),
  TO_UNICODE ('E'),
  TO_UNICODE ('\''),
  TO_UNICODE (0)
} ;

//--- Syntax error message for terminal '$FILTER$' :
static const utf32 gSyntaxErrorMessage_FILTER [] = {
  TO_UNICODE ('m'),
  TO_UNICODE ('e'),
  TO_UNICODE ('s'),
  TO_UNICODE ('s'),
  TO_UNICODE ('a'),
  TO_UNICODE ('g'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('a'),
  TO_UNICODE ('t'),
  TO_UNICODE ('t'),
  TO_UNICODE ('r'),
  TO_UNICODE ('i'),
  TO_UNICODE ('b'),
  TO_UNICODE ('u'),
  TO_UNICODE ('t'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('F'),
  TO_UNICODE ('I'),
  TO_UNICODE ('L'),
  TO_UNICODE ('T'),
  TO_UNICODE ('E'),
  TO_UNICODE ('R'),
  TO_UNICODE ('\''),
  TO_UNICODE (0)
} ;

//--- Syntax error message for terminal '$ALWAYS$' :
static const utf32 gSyntaxErrorMessage_ALWAYS [] = {
  TO_UNICODE ('m'),
  TO_UNICODE ('e'),
  TO_UNICODE ('s'),
  TO_UNICODE ('s'),
  TO_UNICODE ('a'),
  TO_UNICODE ('g'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('a'),
  TO_UNICODE ('t'),
  TO_UNICODE ('t'),
  TO_UNICODE ('r'),
  TO_UNICODE ('i'),
  TO_UNICODE ('b'),
  TO_UNICODE ('u'),
  TO_UNICODE ('t'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('A'),
  TO_UNICODE ('L'),
  TO_UNICODE ('W'),
  TO_UNICODE ('A'),
  TO_UNICODE ('Y'),
  TO_UNICODE ('S'),
  TO_UNICODE ('\''),
  TO_UNICODE (0)
} ;

//--- Syntax error message for terminal '$NEVER$' :
static const utf32 gSyntaxErrorMessage_NEVER [] = {
  TO_UNICODE ('m'),
  TO_UNICODE ('e'),
  TO_UNICODE ('s'),
  TO_UNICODE ('s'),
  TO_UNICODE ('a'),
  TO_UNICODE ('g'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('a'),
  TO_UNICODE ('t'),
  TO_UNICODE ('t'),
  TO_UNICODE ('r'),
  TO_UNICODE ('i'),
  TO_UNICODE ('b'),
  TO_UNICODE ('u'),
  TO_UNICODE ('t'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('N'),
  TO_UNICODE ('E'),
  TO_UNICODE ('V'),
  TO_UNICODE ('E'),
  TO_UNICODE ('R'),
  TO_UNICODE ('\''),
  TO_UNICODE (0)
} ;

//--- Syntax error message for terminal '$MASKEDNEWEQUALSX$' :
static const utf32 gSyntaxErrorMessage_MASKEDNEWEQUALSX [] = {
  TO_UNICODE ('m'),
  TO_UNICODE ('e'),
  TO_UNICODE ('s'),
  TO_UNICODE ('s'),
  TO_UNICODE ('a'),
  TO_UNICODE ('g'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('a'),
  TO_UNICODE ('t'),
  TO_UNICODE ('t'),
  TO_UNICODE ('r'),
  TO_UNICODE ('i'),
  TO_UNICODE ('b'),
  TO_UNICODE ('u'),
  TO_UNICODE ('t'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('M'),
  TO_UNICODE ('A'),
  TO_UNICODE ('S'),
  TO_UNICODE ('K'),
  TO_UNICODE ('E'),
  TO_UNICODE ('D'),
  TO_UNICODE ('N'),
  TO_UNICODE ('E'),
  TO_UNICODE ('W'),
  TO_UNICODE ('E'),
  TO_UNICODE ('Q'),
  TO_UNICODE ('U'),
  TO_UNICODE ('A'),
  TO_UNICODE ('L'),
  TO_UNICODE ('S'),
  TO_UNICODE ('X'),
  TO_UNICODE ('\''),
  TO_UNICODE (0)
} ;

//--- Syntax error message for terminal '$MASKEDNEWDIFFERSX$' :
static const utf32 gSyntaxErrorMessage_MASKEDNEWDIFFERSX [] = {
  TO_UNICODE ('m'),
  TO_UNICODE ('e'),
  TO_UNICODE ('s'),
  TO_UNICODE ('s'),
  TO_UNICODE ('a'),
  TO_UNICODE ('g'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('a'),
  TO_UNICODE ('t'),
  TO_UNICODE ('t'),
  TO_UNICODE ('r'),
  TO_UNICODE ('i'),
  TO_UNICODE ('b'),
  TO_UNICODE ('u'),
  TO_UNICODE ('t'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('M'),
  TO_UNICODE ('A'),
  TO_UNICODE ('S'),
  TO_UNICODE ('K'),
  TO_UNICODE ('E'),
  TO_UNICODE ('D'),
  TO_UNICODE ('N'),
  TO_UNICODE ('E'),
  TO_UNICODE ('W'),
  TO_UNICODE ('D'),
  TO_UNICODE ('I'),
  TO_UNICODE ('F'),
  TO_UNICODE ('F'),
  TO_UNICODE ('E'),
  TO_UNICODE ('R'),
  TO_UNICODE ('S'),
  TO_UNICODE ('X'),
  TO_UNICODE ('\''),
  TO_UNICODE (0)
} ;

//--- Syntax error message for terminal '$NEWISEQUAL$' :
static const utf32 gSyntaxErrorMessage_NEWISEQUAL [] = {
  TO_UNICODE ('m'),
  TO_UNICODE ('e'),
  TO_UNICODE ('s'),
  TO_UNICODE ('s'),
  TO_UNICODE ('a'),
  TO_UNICODE ('g'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('a'),
  TO_UNICODE ('t'),
  TO_UNICODE ('t'),
  TO_UNICODE ('r'),
  TO_UNICODE ('i'),
  TO_UNICODE ('b'),
  TO_UNICODE ('u'),
  TO_UNICODE ('t'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('N'),
  TO_UNICODE ('E'),
  TO_UNICODE ('W'),
  TO_UNICODE ('I'),
  TO_UNICODE ('S'),
  TO_UNICODE ('E'),
  TO_UNICODE ('Q'),
  TO_UNICODE ('U'),
  TO_UNICODE ('A'),
  TO_UNICODE ('L'),
  TO_UNICODE ('\''),
  TO_UNICODE (0)
} ;

//--- Syntax error message for terminal '$NEWISDIFFERENT$' :
static const utf32 gSyntaxErrorMessage_NEWISDIFFERENT [] = {
  TO_UNICODE ('m'),
  TO_UNICODE ('e'),
  TO_UNICODE ('s'),
  TO_UNICODE ('s'),
  TO_UNICODE ('a'),
  TO_UNICODE ('g'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('a'),
  TO_UNICODE ('t'),
  TO_UNICODE ('t'),
  TO_UNICODE ('r'),
  TO_UNICODE ('i'),
  TO_UNICODE ('b'),
  TO_UNICODE ('u'),
  TO_UNICODE ('t'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('N'),
  TO_UNICODE ('E'),
  TO_UNICODE ('W'),
  TO_UNICODE ('I'),
  TO_UNICODE ('S'),
  TO_UNICODE ('D'),
  TO_UNICODE ('I'),
  TO_UNICODE ('F'),
  TO_UNICODE ('F'),
  TO_UNICODE ('E'),
  TO_UNICODE ('R'),
  TO_UNICODE ('E'),
  TO_UNICODE ('N'),
  TO_UNICODE ('T'),
  TO_UNICODE ('\''),
  TO_UNICODE (0)
} ;

//--- Syntax error message for terminal '$MASKEDNEWEQUALSMASKEDOLD$' :
static const utf32 gSyntaxErrorMessage_MASKEDNEWEQUALSMASKEDOLD [] = {
  TO_UNICODE ('m'),
  TO_UNICODE ('e'),
  TO_UNICODE ('s'),
  TO_UNICODE ('s'),
  TO_UNICODE ('a'),
  TO_UNICODE ('g'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('a'),
  TO_UNICODE ('t'),
  TO_UNICODE ('t'),
  TO_UNICODE ('r'),
  TO_UNICODE ('i'),
  TO_UNICODE ('b'),
  TO_UNICODE ('u'),
  TO_UNICODE ('t'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('M'),
  TO_UNICODE ('A'),
  TO_UNICODE ('S'),
  TO_UNICODE ('K'),
  TO_UNICODE ('E'),
  TO_UNICODE ('D'),
  TO_UNICODE ('N'),
  TO_UNICODE ('E'),
  TO_UNICODE ('W'),
  TO_UNICODE ('E'),
  TO_UNICODE ('Q'),
  TO_UNICODE ('U'),
  TO_UNICODE ('A'),
  TO_UNICODE ('L'),
  TO_UNICODE ('S'),
  TO_UNICODE ('M'),
  TO_UNICODE ('A'),
  TO_UNICODE ('S'),
  TO_UNICODE ('K'),
  TO_UNICODE ('E'),
  TO_UNICODE ('D'),
  TO_UNICODE ('O'),
  TO_UNICODE ('L'),
  TO_UNICODE ('D'),
  TO_UNICODE ('\''),
  TO_UNICODE (0)
} ;

//--- Syntax error message for terminal '$MASKEDNEWDIFFERSMASKEDOLD$' :
static const utf32 gSyntaxErrorMessage_MASKEDNEWDIFFERSMASKEDOLD [] = {
  TO_UNICODE ('m'),
  TO_UNICODE ('e'),
  TO_UNICODE ('s'),
  TO_UNICODE ('s'),
  TO_UNICODE ('a'),
  TO_UNICODE ('g'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('a'),
  TO_UNICODE ('t'),
  TO_UNICODE ('t'),
  TO_UNICODE ('r'),
  TO_UNICODE ('i'),
  TO_UNICODE ('b'),
  TO_UNICODE ('u'),
  TO_UNICODE ('t'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('M'),
  TO_UNICODE ('A'),
  TO_UNICODE ('S'),
  TO_UNICODE ('K'),
  TO_UNICODE ('E'),
  TO_UNICODE ('D'),
  TO_UNICODE ('N'),
  TO_UNICODE ('E'),
  TO_UNICODE ('W'),
  TO_UNICODE ('D'),
  TO_UNICODE ('I'),
  TO_UNICODE ('F'),
  TO_UNICODE ('F'),
  TO_UNICODE ('E'),
  TO_UNICODE ('R'),
  TO_UNICODE ('S'),
  TO_UNICODE ('M'),
  TO_UNICODE ('A'),
  TO_UNICODE ('S'),
  TO_UNICODE ('K'),
  TO_UNICODE ('E'),
  TO_UNICODE ('D'),
  TO_UNICODE ('O'),
  TO_UNICODE ('L'),
  TO_UNICODE ('D'),
  TO_UNICODE ('\''),
  TO_UNICODE (0)
} ;

//--- Syntax error message for terminal '$NEWISWITHIN$' :
static const utf32 gSyntaxErrorMessage_NEWISWITHIN [] = {
  TO_UNICODE ('m'),
  TO_UNICODE ('e'),
  TO_UNICODE ('s'),
  TO_UNICODE ('s'),
  TO_UNICODE ('a'),
  TO_UNICODE ('g'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('a'),
  TO_UNICODE ('t'),
  TO_UNICODE ('t'),
  TO_UNICODE ('r'),
  TO_UNICODE ('i'),
  TO_UNICODE ('b'),
  TO_UNICODE ('u'),
  TO_UNICODE ('t'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('N'),
  TO_UNICODE ('E'),
  TO_UNICODE ('W'),
  TO_UNICODE ('I'),
  TO_UNICODE ('S'),
  TO_UNICODE ('W'),
  TO_UNICODE ('I'),
  TO_UNICODE ('T'),
  TO_UNICODE ('H'),
  TO_UNICODE ('I'),
  TO_UNICODE ('N'),
  TO_UNICODE ('\''),
  TO_UNICODE (0)
} ;

//--- Syntax error message for terminal '$NEWISOUTSIDE$' :
static const utf32 gSyntaxErrorMessage_NEWISOUTSIDE [] = {
  TO_UNICODE ('m'),
  TO_UNICODE ('e'),
  TO_UNICODE ('s'),
  TO_UNICODE ('s'),
  TO_UNICODE ('a'),
  TO_UNICODE ('g'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('a'),
  TO_UNICODE ('t'),
  TO_UNICODE ('t'),
  TO_UNICODE ('r'),
  TO_UNICODE ('i'),
  TO_UNICODE ('b'),
  TO_UNICODE ('u'),
  TO_UNICODE ('t'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('N'),
  TO_UNICODE ('E'),
  TO_UNICODE ('W'),
  TO_UNICODE ('I'),
  TO_UNICODE ('S'),
  TO_UNICODE ('O'),
  TO_UNICODE ('U'),
  TO_UNICODE ('T'),
  TO_UNICODE ('S'),
  TO_UNICODE ('I'),
  TO_UNICODE ('D'),
  TO_UNICODE ('E'),
  TO_UNICODE ('\''),
  TO_UNICODE (0)
} ;

//--- Syntax error message for terminal '$NEWISGREATER$' :
static const utf32 gSyntaxErrorMessage_NEWISGREATER [] = {
  TO_UNICODE ('m'),
  TO_UNICODE ('e'),
  TO_UNICODE ('s'),
  TO_UNICODE ('s'),
  TO_UNICODE ('a'),
  TO_UNICODE ('g'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('a'),
  TO_UNICODE ('t'),
  TO_UNICODE ('t'),
  TO_UNICODE ('r'),
  TO_UNICODE ('i'),
  TO_UNICODE ('b'),
  TO_UNICODE ('u'),
  TO_UNICODE ('t'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('N'),
  TO_UNICODE ('E'),
  TO_UNICODE ('W'),
  TO_UNICODE ('I'),
  TO_UNICODE ('S'),
  TO_UNICODE ('G'),
  TO_UNICODE ('R'),
  TO_UNICODE ('E'),
  TO_UNICODE ('A'),
  TO_UNICODE ('T'),
  TO_UNICODE ('E'),
  TO_UNICODE ('R'),
  TO_UNICODE ('\''),
  TO_UNICODE (0)
} ;

//--- Syntax error message for terminal '$NEWISLESSOREQUAL$' :
static const utf32 gSyntaxErrorMessage_NEWISLESSOREQUAL [] = {
  TO_UNICODE ('m'),
  TO_UNICODE ('e'),
  TO_UNICODE ('s'),
  TO_UNICODE ('s'),
  TO_UNICODE ('a'),
  TO_UNICODE ('g'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('a'),
  TO_UNICODE ('t'),
  TO_UNICODE ('t'),
  TO_UNICODE ('r'),
  TO_UNICODE ('i'),
  TO_UNICODE ('b'),
  TO_UNICODE ('u'),
  TO_UNICODE ('t'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('N'),
  TO_UNICODE ('E'),
  TO_UNICODE ('W'),
  TO_UNICODE ('I'),
  TO_UNICODE ('S'),
  TO_UNICODE ('L'),
  TO_UNICODE ('E'),
  TO_UNICODE ('S'),
  TO_UNICODE ('S'),
  TO_UNICODE ('O'),
  TO_UNICODE ('R'),
  TO_UNICODE ('E'),
  TO_UNICODE ('Q'),
  TO_UNICODE ('U'),
  TO_UNICODE ('A'),
  TO_UNICODE ('L'),
  TO_UNICODE ('\''),
  TO_UNICODE (0)
} ;

//--- Syntax error message for terminal '$NEWISLESS$' :
static const utf32 gSyntaxErrorMessage_NEWISLESS [] = {
  TO_UNICODE ('m'),
  TO_UNICODE ('e'),
  TO_UNICODE ('s'),
  TO_UNICODE ('s'),
  TO_UNICODE ('a'),
  TO_UNICODE ('g'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('a'),
  TO_UNICODE ('t'),
  TO_UNICODE ('t'),
  TO_UNICODE ('r'),
  TO_UNICODE ('i'),
  TO_UNICODE ('b'),
  TO_UNICODE ('u'),
  TO_UNICODE ('t'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('N'),
  TO_UNICODE ('E'),
  TO_UNICODE ('W'),
  TO_UNICODE ('I'),
  TO_UNICODE ('S'),
  TO_UNICODE ('L'),
  TO_UNICODE ('E'),
  TO_UNICODE ('S'),
  TO_UNICODE ('S'),
  TO_UNICODE ('\''),
  TO_UNICODE (0)
} ;

//--- Syntax error message for terminal '$NEWISGREATEROREQUAL$' :
static const utf32 gSyntaxErrorMessage_NEWISGREATEROREQUAL [] = {
  TO_UNICODE ('m'),
  TO_UNICODE ('e'),
  TO_UNICODE ('s'),
  TO_UNICODE ('s'),
  TO_UNICODE ('a'),
  TO_UNICODE ('g'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('a'),
  TO_UNICODE ('t'),
  TO_UNICODE ('t'),
  TO_UNICODE ('r'),
  TO_UNICODE ('i'),
  TO_UNICODE ('b'),
  TO_UNICODE ('u'),
  TO_UNICODE ('t'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('N'),
  TO_UNICODE ('E'),
  TO_UNICODE ('W'),
  TO_UNICODE ('I'),
  TO_UNICODE ('S'),
  TO_UNICODE ('G'),
  TO_UNICODE ('R'),
  TO_UNICODE ('E'),
  TO_UNICODE ('A'),
  TO_UNICODE ('T'),
  TO_UNICODE ('E'),
  TO_UNICODE ('R'),
  TO_UNICODE ('O'),
  TO_UNICODE ('R'),
  TO_UNICODE ('E'),
  TO_UNICODE ('Q'),
  TO_UNICODE ('U'),
  TO_UNICODE ('A'),
  TO_UNICODE ('L'),
  TO_UNICODE ('\''),
  TO_UNICODE (0)
} ;

//--- Syntax error message for terminal '$ONEEVERYN$' :
static const utf32 gSyntaxErrorMessage_ONEEVERYN [] = {
  TO_UNICODE ('m'),
  TO_UNICODE ('e'),
  TO_UNICODE ('s'),
  TO_UNICODE ('s'),
  TO_UNICODE ('a'),
  TO_UNICODE ('g'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('a'),
  TO_UNICODE ('t'),
  TO_UNICODE ('t'),
  TO_UNICODE ('r'),
  TO_UNICODE ('i'),
  TO_UNICODE ('b'),
  TO_UNICODE ('u'),
  TO_UNICODE ('t'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('O'),
  TO_UNICODE ('N'),
  TO_UNICODE ('E'),
  TO_UNICODE ('E'),
  TO_UNICODE ('V'),
  TO_UNICODE ('E'),
  TO_UNICODE ('R'),
  TO_UNICODE ('Y'),
  TO_UNICODE ('N'),
  TO_UNICODE ('\''),
  TO_UNICODE (0)
} ;

//--- Syntax error message for terminal '$MIN$' :
static const utf32 gSyntaxErrorMessage_MIN [] = {
  TO_UNICODE ('m'),
  TO_UNICODE ('e'),
  TO_UNICODE ('s'),
  TO_UNICODE ('s'),
  TO_UNICODE ('a'),
  TO_UNICODE ('g'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('a'),
  TO_UNICODE ('t'),
  TO_UNICODE ('t'),
  TO_UNICODE ('r'),
  TO_UNICODE ('i'),
  TO_UNICODE ('b'),
  TO_UNICODE ('u'),
  TO_UNICODE ('t'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('M'),
  TO_UNICODE ('I'),
  TO_UNICODE ('N'),
  TO_UNICODE ('\''),
  TO_UNICODE (0)
} ;

//--- Syntax error message for terminal '$MAX$' :
static const utf32 gSyntaxErrorMessage_MAX [] = {
  TO_UNICODE ('m'),
  TO_UNICODE ('e'),
  TO_UNICODE ('s'),
  TO_UNICODE ('s'),
  TO_UNICODE ('a'),
  TO_UNICODE ('g'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('a'),
  TO_UNICODE ('t'),
  TO_UNICODE ('t'),
  TO_UNICODE ('r'),
  TO_UNICODE ('i'),
  TO_UNICODE ('b'),
  TO_UNICODE ('u'),
  TO_UNICODE ('t'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('M'),
  TO_UNICODE ('A'),
  TO_UNICODE ('X'),
  TO_UNICODE ('\''),
  TO_UNICODE (0)
} ;

//--- Syntax error message for terminal '$X$' :
static const utf32 gSyntaxErrorMessage_X [] = {
  TO_UNICODE ('m'),
  TO_UNICODE ('e'),
  TO_UNICODE ('s'),
  TO_UNICODE ('s'),
  TO_UNICODE ('a'),
  TO_UNICODE ('g'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('a'),
  TO_UNICODE ('t'),
  TO_UNICODE ('t'),
  TO_UNICODE ('r'),
  TO_UNICODE ('i'),
  TO_UNICODE ('b'),
  TO_UNICODE ('u'),
  TO_UNICODE ('t'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('X'),
  TO_UNICODE ('\''),
  TO_UNICODE (0)
} ;

//--- Syntax error message for terminal '$PERIOD$' :
static const utf32 gSyntaxErrorMessage_PERIOD [] = {
  TO_UNICODE ('m'),
  TO_UNICODE ('e'),
  TO_UNICODE ('s'),
  TO_UNICODE ('s'),
  TO_UNICODE ('a'),
  TO_UNICODE ('g'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('a'),
  TO_UNICODE ('t'),
  TO_UNICODE ('t'),
  TO_UNICODE ('r'),
  TO_UNICODE ('i'),
  TO_UNICODE ('b'),
  TO_UNICODE ('u'),
  TO_UNICODE ('t'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('P'),
  TO_UNICODE ('E'),
  TO_UNICODE ('R'),
  TO_UNICODE ('I'),
  TO_UNICODE ('O'),
  TO_UNICODE ('D'),
  TO_UNICODE ('\''),
  TO_UNICODE (0)
} ;

//--- Syntax error message for terminal '$OFFSET$' :
static const utf32 gSyntaxErrorMessage_OFFSET [] = {
  TO_UNICODE ('m'),
  TO_UNICODE ('e'),
  TO_UNICODE ('s'),
  TO_UNICODE ('s'),
  TO_UNICODE ('a'),
  TO_UNICODE ('g'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('a'),
  TO_UNICODE ('t'),
  TO_UNICODE ('t'),
  TO_UNICODE ('r'),
  TO_UNICODE ('i'),
  TO_UNICODE ('b'),
  TO_UNICODE ('u'),
  TO_UNICODE ('t'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('O'),
  TO_UNICODE ('F'),
  TO_UNICODE ('F'),
  TO_UNICODE ('S'),
  TO_UNICODE ('E'),
  TO_UNICODE ('T'),
  TO_UNICODE ('\''),
  TO_UNICODE (0)
} ;

//--- Syntax error message for terminal '$NETWORKORDERCALLOUT$' :
static const utf32 gSyntaxErrorMessage_NETWORKORDERCALLOUT [] = {
  TO_UNICODE ('m'),
  TO_UNICODE ('e'),
  TO_UNICODE ('s'),
  TO_UNICODE ('s'),
  TO_UNICODE ('a'),
  TO_UNICODE ('g'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('a'),
  TO_UNICODE ('t'),
  TO_UNICODE ('t'),
  TO_UNICODE ('r'),
  TO_UNICODE ('i'),
  TO_UNICODE ('b'),
  TO_UNICODE ('u'),
  TO_UNICODE ('t'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('N'),
  TO_UNICODE ('E'),
  TO_UNICODE ('T'),
  TO_UNICODE ('W'),
  TO_UNICODE ('O'),
  TO_UNICODE ('R'),
  TO_UNICODE ('K'),
  TO_UNICODE ('O'),
  TO_UNICODE ('R'),
  TO_UNICODE ('D'),
  TO_UNICODE ('E'),
  TO_UNICODE ('R'),
  TO_UNICODE ('C'),
  TO_UNICODE ('A'),
  TO_UNICODE ('L'),
  TO_UNICODE ('L'),
  TO_UNICODE ('O'),
  TO_UNICODE ('U'),
  TO_UNICODE ('T'),
  TO_UNICODE ('\''),
  TO_UNICODE (0)
} ;

//--- Syntax error message for terminal '$CPUORDERCALLOUT$' :
static const utf32 gSyntaxErrorMessage_CPUORDERCALLOUT [] = {
  TO_UNICODE ('m'),
  TO_UNICODE ('e'),
  TO_UNICODE ('s'),
  TO_UNICODE ('s'),
  TO_UNICODE ('a'),
  TO_UNICODE ('g'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('a'),
  TO_UNICODE ('t'),
  TO_UNICODE ('t'),
  TO_UNICODE ('r'),
  TO_UNICODE ('i'),
  TO_UNICODE ('b'),
  TO_UNICODE ('u'),
  TO_UNICODE ('t'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('C'),
  TO_UNICODE ('P'),
  TO_UNICODE ('U'),
  TO_UNICODE ('O'),
  TO_UNICODE ('R'),
  TO_UNICODE ('D'),
  TO_UNICODE ('E'),
  TO_UNICODE ('R'),
  TO_UNICODE ('C'),
  TO_UNICODE ('A'),
  TO_UNICODE ('L'),
  TO_UNICODE ('L'),
  TO_UNICODE ('O'),
  TO_UNICODE ('U'),
  TO_UNICODE ('T'),
  TO_UNICODE ('\''),
  TO_UNICODE (0)
} ;

//--- Syntax error message for terminal '$INITIALVALUE$' :
static const utf32 gSyntaxErrorMessage_INITIALVALUE [] = {
  TO_UNICODE ('m'),
  TO_UNICODE ('e'),
  TO_UNICODE ('s'),
  TO_UNICODE ('s'),
  TO_UNICODE ('a'),
  TO_UNICODE ('g'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('a'),
  TO_UNICODE ('t'),
  TO_UNICODE ('t'),
  TO_UNICODE ('r'),
  TO_UNICODE ('i'),
  TO_UNICODE ('b'),
  TO_UNICODE ('u'),
  TO_UNICODE ('t'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('I'),
  TO_UNICODE ('N'),
  TO_UNICODE ('I'),
  TO_UNICODE ('T'),
  TO_UNICODE ('I'),
  TO_UNICODE ('A'),
  TO_UNICODE ('L'),
  TO_UNICODE ('V'),
  TO_UNICODE ('A'),
  TO_UNICODE ('L'),
  TO_UNICODE ('U'),
  TO_UNICODE ('E'),
  TO_UNICODE ('\''),
  TO_UNICODE (0)
} ;

//--- Syntax error message for terminal '$QUEUESIZE$' :
static const utf32 gSyntaxErrorMessage_QUEUESIZE [] = {
  TO_UNICODE ('m'),
  TO_UNICODE ('e'),
  TO_UNICODE ('s'),
  TO_UNICODE ('s'),
  TO_UNICODE ('a'),
  TO_UNICODE ('g'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('a'),
  TO_UNICODE ('t'),
  TO_UNICODE ('t'),
  TO_UNICODE ('r'),
  TO_UNICODE ('i'),
  TO_UNICODE ('b'),
  TO_UNICODE ('u'),
  TO_UNICODE ('t'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('Q'),
  TO_UNICODE ('U'),
  TO_UNICODE ('E'),
  TO_UNICODE ('U'),
  TO_UNICODE ('E'),
  TO_UNICODE ('S'),
  TO_UNICODE ('I'),
  TO_UNICODE ('Z'),
  TO_UNICODE ('E'),
  TO_UNICODE ('\''),
  TO_UNICODE (0)
} ;

//--- Syntax error message for terminal '$LINK$' :
static const utf32 gSyntaxErrorMessage_LINK [] = {
  TO_UNICODE ('m'),
  TO_UNICODE ('e'),
  TO_UNICODE ('s'),
  TO_UNICODE ('s'),
  TO_UNICODE ('a'),
  TO_UNICODE ('g'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('a'),
  TO_UNICODE ('t'),
  TO_UNICODE ('t'),
  TO_UNICODE ('r'),
  TO_UNICODE ('i'),
  TO_UNICODE ('b'),
  TO_UNICODE ('u'),
  TO_UNICODE ('t'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('L'),
  TO_UNICODE ('I'),
  TO_UNICODE ('N'),
  TO_UNICODE ('K'),
  TO_UNICODE ('\''),
  TO_UNICODE (0)
} ;

//--- Syntax error message for terminal '$RECEIVEMESSAGE$' :
static const utf32 gSyntaxErrorMessage_RECEIVEMESSAGE [] = {
  TO_UNICODE ('m'),
  TO_UNICODE ('e'),
  TO_UNICODE ('s'),
  TO_UNICODE ('s'),
  TO_UNICODE ('a'),
  TO_UNICODE ('g'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('a'),
  TO_UNICODE ('t'),
  TO_UNICODE ('t'),
  TO_UNICODE ('r'),
  TO_UNICODE ('i'),
  TO_UNICODE ('b'),
  TO_UNICODE ('u'),
  TO_UNICODE ('t'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('R'),
  TO_UNICODE ('E'),
  TO_UNICODE ('C'),
  TO_UNICODE ('E'),
  TO_UNICODE ('I'),
  TO_UNICODE ('V'),
  TO_UNICODE ('E'),
  TO_UNICODE ('M'),
  TO_UNICODE ('E'),
  TO_UNICODE ('S'),
  TO_UNICODE ('S'),
  TO_UNICODE ('A'),
  TO_UNICODE ('G'),
  TO_UNICODE ('E'),
  TO_UNICODE ('\''),
  TO_UNICODE (0)
} ;

//--- Syntax error message for terminal '$FLAG$' :
static const utf32 gSyntaxErrorMessage_FLAG [] = {
  TO_UNICODE ('m'),
  TO_UNICODE ('e'),
  TO_UNICODE ('s'),
  TO_UNICODE ('s'),
  TO_UNICODE ('a'),
  TO_UNICODE ('g'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('a'),
  TO_UNICODE ('t'),
  TO_UNICODE ('t'),
  TO_UNICODE ('r'),
  TO_UNICODE ('i'),
  TO_UNICODE ('b'),
  TO_UNICODE ('u'),
  TO_UNICODE ('t'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('F'),
  TO_UNICODE ('L'),
  TO_UNICODE ('A'),
  TO_UNICODE ('G'),
  TO_UNICODE ('\''),
  TO_UNICODE (0)
} ;

//--- Syntax error message for terminal '$FLAGNAME$' :
static const utf32 gSyntaxErrorMessage_FLAGNAME [] = {
  TO_UNICODE ('m'),
  TO_UNICODE ('e'),
  TO_UNICODE ('s'),
  TO_UNICODE ('s'),
  TO_UNICODE ('a'),
  TO_UNICODE ('g'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('a'),
  TO_UNICODE ('t'),
  TO_UNICODE ('t'),
  TO_UNICODE ('r'),
  TO_UNICODE ('i'),
  TO_UNICODE ('b'),
  TO_UNICODE ('u'),
  TO_UNICODE ('t'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('F'),
  TO_UNICODE ('L'),
  TO_UNICODE ('A'),
  TO_UNICODE ('G'),
  TO_UNICODE ('N'),
  TO_UNICODE ('A'),
  TO_UNICODE ('M'),
  TO_UNICODE ('E'),
  TO_UNICODE ('\''),
  TO_UNICODE (0)
} ;

//--- Syntax error message for terminal '$STATIC$' :
static const utf32 gSyntaxErrorMessage_STATIC [] = {
  TO_UNICODE ('n'),
  TO_UNICODE ('e'),
  TO_UNICODE ('t'),
  TO_UNICODE ('w'),
  TO_UNICODE ('o'),
  TO_UNICODE ('r'),
  TO_UNICODE ('k'),
  TO_UNICODE ('m'),
  TO_UNICODE ('e'),
  TO_UNICODE ('s'),
  TO_UNICODE ('s'),
  TO_UNICODE ('a'),
  TO_UNICODE ('g'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('a'),
  TO_UNICODE ('t'),
  TO_UNICODE ('t'),
  TO_UNICODE ('r'),
  TO_UNICODE ('i'),
  TO_UNICODE ('b'),
  TO_UNICODE ('u'),
  TO_UNICODE ('t'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('S'),
  TO_UNICODE ('T'),
  TO_UNICODE ('A'),
  TO_UNICODE ('T'),
  TO_UNICODE ('I'),
  TO_UNICODE ('C'),
  TO_UNICODE ('\''),
  TO_UNICODE (0)
} ;

//--- Syntax error message for terminal '$DYNAMIC$' :
static const utf32 gSyntaxErrorMessage_DYNAMIC [] = {
  TO_UNICODE ('n'),
  TO_UNICODE ('e'),
  TO_UNICODE ('t'),
  TO_UNICODE ('w'),
  TO_UNICODE ('o'),
  TO_UNICODE ('r'),
  TO_UNICODE ('k'),
  TO_UNICODE ('m'),
  TO_UNICODE ('e'),
  TO_UNICODE ('s'),
  TO_UNICODE ('s'),
  TO_UNICODE ('a'),
  TO_UNICODE ('g'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('a'),
  TO_UNICODE ('t'),
  TO_UNICODE ('t'),
  TO_UNICODE ('r'),
  TO_UNICODE ('i'),
  TO_UNICODE ('b'),
  TO_UNICODE ('u'),
  TO_UNICODE ('t'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('D'),
  TO_UNICODE ('Y'),
  TO_UNICODE ('N'),
  TO_UNICODE ('A'),
  TO_UNICODE ('M'),
  TO_UNICODE ('I'),
  TO_UNICODE ('C'),
  TO_UNICODE ('\''),
  TO_UNICODE (0)
} ;

//--- Syntax error message for terminal '$ZERO$' :
static const utf32 gSyntaxErrorMessage_ZERO [] = {
  TO_UNICODE ('n'),
  TO_UNICODE ('e'),
  TO_UNICODE ('t'),
  TO_UNICODE ('w'),
  TO_UNICODE ('o'),
  TO_UNICODE ('r'),
  TO_UNICODE ('k'),
  TO_UNICODE ('m'),
  TO_UNICODE ('e'),
  TO_UNICODE ('s'),
  TO_UNICODE ('s'),
  TO_UNICODE ('a'),
  TO_UNICODE ('g'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('a'),
  TO_UNICODE ('t'),
  TO_UNICODE ('t'),
  TO_UNICODE ('r'),
  TO_UNICODE ('i'),
  TO_UNICODE ('b'),
  TO_UNICODE ('u'),
  TO_UNICODE ('t'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('Z'),
  TO_UNICODE ('E'),
  TO_UNICODE ('R'),
  TO_UNICODE ('O'),
  TO_UNICODE ('\''),
  TO_UNICODE (0)
} ;

//--- Syntax error message for terminal '$SIZEINBITS$' :
static const utf32 gSyntaxErrorMessage_SIZEINBITS [] = {
  TO_UNICODE ('n'),
  TO_UNICODE ('e'),
  TO_UNICODE ('t'),
  TO_UNICODE ('w'),
  TO_UNICODE ('o'),
  TO_UNICODE ('r'),
  TO_UNICODE ('k'),
  TO_UNICODE ('m'),
  TO_UNICODE ('e'),
  TO_UNICODE ('s'),
  TO_UNICODE ('s'),
  TO_UNICODE ('a'),
  TO_UNICODE ('g'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('a'),
  TO_UNICODE ('t'),
  TO_UNICODE ('t'),
  TO_UNICODE ('r'),
  TO_UNICODE ('i'),
  TO_UNICODE ('b'),
  TO_UNICODE ('u'),
  TO_UNICODE ('t'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('S'),
  TO_UNICODE ('I'),
  TO_UNICODE ('Z'),
  TO_UNICODE ('E'),
  TO_UNICODE ('I'),
  TO_UNICODE ('N'),
  TO_UNICODE ('B'),
  TO_UNICODE ('I'),
  TO_UNICODE ('T'),
  TO_UNICODE ('S'),
  TO_UNICODE ('\''),
  TO_UNICODE (0)
} ;

//--- Syntax error message for terminal '$MAXSIZEINBITS$' :
static const utf32 gSyntaxErrorMessage_MAXSIZEINBITS [] = {
  TO_UNICODE ('n'),
  TO_UNICODE ('e'),
  TO_UNICODE ('t'),
  TO_UNICODE ('w'),
  TO_UNICODE ('o'),
  TO_UNICODE ('r'),
  TO_UNICODE ('k'),
  TO_UNICODE ('m'),
  TO_UNICODE ('e'),
  TO_UNICODE ('s'),
  TO_UNICODE ('s'),
  TO_UNICODE ('a'),
  TO_UNICODE ('g'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('a'),
  TO_UNICODE ('t'),
  TO_UNICODE ('t'),
  TO_UNICODE ('r'),
  TO_UNICODE ('i'),
  TO_UNICODE ('b'),
  TO_UNICODE ('u'),
  TO_UNICODE ('t'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('M'),
  TO_UNICODE ('A'),
  TO_UNICODE ('X'),
  TO_UNICODE ('S'),
  TO_UNICODE ('I'),
  TO_UNICODE ('Z'),
  TO_UNICODE ('E'),
  TO_UNICODE ('I'),
  TO_UNICODE ('N'),
  TO_UNICODE ('B'),
  TO_UNICODE ('I'),
  TO_UNICODE ('T'),
  TO_UNICODE ('S'),
  TO_UNICODE ('\''),
  TO_UNICODE (0)
} ;

//--- Syntax error message for terminal '$BITORDERING$' :
static const utf32 gSyntaxErrorMessage_BITORDERING [] = {
  TO_UNICODE ('n'),
  TO_UNICODE ('e'),
  TO_UNICODE ('t'),
  TO_UNICODE ('w'),
  TO_UNICODE ('o'),
  TO_UNICODE ('r'),
  TO_UNICODE ('k'),
  TO_UNICODE ('m'),
  TO_UNICODE ('e'),
  TO_UNICODE ('s'),
  TO_UNICODE ('s'),
  TO_UNICODE ('a'),
  TO_UNICODE ('g'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('a'),
  TO_UNICODE ('t'),
  TO_UNICODE ('t'),
  TO_UNICODE ('r'),
  TO_UNICODE ('i'),
  TO_UNICODE ('b'),
  TO_UNICODE ('u'),
  TO_UNICODE ('t'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('B'),
  TO_UNICODE ('I'),
  TO_UNICODE ('T'),
  TO_UNICODE ('O'),
  TO_UNICODE ('R'),
  TO_UNICODE ('D'),
  TO_UNICODE ('E'),
  TO_UNICODE ('R'),
  TO_UNICODE ('I'),
  TO_UNICODE ('N'),
  TO_UNICODE ('G'),
  TO_UNICODE ('\''),
  TO_UNICODE (0)
} ;

//--- Syntax error message for terminal '$BIGENDIAN$' :
static const utf32 gSyntaxErrorMessage_BIGENDIAN [] = {
  TO_UNICODE ('n'),
  TO_UNICODE ('e'),
  TO_UNICODE ('t'),
  TO_UNICODE ('w'),
  TO_UNICODE ('o'),
  TO_UNICODE ('r'),
  TO_UNICODE ('k'),
  TO_UNICODE ('m'),
  TO_UNICODE ('e'),
  TO_UNICODE ('s'),
  TO_UNICODE ('s'),
  TO_UNICODE ('a'),
  TO_UNICODE ('g'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('a'),
  TO_UNICODE ('t'),
  TO_UNICODE ('t'),
  TO_UNICODE ('r'),
  TO_UNICODE ('i'),
  TO_UNICODE ('b'),
  TO_UNICODE ('u'),
  TO_UNICODE ('t'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('B'),
  TO_UNICODE ('I'),
  TO_UNICODE ('G'),
  TO_UNICODE ('E'),
  TO_UNICODE ('N'),
  TO_UNICODE ('D'),
  TO_UNICODE ('I'),
  TO_UNICODE ('A'),
  TO_UNICODE ('N'),
  TO_UNICODE ('\''),
  TO_UNICODE (0)
} ;

//--- Syntax error message for terminal '$LITTLEENDIAN$' :
static const utf32 gSyntaxErrorMessage_LITTLEENDIAN [] = {
  TO_UNICODE ('n'),
  TO_UNICODE ('e'),
  TO_UNICODE ('t'),
  TO_UNICODE ('w'),
  TO_UNICODE ('o'),
  TO_UNICODE ('r'),
  TO_UNICODE ('k'),
  TO_UNICODE ('m'),
  TO_UNICODE ('e'),
  TO_UNICODE ('s'),
  TO_UNICODE ('s'),
  TO_UNICODE ('a'),
  TO_UNICODE ('g'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('a'),
  TO_UNICODE ('t'),
  TO_UNICODE ('t'),
  TO_UNICODE ('r'),
  TO_UNICODE ('i'),
  TO_UNICODE ('b'),
  TO_UNICODE ('u'),
  TO_UNICODE ('t'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('L'),
  TO_UNICODE ('I'),
  TO_UNICODE ('T'),
  TO_UNICODE ('T'),
  TO_UNICODE ('L'),
  TO_UNICODE ('E'),
  TO_UNICODE ('E'),
  TO_UNICODE ('N'),
  TO_UNICODE ('D'),
  TO_UNICODE ('I'),
  TO_UNICODE ('A'),
  TO_UNICODE ('N'),
  TO_UNICODE ('\''),
  TO_UNICODE (0)
} ;

//--- Syntax error message for terminal '$BITPOSITION$' :
static const utf32 gSyntaxErrorMessage_BITPOSITION [] = {
  TO_UNICODE ('n'),
  TO_UNICODE ('e'),
  TO_UNICODE ('t'),
  TO_UNICODE ('w'),
  TO_UNICODE ('o'),
  TO_UNICODE ('r'),
  TO_UNICODE ('k'),
  TO_UNICODE ('m'),
  TO_UNICODE ('e'),
  TO_UNICODE ('s'),
  TO_UNICODE ('s'),
  TO_UNICODE ('a'),
  TO_UNICODE ('g'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('a'),
  TO_UNICODE ('t'),
  TO_UNICODE ('t'),
  TO_UNICODE ('r'),
  TO_UNICODE ('i'),
  TO_UNICODE ('b'),
  TO_UNICODE ('u'),
  TO_UNICODE ('t'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('B'),
  TO_UNICODE ('I'),
  TO_UNICODE ('T'),
  TO_UNICODE ('P'),
  TO_UNICODE ('O'),
  TO_UNICODE ('S'),
  TO_UNICODE ('I'),
  TO_UNICODE ('T'),
  TO_UNICODE ('I'),
  TO_UNICODE ('O'),
  TO_UNICODE ('N'),
  TO_UNICODE ('\''),
  TO_UNICODE (0)
} ;

//--- Syntax error message for terminal '$DATAINTERPRETATION$' :
static const utf32 gSyntaxErrorMessage_DATAINTERPRETATION [] = {
  TO_UNICODE ('n'),
  TO_UNICODE ('e'),
  TO_UNICODE ('t'),
  TO_UNICODE ('w'),
  TO_UNICODE ('o'),
  TO_UNICODE ('r'),
  TO_UNICODE ('k'),
  TO_UNICODE ('m'),
  TO_UNICODE ('e'),
  TO_UNICODE ('s'),
  TO_UNICODE ('s'),
  TO_UNICODE ('a'),
  TO_UNICODE ('g'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('a'),
  TO_UNICODE ('t'),
  TO_UNICODE ('t'),
  TO_UNICODE ('r'),
  TO_UNICODE ('i'),
  TO_UNICODE ('b'),
  TO_UNICODE ('u'),
  TO_UNICODE ('t'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('D'),
  TO_UNICODE ('A'),
  TO_UNICODE ('T'),
  TO_UNICODE ('A'),
  TO_UNICODE ('I'),
  TO_UNICODE ('N'),
  TO_UNICODE ('T'),
  TO_UNICODE ('E'),
  TO_UNICODE ('R'),
  TO_UNICODE ('P'),
  TO_UNICODE ('R'),
  TO_UNICODE ('E'),
  TO_UNICODE ('T'),
  TO_UNICODE ('A'),
  TO_UNICODE ('T'),
  TO_UNICODE ('I'),
  TO_UNICODE ('O'),
  TO_UNICODE ('N'),
  TO_UNICODE ('\''),
  TO_UNICODE (0)
} ;

//--- Syntax error message for terminal '$UNSIGNEDINTEGER$' :
static const utf32 gSyntaxErrorMessage_UNSIGNEDINTEGER [] = {
  TO_UNICODE ('n'),
  TO_UNICODE ('e'),
  TO_UNICODE ('t'),
  TO_UNICODE ('w'),
  TO_UNICODE ('o'),
  TO_UNICODE ('r'),
  TO_UNICODE ('k'),
  TO_UNICODE ('m'),
  TO_UNICODE ('e'),
  TO_UNICODE ('s'),
  TO_UNICODE ('s'),
  TO_UNICODE ('a'),
  TO_UNICODE ('g'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('a'),
  TO_UNICODE ('t'),
  TO_UNICODE ('t'),
  TO_UNICODE ('r'),
  TO_UNICODE ('i'),
  TO_UNICODE ('b'),
  TO_UNICODE ('u'),
  TO_UNICODE ('t'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('U'),
  TO_UNICODE ('N'),
  TO_UNICODE ('S'),
  TO_UNICODE ('I'),
  TO_UNICODE ('G'),
  TO_UNICODE ('N'),
  TO_UNICODE ('E'),
  TO_UNICODE ('D'),
  TO_UNICODE ('I'),
  TO_UNICODE ('N'),
  TO_UNICODE ('T'),
  TO_UNICODE ('E'),
  TO_UNICODE ('G'),
  TO_UNICODE ('E'),
  TO_UNICODE ('R'),
  TO_UNICODE ('\''),
  TO_UNICODE (0)
} ;

//--- Syntax error message for terminal '$BYTEARRAY$' :
static const utf32 gSyntaxErrorMessage_BYTEARRAY [] = {
  TO_UNICODE ('n'),
  TO_UNICODE ('e'),
  TO_UNICODE ('t'),
  TO_UNICODE ('w'),
  TO_UNICODE ('o'),
  TO_UNICODE ('r'),
  TO_UNICODE ('k'),
  TO_UNICODE ('m'),
  TO_UNICODE ('e'),
  TO_UNICODE ('s'),
  TO_UNICODE ('s'),
  TO_UNICODE ('a'),
  TO_UNICODE ('g'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('a'),
  TO_UNICODE ('t'),
  TO_UNICODE ('t'),
  TO_UNICODE ('r'),
  TO_UNICODE ('i'),
  TO_UNICODE ('b'),
  TO_UNICODE ('u'),
  TO_UNICODE ('t'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('B'),
  TO_UNICODE ('Y'),
  TO_UNICODE ('T'),
  TO_UNICODE ('E'),
  TO_UNICODE ('A'),
  TO_UNICODE ('R'),
  TO_UNICODE ('R'),
  TO_UNICODE ('A'),
  TO_UNICODE ('Y'),
  TO_UNICODE ('\''),
  TO_UNICODE (0)
} ;

//--- Syntax error message for terminal '$DIRECTION$' :
static const utf32 gSyntaxErrorMessage_DIRECTION [] = {
  TO_UNICODE ('n'),
  TO_UNICODE ('e'),
  TO_UNICODE ('t'),
  TO_UNICODE ('w'),
  TO_UNICODE ('o'),
  TO_UNICODE ('r'),
  TO_UNICODE ('k'),
  TO_UNICODE ('m'),
  TO_UNICODE ('e'),
  TO_UNICODE ('s'),
  TO_UNICODE ('s'),
  TO_UNICODE ('a'),
  TO_UNICODE ('g'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('a'),
  TO_UNICODE ('t'),
  TO_UNICODE ('t'),
  TO_UNICODE ('r'),
  TO_UNICODE ('i'),
  TO_UNICODE ('b'),
  TO_UNICODE ('u'),
  TO_UNICODE ('t'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('D'),
  TO_UNICODE ('I'),
  TO_UNICODE ('R'),
  TO_UNICODE ('E'),
  TO_UNICODE ('C'),
  TO_UNICODE ('T'),
  TO_UNICODE ('I'),
  TO_UNICODE ('O'),
  TO_UNICODE ('N'),
  TO_UNICODE ('\''),
  TO_UNICODE (0)
} ;

//--- Syntax error message for terminal '$SENT$' :
static const utf32 gSyntaxErrorMessage_SENT [] = {
  TO_UNICODE ('n'),
  TO_UNICODE ('e'),
  TO_UNICODE ('t'),
  TO_UNICODE ('w'),
  TO_UNICODE ('o'),
  TO_UNICODE ('r'),
  TO_UNICODE ('k'),
  TO_UNICODE ('m'),
  TO_UNICODE ('e'),
  TO_UNICODE ('s'),
  TO_UNICODE ('s'),
  TO_UNICODE ('a'),
  TO_UNICODE ('g'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('a'),
  TO_UNICODE ('t'),
  TO_UNICODE ('t'),
  TO_UNICODE ('r'),
  TO_UNICODE ('i'),
  TO_UNICODE ('b'),
  TO_UNICODE ('u'),
  TO_UNICODE ('t'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('S'),
  TO_UNICODE ('E'),
  TO_UNICODE ('N'),
  TO_UNICODE ('T'),
  TO_UNICODE ('\''),
  TO_UNICODE (0)
} ;

//--- Syntax error message for terminal '$RECEIVED$' :
static const utf32 gSyntaxErrorMessage_RECEIVED [] = {
  TO_UNICODE ('n'),
  TO_UNICODE ('e'),
  TO_UNICODE ('t'),
  TO_UNICODE ('w'),
  TO_UNICODE ('o'),
  TO_UNICODE ('r'),
  TO_UNICODE ('k'),
  TO_UNICODE ('m'),
  TO_UNICODE ('e'),
  TO_UNICODE ('s'),
  TO_UNICODE ('s'),
  TO_UNICODE ('a'),
  TO_UNICODE ('g'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('a'),
  TO_UNICODE ('t'),
  TO_UNICODE ('t'),
  TO_UNICODE ('r'),
  TO_UNICODE ('i'),
  TO_UNICODE ('b'),
  TO_UNICODE ('u'),
  TO_UNICODE ('t'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('R'),
  TO_UNICODE ('E'),
  TO_UNICODE ('C'),
  TO_UNICODE ('E'),
  TO_UNICODE ('I'),
  TO_UNICODE ('V'),
  TO_UNICODE ('E'),
  TO_UNICODE ('D'),
  TO_UNICODE ('\''),
  TO_UNICODE (0)
} ;

//--- Syntax error message for terminal '$COMTIMEBASE$' :
static const utf32 gSyntaxErrorMessage_COMTIMEBASE [] = {
  TO_UNICODE ('c'),
  TO_UNICODE ('o'),
  TO_UNICODE ('m'),
  TO_UNICODE (' '),
  TO_UNICODE ('a'),
  TO_UNICODE ('t'),
  TO_UNICODE ('t'),
  TO_UNICODE ('r'),
  TO_UNICODE ('i'),
  TO_UNICODE ('b'),
  TO_UNICODE ('u'),
  TO_UNICODE ('t'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('C'),
  TO_UNICODE ('O'),
  TO_UNICODE ('M'),
  TO_UNICODE ('T'),
  TO_UNICODE ('I'),
  TO_UNICODE ('M'),
  TO_UNICODE ('E'),
  TO_UNICODE ('B'),
  TO_UNICODE ('A'),
  TO_UNICODE ('S'),
  TO_UNICODE ('E'),
  TO_UNICODE ('\''),
  TO_UNICODE (0)
} ;

//--- Syntax error message for terminal '$COMERRORHOOK$' :
static const utf32 gSyntaxErrorMessage_COMERRORHOOK [] = {
  TO_UNICODE ('c'),
  TO_UNICODE ('o'),
  TO_UNICODE ('m'),
  TO_UNICODE (' '),
  TO_UNICODE ('a'),
  TO_UNICODE ('t'),
  TO_UNICODE ('t'),
  TO_UNICODE ('r'),
  TO_UNICODE ('i'),
  TO_UNICODE ('b'),
  TO_UNICODE ('u'),
  TO_UNICODE ('t'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('C'),
  TO_UNICODE ('O'),
  TO_UNICODE ('M'),
  TO_UNICODE ('E'),
  TO_UNICODE ('R'),
  TO_UNICODE ('R'),
  TO_UNICODE ('O'),
  TO_UNICODE ('R'),
  TO_UNICODE ('H'),
  TO_UNICODE ('O'),
  TO_UNICODE ('O'),
  TO_UNICODE ('K'),
  TO_UNICODE ('\''),
  TO_UNICODE (0)
} ;

//--- Syntax error message for terminal '$COMUSEGETSERVICEID$' :
static const utf32 gSyntaxErrorMessage_COMUSEGETSERVICEID [] = {
  TO_UNICODE ('c'),
  TO_UNICODE ('o'),
  TO_UNICODE ('m'),
  TO_UNICODE (' '),
  TO_UNICODE ('a'),
  TO_UNICODE ('t'),
  TO_UNICODE ('t'),
  TO_UNICODE ('r'),
  TO_UNICODE ('i'),
  TO_UNICODE ('b'),
  TO_UNICODE ('u'),
  TO_UNICODE ('t'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('C'),
  TO_UNICODE ('O'),
  TO_UNICODE ('M'),
  TO_UNICODE ('U'),
  TO_UNICODE ('S'),
  TO_UNICODE ('E'),
  TO_UNICODE ('G'),
  TO_UNICODE ('E'),
  TO_UNICODE ('T'),
  TO_UNICODE ('S'),
  TO_UNICODE ('E'),
  TO_UNICODE ('R'),
  TO_UNICODE ('V'),
  TO_UNICODE ('I'),
  TO_UNICODE ('C'),
  TO_UNICODE ('E'),
  TO_UNICODE ('I'),
  TO_UNICODE ('D'),
  TO_UNICODE ('\''),
  TO_UNICODE (0)
} ;

//--- Syntax error message for terminal '$COMUSEPARAMETERACCESS$' :
static const utf32 gSyntaxErrorMessage_COMUSEPARAMETERACCESS [] = {
  TO_UNICODE ('c'),
  TO_UNICODE ('o'),
  TO_UNICODE ('m'),
  TO_UNICODE (' '),
  TO_UNICODE ('a'),
  TO_UNICODE ('t'),
  TO_UNICODE ('t'),
  TO_UNICODE ('r'),
  TO_UNICODE ('i'),
  TO_UNICODE ('b'),
  TO_UNICODE ('u'),
  TO_UNICODE ('t'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('C'),
  TO_UNICODE ('O'),
  TO_UNICODE ('M'),
  TO_UNICODE ('U'),
  TO_UNICODE ('S'),
  TO_UNICODE ('E'),
  TO_UNICODE ('P'),
  TO_UNICODE ('A'),
  TO_UNICODE ('R'),
  TO_UNICODE ('A'),
  TO_UNICODE ('M'),
  TO_UNICODE ('E'),
  TO_UNICODE ('T'),
  TO_UNICODE ('E'),
  TO_UNICODE ('R'),
  TO_UNICODE ('A'),
  TO_UNICODE ('C'),
  TO_UNICODE ('C'),
  TO_UNICODE ('E'),
  TO_UNICODE ('S'),
  TO_UNICODE ('S'),
  TO_UNICODE ('\''),
  TO_UNICODE (0)
} ;

//--- Syntax error message for terminal '$COMSTARTCOMEXTENSION$' :
static const utf32 gSyntaxErrorMessage_COMSTARTCOMEXTENSION [] = {
  TO_UNICODE ('c'),
  TO_UNICODE ('o'),
  TO_UNICODE ('m'),
  TO_UNICODE (' '),
  TO_UNICODE ('a'),
  TO_UNICODE ('t'),
  TO_UNICODE ('t'),
  TO_UNICODE ('r'),
  TO_UNICODE ('i'),
  TO_UNICODE ('b'),
  TO_UNICODE ('u'),
  TO_UNICODE ('t'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('C'),
  TO_UNICODE ('O'),
  TO_UNICODE ('M'),
  TO_UNICODE ('S'),
  TO_UNICODE ('T'),
  TO_UNICODE ('A'),
  TO_UNICODE ('R'),
  TO_UNICODE ('T'),
  TO_UNICODE ('C'),
  TO_UNICODE ('O'),
  TO_UNICODE ('M'),
  TO_UNICODE ('E'),
  TO_UNICODE ('X'),
  TO_UNICODE ('T'),
  TO_UNICODE ('E'),
  TO_UNICODE ('N'),
  TO_UNICODE ('S'),
  TO_UNICODE ('I'),
  TO_UNICODE ('O'),
  TO_UNICODE ('N'),
  TO_UNICODE ('\''),
  TO_UNICODE (0)
} ;

//--- Syntax error message for terminal '$COMAPPMODE$' :
static const utf32 gSyntaxErrorMessage_COMAPPMODE [] = {
  TO_UNICODE ('c'),
  TO_UNICODE ('o'),
  TO_UNICODE ('m'),
  TO_UNICODE (' '),
  TO_UNICODE ('a'),
  TO_UNICODE ('t'),
  TO_UNICODE ('t'),
  TO_UNICODE ('r'),
  TO_UNICODE ('i'),
  TO_UNICODE ('b'),
  TO_UNICODE ('u'),
  TO_UNICODE ('t'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('C'),
  TO_UNICODE ('O'),
  TO_UNICODE ('M'),
  TO_UNICODE ('A'),
  TO_UNICODE ('P'),
  TO_UNICODE ('P'),
  TO_UNICODE ('M'),
  TO_UNICODE ('O'),
  TO_UNICODE ('D'),
  TO_UNICODE ('E'),
  TO_UNICODE ('\''),
  TO_UNICODE (0)
} ;

//--- Syntax error message for terminal '$COMSTATUS$' :
static const utf32 gSyntaxErrorMessage_COMSTATUS [] = {
  TO_UNICODE ('c'),
  TO_UNICODE ('o'),
  TO_UNICODE ('m'),
  TO_UNICODE (' '),
  TO_UNICODE ('a'),
  TO_UNICODE ('t'),
  TO_UNICODE ('t'),
  TO_UNICODE ('r'),
  TO_UNICODE ('i'),
  TO_UNICODE ('b'),
  TO_UNICODE ('u'),
  TO_UNICODE ('t'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('C'),
  TO_UNICODE ('O'),
  TO_UNICODE ('M'),
  TO_UNICODE ('S'),
  TO_UNICODE ('T'),
  TO_UNICODE ('A'),
  TO_UNICODE ('T'),
  TO_UNICODE ('U'),
  TO_UNICODE ('S'),
  TO_UNICODE ('\''),
  TO_UNICODE (0)
} ;

//--- Syntax error message for terminal '$USE$' :
static const utf32 gSyntaxErrorMessage_USE [] = {
  TO_UNICODE ('c'),
  TO_UNICODE ('o'),
  TO_UNICODE ('m'),
  TO_UNICODE (' '),
  TO_UNICODE ('a'),
  TO_UNICODE ('t'),
  TO_UNICODE ('t'),
  TO_UNICODE ('r'),
  TO_UNICODE ('i'),
  TO_UNICODE ('b'),
  TO_UNICODE ('u'),
  TO_UNICODE ('t'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('U'),
  TO_UNICODE ('S'),
  TO_UNICODE ('E'),
  TO_UNICODE ('\''),
  TO_UNICODE (0)
} ;

//--- Syntax error message for terminal '$COMEXTENDED$' :
static const utf32 gSyntaxErrorMessage_COMEXTENDED [] = {
  TO_UNICODE ('c'),
  TO_UNICODE ('o'),
  TO_UNICODE ('m'),
  TO_UNICODE (' '),
  TO_UNICODE ('a'),
  TO_UNICODE ('t'),
  TO_UNICODE ('t'),
  TO_UNICODE ('r'),
  TO_UNICODE ('i'),
  TO_UNICODE ('b'),
  TO_UNICODE ('u'),
  TO_UNICODE ('t'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('C'),
  TO_UNICODE ('O'),
  TO_UNICODE ('M'),
  TO_UNICODE ('E'),
  TO_UNICODE ('X'),
  TO_UNICODE ('T'),
  TO_UNICODE ('E'),
  TO_UNICODE ('N'),
  TO_UNICODE ('D'),
  TO_UNICODE ('E'),
  TO_UNICODE ('D'),
  TO_UNICODE ('\''),
  TO_UNICODE (0)
} ;

//--- Syntax error message for terminal '$COMSTANDARD$' :
static const utf32 gSyntaxErrorMessage_COMSTANDARD [] = {
  TO_UNICODE ('c'),
  TO_UNICODE ('o'),
  TO_UNICODE ('m'),
  TO_UNICODE (' '),
  TO_UNICODE ('a'),
  TO_UNICODE ('t'),
  TO_UNICODE ('t'),
  TO_UNICODE ('r'),
  TO_UNICODE ('i'),
  TO_UNICODE ('b'),
  TO_UNICODE ('u'),
  TO_UNICODE ('t'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('C'),
  TO_UNICODE ('O'),
  TO_UNICODE ('M'),
  TO_UNICODE ('S'),
  TO_UNICODE ('T'),
  TO_UNICODE ('A'),
  TO_UNICODE ('N'),
  TO_UNICODE ('D'),
  TO_UNICODE ('A'),
  TO_UNICODE ('R'),
  TO_UNICODE ('D'),
  TO_UNICODE ('\''),
  TO_UNICODE (0)
} ;

//--- Syntax error message for terminal '$IPDUPROPERTY$' :
static const utf32 gSyntaxErrorMessage_IPDUPROPERTY [] = {
  TO_UNICODE ('i'),
  TO_UNICODE ('p'),
  TO_UNICODE ('d'),
  TO_UNICODE ('u'),
  TO_UNICODE (' '),
  TO_UNICODE ('a'),
  TO_UNICODE ('t'),
  TO_UNICODE ('t'),
  TO_UNICODE ('r'),
  TO_UNICODE ('i'),
  TO_UNICODE ('b'),
  TO_UNICODE ('u'),
  TO_UNICODE ('t'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('I'),
  TO_UNICODE ('P'),
  TO_UNICODE ('D'),
  TO_UNICODE ('U'),
  TO_UNICODE ('P'),
  TO_UNICODE ('R'),
  TO_UNICODE ('O'),
  TO_UNICODE ('P'),
  TO_UNICODE ('E'),
  TO_UNICODE ('R'),
  TO_UNICODE ('T'),
  TO_UNICODE ('Y'),
  TO_UNICODE ('\''),
  TO_UNICODE (0)
} ;

//--- Syntax error message for terminal '$IPDUCALLOUT$' :
static const utf32 gSyntaxErrorMessage_IPDUCALLOUT [] = {
  TO_UNICODE ('i'),
  TO_UNICODE ('p'),
  TO_UNICODE ('d'),
  TO_UNICODE ('u'),
  TO_UNICODE (' '),
  TO_UNICODE ('a'),
  TO_UNICODE ('t'),
  TO_UNICODE ('t'),
  TO_UNICODE ('r'),
  TO_UNICODE ('i'),
  TO_UNICODE ('b'),
  TO_UNICODE ('u'),
  TO_UNICODE ('t'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('I'),
  TO_UNICODE ('P'),
  TO_UNICODE ('D'),
  TO_UNICODE ('U'),
  TO_UNICODE ('C'),
  TO_UNICODE ('A'),
  TO_UNICODE ('L'),
  TO_UNICODE ('L'),
  TO_UNICODE ('O'),
  TO_UNICODE ('U'),
  TO_UNICODE ('T'),
  TO_UNICODE ('\''),
  TO_UNICODE (0)
} ;

//--- Syntax error message for terminal '$LAYERUSED$' :
static const utf32 gSyntaxErrorMessage_LAYERUSED [] = {
  TO_UNICODE ('i'),
  TO_UNICODE ('p'),
  TO_UNICODE ('d'),
  TO_UNICODE ('u'),
  TO_UNICODE (' '),
  TO_UNICODE ('a'),
  TO_UNICODE ('t'),
  TO_UNICODE ('t'),
  TO_UNICODE ('r'),
  TO_UNICODE ('i'),
  TO_UNICODE ('b'),
  TO_UNICODE ('u'),
  TO_UNICODE ('t'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('L'),
  TO_UNICODE ('A'),
  TO_UNICODE ('Y'),
  TO_UNICODE ('E'),
  TO_UNICODE ('R'),
  TO_UNICODE ('U'),
  TO_UNICODE ('S'),
  TO_UNICODE ('E'),
  TO_UNICODE ('D'),
  TO_UNICODE ('\''),
  TO_UNICODE (0)
} ;

//--- Syntax error message for terminal '$TRANSMISSIONMODE$' :
static const utf32 gSyntaxErrorMessage_TRANSMISSIONMODE [] = {
  TO_UNICODE ('i'),
  TO_UNICODE ('p'),
  TO_UNICODE ('d'),
  TO_UNICODE ('u'),
  TO_UNICODE (' '),
  TO_UNICODE ('a'),
  TO_UNICODE ('t'),
  TO_UNICODE ('t'),
  TO_UNICODE ('r'),
  TO_UNICODE ('i'),
  TO_UNICODE ('b'),
  TO_UNICODE ('u'),
  TO_UNICODE ('t'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('T'),
  TO_UNICODE ('R'),
  TO_UNICODE ('A'),
  TO_UNICODE ('N'),
  TO_UNICODE ('S'),
  TO_UNICODE ('M'),
  TO_UNICODE ('I'),
  TO_UNICODE ('S'),
  TO_UNICODE ('S'),
  TO_UNICODE ('I'),
  TO_UNICODE ('O'),
  TO_UNICODE ('N'),
  TO_UNICODE ('M'),
  TO_UNICODE ('O'),
  TO_UNICODE ('D'),
  TO_UNICODE ('E'),
  TO_UNICODE ('\''),
  TO_UNICODE (0)
} ;

//--- Syntax error message for terminal '$DIRECT$' :
static const utf32 gSyntaxErrorMessage_DIRECT [] = {
  TO_UNICODE ('i'),
  TO_UNICODE ('p'),
  TO_UNICODE ('d'),
  TO_UNICODE ('u'),
  TO_UNICODE (' '),
  TO_UNICODE ('a'),
  TO_UNICODE ('t'),
  TO_UNICODE ('t'),
  TO_UNICODE ('r'),
  TO_UNICODE ('i'),
  TO_UNICODE ('b'),
  TO_UNICODE ('u'),
  TO_UNICODE ('t'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('D'),
  TO_UNICODE ('I'),
  TO_UNICODE ('R'),
  TO_UNICODE ('E'),
  TO_UNICODE ('C'),
  TO_UNICODE ('T'),
  TO_UNICODE ('\''),
  TO_UNICODE (0)
} ;

//--- Syntax error message for terminal '$PERIODIC$' :
static const utf32 gSyntaxErrorMessage_PERIODIC [] = {
  TO_UNICODE ('i'),
  TO_UNICODE ('p'),
  TO_UNICODE ('d'),
  TO_UNICODE ('u'),
  TO_UNICODE (' '),
  TO_UNICODE ('a'),
  TO_UNICODE ('t'),
  TO_UNICODE ('t'),
  TO_UNICODE ('r'),
  TO_UNICODE ('i'),
  TO_UNICODE ('b'),
  TO_UNICODE ('u'),
  TO_UNICODE ('t'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('P'),
  TO_UNICODE ('E'),
  TO_UNICODE ('R'),
  TO_UNICODE ('I'),
  TO_UNICODE ('O'),
  TO_UNICODE ('D'),
  TO_UNICODE ('I'),
  TO_UNICODE ('C'),
  TO_UNICODE ('\''),
  TO_UNICODE (0)
} ;

//--- Syntax error message for terminal '$MIXED$' :
static const utf32 gSyntaxErrorMessage_MIXED [] = {
  TO_UNICODE ('i'),
  TO_UNICODE ('p'),
  TO_UNICODE ('d'),
  TO_UNICODE ('u'),
  TO_UNICODE (' '),
  TO_UNICODE ('a'),
  TO_UNICODE ('t'),
  TO_UNICODE ('t'),
  TO_UNICODE ('r'),
  TO_UNICODE ('i'),
  TO_UNICODE ('b'),
  TO_UNICODE ('u'),
  TO_UNICODE ('t'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('M'),
  TO_UNICODE ('I'),
  TO_UNICODE ('X'),
  TO_UNICODE ('E'),
  TO_UNICODE ('D'),
  TO_UNICODE ('\''),
  TO_UNICODE (0)
} ;

//--- Syntax error message for terminal '$TIMEOUT$' :
static const utf32 gSyntaxErrorMessage_TIMEOUT [] = {
  TO_UNICODE ('i'),
  TO_UNICODE ('p'),
  TO_UNICODE ('d'),
  TO_UNICODE ('u'),
  TO_UNICODE (' '),
  TO_UNICODE ('a'),
  TO_UNICODE ('t'),
  TO_UNICODE ('t'),
  TO_UNICODE ('r'),
  TO_UNICODE ('i'),
  TO_UNICODE ('b'),
  TO_UNICODE ('u'),
  TO_UNICODE ('t'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('T'),
  TO_UNICODE ('I'),
  TO_UNICODE ('M'),
  TO_UNICODE ('E'),
  TO_UNICODE ('O'),
  TO_UNICODE ('U'),
  TO_UNICODE ('T'),
  TO_UNICODE ('\''),
  TO_UNICODE (0)
} ;

//--- Syntax error message for terminal '$FIRTSTIMEOUT$' :
static const utf32 gSyntaxErrorMessage_FIRTSTIMEOUT [] = {
  TO_UNICODE ('i'),
  TO_UNICODE ('p'),
  TO_UNICODE ('d'),
  TO_UNICODE ('u'),
  TO_UNICODE (' '),
  TO_UNICODE ('a'),
  TO_UNICODE ('t'),
  TO_UNICODE ('t'),
  TO_UNICODE ('r'),
  TO_UNICODE ('i'),
  TO_UNICODE ('b'),
  TO_UNICODE ('u'),
  TO_UNICODE ('t'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('F'),
  TO_UNICODE ('I'),
  TO_UNICODE ('R'),
  TO_UNICODE ('T'),
  TO_UNICODE ('S'),
  TO_UNICODE ('T'),
  TO_UNICODE ('I'),
  TO_UNICODE ('M'),
  TO_UNICODE ('E'),
  TO_UNICODE ('O'),
  TO_UNICODE ('U'),
  TO_UNICODE ('T'),
  TO_UNICODE ('\''),
  TO_UNICODE (0)
} ;

//--- Syntax error message for terminal '$MINIMUMDELAYTIME$' :
static const utf32 gSyntaxErrorMessage_MINIMUMDELAYTIME [] = {
  TO_UNICODE ('i'),
  TO_UNICODE ('p'),
  TO_UNICODE ('d'),
  TO_UNICODE ('u'),
  TO_UNICODE (' '),
  TO_UNICODE ('a'),
  TO_UNICODE ('t'),
  TO_UNICODE ('t'),
  TO_UNICODE ('r'),
  TO_UNICODE ('i'),
  TO_UNICODE ('b'),
  TO_UNICODE ('u'),
  TO_UNICODE ('t'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('M'),
  TO_UNICODE ('I'),
  TO_UNICODE ('N'),
  TO_UNICODE ('I'),
  TO_UNICODE ('M'),
  TO_UNICODE ('U'),
  TO_UNICODE ('M'),
  TO_UNICODE ('D'),
  TO_UNICODE ('E'),
  TO_UNICODE ('L'),
  TO_UNICODE ('A'),
  TO_UNICODE ('Y'),
  TO_UNICODE ('T'),
  TO_UNICODE ('I'),
  TO_UNICODE ('M'),
  TO_UNICODE ('E'),
  TO_UNICODE ('\''),
  TO_UNICODE (0)
} ;

//--- Syntax error message for terminal '$TIMEPERIOD$' :
static const utf32 gSyntaxErrorMessage_TIMEPERIOD [] = {
  TO_UNICODE ('i'),
  TO_UNICODE ('p'),
  TO_UNICODE ('d'),
  TO_UNICODE ('u'),
  TO_UNICODE (' '),
  TO_UNICODE ('a'),
  TO_UNICODE ('t'),
  TO_UNICODE ('t'),
  TO_UNICODE ('r'),
  TO_UNICODE ('i'),
  TO_UNICODE ('b'),
  TO_UNICODE ('u'),
  TO_UNICODE ('t'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('T'),
  TO_UNICODE ('I'),
  TO_UNICODE ('M'),
  TO_UNICODE ('E'),
  TO_UNICODE ('P'),
  TO_UNICODE ('E'),
  TO_UNICODE ('R'),
  TO_UNICODE ('I'),
  TO_UNICODE ('O'),
  TO_UNICODE ('D'),
  TO_UNICODE ('\''),
  TO_UNICODE (0)
} ;

//--- Syntax error message for terminal '$TIMEOFFSET$' :
static const utf32 gSyntaxErrorMessage_TIMEOFFSET [] = {
  TO_UNICODE ('i'),
  TO_UNICODE ('p'),
  TO_UNICODE ('d'),
  TO_UNICODE ('u'),
  TO_UNICODE (' '),
  TO_UNICODE ('a'),
  TO_UNICODE ('t'),
  TO_UNICODE ('t'),
  TO_UNICODE ('r'),
  TO_UNICODE ('i'),
  TO_UNICODE ('b'),
  TO_UNICODE ('u'),
  TO_UNICODE ('t'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('T'),
  TO_UNICODE ('I'),
  TO_UNICODE ('M'),
  TO_UNICODE ('E'),
  TO_UNICODE ('O'),
  TO_UNICODE ('F'),
  TO_UNICODE ('F'),
  TO_UNICODE ('S'),
  TO_UNICODE ('E'),
  TO_UNICODE ('T'),
  TO_UNICODE ('\''),
  TO_UNICODE (0)
} ;

//--- Syntax error message for terminal '$NON$' :
static const utf32 gSyntaxErrorMessage_NON [] = {
  TO_UNICODE ('s'),
  TO_UNICODE ('c'),
  TO_UNICODE ('h'),
  TO_UNICODE ('e'),
  TO_UNICODE ('d'),
  TO_UNICODE ('u'),
  TO_UNICODE ('l'),
  TO_UNICODE ('i'),
  TO_UNICODE ('n'),
  TO_UNICODE ('g'),
  TO_UNICODE (' '),
  TO_UNICODE ('v'),
  TO_UNICODE ('a'),
  TO_UNICODE ('l'),
  TO_UNICODE ('u'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('N'),
  TO_UNICODE ('O'),
  TO_UNICODE ('N'),
  TO_UNICODE ('\''),
  TO_UNICODE (0)
} ;

//--- Syntax error message for terminal '$FULL$' :
static const utf32 gSyntaxErrorMessage_FULL [] = {
  TO_UNICODE ('s'),
  TO_UNICODE ('c'),
  TO_UNICODE ('h'),
  TO_UNICODE ('e'),
  TO_UNICODE ('d'),
  TO_UNICODE ('u'),
  TO_UNICODE ('l'),
  TO_UNICODE ('i'),
  TO_UNICODE ('n'),
  TO_UNICODE ('g'),
  TO_UNICODE (' '),
  TO_UNICODE ('v'),
  TO_UNICODE ('a'),
  TO_UNICODE ('l'),
  TO_UNICODE ('u'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('F'),
  TO_UNICODE ('U'),
  TO_UNICODE ('L'),
  TO_UNICODE ('L'),
  TO_UNICODE ('\''),
  TO_UNICODE (0)
} ;

//--- Syntax error message for terminal '$FALSE$' :
static const utf32 gSyntaxErrorMessage_FALSE [] = {
  TO_UNICODE ('b'),
  TO_UNICODE ('o'),
  TO_UNICODE ('o'),
  TO_UNICODE ('l'),
  TO_UNICODE ('e'),
  TO_UNICODE ('a'),
  TO_UNICODE ('n'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('F'),
  TO_UNICODE ('A'),
  TO_UNICODE ('L'),
  TO_UNICODE ('S'),
  TO_UNICODE ('E'),
  TO_UNICODE ('\''),
  TO_UNICODE (0)
} ;

//--- Syntax error message for terminal '$TRUE$' :
static const utf32 gSyntaxErrorMessage_TRUE [] = {
  TO_UNICODE ('b'),
  TO_UNICODE ('o'),
  TO_UNICODE ('o'),
  TO_UNICODE ('l'),
  TO_UNICODE ('e'),
  TO_UNICODE ('a'),
  TO_UNICODE ('n'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('T'),
  TO_UNICODE ('R'),
  TO_UNICODE ('U'),
  TO_UNICODE ('E'),
  TO_UNICODE ('\''),
  TO_UNICODE (0)
} ;

//--- Syntax error message for terminal '$PROTECTIONHOOK$' :
static const utf32 gSyntaxErrorMessage_PROTECTIONHOOK [] = {
  TO_UNICODE ('A'),
  TO_UNICODE ('U'),
  TO_UNICODE ('T'),
  TO_UNICODE ('O'),
  TO_UNICODE ('S'),
  TO_UNICODE ('A'),
  TO_UNICODE ('R'),
  TO_UNICODE (' '),
  TO_UNICODE ('a'),
  TO_UNICODE ('t'),
  TO_UNICODE ('t'),
  TO_UNICODE ('r'),
  TO_UNICODE ('i'),
  TO_UNICODE ('b'),
  TO_UNICODE ('u'),
  TO_UNICODE ('t'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('P'),
  TO_UNICODE ('R'),
  TO_UNICODE ('O'),
  TO_UNICODE ('T'),
  TO_UNICODE ('E'),
  TO_UNICODE ('C'),
  TO_UNICODE ('T'),
  TO_UNICODE ('I'),
  TO_UNICODE ('O'),
  TO_UNICODE ('N'),
  TO_UNICODE ('H'),
  TO_UNICODE ('O'),
  TO_UNICODE ('O'),
  TO_UNICODE ('K'),
  TO_UNICODE ('\''),
  TO_UNICODE (0)
} ;

//--- Syntax error message for terminal '$SCALABILITYCLASS$' :
static const utf32 gSyntaxErrorMessage_SCALABILITYCLASS [] = {
  TO_UNICODE ('A'),
  TO_UNICODE ('U'),
  TO_UNICODE ('T'),
  TO_UNICODE ('O'),
  TO_UNICODE ('S'),
  TO_UNICODE ('A'),
  TO_UNICODE ('R'),
  TO_UNICODE (' '),
  TO_UNICODE ('a'),
  TO_UNICODE ('t'),
  TO_UNICODE ('t'),
  TO_UNICODE ('r'),
  TO_UNICODE ('i'),
  TO_UNICODE ('b'),
  TO_UNICODE ('u'),
  TO_UNICODE ('t'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('S'),
  TO_UNICODE ('C'),
  TO_UNICODE ('A'),
  TO_UNICODE ('L'),
  TO_UNICODE ('A'),
  TO_UNICODE ('B'),
  TO_UNICODE ('I'),
  TO_UNICODE ('L'),
  TO_UNICODE ('I'),
  TO_UNICODE ('T'),
  TO_UNICODE ('Y'),
  TO_UNICODE ('C'),
  TO_UNICODE ('L'),
  TO_UNICODE ('A'),
  TO_UNICODE ('S'),
  TO_UNICODE ('S'),
  TO_UNICODE ('\''),
  TO_UNICODE (0)
} ;

//--- Syntax error message for terminal '$STACKMONITORING$' :
static const utf32 gSyntaxErrorMessage_STACKMONITORING [] = {
  TO_UNICODE ('A'),
  TO_UNICODE ('U'),
  TO_UNICODE ('T'),
  TO_UNICODE ('O'),
  TO_UNICODE ('S'),
  TO_UNICODE ('A'),
  TO_UNICODE ('R'),
  TO_UNICODE (' '),
  TO_UNICODE ('a'),
  TO_UNICODE ('t'),
  TO_UNICODE ('t'),
  TO_UNICODE ('r'),
  TO_UNICODE ('i'),
  TO_UNICODE ('b'),
  TO_UNICODE ('u'),
  TO_UNICODE ('t'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('S'),
  TO_UNICODE ('T'),
  TO_UNICODE ('A'),
  TO_UNICODE ('C'),
  TO_UNICODE ('K'),
  TO_UNICODE ('M'),
  TO_UNICODE ('O'),
  TO_UNICODE ('N'),
  TO_UNICODE ('I'),
  TO_UNICODE ('T'),
  TO_UNICODE ('O'),
  TO_UNICODE ('R'),
  TO_UNICODE ('I'),
  TO_UNICODE ('N'),
  TO_UNICODE ('G'),
  TO_UNICODE ('\''),
  TO_UNICODE (0)
} ;

//--- Syntax error message for terminal '$TIMING_PROTECTION$' :
static const utf32 gSyntaxErrorMessage_TIMING_5F_PROTECTION [] = {
  TO_UNICODE ('A'),
  TO_UNICODE ('U'),
  TO_UNICODE ('T'),
  TO_UNICODE ('O'),
  TO_UNICODE ('S'),
  TO_UNICODE ('A'),
  TO_UNICODE ('R'),
  TO_UNICODE (' '),
  TO_UNICODE ('a'),
  TO_UNICODE ('t'),
  TO_UNICODE ('t'),
  TO_UNICODE ('r'),
  TO_UNICODE ('i'),
  TO_UNICODE ('b'),
  TO_UNICODE ('u'),
  TO_UNICODE ('t'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('T'),
  TO_UNICODE ('I'),
  TO_UNICODE ('M'),
  TO_UNICODE ('I'),
  TO_UNICODE ('N'),
  TO_UNICODE ('G'),
  TO_UNICODE ('_'),
  TO_UNICODE ('P'),
  TO_UNICODE ('R'),
  TO_UNICODE ('O'),
  TO_UNICODE ('T'),
  TO_UNICODE ('E'),
  TO_UNICODE ('C'),
  TO_UNICODE ('T'),
  TO_UNICODE ('I'),
  TO_UNICODE ('O'),
  TO_UNICODE ('N'),
  TO_UNICODE ('\''),
  TO_UNICODE (0)
} ;

//--- Syntax error message for terminal '$ACCESSING_APPLICATION$' :
static const utf32 gSyntaxErrorMessage_ACCESSING_5F_APPLICATION [] = {
  TO_UNICODE ('A'),
  TO_UNICODE ('U'),
  TO_UNICODE ('T'),
  TO_UNICODE ('O'),
  TO_UNICODE ('S'),
  TO_UNICODE ('A'),
  TO_UNICODE ('R'),
  TO_UNICODE (' '),
  TO_UNICODE ('a'),
  TO_UNICODE ('t'),
  TO_UNICODE ('t'),
  TO_UNICODE ('r'),
  TO_UNICODE ('i'),
  TO_UNICODE ('b'),
  TO_UNICODE ('u'),
  TO_UNICODE ('t'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('A'),
  TO_UNICODE ('C'),
  TO_UNICODE ('C'),
  TO_UNICODE ('E'),
  TO_UNICODE ('S'),
  TO_UNICODE ('S'),
  TO_UNICODE ('I'),
  TO_UNICODE ('N'),
  TO_UNICODE ('G'),
  TO_UNICODE ('_'),
  TO_UNICODE ('A'),
  TO_UNICODE ('P'),
  TO_UNICODE ('P'),
  TO_UNICODE ('L'),
  TO_UNICODE ('I'),
  TO_UNICODE ('C'),
  TO_UNICODE ('A'),
  TO_UNICODE ('T'),
  TO_UNICODE ('I'),
  TO_UNICODE ('O'),
  TO_UNICODE ('N'),
  TO_UNICODE ('\''),
  TO_UNICODE (0)
} ;

//--- Syntax error message for terminal '$SC1$' :
static const utf32 gSyntaxErrorMessage_SC_31_ [] = {
  TO_UNICODE ('A'),
  TO_UNICODE ('U'),
  TO_UNICODE ('T'),
  TO_UNICODE ('O'),
  TO_UNICODE ('S'),
  TO_UNICODE ('A'),
  TO_UNICODE ('R'),
  TO_UNICODE (' '),
  TO_UNICODE ('v'),
  TO_UNICODE ('a'),
  TO_UNICODE ('l'),
  TO_UNICODE ('u'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('S'),
  TO_UNICODE ('C'),
  TO_UNICODE ('1'),
  TO_UNICODE ('\''),
  TO_UNICODE (0)
} ;

//--- Syntax error message for terminal '$SC2$' :
static const utf32 gSyntaxErrorMessage_SC_32_ [] = {
  TO_UNICODE ('A'),
  TO_UNICODE ('U'),
  TO_UNICODE ('T'),
  TO_UNICODE ('O'),
  TO_UNICODE ('S'),
  TO_UNICODE ('A'),
  TO_UNICODE ('R'),
  TO_UNICODE (' '),
  TO_UNICODE ('v'),
  TO_UNICODE ('a'),
  TO_UNICODE ('l'),
  TO_UNICODE ('u'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('S'),
  TO_UNICODE ('C'),
  TO_UNICODE ('2'),
  TO_UNICODE ('\''),
  TO_UNICODE (0)
} ;

//--- Syntax error message for terminal '$SC3$' :
static const utf32 gSyntaxErrorMessage_SC_33_ [] = {
  TO_UNICODE ('A'),
  TO_UNICODE ('U'),
  TO_UNICODE ('T'),
  TO_UNICODE ('O'),
  TO_UNICODE ('S'),
  TO_UNICODE ('A'),
  TO_UNICODE ('R'),
  TO_UNICODE (' '),
  TO_UNICODE ('v'),
  TO_UNICODE ('a'),
  TO_UNICODE ('l'),
  TO_UNICODE ('u'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('S'),
  TO_UNICODE ('C'),
  TO_UNICODE ('3'),
  TO_UNICODE ('\''),
  TO_UNICODE (0)
} ;

//--- Syntax error message for terminal '$SC4$' :
static const utf32 gSyntaxErrorMessage_SC_34_ [] = {
  TO_UNICODE ('A'),
  TO_UNICODE ('U'),
  TO_UNICODE ('T'),
  TO_UNICODE ('O'),
  TO_UNICODE ('S'),
  TO_UNICODE ('A'),
  TO_UNICODE ('R'),
  TO_UNICODE (' '),
  TO_UNICODE ('v'),
  TO_UNICODE ('a'),
  TO_UNICODE ('l'),
  TO_UNICODE ('u'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('S'),
  TO_UNICODE ('C'),
  TO_UNICODE ('4'),
  TO_UNICODE ('\''),
  TO_UNICODE (0)
} ;

//--- Syntax error message for terminal '$SCHEDULETABLE$' :
static const utf32 gSyntaxErrorMessage_SCHEDULETABLE [] = {
  TO_UNICODE ('A'),
  TO_UNICODE ('U'),
  TO_UNICODE ('T'),
  TO_UNICODE ('O'),
  TO_UNICODE ('S'),
  TO_UNICODE ('A'),
  TO_UNICODE ('R'),
  TO_UNICODE (' '),
  TO_UNICODE ('o'),
  TO_UNICODE ('b'),
  TO_UNICODE ('j'),
  TO_UNICODE ('e'),
  TO_UNICODE ('c'),
  TO_UNICODE ('t'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('S'),
  TO_UNICODE ('C'),
  TO_UNICODE ('H'),
  TO_UNICODE ('E'),
  TO_UNICODE ('D'),
  TO_UNICODE ('U'),
  TO_UNICODE ('L'),
  TO_UNICODE ('E'),
  TO_UNICODE ('T'),
  TO_UNICODE ('A'),
  TO_UNICODE ('B'),
  TO_UNICODE ('L'),
  TO_UNICODE ('E'),
  TO_UNICODE ('\''),
  TO_UNICODE (0)
} ;

//--- Syntax error message for terminal '$APPLICATION$' :
static const utf32 gSyntaxErrorMessage_APPLICATION [] = {
  TO_UNICODE ('A'),
  TO_UNICODE ('U'),
  TO_UNICODE ('T'),
  TO_UNICODE ('O'),
  TO_UNICODE ('S'),
  TO_UNICODE ('A'),
  TO_UNICODE ('R'),
  TO_UNICODE (' '),
  TO_UNICODE ('o'),
  TO_UNICODE ('b'),
  TO_UNICODE ('j'),
  TO_UNICODE ('e'),
  TO_UNICODE ('c'),
  TO_UNICODE ('t'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('A'),
  TO_UNICODE ('P'),
  TO_UNICODE ('P'),
  TO_UNICODE ('L'),
  TO_UNICODE ('I'),
  TO_UNICODE ('C'),
  TO_UNICODE ('A'),
  TO_UNICODE ('T'),
  TO_UNICODE ('I'),
  TO_UNICODE ('O'),
  TO_UNICODE ('N'),
  TO_UNICODE ('\''),
  TO_UNICODE (0)
} ;

//--- Syntax error message for terminal '$LOCAL_TO_GLOBAL_TIME_SYNCHRONIZATION$' :
static const utf32 gSyntaxErrorMessage_LOCAL_5F_TO_5F_GLOBAL_5F_TIME_5F_SYNCHRONIZATION [] = {
  TO_UNICODE ('S'),
  TO_UNICODE ('C'),
  TO_UNICODE ('H'),
  TO_UNICODE ('E'),
  TO_UNICODE ('D'),
  TO_UNICODE ('U'),
  TO_UNICODE ('L'),
  TO_UNICODE ('E'),
  TO_UNICODE ('T'),
  TO_UNICODE ('A'),
  TO_UNICODE ('B'),
  TO_UNICODE ('L'),
  TO_UNICODE ('E'),
  TO_UNICODE (' '),
  TO_UNICODE ('a'),
  TO_UNICODE ('t'),
  TO_UNICODE ('t'),
  TO_UNICODE ('r'),
  TO_UNICODE ('i'),
  TO_UNICODE ('b'),
  TO_UNICODE ('u'),
  TO_UNICODE ('t'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('L'),
  TO_UNICODE ('O'),
  TO_UNICODE ('C'),
  TO_UNICODE ('A'),
  TO_UNICODE ('L'),
  TO_UNICODE ('_'),
  TO_UNICODE ('T'),
  TO_UNICODE ('O'),
  TO_UNICODE ('_'),
  TO_UNICODE ('G'),
  TO_UNICODE ('L'),
  TO_UNICODE ('O'),
  TO_UNICODE ('B'),
  TO_UNICODE ('A'),
  TO_UNICODE ('L'),
  TO_UNICODE ('_'),
  TO_UNICODE ('T'),
  TO_UNICODE ('I'),
  TO_UNICODE ('M'),
  TO_UNICODE ('E'),
  TO_UNICODE ('_'),
  TO_UNICODE ('S'),
  TO_UNICODE ('Y'),
  TO_UNICODE ('N'),
  TO_UNICODE ('C'),
  TO_UNICODE ('H'),
  TO_UNICODE ('R'),
  TO_UNICODE ('O'),
  TO_UNICODE ('N'),
  TO_UNICODE ('I'),
  TO_UNICODE ('Z'),
  TO_UNICODE ('A'),
  TO_UNICODE ('T'),
  TO_UNICODE ('I'),
  TO_UNICODE ('O'),
  TO_UNICODE ('N'),
  TO_UNICODE ('\''),
  TO_UNICODE (0)
} ;

//--- Syntax error message for terminal '$SYNC_STRATEGY$' :
static const utf32 gSyntaxErrorMessage_SYNC_5F_STRATEGY [] = {
  TO_UNICODE ('S'),
  TO_UNICODE ('C'),
  TO_UNICODE ('H'),
  TO_UNICODE ('E'),
  TO_UNICODE ('D'),
  TO_UNICODE ('U'),
  TO_UNICODE ('L'),
  TO_UNICODE ('E'),
  TO_UNICODE ('T'),
  TO_UNICODE ('A'),
  TO_UNICODE ('B'),
  TO_UNICODE ('L'),
  TO_UNICODE ('E'),
  TO_UNICODE (' '),
  TO_UNICODE ('a'),
  TO_UNICODE ('t'),
  TO_UNICODE ('t'),
  TO_UNICODE ('r'),
  TO_UNICODE ('i'),
  TO_UNICODE ('b'),
  TO_UNICODE ('u'),
  TO_UNICODE ('t'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('S'),
  TO_UNICODE ('Y'),
  TO_UNICODE ('N'),
  TO_UNICODE ('C'),
  TO_UNICODE ('_'),
  TO_UNICODE ('S'),
  TO_UNICODE ('T'),
  TO_UNICODE ('R'),
  TO_UNICODE ('A'),
  TO_UNICODE ('T'),
  TO_UNICODE ('E'),
  TO_UNICODE ('G'),
  TO_UNICODE ('Y'),
  TO_UNICODE ('\''),
  TO_UNICODE (0)
} ;

//--- Syntax error message for terminal '$MAX_INCREASE$' :
static const utf32 gSyntaxErrorMessage_MAX_5F_INCREASE [] = {
  TO_UNICODE ('S'),
  TO_UNICODE ('C'),
  TO_UNICODE ('H'),
  TO_UNICODE ('E'),
  TO_UNICODE ('D'),
  TO_UNICODE ('U'),
  TO_UNICODE ('L'),
  TO_UNICODE ('E'),
  TO_UNICODE ('T'),
  TO_UNICODE ('A'),
  TO_UNICODE ('B'),
  TO_UNICODE ('L'),
  TO_UNICODE ('E'),
  TO_UNICODE (' '),
  TO_UNICODE ('a'),
  TO_UNICODE ('t'),
  TO_UNICODE ('t'),
  TO_UNICODE ('r'),
  TO_UNICODE ('i'),
  TO_UNICODE ('b'),
  TO_UNICODE ('u'),
  TO_UNICODE ('t'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('M'),
  TO_UNICODE ('A'),
  TO_UNICODE ('X'),
  TO_UNICODE ('_'),
  TO_UNICODE ('I'),
  TO_UNICODE ('N'),
  TO_UNICODE ('C'),
  TO_UNICODE ('R'),
  TO_UNICODE ('E'),
  TO_UNICODE ('A'),
  TO_UNICODE ('S'),
  TO_UNICODE ('E'),
  TO_UNICODE ('\''),
  TO_UNICODE (0)
} ;

//--- Syntax error message for terminal '$MAX_DECREASE$' :
static const utf32 gSyntaxErrorMessage_MAX_5F_DECREASE [] = {
  TO_UNICODE ('S'),
  TO_UNICODE ('C'),
  TO_UNICODE ('H'),
  TO_UNICODE ('E'),
  TO_UNICODE ('D'),
  TO_UNICODE ('U'),
  TO_UNICODE ('L'),
  TO_UNICODE ('E'),
  TO_UNICODE ('T'),
  TO_UNICODE ('A'),
  TO_UNICODE ('B'),
  TO_UNICODE ('L'),
  TO_UNICODE ('E'),
  TO_UNICODE (' '),
  TO_UNICODE ('a'),
  TO_UNICODE ('t'),
  TO_UNICODE ('t'),
  TO_UNICODE ('r'),
  TO_UNICODE ('i'),
  TO_UNICODE ('b'),
  TO_UNICODE ('u'),
  TO_UNICODE ('t'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('M'),
  TO_UNICODE ('A'),
  TO_UNICODE ('X'),
  TO_UNICODE ('_'),
  TO_UNICODE ('D'),
  TO_UNICODE ('E'),
  TO_UNICODE ('C'),
  TO_UNICODE ('R'),
  TO_UNICODE ('E'),
  TO_UNICODE ('A'),
  TO_UNICODE ('S'),
  TO_UNICODE ('E'),
  TO_UNICODE ('\''),
  TO_UNICODE (0)
} ;

//--- Syntax error message for terminal '$MAX_INCREASE_ASYNC$' :
static const utf32 gSyntaxErrorMessage_MAX_5F_INCREASE_5F_ASYNC [] = {
  TO_UNICODE ('S'),
  TO_UNICODE ('C'),
  TO_UNICODE ('H'),
  TO_UNICODE ('E'),
  TO_UNICODE ('D'),
  TO_UNICODE ('U'),
  TO_UNICODE ('L'),
  TO_UNICODE ('E'),
  TO_UNICODE ('T'),
  TO_UNICODE ('A'),
  TO_UNICODE ('B'),
  TO_UNICODE ('L'),
  TO_UNICODE ('E'),
  TO_UNICODE (' '),
  TO_UNICODE ('a'),
  TO_UNICODE ('t'),
  TO_UNICODE ('t'),
  TO_UNICODE ('r'),
  TO_UNICODE ('i'),
  TO_UNICODE ('b'),
  TO_UNICODE ('u'),
  TO_UNICODE ('t'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('M'),
  TO_UNICODE ('A'),
  TO_UNICODE ('X'),
  TO_UNICODE ('_'),
  TO_UNICODE ('I'),
  TO_UNICODE ('N'),
  TO_UNICODE ('C'),
  TO_UNICODE ('R'),
  TO_UNICODE ('E'),
  TO_UNICODE ('A'),
  TO_UNICODE ('S'),
  TO_UNICODE ('E'),
  TO_UNICODE ('_'),
  TO_UNICODE ('A'),
  TO_UNICODE ('S'),
  TO_UNICODE ('Y'),
  TO_UNICODE ('N'),
  TO_UNICODE ('C'),
  TO_UNICODE ('\''),
  TO_UNICODE (0)
} ;

//--- Syntax error message for terminal '$MAX_DECREASE_ASYNC$' :
static const utf32 gSyntaxErrorMessage_MAX_5F_DECREASE_5F_ASYNC [] = {
  TO_UNICODE ('S'),
  TO_UNICODE ('C'),
  TO_UNICODE ('H'),
  TO_UNICODE ('E'),
  TO_UNICODE ('D'),
  TO_UNICODE ('U'),
  TO_UNICODE ('L'),
  TO_UNICODE ('E'),
  TO_UNICODE ('T'),
  TO_UNICODE ('A'),
  TO_UNICODE ('B'),
  TO_UNICODE ('L'),
  TO_UNICODE ('E'),
  TO_UNICODE (' '),
  TO_UNICODE ('a'),
  TO_UNICODE ('t'),
  TO_UNICODE ('t'),
  TO_UNICODE ('r'),
  TO_UNICODE ('i'),
  TO_UNICODE ('b'),
  TO_UNICODE ('u'),
  TO_UNICODE ('t'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('M'),
  TO_UNICODE ('A'),
  TO_UNICODE ('X'),
  TO_UNICODE ('_'),
  TO_UNICODE ('D'),
  TO_UNICODE ('E'),
  TO_UNICODE ('C'),
  TO_UNICODE ('R'),
  TO_UNICODE ('E'),
  TO_UNICODE ('A'),
  TO_UNICODE ('S'),
  TO_UNICODE ('E'),
  TO_UNICODE ('_'),
  TO_UNICODE ('A'),
  TO_UNICODE ('S'),
  TO_UNICODE ('Y'),
  TO_UNICODE ('N'),
  TO_UNICODE ('C'),
  TO_UNICODE ('\''),
  TO_UNICODE (0)
} ;

//--- Syntax error message for terminal '$PRECISION$' :
static const utf32 gSyntaxErrorMessage_PRECISION [] = {
  TO_UNICODE ('S'),
  TO_UNICODE ('C'),
  TO_UNICODE ('H'),
  TO_UNICODE ('E'),
  TO_UNICODE ('D'),
  TO_UNICODE ('U'),
  TO_UNICODE ('L'),
  TO_UNICODE ('E'),
  TO_UNICODE ('T'),
  TO_UNICODE ('A'),
  TO_UNICODE ('B'),
  TO_UNICODE ('L'),
  TO_UNICODE ('E'),
  TO_UNICODE (' '),
  TO_UNICODE ('a'),
  TO_UNICODE ('t'),
  TO_UNICODE ('t'),
  TO_UNICODE ('r'),
  TO_UNICODE ('i'),
  TO_UNICODE ('b'),
  TO_UNICODE ('u'),
  TO_UNICODE ('t'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('P'),
  TO_UNICODE ('R'),
  TO_UNICODE ('E'),
  TO_UNICODE ('C'),
  TO_UNICODE ('I'),
  TO_UNICODE ('S'),
  TO_UNICODE ('I'),
  TO_UNICODE ('O'),
  TO_UNICODE ('N'),
  TO_UNICODE ('\''),
  TO_UNICODE (0)
} ;

//--- Syntax error message for terminal '$LENGTH$' :
static const utf32 gSyntaxErrorMessage_LENGTH [] = {
  TO_UNICODE ('S'),
  TO_UNICODE ('C'),
  TO_UNICODE ('H'),
  TO_UNICODE ('E'),
  TO_UNICODE ('D'),
  TO_UNICODE ('U'),
  TO_UNICODE ('L'),
  TO_UNICODE ('E'),
  TO_UNICODE ('T'),
  TO_UNICODE ('A'),
  TO_UNICODE ('B'),
  TO_UNICODE ('L'),
  TO_UNICODE ('E'),
  TO_UNICODE (' '),
  TO_UNICODE ('a'),
  TO_UNICODE ('t'),
  TO_UNICODE ('t'),
  TO_UNICODE ('r'),
  TO_UNICODE ('i'),
  TO_UNICODE ('b'),
  TO_UNICODE ('u'),
  TO_UNICODE ('t'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('L'),
  TO_UNICODE ('E'),
  TO_UNICODE ('N'),
  TO_UNICODE ('G'),
  TO_UNICODE ('T'),
  TO_UNICODE ('H'),
  TO_UNICODE ('\''),
  TO_UNICODE (0)
} ;

//--- Syntax error message for terminal '$EXPIRY_POINT$' :
static const utf32 gSyntaxErrorMessage_EXPIRY_5F_POINT [] = {
  TO_UNICODE ('S'),
  TO_UNICODE ('C'),
  TO_UNICODE ('H'),
  TO_UNICODE ('E'),
  TO_UNICODE ('D'),
  TO_UNICODE ('U'),
  TO_UNICODE ('L'),
  TO_UNICODE ('E'),
  TO_UNICODE ('T'),
  TO_UNICODE ('A'),
  TO_UNICODE ('B'),
  TO_UNICODE ('L'),
  TO_UNICODE ('E'),
  TO_UNICODE (' '),
  TO_UNICODE ('a'),
  TO_UNICODE ('t'),
  TO_UNICODE ('t'),
  TO_UNICODE ('r'),
  TO_UNICODE ('i'),
  TO_UNICODE ('b'),
  TO_UNICODE ('u'),
  TO_UNICODE ('t'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('E'),
  TO_UNICODE ('X'),
  TO_UNICODE ('P'),
  TO_UNICODE ('I'),
  TO_UNICODE ('R'),
  TO_UNICODE ('Y'),
  TO_UNICODE ('_'),
  TO_UNICODE ('P'),
  TO_UNICODE ('O'),
  TO_UNICODE ('I'),
  TO_UNICODE ('N'),
  TO_UNICODE ('T'),
  TO_UNICODE ('\''),
  TO_UNICODE (0)
} ;

//--- Syntax error message for terminal '$MAX_RETARD$' :
static const utf32 gSyntaxErrorMessage_MAX_5F_RETARD [] = {
  TO_UNICODE ('S'),
  TO_UNICODE ('C'),
  TO_UNICODE ('H'),
  TO_UNICODE ('E'),
  TO_UNICODE ('D'),
  TO_UNICODE ('U'),
  TO_UNICODE ('L'),
  TO_UNICODE ('E'),
  TO_UNICODE ('T'),
  TO_UNICODE ('A'),
  TO_UNICODE ('B'),
  TO_UNICODE ('L'),
  TO_UNICODE ('E'),
  TO_UNICODE (' '),
  TO_UNICODE ('a'),
  TO_UNICODE ('t'),
  TO_UNICODE ('t'),
  TO_UNICODE ('r'),
  TO_UNICODE ('i'),
  TO_UNICODE ('b'),
  TO_UNICODE ('u'),
  TO_UNICODE ('t'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('M'),
  TO_UNICODE ('A'),
  TO_UNICODE ('X'),
  TO_UNICODE ('_'),
  TO_UNICODE ('R'),
  TO_UNICODE ('E'),
  TO_UNICODE ('T'),
  TO_UNICODE ('A'),
  TO_UNICODE ('R'),
  TO_UNICODE ('D'),
  TO_UNICODE ('\''),
  TO_UNICODE (0)
} ;

//--- Syntax error message for terminal '$MAX_ADVANCE$' :
static const utf32 gSyntaxErrorMessage_MAX_5F_ADVANCE [] = {
  TO_UNICODE ('S'),
  TO_UNICODE ('C'),
  TO_UNICODE ('H'),
  TO_UNICODE ('E'),
  TO_UNICODE ('D'),
  TO_UNICODE ('U'),
  TO_UNICODE ('L'),
  TO_UNICODE ('E'),
  TO_UNICODE ('T'),
  TO_UNICODE ('A'),
  TO_UNICODE ('B'),
  TO_UNICODE ('L'),
  TO_UNICODE ('E'),
  TO_UNICODE (' '),
  TO_UNICODE ('a'),
  TO_UNICODE ('t'),
  TO_UNICODE ('t'),
  TO_UNICODE ('r'),
  TO_UNICODE ('i'),
  TO_UNICODE ('b'),
  TO_UNICODE ('u'),
  TO_UNICODE ('t'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('M'),
  TO_UNICODE ('A'),
  TO_UNICODE ('X'),
  TO_UNICODE ('_'),
  TO_UNICODE ('A'),
  TO_UNICODE ('D'),
  TO_UNICODE ('V'),
  TO_UNICODE ('A'),
  TO_UNICODE ('N'),
  TO_UNICODE ('C'),
  TO_UNICODE ('E'),
  TO_UNICODE ('\''),
  TO_UNICODE (0)
} ;

//--- Syntax error message for terminal '$ADJUSTABLE$' :
static const utf32 gSyntaxErrorMessage_ADJUSTABLE [] = {
  TO_UNICODE ('S'),
  TO_UNICODE ('C'),
  TO_UNICODE ('H'),
  TO_UNICODE ('E'),
  TO_UNICODE ('D'),
  TO_UNICODE ('U'),
  TO_UNICODE ('L'),
  TO_UNICODE ('E'),
  TO_UNICODE ('T'),
  TO_UNICODE ('A'),
  TO_UNICODE ('B'),
  TO_UNICODE ('L'),
  TO_UNICODE ('E'),
  TO_UNICODE (' '),
  TO_UNICODE ('a'),
  TO_UNICODE ('t'),
  TO_UNICODE ('t'),
  TO_UNICODE ('r'),
  TO_UNICODE ('i'),
  TO_UNICODE ('b'),
  TO_UNICODE ('u'),
  TO_UNICODE ('t'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('A'),
  TO_UNICODE ('D'),
  TO_UNICODE ('J'),
  TO_UNICODE ('U'),
  TO_UNICODE ('S'),
  TO_UNICODE ('T'),
  TO_UNICODE ('A'),
  TO_UNICODE ('B'),
  TO_UNICODE ('L'),
  TO_UNICODE ('E'),
  TO_UNICODE ('\''),
  TO_UNICODE (0)
} ;

//--- Syntax error message for terminal '$ABSOLUTE$' :
static const utf32 gSyntaxErrorMessage_ABSOLUTE [] = {
  TO_UNICODE ('A'),
  TO_UNICODE ('U'),
  TO_UNICODE ('T'),
  TO_UNICODE ('O'),
  TO_UNICODE ('S'),
  TO_UNICODE ('T'),
  TO_UNICODE ('A'),
  TO_UNICODE ('R'),
  TO_UNICODE ('T'),
  TO_UNICODE (' '),
  TO_UNICODE ('a'),
  TO_UNICODE ('t'),
  TO_UNICODE ('t'),
  TO_UNICODE ('r'),
  TO_UNICODE ('i'),
  TO_UNICODE ('b'),
  TO_UNICODE ('u'),
  TO_UNICODE ('t'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('A'),
  TO_UNICODE ('B'),
  TO_UNICODE ('S'),
  TO_UNICODE ('O'),
  TO_UNICODE ('L'),
  TO_UNICODE ('U'),
  TO_UNICODE ('T'),
  TO_UNICODE ('E'),
  TO_UNICODE ('\''),
  TO_UNICODE (0)
} ;

//--- Syntax error message for terminal '$RELATIVE$' :
static const utf32 gSyntaxErrorMessage_RELATIVE [] = {
  TO_UNICODE ('A'),
  TO_UNICODE ('U'),
  TO_UNICODE ('T'),
  TO_UNICODE ('O'),
  TO_UNICODE ('S'),
  TO_UNICODE ('T'),
  TO_UNICODE ('A'),
  TO_UNICODE ('R'),
  TO_UNICODE ('T'),
  TO_UNICODE (' '),
  TO_UNICODE ('a'),
  TO_UNICODE ('t'),
  TO_UNICODE ('t'),
  TO_UNICODE ('r'),
  TO_UNICODE ('i'),
  TO_UNICODE ('b'),
  TO_UNICODE ('u'),
  TO_UNICODE ('t'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('R'),
  TO_UNICODE ('E'),
  TO_UNICODE ('L'),
  TO_UNICODE ('A'),
  TO_UNICODE ('T'),
  TO_UNICODE ('I'),
  TO_UNICODE ('V'),
  TO_UNICODE ('E'),
  TO_UNICODE ('\''),
  TO_UNICODE (0)
} ;

//--- Syntax error message for terminal '$SYNCHRON$' :
static const utf32 gSyntaxErrorMessage_SYNCHRON [] = {
  TO_UNICODE ('A'),
  TO_UNICODE ('U'),
  TO_UNICODE ('T'),
  TO_UNICODE ('O'),
  TO_UNICODE ('S'),
  TO_UNICODE ('T'),
  TO_UNICODE ('A'),
  TO_UNICODE ('R'),
  TO_UNICODE ('T'),
  TO_UNICODE (' '),
  TO_UNICODE ('a'),
  TO_UNICODE ('t'),
  TO_UNICODE ('t'),
  TO_UNICODE ('r'),
  TO_UNICODE ('i'),
  TO_UNICODE ('b'),
  TO_UNICODE ('u'),
  TO_UNICODE ('t'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('S'),
  TO_UNICODE ('Y'),
  TO_UNICODE ('N'),
  TO_UNICODE ('C'),
  TO_UNICODE ('H'),
  TO_UNICODE ('R'),
  TO_UNICODE ('O'),
  TO_UNICODE ('N'),
  TO_UNICODE ('\''),
  TO_UNICODE (0)
} ;

//--- Syntax error message for terminal '$START$' :
static const utf32 gSyntaxErrorMessage_START [] = {
  TO_UNICODE ('A'),
  TO_UNICODE ('U'),
  TO_UNICODE ('T'),
  TO_UNICODE ('O'),
  TO_UNICODE ('S'),
  TO_UNICODE ('T'),
  TO_UNICODE ('A'),
  TO_UNICODE ('R'),
  TO_UNICODE ('T'),
  TO_UNICODE (' '),
  TO_UNICODE ('a'),
  TO_UNICODE ('t'),
  TO_UNICODE ('t'),
  TO_UNICODE ('r'),
  TO_UNICODE ('i'),
  TO_UNICODE ('b'),
  TO_UNICODE ('u'),
  TO_UNICODE ('t'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('S'),
  TO_UNICODE ('T'),
  TO_UNICODE ('A'),
  TO_UNICODE ('R'),
  TO_UNICODE ('T'),
  TO_UNICODE ('\''),
  TO_UNICODE (0)
} ;

//--- Syntax error message for terminal '$TRUSTED$' :
static const utf32 gSyntaxErrorMessage_TRUSTED [] = {
  TO_UNICODE ('A'),
  TO_UNICODE ('P'),
  TO_UNICODE ('P'),
  TO_UNICODE ('L'),
  TO_UNICODE ('I'),
  TO_UNICODE ('C'),
  TO_UNICODE ('A'),
  TO_UNICODE ('T'),
  TO_UNICODE ('I'),
  TO_UNICODE ('O'),
  TO_UNICODE ('N'),
  TO_UNICODE (' '),
  TO_UNICODE ('a'),
  TO_UNICODE ('t'),
  TO_UNICODE ('t'),
  TO_UNICODE ('r'),
  TO_UNICODE ('i'),
  TO_UNICODE ('b'),
  TO_UNICODE ('u'),
  TO_UNICODE ('t'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('T'),
  TO_UNICODE ('R'),
  TO_UNICODE ('U'),
  TO_UNICODE ('S'),
  TO_UNICODE ('T'),
  TO_UNICODE ('E'),
  TO_UNICODE ('D'),
  TO_UNICODE ('\''),
  TO_UNICODE (0)
} ;

//--- Syntax error message for terminal '$HAS_RESTARTTASK$' :
static const utf32 gSyntaxErrorMessage_HAS_5F_RESTARTTASK [] = {
  TO_UNICODE ('A'),
  TO_UNICODE ('P'),
  TO_UNICODE ('P'),
  TO_UNICODE ('L'),
  TO_UNICODE ('I'),
  TO_UNICODE ('C'),
  TO_UNICODE ('A'),
  TO_UNICODE ('T'),
  TO_UNICODE ('I'),
  TO_UNICODE ('O'),
  TO_UNICODE ('N'),
  TO_UNICODE (' '),
  TO_UNICODE ('a'),
  TO_UNICODE ('t'),
  TO_UNICODE ('t'),
  TO_UNICODE ('r'),
  TO_UNICODE ('i'),
  TO_UNICODE ('b'),
  TO_UNICODE ('u'),
  TO_UNICODE ('t'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('H'),
  TO_UNICODE ('A'),
  TO_UNICODE ('S'),
  TO_UNICODE ('_'),
  TO_UNICODE ('R'),
  TO_UNICODE ('E'),
  TO_UNICODE ('S'),
  TO_UNICODE ('T'),
  TO_UNICODE ('A'),
  TO_UNICODE ('R'),
  TO_UNICODE ('T'),
  TO_UNICODE ('T'),
  TO_UNICODE ('A'),
  TO_UNICODE ('S'),
  TO_UNICODE ('K'),
  TO_UNICODE ('\''),
  TO_UNICODE (0)
} ;

//--- Syntax error message for terminal '$RESTARTTASK$' :
static const utf32 gSyntaxErrorMessage_RESTARTTASK [] = {
  TO_UNICODE ('A'),
  TO_UNICODE ('P'),
  TO_UNICODE ('P'),
  TO_UNICODE ('L'),
  TO_UNICODE ('I'),
  TO_UNICODE ('C'),
  TO_UNICODE ('A'),
  TO_UNICODE ('T'),
  TO_UNICODE ('I'),
  TO_UNICODE ('O'),
  TO_UNICODE ('N'),
  TO_UNICODE (' '),
  TO_UNICODE ('a'),
  TO_UNICODE ('t'),
  TO_UNICODE ('t'),
  TO_UNICODE ('r'),
  TO_UNICODE ('i'),
  TO_UNICODE ('b'),
  TO_UNICODE ('u'),
  TO_UNICODE ('t'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('R'),
  TO_UNICODE ('E'),
  TO_UNICODE ('S'),
  TO_UNICODE ('T'),
  TO_UNICODE ('A'),
  TO_UNICODE ('R'),
  TO_UNICODE ('T'),
  TO_UNICODE ('T'),
  TO_UNICODE ('A'),
  TO_UNICODE ('S'),
  TO_UNICODE ('K'),
  TO_UNICODE ('\''),
  TO_UNICODE (0)
} ;

//--- Syntax error message for terminal '$TRUSTED_FUNCTION$' :
static const utf32 gSyntaxErrorMessage_TRUSTED_5F_FUNCTION [] = {
  TO_UNICODE ('A'),
  TO_UNICODE ('P'),
  TO_UNICODE ('P'),
  TO_UNICODE ('L'),
  TO_UNICODE ('I'),
  TO_UNICODE ('C'),
  TO_UNICODE ('A'),
  TO_UNICODE ('T'),
  TO_UNICODE ('I'),
  TO_UNICODE ('O'),
  TO_UNICODE ('N'),
  TO_UNICODE (' '),
  TO_UNICODE ('a'),
  TO_UNICODE ('t'),
  TO_UNICODE ('t'),
  TO_UNICODE ('r'),
  TO_UNICODE ('i'),
  TO_UNICODE ('b'),
  TO_UNICODE ('u'),
  TO_UNICODE ('t'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('T'),
  TO_UNICODE ('R'),
  TO_UNICODE ('U'),
  TO_UNICODE ('S'),
  TO_UNICODE ('T'),
  TO_UNICODE ('E'),
  TO_UNICODE ('D'),
  TO_UNICODE ('_'),
  TO_UNICODE ('F'),
  TO_UNICODE ('U'),
  TO_UNICODE ('N'),
  TO_UNICODE ('C'),
  TO_UNICODE ('T'),
  TO_UNICODE ('I'),
  TO_UNICODE ('O'),
  TO_UNICODE ('N'),
  TO_UNICODE ('\''),
  TO_UNICODE (0)
} ;

//--- Syntax error message for terminal '$NAME$' :
static const utf32 gSyntaxErrorMessage_NAME [] = {
  TO_UNICODE ('A'),
  TO_UNICODE ('P'),
  TO_UNICODE ('P'),
  TO_UNICODE ('L'),
  TO_UNICODE ('I'),
  TO_UNICODE ('C'),
  TO_UNICODE ('A'),
  TO_UNICODE ('T'),
  TO_UNICODE ('I'),
  TO_UNICODE ('O'),
  TO_UNICODE ('N'),
  TO_UNICODE (' '),
  TO_UNICODE ('a'),
  TO_UNICODE ('t'),
  TO_UNICODE ('t'),
  TO_UNICODE ('r'),
  TO_UNICODE ('i'),
  TO_UNICODE ('b'),
  TO_UNICODE ('u'),
  TO_UNICODE ('t'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('N'),
  TO_UNICODE ('A'),
  TO_UNICODE ('M'),
  TO_UNICODE ('E'),
  TO_UNICODE ('\''),
  TO_UNICODE (0)
} ;

//--- Syntax error message for terminal '$EXECUTIONBUDGET$' :
static const utf32 gSyntaxErrorMessage_EXECUTIONBUDGET [] = {
  TO_UNICODE ('T'),
  TO_UNICODE ('I'),
  TO_UNICODE ('M'),
  TO_UNICODE ('I'),
  TO_UNICODE ('N'),
  TO_UNICODE ('G'),
  TO_UNICODE ('_'),
  TO_UNICODE ('P'),
  TO_UNICODE ('R'),
  TO_UNICODE ('O'),
  TO_UNICODE ('T'),
  TO_UNICODE ('E'),
  TO_UNICODE ('C'),
  TO_UNICODE ('T'),
  TO_UNICODE ('I'),
  TO_UNICODE ('O'),
  TO_UNICODE ('N'),
  TO_UNICODE (' '),
  TO_UNICODE ('a'),
  TO_UNICODE ('t'),
  TO_UNICODE ('t'),
  TO_UNICODE ('r'),
  TO_UNICODE ('i'),
  TO_UNICODE ('b'),
  TO_UNICODE ('u'),
  TO_UNICODE ('t'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('E'),
  TO_UNICODE ('X'),
  TO_UNICODE ('E'),
  TO_UNICODE ('C'),
  TO_UNICODE ('U'),
  TO_UNICODE ('T'),
  TO_UNICODE ('I'),
  TO_UNICODE ('O'),
  TO_UNICODE ('N'),
  TO_UNICODE ('B'),
  TO_UNICODE ('U'),
  TO_UNICODE ('D'),
  TO_UNICODE ('G'),
  TO_UNICODE ('E'),
  TO_UNICODE ('T'),
  TO_UNICODE ('\''),
  TO_UNICODE (0)
} ;

//--- Syntax error message for terminal '$EXECUTIONTIME$' :
static const utf32 gSyntaxErrorMessage_EXECUTIONTIME [] = {
  TO_UNICODE ('T'),
  TO_UNICODE ('I'),
  TO_UNICODE ('M'),
  TO_UNICODE ('I'),
  TO_UNICODE ('N'),
  TO_UNICODE ('G'),
  TO_UNICODE ('_'),
  TO_UNICODE ('P'),
  TO_UNICODE ('R'),
  TO_UNICODE ('O'),
  TO_UNICODE ('T'),
  TO_UNICODE ('E'),
  TO_UNICODE ('C'),
  TO_UNICODE ('T'),
  TO_UNICODE ('I'),
  TO_UNICODE ('O'),
  TO_UNICODE ('N'),
  TO_UNICODE (' '),
  TO_UNICODE ('a'),
  TO_UNICODE ('t'),
  TO_UNICODE ('t'),
  TO_UNICODE ('r'),
  TO_UNICODE ('i'),
  TO_UNICODE ('b'),
  TO_UNICODE ('u'),
  TO_UNICODE ('t'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('E'),
  TO_UNICODE ('X'),
  TO_UNICODE ('E'),
  TO_UNICODE ('C'),
  TO_UNICODE ('U'),
  TO_UNICODE ('T'),
  TO_UNICODE ('I'),
  TO_UNICODE ('O'),
  TO_UNICODE ('N'),
  TO_UNICODE ('T'),
  TO_UNICODE ('I'),
  TO_UNICODE ('M'),
  TO_UNICODE ('E'),
  TO_UNICODE ('\''),
  TO_UNICODE (0)
} ;

//--- Syntax error message for terminal '$TIMEFRAME$' :
static const utf32 gSyntaxErrorMessage_TIMEFRAME [] = {
  TO_UNICODE ('T'),
  TO_UNICODE ('I'),
  TO_UNICODE ('M'),
  TO_UNICODE ('I'),
  TO_UNICODE ('N'),
  TO_UNICODE ('G'),
  TO_UNICODE ('_'),
  TO_UNICODE ('P'),
  TO_UNICODE ('R'),
  TO_UNICODE ('O'),
  TO_UNICODE ('T'),
  TO_UNICODE ('E'),
  TO_UNICODE ('C'),
  TO_UNICODE ('T'),
  TO_UNICODE ('I'),
  TO_UNICODE ('O'),
  TO_UNICODE ('N'),
  TO_UNICODE (' '),
  TO_UNICODE ('a'),
  TO_UNICODE ('t'),
  TO_UNICODE ('t'),
  TO_UNICODE ('r'),
  TO_UNICODE ('i'),
  TO_UNICODE ('b'),
  TO_UNICODE ('u'),
  TO_UNICODE ('t'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('T'),
  TO_UNICODE ('I'),
  TO_UNICODE ('M'),
  TO_UNICODE ('E'),
  TO_UNICODE ('F'),
  TO_UNICODE ('R'),
  TO_UNICODE ('A'),
  TO_UNICODE ('M'),
  TO_UNICODE ('E'),
  TO_UNICODE ('\''),
  TO_UNICODE (0)
} ;

//--- Syntax error message for terminal '$MAXOSINTERRUPTLOCKTIME$' :
static const utf32 gSyntaxErrorMessage_MAXOSINTERRUPTLOCKTIME [] = {
  TO_UNICODE ('T'),
  TO_UNICODE ('I'),
  TO_UNICODE ('M'),
  TO_UNICODE ('I'),
  TO_UNICODE ('N'),
  TO_UNICODE ('G'),
  TO_UNICODE ('_'),
  TO_UNICODE ('P'),
  TO_UNICODE ('R'),
  TO_UNICODE ('O'),
  TO_UNICODE ('T'),
  TO_UNICODE ('E'),
  TO_UNICODE ('C'),
  TO_UNICODE ('T'),
  TO_UNICODE ('I'),
  TO_UNICODE ('O'),
  TO_UNICODE ('N'),
  TO_UNICODE (' '),
  TO_UNICODE ('a'),
  TO_UNICODE ('t'),
  TO_UNICODE ('t'),
  TO_UNICODE ('r'),
  TO_UNICODE ('i'),
  TO_UNICODE ('b'),
  TO_UNICODE ('u'),
  TO_UNICODE ('t'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('M'),
  TO_UNICODE ('A'),
  TO_UNICODE ('X'),
  TO_UNICODE ('O'),
  TO_UNICODE ('S'),
  TO_UNICODE ('I'),
  TO_UNICODE ('N'),
  TO_UNICODE ('T'),
  TO_UNICODE ('E'),
  TO_UNICODE ('R'),
  TO_UNICODE ('R'),
  TO_UNICODE ('U'),
  TO_UNICODE ('P'),
  TO_UNICODE ('T'),
  TO_UNICODE ('L'),
  TO_UNICODE ('O'),
  TO_UNICODE ('C'),
  TO_UNICODE ('K'),
  TO_UNICODE ('T'),
  TO_UNICODE ('I'),
  TO_UNICODE ('M'),
  TO_UNICODE ('E'),
  TO_UNICODE ('\''),
  TO_UNICODE (0)
} ;

//--- Syntax error message for terminal '$MAXALLINTERRUPTLOCKTIME$' :
static const utf32 gSyntaxErrorMessage_MAXALLINTERRUPTLOCKTIME [] = {
  TO_UNICODE ('T'),
  TO_UNICODE ('I'),
  TO_UNICODE ('M'),
  TO_UNICODE ('I'),
  TO_UNICODE ('N'),
  TO_UNICODE ('G'),
  TO_UNICODE ('_'),
  TO_UNICODE ('P'),
  TO_UNICODE ('R'),
  TO_UNICODE ('O'),
  TO_UNICODE ('T'),
  TO_UNICODE ('E'),
  TO_UNICODE ('C'),
  TO_UNICODE ('T'),
  TO_UNICODE ('I'),
  TO_UNICODE ('O'),
  TO_UNICODE ('N'),
  TO_UNICODE (' '),
  TO_UNICODE ('a'),
  TO_UNICODE ('t'),
  TO_UNICODE ('t'),
  TO_UNICODE ('r'),
  TO_UNICODE ('i'),
  TO_UNICODE ('b'),
  TO_UNICODE ('u'),
  TO_UNICODE ('t'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('M'),
  TO_UNICODE ('A'),
  TO_UNICODE ('X'),
  TO_UNICODE ('A'),
  TO_UNICODE ('L'),
  TO_UNICODE ('L'),
  TO_UNICODE ('I'),
  TO_UNICODE ('N'),
  TO_UNICODE ('T'),
  TO_UNICODE ('E'),
  TO_UNICODE ('R'),
  TO_UNICODE ('R'),
  TO_UNICODE ('U'),
  TO_UNICODE ('P'),
  TO_UNICODE ('T'),
  TO_UNICODE ('L'),
  TO_UNICODE ('O'),
  TO_UNICODE ('C'),
  TO_UNICODE ('K'),
  TO_UNICODE ('T'),
  TO_UNICODE ('I'),
  TO_UNICODE ('M'),
  TO_UNICODE ('E'),
  TO_UNICODE ('\''),
  TO_UNICODE (0)
} ;

//--- Syntax error message for terminal '$LOCKINGTIME$' :
static const utf32 gSyntaxErrorMessage_LOCKINGTIME [] = {
  TO_UNICODE ('T'),
  TO_UNICODE ('I'),
  TO_UNICODE ('M'),
  TO_UNICODE ('I'),
  TO_UNICODE ('N'),
  TO_UNICODE ('G'),
  TO_UNICODE ('_'),
  TO_UNICODE ('P'),
  TO_UNICODE ('R'),
  TO_UNICODE ('O'),
  TO_UNICODE ('T'),
  TO_UNICODE ('E'),
  TO_UNICODE ('C'),
  TO_UNICODE ('T'),
  TO_UNICODE ('I'),
  TO_UNICODE ('O'),
  TO_UNICODE ('N'),
  TO_UNICODE (' '),
  TO_UNICODE ('a'),
  TO_UNICODE ('t'),
  TO_UNICODE ('t'),
  TO_UNICODE ('r'),
  TO_UNICODE ('i'),
  TO_UNICODE ('b'),
  TO_UNICODE ('u'),
  TO_UNICODE ('t'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('L'),
  TO_UNICODE ('O'),
  TO_UNICODE ('C'),
  TO_UNICODE ('K'),
  TO_UNICODE ('I'),
  TO_UNICODE ('N'),
  TO_UNICODE ('G'),
  TO_UNICODE ('T'),
  TO_UNICODE ('I'),
  TO_UNICODE ('M'),
  TO_UNICODE ('E'),
  TO_UNICODE ('\''),
  TO_UNICODE (0)
} ;

//--- Syntax error message for terminal '$RESOURCELOCK$' :
static const utf32 gSyntaxErrorMessage_RESOURCELOCK [] = {
  TO_UNICODE ('T'),
  TO_UNICODE ('I'),
  TO_UNICODE ('M'),
  TO_UNICODE ('I'),
  TO_UNICODE ('N'),
  TO_UNICODE ('G'),
  TO_UNICODE ('_'),
  TO_UNICODE ('P'),
  TO_UNICODE ('R'),
  TO_UNICODE ('O'),
  TO_UNICODE ('T'),
  TO_UNICODE ('E'),
  TO_UNICODE ('C'),
  TO_UNICODE ('T'),
  TO_UNICODE ('I'),
  TO_UNICODE ('O'),
  TO_UNICODE ('N'),
  TO_UNICODE (' '),
  TO_UNICODE ('a'),
  TO_UNICODE ('t'),
  TO_UNICODE ('t'),
  TO_UNICODE ('r'),
  TO_UNICODE ('i'),
  TO_UNICODE ('b'),
  TO_UNICODE ('u'),
  TO_UNICODE ('t'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('R'),
  TO_UNICODE ('E'),
  TO_UNICODE ('S'),
  TO_UNICODE ('O'),
  TO_UNICODE ('U'),
  TO_UNICODE ('R'),
  TO_UNICODE ('C'),
  TO_UNICODE ('E'),
  TO_UNICODE ('L'),
  TO_UNICODE ('O'),
  TO_UNICODE ('C'),
  TO_UNICODE ('K'),
  TO_UNICODE ('\''),
  TO_UNICODE (0)
} ;

//--- Syntax error message for terminal '$MAXRESOURCELOCKTIME$' :
static const utf32 gSyntaxErrorMessage_MAXRESOURCELOCKTIME [] = {
  TO_UNICODE ('T'),
  TO_UNICODE ('I'),
  TO_UNICODE ('M'),
  TO_UNICODE ('I'),
  TO_UNICODE ('N'),
  TO_UNICODE ('G'),
  TO_UNICODE ('_'),
  TO_UNICODE ('P'),
  TO_UNICODE ('R'),
  TO_UNICODE ('O'),
  TO_UNICODE ('T'),
  TO_UNICODE ('E'),
  TO_UNICODE ('C'),
  TO_UNICODE ('T'),
  TO_UNICODE ('I'),
  TO_UNICODE ('O'),
  TO_UNICODE ('N'),
  TO_UNICODE (' '),
  TO_UNICODE ('a'),
  TO_UNICODE ('t'),
  TO_UNICODE ('t'),
  TO_UNICODE ('r'),
  TO_UNICODE ('i'),
  TO_UNICODE ('b'),
  TO_UNICODE ('u'),
  TO_UNICODE ('t'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('M'),
  TO_UNICODE ('A'),
  TO_UNICODE ('X'),
  TO_UNICODE ('R'),
  TO_UNICODE ('E'),
  TO_UNICODE ('S'),
  TO_UNICODE ('O'),
  TO_UNICODE ('U'),
  TO_UNICODE ('R'),
  TO_UNICODE ('C'),
  TO_UNICODE ('E'),
  TO_UNICODE ('L'),
  TO_UNICODE ('O'),
  TO_UNICODE ('C'),
  TO_UNICODE ('K'),
  TO_UNICODE ('T'),
  TO_UNICODE ('I'),
  TO_UNICODE ('M'),
  TO_UNICODE ('E'),
  TO_UNICODE ('\''),
  TO_UNICODE (0)
} ;

//--- Syntax error message for terminal '$SMOOTH$' :
static const utf32 gSyntaxErrorMessage_SMOOTH [] = {
  TO_UNICODE ('S'),
  TO_UNICODE ('y'),
  TO_UNICODE ('n'),
  TO_UNICODE ('c'),
  TO_UNICODE ('h'),
  TO_UNICODE ('r'),
  TO_UNICODE ('o'),
  TO_UNICODE ('n'),
  TO_UNICODE ('i'),
  TO_UNICODE ('z'),
  TO_UNICODE ('a'),
  TO_UNICODE ('t'),
  TO_UNICODE ('i'),
  TO_UNICODE ('o'),
  TO_UNICODE ('n'),
  TO_UNICODE (' '),
  TO_UNICODE ('s'),
  TO_UNICODE ('t'),
  TO_UNICODE ('r'),
  TO_UNICODE ('a'),
  TO_UNICODE ('t'),
  TO_UNICODE ('e'),
  TO_UNICODE ('g'),
  TO_UNICODE ('y'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('S'),
  TO_UNICODE ('M'),
  TO_UNICODE ('O'),
  TO_UNICODE ('O'),
  TO_UNICODE ('T'),
  TO_UNICODE ('H'),
  TO_UNICODE ('\''),
  TO_UNICODE (0)
} ;

//--- Syntax error message for terminal '$HARD$' :
static const utf32 gSyntaxErrorMessage_HARD [] = {
  TO_UNICODE ('S'),
  TO_UNICODE ('y'),
  TO_UNICODE ('n'),
  TO_UNICODE ('c'),
  TO_UNICODE ('h'),
  TO_UNICODE ('r'),
  TO_UNICODE ('o'),
  TO_UNICODE ('n'),
  TO_UNICODE ('i'),
  TO_UNICODE ('z'),
  TO_UNICODE ('a'),
  TO_UNICODE ('t'),
  TO_UNICODE ('i'),
  TO_UNICODE ('o'),
  TO_UNICODE ('n'),
  TO_UNICODE (' '),
  TO_UNICODE ('s'),
  TO_UNICODE ('t'),
  TO_UNICODE ('r'),
  TO_UNICODE ('a'),
  TO_UNICODE ('t'),
  TO_UNICODE ('e'),
  TO_UNICODE ('g'),
  TO_UNICODE ('y'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('H'),
  TO_UNICODE ('A'),
  TO_UNICODE ('R'),
  TO_UNICODE ('D'),
  TO_UNICODE ('\''),
  TO_UNICODE (0)
} ;

//--- Syntax error message for terminal '$TICKS$' :
static const utf32 gSyntaxErrorMessage_TICKS [] = {
  TO_UNICODE ('U'),
  TO_UNICODE ('n'),
  TO_UNICODE ('i'),
  TO_UNICODE ('t'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('T'),
  TO_UNICODE ('I'),
  TO_UNICODE ('C'),
  TO_UNICODE ('K'),
  TO_UNICODE ('S'),
  TO_UNICODE ('\''),
  TO_UNICODE (0)
} ;

//--- Syntax error message for terminal '$NANOSECONDS$' :
static const utf32 gSyntaxErrorMessage_NANOSECONDS [] = {
  TO_UNICODE ('U'),
  TO_UNICODE ('n'),
  TO_UNICODE ('i'),
  TO_UNICODE ('t'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('N'),
  TO_UNICODE ('A'),
  TO_UNICODE ('N'),
  TO_UNICODE ('O'),
  TO_UNICODE ('S'),
  TO_UNICODE ('E'),
  TO_UNICODE ('C'),
  TO_UNICODE ('O'),
  TO_UNICODE ('N'),
  TO_UNICODE ('D'),
  TO_UNICODE ('S'),
  TO_UNICODE ('\''),
  TO_UNICODE (0)
} ;

//--- Syntax error message for terminal '$SOFTWARE$' :
static const utf32 gSyntaxErrorMessage_SOFTWARE [] = {
  TO_UNICODE ('C'),
  TO_UNICODE ('o'),
  TO_UNICODE ('u'),
  TO_UNICODE ('n'),
  TO_UNICODE ('t'),
  TO_UNICODE ('e'),
  TO_UNICODE ('r'),
  TO_UNICODE (' '),
  TO_UNICODE ('t'),
  TO_UNICODE ('y'),
  TO_UNICODE ('p'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('a'),
  TO_UNICODE ('t'),
  TO_UNICODE ('t'),
  TO_UNICODE ('r'),
  TO_UNICODE ('i'),
  TO_UNICODE ('b'),
  TO_UNICODE ('u'),
  TO_UNICODE ('t'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('S'),
  TO_UNICODE ('O'),
  TO_UNICODE ('F'),
  TO_UNICODE ('T'),
  TO_UNICODE ('W'),
  TO_UNICODE ('A'),
  TO_UNICODE ('R'),
  TO_UNICODE ('E'),
  TO_UNICODE ('\''),
  TO_UNICODE (0)
} ;

//--- Syntax error message for terminal '$HARDWARE$' :
static const utf32 gSyntaxErrorMessage_HARDWARE [] = {
  TO_UNICODE ('C'),
  TO_UNICODE ('o'),
  TO_UNICODE ('u'),
  TO_UNICODE ('n'),
  TO_UNICODE ('t'),
  TO_UNICODE ('e'),
  TO_UNICODE ('r'),
  TO_UNICODE (' '),
  TO_UNICODE ('t'),
  TO_UNICODE ('y'),
  TO_UNICODE ('p'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('a'),
  TO_UNICODE ('t'),
  TO_UNICODE ('t'),
  TO_UNICODE ('r'),
  TO_UNICODE ('i'),
  TO_UNICODE ('b'),
  TO_UNICODE ('u'),
  TO_UNICODE ('t'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('H'),
  TO_UNICODE ('A'),
  TO_UNICODE ('R'),
  TO_UNICODE ('D'),
  TO_UNICODE ('W'),
  TO_UNICODE ('A'),
  TO_UNICODE ('R'),
  TO_UNICODE ('E'),
  TO_UNICODE ('\''),
  TO_UNICODE (0)
} ;

//--- Syntax error message for terminal '$OSINTERNAL$' :
static const utf32 gSyntaxErrorMessage_OSINTERNAL [] = {
  TO_UNICODE ('C'),
  TO_UNICODE ('o'),
  TO_UNICODE ('u'),
  TO_UNICODE ('n'),
  TO_UNICODE ('t'),
  TO_UNICODE ('e'),
  TO_UNICODE ('r'),
  TO_UNICODE (' '),
  TO_UNICODE ('t'),
  TO_UNICODE ('y'),
  TO_UNICODE ('p'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('a'),
  TO_UNICODE ('t'),
  TO_UNICODE ('t'),
  TO_UNICODE ('r'),
  TO_UNICODE ('i'),
  TO_UNICODE ('b'),
  TO_UNICODE ('u'),
  TO_UNICODE ('t'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('O'),
  TO_UNICODE ('S'),
  TO_UNICODE ('I'),
  TO_UNICODE ('N'),
  TO_UNICODE ('T'),
  TO_UNICODE ('E'),
  TO_UNICODE ('R'),
  TO_UNICODE ('N'),
  TO_UNICODE ('A'),
  TO_UNICODE ('L'),
  TO_UNICODE ('\''),
  TO_UNICODE (0)
} ;

//--- Syntax error message for terminal '$GPT$' :
static const utf32 gSyntaxErrorMessage_GPT [] = {
  TO_UNICODE ('C'),
  TO_UNICODE ('o'),
  TO_UNICODE ('u'),
  TO_UNICODE ('n'),
  TO_UNICODE ('t'),
  TO_UNICODE ('e'),
  TO_UNICODE ('r'),
  TO_UNICODE (' '),
  TO_UNICODE ('t'),
  TO_UNICODE ('y'),
  TO_UNICODE ('p'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('a'),
  TO_UNICODE ('t'),
  TO_UNICODE ('t'),
  TO_UNICODE ('r'),
  TO_UNICODE ('i'),
  TO_UNICODE ('b'),
  TO_UNICODE ('u'),
  TO_UNICODE ('t'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('G'),
  TO_UNICODE ('P'),
  TO_UNICODE ('T'),
  TO_UNICODE ('\''),
  TO_UNICODE (0)
} ;

//--- Syntax error message for terminal '$NS_PER_HW_TICK$' :
static const utf32 gSyntaxErrorMessage_NS_5F_PER_5F_HW_5F_TICK [] = {
  TO_UNICODE ('C'),
  TO_UNICODE ('o'),
  TO_UNICODE ('u'),
  TO_UNICODE ('n'),
  TO_UNICODE ('t'),
  TO_UNICODE ('e'),
  TO_UNICODE ('r'),
  TO_UNICODE (' '),
  TO_UNICODE ('t'),
  TO_UNICODE ('y'),
  TO_UNICODE ('p'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('a'),
  TO_UNICODE ('t'),
  TO_UNICODE ('t'),
  TO_UNICODE ('r'),
  TO_UNICODE ('i'),
  TO_UNICODE ('b'),
  TO_UNICODE ('u'),
  TO_UNICODE ('t'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('N'),
  TO_UNICODE ('S'),
  TO_UNICODE ('_'),
  TO_UNICODE ('P'),
  TO_UNICODE ('E'),
  TO_UNICODE ('R'),
  TO_UNICODE ('_'),
  TO_UNICODE ('H'),
  TO_UNICODE ('W'),
  TO_UNICODE ('_'),
  TO_UNICODE ('T'),
  TO_UNICODE ('I'),
  TO_UNICODE ('C'),
  TO_UNICODE ('K'),
  TO_UNICODE ('\''),
  TO_UNICODE (0)
} ;

//--- Syntax error message for terminal '$GPTCHANNELNAME$' :
static const utf32 gSyntaxErrorMessage_GPTCHANNELNAME [] = {
  TO_UNICODE ('C'),
  TO_UNICODE ('o'),
  TO_UNICODE ('u'),
  TO_UNICODE ('n'),
  TO_UNICODE ('t'),
  TO_UNICODE ('e'),
  TO_UNICODE ('r'),
  TO_UNICODE (' '),
  TO_UNICODE ('t'),
  TO_UNICODE ('y'),
  TO_UNICODE ('p'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('a'),
  TO_UNICODE ('t'),
  TO_UNICODE ('t'),
  TO_UNICODE ('r'),
  TO_UNICODE ('i'),
  TO_UNICODE ('b'),
  TO_UNICODE ('u'),
  TO_UNICODE ('t'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('G'),
  TO_UNICODE ('P'),
  TO_UNICODE ('T'),
  TO_UNICODE ('C'),
  TO_UNICODE ('H'),
  TO_UNICODE ('A'),
  TO_UNICODE ('N'),
  TO_UNICODE ('N'),
  TO_UNICODE ('E'),
  TO_UNICODE ('L'),
  TO_UNICODE ('N'),
  TO_UNICODE ('A'),
  TO_UNICODE ('M'),
  TO_UNICODE ('E'),
  TO_UNICODE ('\''),
  TO_UNICODE (0)
} ;

//--- Syntax error message for terminal '$DRIVER$' :
static const utf32 gSyntaxErrorMessage_DRIVER [] = {
  TO_UNICODE ('C'),
  TO_UNICODE ('o'),
  TO_UNICODE ('u'),
  TO_UNICODE ('n'),
  TO_UNICODE ('t'),
  TO_UNICODE ('e'),
  TO_UNICODE ('r'),
  TO_UNICODE (' '),
  TO_UNICODE ('t'),
  TO_UNICODE ('y'),
  TO_UNICODE ('p'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('a'),
  TO_UNICODE ('t'),
  TO_UNICODE ('t'),
  TO_UNICODE ('r'),
  TO_UNICODE ('i'),
  TO_UNICODE ('b'),
  TO_UNICODE ('u'),
  TO_UNICODE ('t'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('D'),
  TO_UNICODE ('R'),
  TO_UNICODE ('I'),
  TO_UNICODE ('V'),
  TO_UNICODE ('E'),
  TO_UNICODE ('R'),
  TO_UNICODE ('\''),
  TO_UNICODE (0)
} ;

//--- Syntax error message for terminal '$TIMECONSTANTS$' :
static const utf32 gSyntaxErrorMessage_TIMECONSTANTS [] = {
  TO_UNICODE ('C'),
  TO_UNICODE ('o'),
  TO_UNICODE ('u'),
  TO_UNICODE ('n'),
  TO_UNICODE ('t'),
  TO_UNICODE ('e'),
  TO_UNICODE ('r'),
  TO_UNICODE (' '),
  TO_UNICODE ('t'),
  TO_UNICODE ('y'),
  TO_UNICODE ('p'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('a'),
  TO_UNICODE ('t'),
  TO_UNICODE ('t'),
  TO_UNICODE ('r'),
  TO_UNICODE ('i'),
  TO_UNICODE ('b'),
  TO_UNICODE ('u'),
  TO_UNICODE ('t'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('T'),
  TO_UNICODE ('I'),
  TO_UNICODE ('M'),
  TO_UNICODE ('E'),
  TO_UNICODE ('C'),
  TO_UNICODE ('O'),
  TO_UNICODE ('N'),
  TO_UNICODE ('S'),
  TO_UNICODE ('T'),
  TO_UNICODE ('A'),
  TO_UNICODE ('N'),
  TO_UNICODE ('T'),
  TO_UNICODE ('S'),
  TO_UNICODE ('\''),
  TO_UNICODE (0)
} ;

//--- Syntax error message for terminal '$TIMECONSTANT$' :
static const utf32 gSyntaxErrorMessage_TIMECONSTANT [] = {
  TO_UNICODE ('C'),
  TO_UNICODE ('o'),
  TO_UNICODE ('u'),
  TO_UNICODE ('n'),
  TO_UNICODE ('t'),
  TO_UNICODE ('e'),
  TO_UNICODE ('r'),
  TO_UNICODE (' '),
  TO_UNICODE ('t'),
  TO_UNICODE ('y'),
  TO_UNICODE ('p'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('a'),
  TO_UNICODE ('t'),
  TO_UNICODE ('t'),
  TO_UNICODE ('r'),
  TO_UNICODE ('i'),
  TO_UNICODE ('b'),
  TO_UNICODE ('u'),
  TO_UNICODE ('t'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('T'),
  TO_UNICODE ('I'),
  TO_UNICODE ('M'),
  TO_UNICODE ('E'),
  TO_UNICODE ('C'),
  TO_UNICODE ('O'),
  TO_UNICODE ('N'),
  TO_UNICODE ('S'),
  TO_UNICODE ('T'),
  TO_UNICODE ('A'),
  TO_UNICODE ('N'),
  TO_UNICODE ('T'),
  TO_UNICODE ('\''),
  TO_UNICODE (0)
} ;

//--- Syntax error message for terminal '$NS$' :
static const utf32 gSyntaxErrorMessage_NS [] = {
  TO_UNICODE ('C'),
  TO_UNICODE ('o'),
  TO_UNICODE ('u'),
  TO_UNICODE ('n'),
  TO_UNICODE ('t'),
  TO_UNICODE ('e'),
  TO_UNICODE ('r'),
  TO_UNICODE (' '),
  TO_UNICODE ('t'),
  TO_UNICODE ('y'),
  TO_UNICODE ('p'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('a'),
  TO_UNICODE ('t'),
  TO_UNICODE ('t'),
  TO_UNICODE ('r'),
  TO_UNICODE ('i'),
  TO_UNICODE ('b'),
  TO_UNICODE ('u'),
  TO_UNICODE ('t'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('N'),
  TO_UNICODE ('S'),
  TO_UNICODE ('\''),
  TO_UNICODE (0)
} ;

//--- Syntax error message for terminal '$CONSTNAME$' :
static const utf32 gSyntaxErrorMessage_CONSTNAME [] = {
  TO_UNICODE ('C'),
  TO_UNICODE ('o'),
  TO_UNICODE ('u'),
  TO_UNICODE ('n'),
  TO_UNICODE ('t'),
  TO_UNICODE ('e'),
  TO_UNICODE ('r'),
  TO_UNICODE (' '),
  TO_UNICODE ('t'),
  TO_UNICODE ('y'),
  TO_UNICODE ('p'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('a'),
  TO_UNICODE ('t'),
  TO_UNICODE ('t'),
  TO_UNICODE ('r'),
  TO_UNICODE ('i'),
  TO_UNICODE ('b'),
  TO_UNICODE ('u'),
  TO_UNICODE ('t'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('C'),
  TO_UNICODE ('O'),
  TO_UNICODE ('N'),
  TO_UNICODE ('S'),
  TO_UNICODE ('T'),
  TO_UNICODE ('N'),
  TO_UNICODE ('A'),
  TO_UNICODE ('M'),
  TO_UNICODE ('E'),
  TO_UNICODE ('\''),
  TO_UNICODE (0)
} ;

//--- Syntax error message for terminal '$SOURCE$' :
static const utf32 gSyntaxErrorMessage_SOURCE [] = {
  TO_UNICODE ('I'),
  TO_UNICODE ('n'),
  TO_UNICODE ('t'),
  TO_UNICODE ('e'),
  TO_UNICODE ('r'),
  TO_UNICODE ('r'),
  TO_UNICODE ('u'),
  TO_UNICODE ('p'),
  TO_UNICODE ('t'),
  TO_UNICODE (' '),
  TO_UNICODE ('S'),
  TO_UNICODE ('o'),
  TO_UNICODE ('u'),
  TO_UNICODE ('r'),
  TO_UNICODE ('c'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('S'),
  TO_UNICODE ('O'),
  TO_UNICODE ('U'),
  TO_UNICODE ('R'),
  TO_UNICODE ('C'),
  TO_UNICODE ('E'),
  TO_UNICODE ('\''),
  TO_UNICODE (0)
} ;

//--- Syntax error message for terminal '$;$' :
static const utf32 gSyntaxErrorMessage__3B_ [] = {
  TO_UNICODE ('\''),
  TO_UNICODE (';'),
  TO_UNICODE ('\''),
  TO_UNICODE (' '),
  TO_UNICODE ('d'),
  TO_UNICODE ('e'),
  TO_UNICODE ('l'),
  TO_UNICODE ('i'),
  TO_UNICODE ('m'),
  TO_UNICODE ('i'),
  TO_UNICODE ('t'),
  TO_UNICODE ('e'),
  TO_UNICODE ('r'),
  TO_UNICODE (0)
} ;

//--- Syntax error message for terminal '$:$' :
static const utf32 gSyntaxErrorMessage__3A_ [] = {
  TO_UNICODE ('\''),
  TO_UNICODE (':'),
  TO_UNICODE ('\''),
  TO_UNICODE (' '),
  TO_UNICODE ('d'),
  TO_UNICODE ('e'),
  TO_UNICODE ('l'),
  TO_UNICODE ('i'),
  TO_UNICODE ('m'),
  TO_UNICODE ('i'),
  TO_UNICODE ('t'),
  TO_UNICODE ('e'),
  TO_UNICODE ('r'),
  TO_UNICODE (0)
} ;

//--- Syntax error message for terminal '$=$' :
static const utf32 gSyntaxErrorMessage__3D_ [] = {
  TO_UNICODE ('\''),
  TO_UNICODE ('='),
  TO_UNICODE ('\''),
  TO_UNICODE (' '),
  TO_UNICODE ('d'),
  TO_UNICODE ('e'),
  TO_UNICODE ('l'),
  TO_UNICODE ('i'),
  TO_UNICODE ('m'),
  TO_UNICODE ('i'),
  TO_UNICODE ('t'),
  TO_UNICODE ('e'),
  TO_UNICODE ('r'),
  TO_UNICODE (0)
} ;

//--- Syntax error message for terminal '${$' :
static const utf32 gSyntaxErrorMessage__7B_ [] = {
  TO_UNICODE ('\''),
  TO_UNICODE ('{'),
  TO_UNICODE ('\''),
  TO_UNICODE (' '),
  TO_UNICODE ('d'),
  TO_UNICODE ('e'),
  TO_UNICODE ('l'),
  TO_UNICODE ('i'),
  TO_UNICODE ('m'),
  TO_UNICODE ('i'),
  TO_UNICODE ('t'),
  TO_UNICODE ('e'),
  TO_UNICODE ('r'),
  TO_UNICODE (0)
} ;

//--- Syntax error message for terminal '$}$' :
static const utf32 gSyntaxErrorMessage__7D_ [] = {
  TO_UNICODE ('\''),
  TO_UNICODE ('}'),
  TO_UNICODE ('\''),
  TO_UNICODE (' '),
  TO_UNICODE ('d'),
  TO_UNICODE ('e'),
  TO_UNICODE ('l'),
  TO_UNICODE ('i'),
  TO_UNICODE ('m'),
  TO_UNICODE ('i'),
  TO_UNICODE ('t'),
  TO_UNICODE ('e'),
  TO_UNICODE ('r'),
  TO_UNICODE (0)
} ;

//--- Syntax error message for terminal '$..$' :
static const utf32 gSyntaxErrorMessage__2E__2E_ [] = {
  TO_UNICODE ('\''),
  TO_UNICODE ('.'),
  TO_UNICODE ('.'),
  TO_UNICODE ('\''),
  TO_UNICODE (' '),
  TO_UNICODE ('d'),
  TO_UNICODE ('e'),
  TO_UNICODE ('l'),
  TO_UNICODE ('i'),
  TO_UNICODE ('m'),
  TO_UNICODE ('i'),
  TO_UNICODE ('t'),
  TO_UNICODE ('e'),
  TO_UNICODE ('r'),
  TO_UNICODE (0)
} ;

//--- Syntax error message for terminal '$[$' :
static const utf32 gSyntaxErrorMessage__5B_ [] = {
  TO_UNICODE ('\''),
  TO_UNICODE ('['),
  TO_UNICODE ('\''),
  TO_UNICODE (' '),
  TO_UNICODE ('d'),
  TO_UNICODE ('e'),
  TO_UNICODE ('l'),
  TO_UNICODE ('i'),
  TO_UNICODE ('m'),
  TO_UNICODE ('i'),
  TO_UNICODE ('t'),
  TO_UNICODE ('e'),
  TO_UNICODE ('r'),
  TO_UNICODE (0)
} ;

//--- Syntax error message for terminal '$]$' :
static const utf32 gSyntaxErrorMessage__5D_ [] = {
  TO_UNICODE ('\''),
  TO_UNICODE (']'),
  TO_UNICODE ('\''),
  TO_UNICODE (' '),
  TO_UNICODE ('d'),
  TO_UNICODE ('e'),
  TO_UNICODE ('l'),
  TO_UNICODE ('i'),
  TO_UNICODE ('m'),
  TO_UNICODE ('i'),
  TO_UNICODE ('t'),
  TO_UNICODE ('e'),
  TO_UNICODE ('r'),
  TO_UNICODE (0)
} ;

//--- Syntax error message for terminal '$,$' :
static const utf32 gSyntaxErrorMessage__2C_ [] = {
  TO_UNICODE ('\''),
  TO_UNICODE (','),
  TO_UNICODE ('\''),
  TO_UNICODE (' '),
  TO_UNICODE ('d'),
  TO_UNICODE ('e'),
  TO_UNICODE ('l'),
  TO_UNICODE ('i'),
  TO_UNICODE ('m'),
  TO_UNICODE ('i'),
  TO_UNICODE ('t'),
  TO_UNICODE ('e'),
  TO_UNICODE ('r'),
  TO_UNICODE (0)
} ;

//--- Syntax error message for terminal '$.$' :
static const utf32 gSyntaxErrorMessage__2E_ [] = {
  TO_UNICODE ('\''),
  TO_UNICODE ('.'),
  TO_UNICODE ('\''),
  TO_UNICODE (' '),
  TO_UNICODE ('d'),
  TO_UNICODE ('e'),
  TO_UNICODE ('l'),
  TO_UNICODE ('i'),
  TO_UNICODE ('m'),
  TO_UNICODE ('i'),
  TO_UNICODE ('t'),
  TO_UNICODE ('e'),
  TO_UNICODE ('r'),
  TO_UNICODE (0)
} ;

//--- Syntax error message for terminal '$-$' :
static const utf32 gSyntaxErrorMessage__2D_ [] = {
  TO_UNICODE ('\''),
  TO_UNICODE ('-'),
  TO_UNICODE ('\''),
  TO_UNICODE (' '),
  TO_UNICODE ('d'),
  TO_UNICODE ('e'),
  TO_UNICODE ('l'),
  TO_UNICODE ('i'),
  TO_UNICODE ('m'),
  TO_UNICODE ('i'),
  TO_UNICODE ('t'),
  TO_UNICODE ('e'),
  TO_UNICODE ('r'),
  TO_UNICODE (0)
} ;

//--- Syntax error message for terminal '$include$' :
static const utf32 gSyntaxErrorMessage_include [] = {
  TO_UNICODE ('c'),
  TO_UNICODE ('o'),
  TO_UNICODE ('m'),
  TO_UNICODE ('m'),
  TO_UNICODE ('a'),
  TO_UNICODE ('n'),
  TO_UNICODE ('d'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('i'),
  TO_UNICODE ('n'),
  TO_UNICODE ('c'),
  TO_UNICODE ('l'),
  TO_UNICODE ('u'),
  TO_UNICODE ('d'),
  TO_UNICODE ('e'),
  TO_UNICODE ('\''),
  TO_UNICODE (0)
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                appendTerminalMessageToSyntaxErrorMessage                  *
//                                                                           *
//---------------------------------------------------------------------------*

void C_Lexique_goil_5F_lexique::appendTerminalMessageToSyntaxErrorMessage (const PMSInt16 inTerminalIndex,
                                           C_String & outSyntaxErrorMessage) {
  static const utf32 * syntaxErrorMessageArray [272] = {kEndOfSourceLexicalErrorMessage,
    gSyntaxErrorMessage_comment,
    gSyntaxErrorMessage_idf,
    gSyntaxErrorMessage_string,
    gSyntaxErrorMessage_g_5F_string,
    gSyntaxErrorMessage_uint_5F_number,
    gSyntaxErrorMessage_float_5F_number,
    gSyntaxErrorMessage_set_5F_start_5F_uint_5F_number,
    gSyntaxErrorMessage_command,
    gSyntaxErrorMessage_APP_5F_SRC,
    gSyntaxErrorMessage_COMPILER,
    gSyntaxErrorMessage_ASSEMBLER,
    gSyntaxErrorMessage_LINKER,
    gSyntaxErrorMessage_SCRIPT,
    gSyntaxErrorMessage_CFLAGS,
    gSyntaxErrorMessage_CPPFLAGS,
    gSyntaxErrorMessage_ASFLAGS,
    gSyntaxErrorMessage_LDFLAGS,
    gSyntaxErrorMessage_APP_5F_NAME,
    gSyntaxErrorMessage_TRAMPOLINE_5F_BASE_5F_PATH,
    gSyntaxErrorMessage_OIL_5F_VERSION,
    gSyntaxErrorMessage_IMPLEMENTATION,
    gSyntaxErrorMessage_OS,
    gSyntaxErrorMessage_TASK,
    gSyntaxErrorMessage_COUNTER,
    gSyntaxErrorMessage_ALARM,
    gSyntaxErrorMessage_RESOURCE,
    gSyntaxErrorMessage_EVENT,
    gSyntaxErrorMessage_ISR,
    gSyntaxErrorMessage_MESSAGE,
    gSyntaxErrorMessage_COM,
    gSyntaxErrorMessage_NM,
    gSyntaxErrorMessage_APPMODE,
    gSyntaxErrorMessage_IPDU,
    gSyntaxErrorMessage_CPU,
    gSyntaxErrorMessage_UINT_33__32_,
    gSyntaxErrorMessage_INT_33__32_,
    gSyntaxErrorMessage_UINT_36__34_,
    gSyntaxErrorMessage_INT_36__34_,
    gSyntaxErrorMessage_FLOAT,
    gSyntaxErrorMessage_ENUM,
    gSyntaxErrorMessage_STRING,
    gSyntaxErrorMessage_BOOLEAN,
    gSyntaxErrorMessage_WITH_5F_AUTO,
    gSyntaxErrorMessage_NO_5F_DEFAULT,
    gSyntaxErrorMessage_AUTO,
    gSyntaxErrorMessage_MASK,
    gSyntaxErrorMessage_CATEGORY,
    gSyntaxErrorMessage_OS_5F_TYPE,
    gSyntaxErrorMessage_TASK_5F_TYPE,
    gSyntaxErrorMessage_COUNTER_5F_TYPE,
    gSyntaxErrorMessage_ALARM_5F_TYPE,
    gSyntaxErrorMessage_RESOURCE_5F_TYPE,
    gSyntaxErrorMessage_EVENT_5F_TYPE,
    gSyntaxErrorMessage_ISR_5F_TYPE,
    gSyntaxErrorMessage_MESSAGE_5F_TYPE,
    gSyntaxErrorMessage_COM_5F_TYPE,
    gSyntaxErrorMessage_NM_5F_TYPE,
    gSyntaxErrorMessage_APPMODE_5F_TYPE,
    gSyntaxErrorMessage_IPDU_5F_TYPE,
    gSyntaxErrorMessage_STATUS,
    gSyntaxErrorMessage_EXTENDED,
    gSyntaxErrorMessage_STARTUPHOOK,
    gSyntaxErrorMessage_ERRORHOOK,
    gSyntaxErrorMessage_SHUTDOWNHOOK,
    gSyntaxErrorMessage_PRETASKHOOK,
    gSyntaxErrorMessage_POSTTASKHOOK,
    gSyntaxErrorMessage_USEGETSERVICEID,
    gSyntaxErrorMessage_USEPARAMETERACCESS,
    gSyntaxErrorMessage_USERESSCHEDULER,
    gSyntaxErrorMessage_SYSTEM_5F_CALL,
    gSyntaxErrorMessage_MEMMAP,
    gSyntaxErrorMessage_MEMORY_5F_PROTECTION,
    gSyntaxErrorMessage_TRACE,
    gSyntaxErrorMessage_DEBUG,
    gSyntaxErrorMessage_FILE,
    gSyntaxErrorMessage_METHOD,
    gSyntaxErrorMessage_FORMAT,
    gSyntaxErrorMessage_TRACE_5F_TASK,
    gSyntaxErrorMessage_TRACE_5F_ISR,
    gSyntaxErrorMessage_TRACE_5F_RESOURCE,
    gSyntaxErrorMessage_TRACE_5F_ALARM,
    gSyntaxErrorMessage_TRACE_5F_USER,
    gSyntaxErrorMessage_DESCRIPTION,
    gSyntaxErrorMessage_PRIORITY,
    gSyntaxErrorMessage_SCHEDULE,
    gSyntaxErrorMessage_ACTIVATION,
    gSyntaxErrorMessage_AUTOSTART,
    gSyntaxErrorMessage_MAXALLOWEDVALUE,
    gSyntaxErrorMessage_TICKSPERBASE,
    gSyntaxErrorMessage_MINCYCLE,
    gSyntaxErrorMessage_TYPE,
    gSyntaxErrorMessage_UNIT,
    gSyntaxErrorMessage_ACTION,
    gSyntaxErrorMessage_SETEVENT,
    gSyntaxErrorMessage_ACTIVATETASK,
    gSyntaxErrorMessage_ALARMCALLBACK,
    gSyntaxErrorMessage_ALARMCALLBACKNAME,
    gSyntaxErrorMessage_ALARMTIME,
    gSyntaxErrorMessage_CYCLETIME,
    gSyntaxErrorMessage_INCREMENTCOUNTER,
    gSyntaxErrorMessage_RESOURCEPROPERTY,
    gSyntaxErrorMessage_STANDARD,
    gSyntaxErrorMessage_LINKED,
    gSyntaxErrorMessage_LINKEDRESOURCE,
    gSyntaxErrorMessage_INTERNAL,
    gSyntaxErrorMessage_MESSAGEPROPERTY,
    gSyntaxErrorMessage_NOTIFICATION,
    gSyntaxErrorMessage_NOTIFICATIONERROR,
    gSyntaxErrorMessage_SEND_5F_STATIC_5F_INTERNAL,
    gSyntaxErrorMessage_SEND_5F_STATIC_5F_EXTERNAL,
    gSyntaxErrorMessage_SEND_5F_DYNAMIC_5F_EXTERNAL,
    gSyntaxErrorMessage_SEND_5F_ZERO_5F_INTERNAL,
    gSyntaxErrorMessage_SEND_5F_ZERO_5F_EXTERNAL,
    gSyntaxErrorMessage_RECEIVE_5F_ZERO_5F_INTERNAL,
    gSyntaxErrorMessage_RECEIVE_5F_ZERO_5F_EXTERNAL,
    gSyntaxErrorMessage_RECEIVE_5F_UNQUEUED_5F_INTERNAL,
    gSyntaxErrorMessage_RECEIVE_5F_QUEUED_5F_INTERNAL,
    gSyntaxErrorMessage_RECEIVE_5F_UNQUEUED_5F_EXTERNAL,
    gSyntaxErrorMessage_RECEIVE_5F_QUEUED_5F_EXTERNAL,
    gSyntaxErrorMessage_RECEIVE_5F_DYNAMIC_5F_EXTERNAL,
    gSyntaxErrorMessage_RECEIVE_5F_ZERO_5F_SENDERS,
    gSyntaxErrorMessage_CDATATYPE,
    gSyntaxErrorMessage_SENDINGMESSAGE,
    gSyntaxErrorMessage_NONE,
    gSyntaxErrorMessage_COMCALLBACK,
    gSyntaxErrorMessage_COMCALLBACKNAME,
    gSyntaxErrorMessage_INMCALLBACK,
    gSyntaxErrorMessage_CALLBACKROUTINENAME,
    gSyntaxErrorMessage_MONITOREDIPDU,
    gSyntaxErrorMessage_TRANSFERPROPERTY,
    gSyntaxErrorMessage_TRIGGERED,
    gSyntaxErrorMessage_PENDING,
    gSyntaxErrorMessage_NETWORKMESSAGE,
    gSyntaxErrorMessage_FILTER,
    gSyntaxErrorMessage_ALWAYS,
    gSyntaxErrorMessage_NEVER,
    gSyntaxErrorMessage_MASKEDNEWEQUALSX,
    gSyntaxErrorMessage_MASKEDNEWDIFFERSX,
    gSyntaxErrorMessage_NEWISEQUAL,
    gSyntaxErrorMessage_NEWISDIFFERENT,
    gSyntaxErrorMessage_MASKEDNEWEQUALSMASKEDOLD,
    gSyntaxErrorMessage_MASKEDNEWDIFFERSMASKEDOLD,
    gSyntaxErrorMessage_NEWISWITHIN,
    gSyntaxErrorMessage_NEWISOUTSIDE,
    gSyntaxErrorMessage_NEWISGREATER,
    gSyntaxErrorMessage_NEWISLESSOREQUAL,
    gSyntaxErrorMessage_NEWISLESS,
    gSyntaxErrorMessage_NEWISGREATEROREQUAL,
    gSyntaxErrorMessage_ONEEVERYN,
    gSyntaxErrorMessage_MIN,
    gSyntaxErrorMessage_MAX,
    gSyntaxErrorMessage_X,
    gSyntaxErrorMessage_PERIOD,
    gSyntaxErrorMessage_OFFSET,
    gSyntaxErrorMessage_NETWORKORDERCALLOUT,
    gSyntaxErrorMessage_CPUORDERCALLOUT,
    gSyntaxErrorMessage_INITIALVALUE,
    gSyntaxErrorMessage_QUEUESIZE,
    gSyntaxErrorMessage_LINK,
    gSyntaxErrorMessage_RECEIVEMESSAGE,
    gSyntaxErrorMessage_FLAG,
    gSyntaxErrorMessage_FLAGNAME,
    gSyntaxErrorMessage_STATIC,
    gSyntaxErrorMessage_DYNAMIC,
    gSyntaxErrorMessage_ZERO,
    gSyntaxErrorMessage_SIZEINBITS,
    gSyntaxErrorMessage_MAXSIZEINBITS,
    gSyntaxErrorMessage_BITORDERING,
    gSyntaxErrorMessage_BIGENDIAN,
    gSyntaxErrorMessage_LITTLEENDIAN,
    gSyntaxErrorMessage_BITPOSITION,
    gSyntaxErrorMessage_DATAINTERPRETATION,
    gSyntaxErrorMessage_UNSIGNEDINTEGER,
    gSyntaxErrorMessage_BYTEARRAY,
    gSyntaxErrorMessage_DIRECTION,
    gSyntaxErrorMessage_SENT,
    gSyntaxErrorMessage_RECEIVED,
    gSyntaxErrorMessage_COMTIMEBASE,
    gSyntaxErrorMessage_COMERRORHOOK,
    gSyntaxErrorMessage_COMUSEGETSERVICEID,
    gSyntaxErrorMessage_COMUSEPARAMETERACCESS,
    gSyntaxErrorMessage_COMSTARTCOMEXTENSION,
    gSyntaxErrorMessage_COMAPPMODE,
    gSyntaxErrorMessage_COMSTATUS,
    gSyntaxErrorMessage_USE,
    gSyntaxErrorMessage_COMEXTENDED,
    gSyntaxErrorMessage_COMSTANDARD,
    gSyntaxErrorMessage_IPDUPROPERTY,
    gSyntaxErrorMessage_IPDUCALLOUT,
    gSyntaxErrorMessage_LAYERUSED,
    gSyntaxErrorMessage_TRANSMISSIONMODE,
    gSyntaxErrorMessage_DIRECT,
    gSyntaxErrorMessage_PERIODIC,
    gSyntaxErrorMessage_MIXED,
    gSyntaxErrorMessage_TIMEOUT,
    gSyntaxErrorMessage_FIRTSTIMEOUT,
    gSyntaxErrorMessage_MINIMUMDELAYTIME,
    gSyntaxErrorMessage_TIMEPERIOD,
    gSyntaxErrorMessage_TIMEOFFSET,
    gSyntaxErrorMessage_NON,
    gSyntaxErrorMessage_FULL,
    gSyntaxErrorMessage_FALSE,
    gSyntaxErrorMessage_TRUE,
    gSyntaxErrorMessage_PROTECTIONHOOK,
    gSyntaxErrorMessage_SCALABILITYCLASS,
    gSyntaxErrorMessage_STACKMONITORING,
    gSyntaxErrorMessage_TIMING_5F_PROTECTION,
    gSyntaxErrorMessage_ACCESSING_5F_APPLICATION,
    gSyntaxErrorMessage_SC_31_,
    gSyntaxErrorMessage_SC_32_,
    gSyntaxErrorMessage_SC_33_,
    gSyntaxErrorMessage_SC_34_,
    gSyntaxErrorMessage_SCHEDULETABLE,
    gSyntaxErrorMessage_APPLICATION,
    gSyntaxErrorMessage_LOCAL_5F_TO_5F_GLOBAL_5F_TIME_5F_SYNCHRONIZATION,
    gSyntaxErrorMessage_SYNC_5F_STRATEGY,
    gSyntaxErrorMessage_MAX_5F_INCREASE,
    gSyntaxErrorMessage_MAX_5F_DECREASE,
    gSyntaxErrorMessage_MAX_5F_INCREASE_5F_ASYNC,
    gSyntaxErrorMessage_MAX_5F_DECREASE_5F_ASYNC,
    gSyntaxErrorMessage_PRECISION,
    gSyntaxErrorMessage_LENGTH,
    gSyntaxErrorMessage_EXPIRY_5F_POINT,
    gSyntaxErrorMessage_MAX_5F_RETARD,
    gSyntaxErrorMessage_MAX_5F_ADVANCE,
    gSyntaxErrorMessage_ADJUSTABLE,
    gSyntaxErrorMessage_ABSOLUTE,
    gSyntaxErrorMessage_RELATIVE,
    gSyntaxErrorMessage_SYNCHRON,
    gSyntaxErrorMessage_START,
    gSyntaxErrorMessage_TRUSTED,
    gSyntaxErrorMessage_HAS_5F_RESTARTTASK,
    gSyntaxErrorMessage_RESTARTTASK,
    gSyntaxErrorMessage_TRUSTED_5F_FUNCTION,
    gSyntaxErrorMessage_NAME,
    gSyntaxErrorMessage_EXECUTIONBUDGET,
    gSyntaxErrorMessage_EXECUTIONTIME,
    gSyntaxErrorMessage_TIMEFRAME,
    gSyntaxErrorMessage_MAXOSINTERRUPTLOCKTIME,
    gSyntaxErrorMessage_MAXALLINTERRUPTLOCKTIME,
    gSyntaxErrorMessage_LOCKINGTIME,
    gSyntaxErrorMessage_RESOURCELOCK,
    gSyntaxErrorMessage_MAXRESOURCELOCKTIME,
    gSyntaxErrorMessage_SMOOTH,
    gSyntaxErrorMessage_HARD,
    gSyntaxErrorMessage_TICKS,
    gSyntaxErrorMessage_NANOSECONDS,
    gSyntaxErrorMessage_SOFTWARE,
    gSyntaxErrorMessage_HARDWARE,
    gSyntaxErrorMessage_OSINTERNAL,
    gSyntaxErrorMessage_GPT,
    gSyntaxErrorMessage_NS_5F_PER_5F_HW_5F_TICK,
    gSyntaxErrorMessage_GPTCHANNELNAME,
    gSyntaxErrorMessage_DRIVER,
    gSyntaxErrorMessage_TIMECONSTANTS,
    gSyntaxErrorMessage_TIMECONSTANT,
    gSyntaxErrorMessage_NS,
    gSyntaxErrorMessage_CONSTNAME,
    gSyntaxErrorMessage_SOURCE,
    gSyntaxErrorMessage__3B_,
    gSyntaxErrorMessage__3A_,
    gSyntaxErrorMessage__3D_,
    gSyntaxErrorMessage__7B_,
    gSyntaxErrorMessage__7D_,
    gSyntaxErrorMessage__2E__2E_,
    gSyntaxErrorMessage__5B_,
    gSyntaxErrorMessage__5D_,
    gSyntaxErrorMessage__2C_,
    gSyntaxErrorMessage__2E_,
    gSyntaxErrorMessage__2D_,
    gSyntaxErrorMessage_include} ;
  outSyntaxErrorMessage << syntaxErrorMessageArray [inTerminalIndex] ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                      U N I C O D E    S T R I N G S                       *
//                                                                           *
//---------------------------------------------------------------------------*

//--- Unicode string for '$_2A__2F_$'
static const utf32 kUnicodeString__2A__2F_ [] = {
  TO_UNICODE ('*'),
  TO_UNICODE ('/'),
  TO_UNICODE (0)
} ;

//--- Unicode string for '$_2C_$'
static const utf32 kUnicodeString__2C_ [] = {
  TO_UNICODE (','),
  TO_UNICODE (0)
} ;

//--- Unicode string for '$_2D_$'
static const utf32 kUnicodeString__2D_ [] = {
  TO_UNICODE ('-'),
  TO_UNICODE (0)
} ;

//--- Unicode string for '$_2E_$'
static const utf32 kUnicodeString__2E_ [] = {
  TO_UNICODE ('.'),
  TO_UNICODE (0)
} ;

//--- Unicode string for '$_2E__2E_$'
static const utf32 kUnicodeString__2E__2E_ [] = {
  TO_UNICODE ('.'),
  TO_UNICODE ('.'),
  TO_UNICODE (0)
} ;

//--- Unicode string for '$_2F__2A_$'
static const utf32 kUnicodeString__2F__2A_ [] = {
  TO_UNICODE ('/'),
  TO_UNICODE ('*'),
  TO_UNICODE (0)
} ;

//--- Unicode string for '$_2F__2F_$'
static const utf32 kUnicodeString__2F__2F_ [] = {
  TO_UNICODE ('/'),
  TO_UNICODE ('/'),
  TO_UNICODE (0)
} ;

//--- Unicode string for '$_30_X$'
static const utf32 kUnicodeString__30_X [] = {
  TO_UNICODE ('0'),
  TO_UNICODE ('X'),
  TO_UNICODE (0)
} ;

//--- Unicode string for '$_30_x$'
static const utf32 kUnicodeString__30_x [] = {
  TO_UNICODE ('0'),
  TO_UNICODE ('x'),
  TO_UNICODE (0)
} ;

//--- Unicode string for '$_3A_$'
static const utf32 kUnicodeString__3A_ [] = {
  TO_UNICODE (':'),
  TO_UNICODE (0)
} ;

//--- Unicode string for '$_3B_$'
static const utf32 kUnicodeString__3B_ [] = {
  TO_UNICODE (';'),
  TO_UNICODE (0)
} ;

//--- Unicode string for '$_3D_$'
static const utf32 kUnicodeString__3D_ [] = {
  TO_UNICODE ('='),
  TO_UNICODE (0)
} ;

//--- Unicode string for '$ABSOLUTE$'
static const utf32 kUnicodeString_ABSOLUTE [] = {
  TO_UNICODE ('A'),
  TO_UNICODE ('B'),
  TO_UNICODE ('S'),
  TO_UNICODE ('O'),
  TO_UNICODE ('L'),
  TO_UNICODE ('U'),
  TO_UNICODE ('T'),
  TO_UNICODE ('E'),
  TO_UNICODE (0)
} ;

//--- Unicode string for '$ACCESSING_5F_APPLICATION$'
static const utf32 kUnicodeString_ACCESSING_5F_APPLICATION [] = {
  TO_UNICODE ('A'),
  TO_UNICODE ('C'),
  TO_UNICODE ('C'),
  TO_UNICODE ('E'),
  TO_UNICODE ('S'),
  TO_UNICODE ('S'),
  TO_UNICODE ('I'),
  TO_UNICODE ('N'),
  TO_UNICODE ('G'),
  TO_UNICODE ('_'),
  TO_UNICODE ('A'),
  TO_UNICODE ('P'),
  TO_UNICODE ('P'),
  TO_UNICODE ('L'),
  TO_UNICODE ('I'),
  TO_UNICODE ('C'),
  TO_UNICODE ('A'),
  TO_UNICODE ('T'),
  TO_UNICODE ('I'),
  TO_UNICODE ('O'),
  TO_UNICODE ('N'),
  TO_UNICODE (0)
} ;

//--- Unicode string for '$ACTION$'
static const utf32 kUnicodeString_ACTION [] = {
  TO_UNICODE ('A'),
  TO_UNICODE ('C'),
  TO_UNICODE ('T'),
  TO_UNICODE ('I'),
  TO_UNICODE ('O'),
  TO_UNICODE ('N'),
  TO_UNICODE (0)
} ;

//--- Unicode string for '$ACTIVATETASK$'
static const utf32 kUnicodeString_ACTIVATETASK [] = {
  TO_UNICODE ('A'),
  TO_UNICODE ('C'),
  TO_UNICODE ('T'),
  TO_UNICODE ('I'),
  TO_UNICODE ('V'),
  TO_UNICODE ('A'),
  TO_UNICODE ('T'),
  TO_UNICODE ('E'),
  TO_UNICODE ('T'),
  TO_UNICODE ('A'),
  TO_UNICODE ('S'),
  TO_UNICODE ('K'),
  TO_UNICODE (0)
} ;

//--- Unicode string for '$ACTIVATION$'
static const utf32 kUnicodeString_ACTIVATION [] = {
  TO_UNICODE ('A'),
  TO_UNICODE ('C'),
  TO_UNICODE ('T'),
  TO_UNICODE ('I'),
  TO_UNICODE ('V'),
  TO_UNICODE ('A'),
  TO_UNICODE ('T'),
  TO_UNICODE ('I'),
  TO_UNICODE ('O'),
  TO_UNICODE ('N'),
  TO_UNICODE (0)
} ;

//--- Unicode string for '$ADJUSTABLE$'
static const utf32 kUnicodeString_ADJUSTABLE [] = {
  TO_UNICODE ('A'),
  TO_UNICODE ('D'),
  TO_UNICODE ('J'),
  TO_UNICODE ('U'),
  TO_UNICODE ('S'),
  TO_UNICODE ('T'),
  TO_UNICODE ('A'),
  TO_UNICODE ('B'),
  TO_UNICODE ('L'),
  TO_UNICODE ('E'),
  TO_UNICODE (0)
} ;

//--- Unicode string for '$ALARM$'
static const utf32 kUnicodeString_ALARM [] = {
  TO_UNICODE ('A'),
  TO_UNICODE ('L'),
  TO_UNICODE ('A'),
  TO_UNICODE ('R'),
  TO_UNICODE ('M'),
  TO_UNICODE (0)
} ;

//--- Unicode string for '$ALARMCALLBACK$'
static const utf32 kUnicodeString_ALARMCALLBACK [] = {
  TO_UNICODE ('A'),
  TO_UNICODE ('L'),
  TO_UNICODE ('A'),
  TO_UNICODE ('R'),
  TO_UNICODE ('M'),
  TO_UNICODE ('C'),
  TO_UNICODE ('A'),
  TO_UNICODE ('L'),
  TO_UNICODE ('L'),
  TO_UNICODE ('B'),
  TO_UNICODE ('A'),
  TO_UNICODE ('C'),
  TO_UNICODE ('K'),
  TO_UNICODE (0)
} ;

//--- Unicode string for '$ALARMCALLBACKNAME$'
static const utf32 kUnicodeString_ALARMCALLBACKNAME [] = {
  TO_UNICODE ('A'),
  TO_UNICODE ('L'),
  TO_UNICODE ('A'),
  TO_UNICODE ('R'),
  TO_UNICODE ('M'),
  TO_UNICODE ('C'),
  TO_UNICODE ('A'),
  TO_UNICODE ('L'),
  TO_UNICODE ('L'),
  TO_UNICODE ('B'),
  TO_UNICODE ('A'),
  TO_UNICODE ('C'),
  TO_UNICODE ('K'),
  TO_UNICODE ('N'),
  TO_UNICODE ('A'),
  TO_UNICODE ('M'),
  TO_UNICODE ('E'),
  TO_UNICODE (0)
} ;

//--- Unicode string for '$ALARMTIME$'
static const utf32 kUnicodeString_ALARMTIME [] = {
  TO_UNICODE ('A'),
  TO_UNICODE ('L'),
  TO_UNICODE ('A'),
  TO_UNICODE ('R'),
  TO_UNICODE ('M'),
  TO_UNICODE ('T'),
  TO_UNICODE ('I'),
  TO_UNICODE ('M'),
  TO_UNICODE ('E'),
  TO_UNICODE (0)
} ;

//--- Unicode string for '$ALARM_5F_TYPE$'
static const utf32 kUnicodeString_ALARM_5F_TYPE [] = {
  TO_UNICODE ('A'),
  TO_UNICODE ('L'),
  TO_UNICODE ('A'),
  TO_UNICODE ('R'),
  TO_UNICODE ('M'),
  TO_UNICODE ('_'),
  TO_UNICODE ('T'),
  TO_UNICODE ('Y'),
  TO_UNICODE ('P'),
  TO_UNICODE ('E'),
  TO_UNICODE (0)
} ;

//--- Unicode string for '$ALWAYS$'
static const utf32 kUnicodeString_ALWAYS [] = {
  TO_UNICODE ('A'),
  TO_UNICODE ('L'),
  TO_UNICODE ('W'),
  TO_UNICODE ('A'),
  TO_UNICODE ('Y'),
  TO_UNICODE ('S'),
  TO_UNICODE (0)
} ;

//--- Unicode string for '$APPLICATION$'
static const utf32 kUnicodeString_APPLICATION [] = {
  TO_UNICODE ('A'),
  TO_UNICODE ('P'),
  TO_UNICODE ('P'),
  TO_UNICODE ('L'),
  TO_UNICODE ('I'),
  TO_UNICODE ('C'),
  TO_UNICODE ('A'),
  TO_UNICODE ('T'),
  TO_UNICODE ('I'),
  TO_UNICODE ('O'),
  TO_UNICODE ('N'),
  TO_UNICODE (0)
} ;

//--- Unicode string for '$APPMODE$'
static const utf32 kUnicodeString_APPMODE [] = {
  TO_UNICODE ('A'),
  TO_UNICODE ('P'),
  TO_UNICODE ('P'),
  TO_UNICODE ('M'),
  TO_UNICODE ('O'),
  TO_UNICODE ('D'),
  TO_UNICODE ('E'),
  TO_UNICODE (0)
} ;

//--- Unicode string for '$APPMODE_5F_TYPE$'
static const utf32 kUnicodeString_APPMODE_5F_TYPE [] = {
  TO_UNICODE ('A'),
  TO_UNICODE ('P'),
  TO_UNICODE ('P'),
  TO_UNICODE ('M'),
  TO_UNICODE ('O'),
  TO_UNICODE ('D'),
  TO_UNICODE ('E'),
  TO_UNICODE ('_'),
  TO_UNICODE ('T'),
  TO_UNICODE ('Y'),
  TO_UNICODE ('P'),
  TO_UNICODE ('E'),
  TO_UNICODE (0)
} ;

//--- Unicode string for '$APP_5F_NAME$'
static const utf32 kUnicodeString_APP_5F_NAME [] = {
  TO_UNICODE ('A'),
  TO_UNICODE ('P'),
  TO_UNICODE ('P'),
  TO_UNICODE ('_'),
  TO_UNICODE ('N'),
  TO_UNICODE ('A'),
  TO_UNICODE ('M'),
  TO_UNICODE ('E'),
  TO_UNICODE (0)
} ;

//--- Unicode string for '$APP_5F_SRC$'
static const utf32 kUnicodeString_APP_5F_SRC [] = {
  TO_UNICODE ('A'),
  TO_UNICODE ('P'),
  TO_UNICODE ('P'),
  TO_UNICODE ('_'),
  TO_UNICODE ('S'),
  TO_UNICODE ('R'),
  TO_UNICODE ('C'),
  TO_UNICODE (0)
} ;

//--- Unicode string for '$ASFLAGS$'
static const utf32 kUnicodeString_ASFLAGS [] = {
  TO_UNICODE ('A'),
  TO_UNICODE ('S'),
  TO_UNICODE ('F'),
  TO_UNICODE ('L'),
  TO_UNICODE ('A'),
  TO_UNICODE ('G'),
  TO_UNICODE ('S'),
  TO_UNICODE (0)
} ;

//--- Unicode string for '$ASSEMBLER$'
static const utf32 kUnicodeString_ASSEMBLER [] = {
  TO_UNICODE ('A'),
  TO_UNICODE ('S'),
  TO_UNICODE ('S'),
  TO_UNICODE ('E'),
  TO_UNICODE ('M'),
  TO_UNICODE ('B'),
  TO_UNICODE ('L'),
  TO_UNICODE ('E'),
  TO_UNICODE ('R'),
  TO_UNICODE (0)
} ;

//--- Unicode string for '$AUTO$'
static const utf32 kUnicodeString_AUTO [] = {
  TO_UNICODE ('A'),
  TO_UNICODE ('U'),
  TO_UNICODE ('T'),
  TO_UNICODE ('O'),
  TO_UNICODE (0)
} ;

//--- Unicode string for '$AUTOSTART$'
static const utf32 kUnicodeString_AUTOSTART [] = {
  TO_UNICODE ('A'),
  TO_UNICODE ('U'),
  TO_UNICODE ('T'),
  TO_UNICODE ('O'),
  TO_UNICODE ('S'),
  TO_UNICODE ('T'),
  TO_UNICODE ('A'),
  TO_UNICODE ('R'),
  TO_UNICODE ('T'),
  TO_UNICODE (0)
} ;

//--- Unicode string for '$BIGENDIAN$'
static const utf32 kUnicodeString_BIGENDIAN [] = {
  TO_UNICODE ('B'),
  TO_UNICODE ('I'),
  TO_UNICODE ('G'),
  TO_UNICODE ('E'),
  TO_UNICODE ('N'),
  TO_UNICODE ('D'),
  TO_UNICODE ('I'),
  TO_UNICODE ('A'),
  TO_UNICODE ('N'),
  TO_UNICODE (0)
} ;

//--- Unicode string for '$BITORDERING$'
static const utf32 kUnicodeString_BITORDERING [] = {
  TO_UNICODE ('B'),
  TO_UNICODE ('I'),
  TO_UNICODE ('T'),
  TO_UNICODE ('O'),
  TO_UNICODE ('R'),
  TO_UNICODE ('D'),
  TO_UNICODE ('E'),
  TO_UNICODE ('R'),
  TO_UNICODE ('I'),
  TO_UNICODE ('N'),
  TO_UNICODE ('G'),
  TO_UNICODE (0)
} ;

//--- Unicode string for '$BITPOSITION$'
static const utf32 kUnicodeString_BITPOSITION [] = {
  TO_UNICODE ('B'),
  TO_UNICODE ('I'),
  TO_UNICODE ('T'),
  TO_UNICODE ('P'),
  TO_UNICODE ('O'),
  TO_UNICODE ('S'),
  TO_UNICODE ('I'),
  TO_UNICODE ('T'),
  TO_UNICODE ('I'),
  TO_UNICODE ('O'),
  TO_UNICODE ('N'),
  TO_UNICODE (0)
} ;

//--- Unicode string for '$BOOLEAN$'
static const utf32 kUnicodeString_BOOLEAN [] = {
  TO_UNICODE ('B'),
  TO_UNICODE ('O'),
  TO_UNICODE ('O'),
  TO_UNICODE ('L'),
  TO_UNICODE ('E'),
  TO_UNICODE ('A'),
  TO_UNICODE ('N'),
  TO_UNICODE (0)
} ;

//--- Unicode string for '$BYTEARRAY$'
static const utf32 kUnicodeString_BYTEARRAY [] = {
  TO_UNICODE ('B'),
  TO_UNICODE ('Y'),
  TO_UNICODE ('T'),
  TO_UNICODE ('E'),
  TO_UNICODE ('A'),
  TO_UNICODE ('R'),
  TO_UNICODE ('R'),
  TO_UNICODE ('A'),
  TO_UNICODE ('Y'),
  TO_UNICODE (0)
} ;

//--- Unicode string for '$CALLBACKROUTINENAME$'
static const utf32 kUnicodeString_CALLBACKROUTINENAME [] = {
  TO_UNICODE ('C'),
  TO_UNICODE ('A'),
  TO_UNICODE ('L'),
  TO_UNICODE ('L'),
  TO_UNICODE ('B'),
  TO_UNICODE ('A'),
  TO_UNICODE ('C'),
  TO_UNICODE ('K'),
  TO_UNICODE ('R'),
  TO_UNICODE ('O'),
  TO_UNICODE ('U'),
  TO_UNICODE ('T'),
  TO_UNICODE ('I'),
  TO_UNICODE ('N'),
  TO_UNICODE ('E'),
  TO_UNICODE ('N'),
  TO_UNICODE ('A'),
  TO_UNICODE ('M'),
  TO_UNICODE ('E'),
  TO_UNICODE (0)
} ;

//--- Unicode string for '$CATEGORY$'
static const utf32 kUnicodeString_CATEGORY [] = {
  TO_UNICODE ('C'),
  TO_UNICODE ('A'),
  TO_UNICODE ('T'),
  TO_UNICODE ('E'),
  TO_UNICODE ('G'),
  TO_UNICODE ('O'),
  TO_UNICODE ('R'),
  TO_UNICODE ('Y'),
  TO_UNICODE (0)
} ;

//--- Unicode string for '$CDATATYPE$'
static const utf32 kUnicodeString_CDATATYPE [] = {
  TO_UNICODE ('C'),
  TO_UNICODE ('D'),
  TO_UNICODE ('A'),
  TO_UNICODE ('T'),
  TO_UNICODE ('A'),
  TO_UNICODE ('T'),
  TO_UNICODE ('Y'),
  TO_UNICODE ('P'),
  TO_UNICODE ('E'),
  TO_UNICODE (0)
} ;

//--- Unicode string for '$CFLAGS$'
static const utf32 kUnicodeString_CFLAGS [] = {
  TO_UNICODE ('C'),
  TO_UNICODE ('F'),
  TO_UNICODE ('L'),
  TO_UNICODE ('A'),
  TO_UNICODE ('G'),
  TO_UNICODE ('S'),
  TO_UNICODE (0)
} ;

//--- Unicode string for '$COM$'
static const utf32 kUnicodeString_COM [] = {
  TO_UNICODE ('C'),
  TO_UNICODE ('O'),
  TO_UNICODE ('M'),
  TO_UNICODE (0)
} ;

//--- Unicode string for '$COMAPPMODE$'
static const utf32 kUnicodeString_COMAPPMODE [] = {
  TO_UNICODE ('C'),
  TO_UNICODE ('O'),
  TO_UNICODE ('M'),
  TO_UNICODE ('A'),
  TO_UNICODE ('P'),
  TO_UNICODE ('P'),
  TO_UNICODE ('M'),
  TO_UNICODE ('O'),
  TO_UNICODE ('D'),
  TO_UNICODE ('E'),
  TO_UNICODE (0)
} ;

//--- Unicode string for '$COMCALLBACK$'
static const utf32 kUnicodeString_COMCALLBACK [] = {
  TO_UNICODE ('C'),
  TO_UNICODE ('O'),
  TO_UNICODE ('M'),
  TO_UNICODE ('C'),
  TO_UNICODE ('A'),
  TO_UNICODE ('L'),
  TO_UNICODE ('L'),
  TO_UNICODE ('B'),
  TO_UNICODE ('A'),
  TO_UNICODE ('C'),
  TO_UNICODE ('K'),
  TO_UNICODE (0)
} ;

//--- Unicode string for '$COMCALLBACKNAME$'
static const utf32 kUnicodeString_COMCALLBACKNAME [] = {
  TO_UNICODE ('C'),
  TO_UNICODE ('O'),
  TO_UNICODE ('M'),
  TO_UNICODE ('C'),
  TO_UNICODE ('A'),
  TO_UNICODE ('L'),
  TO_UNICODE ('L'),
  TO_UNICODE ('B'),
  TO_UNICODE ('A'),
  TO_UNICODE ('C'),
  TO_UNICODE ('K'),
  TO_UNICODE ('N'),
  TO_UNICODE ('A'),
  TO_UNICODE ('M'),
  TO_UNICODE ('E'),
  TO_UNICODE (0)
} ;

//--- Unicode string for '$COMERRORHOOK$'
static const utf32 kUnicodeString_COMERRORHOOK [] = {
  TO_UNICODE ('C'),
  TO_UNICODE ('O'),
  TO_UNICODE ('M'),
  TO_UNICODE ('E'),
  TO_UNICODE ('R'),
  TO_UNICODE ('R'),
  TO_UNICODE ('O'),
  TO_UNICODE ('R'),
  TO_UNICODE ('H'),
  TO_UNICODE ('O'),
  TO_UNICODE ('O'),
  TO_UNICODE ('K'),
  TO_UNICODE (0)
} ;

//--- Unicode string for '$COMEXTENDED$'
static const utf32 kUnicodeString_COMEXTENDED [] = {
  TO_UNICODE ('C'),
  TO_UNICODE ('O'),
  TO_UNICODE ('M'),
  TO_UNICODE ('E'),
  TO_UNICODE ('X'),
  TO_UNICODE ('T'),
  TO_UNICODE ('E'),
  TO_UNICODE ('N'),
  TO_UNICODE ('D'),
  TO_UNICODE ('E'),
  TO_UNICODE ('D'),
  TO_UNICODE (0)
} ;

//--- Unicode string for '$COMPILER$'
static const utf32 kUnicodeString_COMPILER [] = {
  TO_UNICODE ('C'),
  TO_UNICODE ('O'),
  TO_UNICODE ('M'),
  TO_UNICODE ('P'),
  TO_UNICODE ('I'),
  TO_UNICODE ('L'),
  TO_UNICODE ('E'),
  TO_UNICODE ('R'),
  TO_UNICODE (0)
} ;

//--- Unicode string for '$COMSTANDARD$'
static const utf32 kUnicodeString_COMSTANDARD [] = {
  TO_UNICODE ('C'),
  TO_UNICODE ('O'),
  TO_UNICODE ('M'),
  TO_UNICODE ('S'),
  TO_UNICODE ('T'),
  TO_UNICODE ('A'),
  TO_UNICODE ('N'),
  TO_UNICODE ('D'),
  TO_UNICODE ('A'),
  TO_UNICODE ('R'),
  TO_UNICODE ('D'),
  TO_UNICODE (0)
} ;

//--- Unicode string for '$COMSTARTCOMEXTENSION$'
static const utf32 kUnicodeString_COMSTARTCOMEXTENSION [] = {
  TO_UNICODE ('C'),
  TO_UNICODE ('O'),
  TO_UNICODE ('M'),
  TO_UNICODE ('S'),
  TO_UNICODE ('T'),
  TO_UNICODE ('A'),
  TO_UNICODE ('R'),
  TO_UNICODE ('T'),
  TO_UNICODE ('C'),
  TO_UNICODE ('O'),
  TO_UNICODE ('M'),
  TO_UNICODE ('E'),
  TO_UNICODE ('X'),
  TO_UNICODE ('T'),
  TO_UNICODE ('E'),
  TO_UNICODE ('N'),
  TO_UNICODE ('S'),
  TO_UNICODE ('I'),
  TO_UNICODE ('O'),
  TO_UNICODE ('N'),
  TO_UNICODE (0)
} ;

//--- Unicode string for '$COMSTATUS$'
static const utf32 kUnicodeString_COMSTATUS [] = {
  TO_UNICODE ('C'),
  TO_UNICODE ('O'),
  TO_UNICODE ('M'),
  TO_UNICODE ('S'),
  TO_UNICODE ('T'),
  TO_UNICODE ('A'),
  TO_UNICODE ('T'),
  TO_UNICODE ('U'),
  TO_UNICODE ('S'),
  TO_UNICODE (0)
} ;

//--- Unicode string for '$COMTIMEBASE$'
static const utf32 kUnicodeString_COMTIMEBASE [] = {
  TO_UNICODE ('C'),
  TO_UNICODE ('O'),
  TO_UNICODE ('M'),
  TO_UNICODE ('T'),
  TO_UNICODE ('I'),
  TO_UNICODE ('M'),
  TO_UNICODE ('E'),
  TO_UNICODE ('B'),
  TO_UNICODE ('A'),
  TO_UNICODE ('S'),
  TO_UNICODE ('E'),
  TO_UNICODE (0)
} ;

//--- Unicode string for '$COMUSEGETSERVICEID$'
static const utf32 kUnicodeString_COMUSEGETSERVICEID [] = {
  TO_UNICODE ('C'),
  TO_UNICODE ('O'),
  TO_UNICODE ('M'),
  TO_UNICODE ('U'),
  TO_UNICODE ('S'),
  TO_UNICODE ('E'),
  TO_UNICODE ('G'),
  TO_UNICODE ('E'),
  TO_UNICODE ('T'),
  TO_UNICODE ('S'),
  TO_UNICODE ('E'),
  TO_UNICODE ('R'),
  TO_UNICODE ('V'),
  TO_UNICODE ('I'),
  TO_UNICODE ('C'),
  TO_UNICODE ('E'),
  TO_UNICODE ('I'),
  TO_UNICODE ('D'),
  TO_UNICODE (0)
} ;

//--- Unicode string for '$COMUSEPARAMETERACCESS$'
static const utf32 kUnicodeString_COMUSEPARAMETERACCESS [] = {
  TO_UNICODE ('C'),
  TO_UNICODE ('O'),
  TO_UNICODE ('M'),
  TO_UNICODE ('U'),
  TO_UNICODE ('S'),
  TO_UNICODE ('E'),
  TO_UNICODE ('P'),
  TO_UNICODE ('A'),
  TO_UNICODE ('R'),
  TO_UNICODE ('A'),
  TO_UNICODE ('M'),
  TO_UNICODE ('E'),
  TO_UNICODE ('T'),
  TO_UNICODE ('E'),
  TO_UNICODE ('R'),
  TO_UNICODE ('A'),
  TO_UNICODE ('C'),
  TO_UNICODE ('C'),
  TO_UNICODE ('E'),
  TO_UNICODE ('S'),
  TO_UNICODE ('S'),
  TO_UNICODE (0)
} ;

//--- Unicode string for '$COM_5F_TYPE$'
static const utf32 kUnicodeString_COM_5F_TYPE [] = {
  TO_UNICODE ('C'),
  TO_UNICODE ('O'),
  TO_UNICODE ('M'),
  TO_UNICODE ('_'),
  TO_UNICODE ('T'),
  TO_UNICODE ('Y'),
  TO_UNICODE ('P'),
  TO_UNICODE ('E'),
  TO_UNICODE (0)
} ;

//--- Unicode string for '$CONSTNAME$'
static const utf32 kUnicodeString_CONSTNAME [] = {
  TO_UNICODE ('C'),
  TO_UNICODE ('O'),
  TO_UNICODE ('N'),
  TO_UNICODE ('S'),
  TO_UNICODE ('T'),
  TO_UNICODE ('N'),
  TO_UNICODE ('A'),
  TO_UNICODE ('M'),
  TO_UNICODE ('E'),
  TO_UNICODE (0)
} ;

//--- Unicode string for '$COUNTER$'
static const utf32 kUnicodeString_COUNTER [] = {
  TO_UNICODE ('C'),
  TO_UNICODE ('O'),
  TO_UNICODE ('U'),
  TO_UNICODE ('N'),
  TO_UNICODE ('T'),
  TO_UNICODE ('E'),
  TO_UNICODE ('R'),
  TO_UNICODE (0)
} ;

//--- Unicode string for '$COUNTER_5F_TYPE$'
static const utf32 kUnicodeString_COUNTER_5F_TYPE [] = {
  TO_UNICODE ('C'),
  TO_UNICODE ('O'),
  TO_UNICODE ('U'),
  TO_UNICODE ('N'),
  TO_UNICODE ('T'),
  TO_UNICODE ('E'),
  TO_UNICODE ('R'),
  TO_UNICODE ('_'),
  TO_UNICODE ('T'),
  TO_UNICODE ('Y'),
  TO_UNICODE ('P'),
  TO_UNICODE ('E'),
  TO_UNICODE (0)
} ;

//--- Unicode string for '$CPPFLAGS$'
static const utf32 kUnicodeString_CPPFLAGS [] = {
  TO_UNICODE ('C'),
  TO_UNICODE ('P'),
  TO_UNICODE ('P'),
  TO_UNICODE ('F'),
  TO_UNICODE ('L'),
  TO_UNICODE ('A'),
  TO_UNICODE ('G'),
  TO_UNICODE ('S'),
  TO_UNICODE (0)
} ;

//--- Unicode string for '$CPU$'
static const utf32 kUnicodeString_CPU [] = {
  TO_UNICODE ('C'),
  TO_UNICODE ('P'),
  TO_UNICODE ('U'),
  TO_UNICODE (0)
} ;

//--- Unicode string for '$CPUORDERCALLOUT$'
static const utf32 kUnicodeString_CPUORDERCALLOUT [] = {
  TO_UNICODE ('C'),
  TO_UNICODE ('P'),
  TO_UNICODE ('U'),
  TO_UNICODE ('O'),
  TO_UNICODE ('R'),
  TO_UNICODE ('D'),
  TO_UNICODE ('E'),
  TO_UNICODE ('R'),
  TO_UNICODE ('C'),
  TO_UNICODE ('A'),
  TO_UNICODE ('L'),
  TO_UNICODE ('L'),
  TO_UNICODE ('O'),
  TO_UNICODE ('U'),
  TO_UNICODE ('T'),
  TO_UNICODE (0)
} ;

//--- Unicode string for '$CYCLETIME$'
static const utf32 kUnicodeString_CYCLETIME [] = {
  TO_UNICODE ('C'),
  TO_UNICODE ('Y'),
  TO_UNICODE ('C'),
  TO_UNICODE ('L'),
  TO_UNICODE ('E'),
  TO_UNICODE ('T'),
  TO_UNICODE ('I'),
  TO_UNICODE ('M'),
  TO_UNICODE ('E'),
  TO_UNICODE (0)
} ;

//--- Unicode string for '$DATAINTERPRETATION$'
static const utf32 kUnicodeString_DATAINTERPRETATION [] = {
  TO_UNICODE ('D'),
  TO_UNICODE ('A'),
  TO_UNICODE ('T'),
  TO_UNICODE ('A'),
  TO_UNICODE ('I'),
  TO_UNICODE ('N'),
  TO_UNICODE ('T'),
  TO_UNICODE ('E'),
  TO_UNICODE ('R'),
  TO_UNICODE ('P'),
  TO_UNICODE ('R'),
  TO_UNICODE ('E'),
  TO_UNICODE ('T'),
  TO_UNICODE ('A'),
  TO_UNICODE ('T'),
  TO_UNICODE ('I'),
  TO_UNICODE ('O'),
  TO_UNICODE ('N'),
  TO_UNICODE (0)
} ;

//--- Unicode string for '$DEBUG$'
static const utf32 kUnicodeString_DEBUG [] = {
  TO_UNICODE ('D'),
  TO_UNICODE ('E'),
  TO_UNICODE ('B'),
  TO_UNICODE ('U'),
  TO_UNICODE ('G'),
  TO_UNICODE (0)
} ;

//--- Unicode string for '$DESCRIPTION$'
static const utf32 kUnicodeString_DESCRIPTION [] = {
  TO_UNICODE ('D'),
  TO_UNICODE ('E'),
  TO_UNICODE ('S'),
  TO_UNICODE ('C'),
  TO_UNICODE ('R'),
  TO_UNICODE ('I'),
  TO_UNICODE ('P'),
  TO_UNICODE ('T'),
  TO_UNICODE ('I'),
  TO_UNICODE ('O'),
  TO_UNICODE ('N'),
  TO_UNICODE (0)
} ;

//--- Unicode string for '$DIRECT$'
static const utf32 kUnicodeString_DIRECT [] = {
  TO_UNICODE ('D'),
  TO_UNICODE ('I'),
  TO_UNICODE ('R'),
  TO_UNICODE ('E'),
  TO_UNICODE ('C'),
  TO_UNICODE ('T'),
  TO_UNICODE (0)
} ;

//--- Unicode string for '$DIRECTION$'
static const utf32 kUnicodeString_DIRECTION [] = {
  TO_UNICODE ('D'),
  TO_UNICODE ('I'),
  TO_UNICODE ('R'),
  TO_UNICODE ('E'),
  TO_UNICODE ('C'),
  TO_UNICODE ('T'),
  TO_UNICODE ('I'),
  TO_UNICODE ('O'),
  TO_UNICODE ('N'),
  TO_UNICODE (0)
} ;

//--- Unicode string for '$DRIVER$'
static const utf32 kUnicodeString_DRIVER [] = {
  TO_UNICODE ('D'),
  TO_UNICODE ('R'),
  TO_UNICODE ('I'),
  TO_UNICODE ('V'),
  TO_UNICODE ('E'),
  TO_UNICODE ('R'),
  TO_UNICODE (0)
} ;

//--- Unicode string for '$DYNAMIC$'
static const utf32 kUnicodeString_DYNAMIC [] = {
  TO_UNICODE ('D'),
  TO_UNICODE ('Y'),
  TO_UNICODE ('N'),
  TO_UNICODE ('A'),
  TO_UNICODE ('M'),
  TO_UNICODE ('I'),
  TO_UNICODE ('C'),
  TO_UNICODE (0)
} ;

//--- Unicode string for '$ENUM$'
static const utf32 kUnicodeString_ENUM [] = {
  TO_UNICODE ('E'),
  TO_UNICODE ('N'),
  TO_UNICODE ('U'),
  TO_UNICODE ('M'),
  TO_UNICODE (0)
} ;

//--- Unicode string for '$ERRORHOOK$'
static const utf32 kUnicodeString_ERRORHOOK [] = {
  TO_UNICODE ('E'),
  TO_UNICODE ('R'),
  TO_UNICODE ('R'),
  TO_UNICODE ('O'),
  TO_UNICODE ('R'),
  TO_UNICODE ('H'),
  TO_UNICODE ('O'),
  TO_UNICODE ('O'),
  TO_UNICODE ('K'),
  TO_UNICODE (0)
} ;

//--- Unicode string for '$EVENT$'
static const utf32 kUnicodeString_EVENT [] = {
  TO_UNICODE ('E'),
  TO_UNICODE ('V'),
  TO_UNICODE ('E'),
  TO_UNICODE ('N'),
  TO_UNICODE ('T'),
  TO_UNICODE (0)
} ;

//--- Unicode string for '$EVENT_5F_TYPE$'
static const utf32 kUnicodeString_EVENT_5F_TYPE [] = {
  TO_UNICODE ('E'),
  TO_UNICODE ('V'),
  TO_UNICODE ('E'),
  TO_UNICODE ('N'),
  TO_UNICODE ('T'),
  TO_UNICODE ('_'),
  TO_UNICODE ('T'),
  TO_UNICODE ('Y'),
  TO_UNICODE ('P'),
  TO_UNICODE ('E'),
  TO_UNICODE (0)
} ;

//--- Unicode string for '$EXECUTIONBUDGET$'
static const utf32 kUnicodeString_EXECUTIONBUDGET [] = {
  TO_UNICODE ('E'),
  TO_UNICODE ('X'),
  TO_UNICODE ('E'),
  TO_UNICODE ('C'),
  TO_UNICODE ('U'),
  TO_UNICODE ('T'),
  TO_UNICODE ('I'),
  TO_UNICODE ('O'),
  TO_UNICODE ('N'),
  TO_UNICODE ('B'),
  TO_UNICODE ('U'),
  TO_UNICODE ('D'),
  TO_UNICODE ('G'),
  TO_UNICODE ('E'),
  TO_UNICODE ('T'),
  TO_UNICODE (0)
} ;

//--- Unicode string for '$EXECUTIONTIME$'
static const utf32 kUnicodeString_EXECUTIONTIME [] = {
  TO_UNICODE ('E'),
  TO_UNICODE ('X'),
  TO_UNICODE ('E'),
  TO_UNICODE ('C'),
  TO_UNICODE ('U'),
  TO_UNICODE ('T'),
  TO_UNICODE ('I'),
  TO_UNICODE ('O'),
  TO_UNICODE ('N'),
  TO_UNICODE ('T'),
  TO_UNICODE ('I'),
  TO_UNICODE ('M'),
  TO_UNICODE ('E'),
  TO_UNICODE (0)
} ;

//--- Unicode string for '$EXPIRY_5F_POINT$'
static const utf32 kUnicodeString_EXPIRY_5F_POINT [] = {
  TO_UNICODE ('E'),
  TO_UNICODE ('X'),
  TO_UNICODE ('P'),
  TO_UNICODE ('I'),
  TO_UNICODE ('R'),
  TO_UNICODE ('Y'),
  TO_UNICODE ('_'),
  TO_UNICODE ('P'),
  TO_UNICODE ('O'),
  TO_UNICODE ('I'),
  TO_UNICODE ('N'),
  TO_UNICODE ('T'),
  TO_UNICODE (0)
} ;

//--- Unicode string for '$EXTENDED$'
static const utf32 kUnicodeString_EXTENDED [] = {
  TO_UNICODE ('E'),
  TO_UNICODE ('X'),
  TO_UNICODE ('T'),
  TO_UNICODE ('E'),
  TO_UNICODE ('N'),
  TO_UNICODE ('D'),
  TO_UNICODE ('E'),
  TO_UNICODE ('D'),
  TO_UNICODE (0)
} ;

//--- Unicode string for '$FALSE$'
static const utf32 kUnicodeString_FALSE [] = {
  TO_UNICODE ('F'),
  TO_UNICODE ('A'),
  TO_UNICODE ('L'),
  TO_UNICODE ('S'),
  TO_UNICODE ('E'),
  TO_UNICODE (0)
} ;

//--- Unicode string for '$FILE$'
static const utf32 kUnicodeString_FILE [] = {
  TO_UNICODE ('F'),
  TO_UNICODE ('I'),
  TO_UNICODE ('L'),
  TO_UNICODE ('E'),
  TO_UNICODE (0)
} ;

//--- Unicode string for '$FILTER$'
static const utf32 kUnicodeString_FILTER [] = {
  TO_UNICODE ('F'),
  TO_UNICODE ('I'),
  TO_UNICODE ('L'),
  TO_UNICODE ('T'),
  TO_UNICODE ('E'),
  TO_UNICODE ('R'),
  TO_UNICODE (0)
} ;

//--- Unicode string for '$FIRTSTIMEOUT$'
static const utf32 kUnicodeString_FIRTSTIMEOUT [] = {
  TO_UNICODE ('F'),
  TO_UNICODE ('I'),
  TO_UNICODE ('R'),
  TO_UNICODE ('T'),
  TO_UNICODE ('S'),
  TO_UNICODE ('T'),
  TO_UNICODE ('I'),
  TO_UNICODE ('M'),
  TO_UNICODE ('E'),
  TO_UNICODE ('O'),
  TO_UNICODE ('U'),
  TO_UNICODE ('T'),
  TO_UNICODE (0)
} ;

//--- Unicode string for '$FLAG$'
static const utf32 kUnicodeString_FLAG [] = {
  TO_UNICODE ('F'),
  TO_UNICODE ('L'),
  TO_UNICODE ('A'),
  TO_UNICODE ('G'),
  TO_UNICODE (0)
} ;

//--- Unicode string for '$FLAGNAME$'
static const utf32 kUnicodeString_FLAGNAME [] = {
  TO_UNICODE ('F'),
  TO_UNICODE ('L'),
  TO_UNICODE ('A'),
  TO_UNICODE ('G'),
  TO_UNICODE ('N'),
  TO_UNICODE ('A'),
  TO_UNICODE ('M'),
  TO_UNICODE ('E'),
  TO_UNICODE (0)
} ;

//--- Unicode string for '$FLOAT$'
static const utf32 kUnicodeString_FLOAT [] = {
  TO_UNICODE ('F'),
  TO_UNICODE ('L'),
  TO_UNICODE ('O'),
  TO_UNICODE ('A'),
  TO_UNICODE ('T'),
  TO_UNICODE (0)
} ;

//--- Unicode string for '$FORMAT$'
static const utf32 kUnicodeString_FORMAT [] = {
  TO_UNICODE ('F'),
  TO_UNICODE ('O'),
  TO_UNICODE ('R'),
  TO_UNICODE ('M'),
  TO_UNICODE ('A'),
  TO_UNICODE ('T'),
  TO_UNICODE (0)
} ;

//--- Unicode string for '$FULL$'
static const utf32 kUnicodeString_FULL [] = {
  TO_UNICODE ('F'),
  TO_UNICODE ('U'),
  TO_UNICODE ('L'),
  TO_UNICODE ('L'),
  TO_UNICODE (0)
} ;

//--- Unicode string for '$GPT$'
static const utf32 kUnicodeString_GPT [] = {
  TO_UNICODE ('G'),
  TO_UNICODE ('P'),
  TO_UNICODE ('T'),
  TO_UNICODE (0)
} ;

//--- Unicode string for '$GPTCHANNELNAME$'
static const utf32 kUnicodeString_GPTCHANNELNAME [] = {
  TO_UNICODE ('G'),
  TO_UNICODE ('P'),
  TO_UNICODE ('T'),
  TO_UNICODE ('C'),
  TO_UNICODE ('H'),
  TO_UNICODE ('A'),
  TO_UNICODE ('N'),
  TO_UNICODE ('N'),
  TO_UNICODE ('E'),
  TO_UNICODE ('L'),
  TO_UNICODE ('N'),
  TO_UNICODE ('A'),
  TO_UNICODE ('M'),
  TO_UNICODE ('E'),
  TO_UNICODE (0)
} ;

//--- Unicode string for '$HARD$'
static const utf32 kUnicodeString_HARD [] = {
  TO_UNICODE ('H'),
  TO_UNICODE ('A'),
  TO_UNICODE ('R'),
  TO_UNICODE ('D'),
  TO_UNICODE (0)
} ;

//--- Unicode string for '$HARDWARE$'
static const utf32 kUnicodeString_HARDWARE [] = {
  TO_UNICODE ('H'),
  TO_UNICODE ('A'),
  TO_UNICODE ('R'),
  TO_UNICODE ('D'),
  TO_UNICODE ('W'),
  TO_UNICODE ('A'),
  TO_UNICODE ('R'),
  TO_UNICODE ('E'),
  TO_UNICODE (0)
} ;

//--- Unicode string for '$HAS_5F_RESTARTTASK$'
static const utf32 kUnicodeString_HAS_5F_RESTARTTASK [] = {
  TO_UNICODE ('H'),
  TO_UNICODE ('A'),
  TO_UNICODE ('S'),
  TO_UNICODE ('_'),
  TO_UNICODE ('R'),
  TO_UNICODE ('E'),
  TO_UNICODE ('S'),
  TO_UNICODE ('T'),
  TO_UNICODE ('A'),
  TO_UNICODE ('R'),
  TO_UNICODE ('T'),
  TO_UNICODE ('T'),
  TO_UNICODE ('A'),
  TO_UNICODE ('S'),
  TO_UNICODE ('K'),
  TO_UNICODE (0)
} ;

//--- Unicode string for '$IMPLEMENTATION$'
static const utf32 kUnicodeString_IMPLEMENTATION [] = {
  TO_UNICODE ('I'),
  TO_UNICODE ('M'),
  TO_UNICODE ('P'),
  TO_UNICODE ('L'),
  TO_UNICODE ('E'),
  TO_UNICODE ('M'),
  TO_UNICODE ('E'),
  TO_UNICODE ('N'),
  TO_UNICODE ('T'),
  TO_UNICODE ('A'),
  TO_UNICODE ('T'),
  TO_UNICODE ('I'),
  TO_UNICODE ('O'),
  TO_UNICODE ('N'),
  TO_UNICODE (0)
} ;

//--- Unicode string for '$INCREMENTCOUNTER$'
static const utf32 kUnicodeString_INCREMENTCOUNTER [] = {
  TO_UNICODE ('I'),
  TO_UNICODE ('N'),
  TO_UNICODE ('C'),
  TO_UNICODE ('R'),
  TO_UNICODE ('E'),
  TO_UNICODE ('M'),
  TO_UNICODE ('E'),
  TO_UNICODE ('N'),
  TO_UNICODE ('T'),
  TO_UNICODE ('C'),
  TO_UNICODE ('O'),
  TO_UNICODE ('U'),
  TO_UNICODE ('N'),
  TO_UNICODE ('T'),
  TO_UNICODE ('E'),
  TO_UNICODE ('R'),
  TO_UNICODE (0)
} ;

//--- Unicode string for '$INITIALVALUE$'
static const utf32 kUnicodeString_INITIALVALUE [] = {
  TO_UNICODE ('I'),
  TO_UNICODE ('N'),
  TO_UNICODE ('I'),
  TO_UNICODE ('T'),
  TO_UNICODE ('I'),
  TO_UNICODE ('A'),
  TO_UNICODE ('L'),
  TO_UNICODE ('V'),
  TO_UNICODE ('A'),
  TO_UNICODE ('L'),
  TO_UNICODE ('U'),
  TO_UNICODE ('E'),
  TO_UNICODE (0)
} ;

//--- Unicode string for '$INMCALLBACK$'
static const utf32 kUnicodeString_INMCALLBACK [] = {
  TO_UNICODE ('I'),
  TO_UNICODE ('N'),
  TO_UNICODE ('M'),
  TO_UNICODE ('C'),
  TO_UNICODE ('A'),
  TO_UNICODE ('L'),
  TO_UNICODE ('L'),
  TO_UNICODE ('B'),
  TO_UNICODE ('A'),
  TO_UNICODE ('C'),
  TO_UNICODE ('K'),
  TO_UNICODE (0)
} ;

//--- Unicode string for '$INT_33__32_$'
static const utf32 kUnicodeString_INT_33__32_ [] = {
  TO_UNICODE ('I'),
  TO_UNICODE ('N'),
  TO_UNICODE ('T'),
  TO_UNICODE ('3'),
  TO_UNICODE ('2'),
  TO_UNICODE (0)
} ;

//--- Unicode string for '$INT_36__34_$'
static const utf32 kUnicodeString_INT_36__34_ [] = {
  TO_UNICODE ('I'),
  TO_UNICODE ('N'),
  TO_UNICODE ('T'),
  TO_UNICODE ('6'),
  TO_UNICODE ('4'),
  TO_UNICODE (0)
} ;

//--- Unicode string for '$INTERNAL$'
static const utf32 kUnicodeString_INTERNAL [] = {
  TO_UNICODE ('I'),
  TO_UNICODE ('N'),
  TO_UNICODE ('T'),
  TO_UNICODE ('E'),
  TO_UNICODE ('R'),
  TO_UNICODE ('N'),
  TO_UNICODE ('A'),
  TO_UNICODE ('L'),
  TO_UNICODE (0)
} ;

//--- Unicode string for '$IPDU$'
static const utf32 kUnicodeString_IPDU [] = {
  TO_UNICODE ('I'),
  TO_UNICODE ('P'),
  TO_UNICODE ('D'),
  TO_UNICODE ('U'),
  TO_UNICODE (0)
} ;

//--- Unicode string for '$IPDUCALLOUT$'
static const utf32 kUnicodeString_IPDUCALLOUT [] = {
  TO_UNICODE ('I'),
  TO_UNICODE ('P'),
  TO_UNICODE ('D'),
  TO_UNICODE ('U'),
  TO_UNICODE ('C'),
  TO_UNICODE ('A'),
  TO_UNICODE ('L'),
  TO_UNICODE ('L'),
  TO_UNICODE ('O'),
  TO_UNICODE ('U'),
  TO_UNICODE ('T'),
  TO_UNICODE (0)
} ;

//--- Unicode string for '$IPDUPROPERTY$'
static const utf32 kUnicodeString_IPDUPROPERTY [] = {
  TO_UNICODE ('I'),
  TO_UNICODE ('P'),
  TO_UNICODE ('D'),
  TO_UNICODE ('U'),
  TO_UNICODE ('P'),
  TO_UNICODE ('R'),
  TO_UNICODE ('O'),
  TO_UNICODE ('P'),
  TO_UNICODE ('E'),
  TO_UNICODE ('R'),
  TO_UNICODE ('T'),
  TO_UNICODE ('Y'),
  TO_UNICODE (0)
} ;

//--- Unicode string for '$IPDU_5F_TYPE$'
static const utf32 kUnicodeString_IPDU_5F_TYPE [] = {
  TO_UNICODE ('I'),
  TO_UNICODE ('P'),
  TO_UNICODE ('D'),
  TO_UNICODE ('U'),
  TO_UNICODE ('_'),
  TO_UNICODE ('T'),
  TO_UNICODE ('Y'),
  TO_UNICODE ('P'),
  TO_UNICODE ('E'),
  TO_UNICODE (0)
} ;

//--- Unicode string for '$ISR$'
static const utf32 kUnicodeString_ISR [] = {
  TO_UNICODE ('I'),
  TO_UNICODE ('S'),
  TO_UNICODE ('R'),
  TO_UNICODE (0)
} ;

//--- Unicode string for '$ISR_5F_TYPE$'
static const utf32 kUnicodeString_ISR_5F_TYPE [] = {
  TO_UNICODE ('I'),
  TO_UNICODE ('S'),
  TO_UNICODE ('R'),
  TO_UNICODE ('_'),
  TO_UNICODE ('T'),
  TO_UNICODE ('Y'),
  TO_UNICODE ('P'),
  TO_UNICODE ('E'),
  TO_UNICODE (0)
} ;

//--- Unicode string for '$LAYERUSED$'
static const utf32 kUnicodeString_LAYERUSED [] = {
  TO_UNICODE ('L'),
  TO_UNICODE ('A'),
  TO_UNICODE ('Y'),
  TO_UNICODE ('E'),
  TO_UNICODE ('R'),
  TO_UNICODE ('U'),
  TO_UNICODE ('S'),
  TO_UNICODE ('E'),
  TO_UNICODE ('D'),
  TO_UNICODE (0)
} ;

//--- Unicode string for '$LDFLAGS$'
static const utf32 kUnicodeString_LDFLAGS [] = {
  TO_UNICODE ('L'),
  TO_UNICODE ('D'),
  TO_UNICODE ('F'),
  TO_UNICODE ('L'),
  TO_UNICODE ('A'),
  TO_UNICODE ('G'),
  TO_UNICODE ('S'),
  TO_UNICODE (0)
} ;

//--- Unicode string for '$LENGTH$'
static const utf32 kUnicodeString_LENGTH [] = {
  TO_UNICODE ('L'),
  TO_UNICODE ('E'),
  TO_UNICODE ('N'),
  TO_UNICODE ('G'),
  TO_UNICODE ('T'),
  TO_UNICODE ('H'),
  TO_UNICODE (0)
} ;

//--- Unicode string for '$LINK$'
static const utf32 kUnicodeString_LINK [] = {
  TO_UNICODE ('L'),
  TO_UNICODE ('I'),
  TO_UNICODE ('N'),
  TO_UNICODE ('K'),
  TO_UNICODE (0)
} ;

//--- Unicode string for '$LINKED$'
static const utf32 kUnicodeString_LINKED [] = {
  TO_UNICODE ('L'),
  TO_UNICODE ('I'),
  TO_UNICODE ('N'),
  TO_UNICODE ('K'),
  TO_UNICODE ('E'),
  TO_UNICODE ('D'),
  TO_UNICODE (0)
} ;

//--- Unicode string for '$LINKEDRESOURCE$'
static const utf32 kUnicodeString_LINKEDRESOURCE [] = {
  TO_UNICODE ('L'),
  TO_UNICODE ('I'),
  TO_UNICODE ('N'),
  TO_UNICODE ('K'),
  TO_UNICODE ('E'),
  TO_UNICODE ('D'),
  TO_UNICODE ('R'),
  TO_UNICODE ('E'),
  TO_UNICODE ('S'),
  TO_UNICODE ('O'),
  TO_UNICODE ('U'),
  TO_UNICODE ('R'),
  TO_UNICODE ('C'),
  TO_UNICODE ('E'),
  TO_UNICODE (0)
} ;

//--- Unicode string for '$LINKER$'
static const utf32 kUnicodeString_LINKER [] = {
  TO_UNICODE ('L'),
  TO_UNICODE ('I'),
  TO_UNICODE ('N'),
  TO_UNICODE ('K'),
  TO_UNICODE ('E'),
  TO_UNICODE ('R'),
  TO_UNICODE (0)
} ;

//--- Unicode string for '$LITTLEENDIAN$'
static const utf32 kUnicodeString_LITTLEENDIAN [] = {
  TO_UNICODE ('L'),
  TO_UNICODE ('I'),
  TO_UNICODE ('T'),
  TO_UNICODE ('T'),
  TO_UNICODE ('L'),
  TO_UNICODE ('E'),
  TO_UNICODE ('E'),
  TO_UNICODE ('N'),
  TO_UNICODE ('D'),
  TO_UNICODE ('I'),
  TO_UNICODE ('A'),
  TO_UNICODE ('N'),
  TO_UNICODE (0)
} ;

//--- Unicode string for '$LOCAL_5F_TO_5F_GLOBAL_5F_TIME_5F_SYNCHRONIZATION$'
static const utf32 kUnicodeString_LOCAL_5F_TO_5F_GLOBAL_5F_TIME_5F_SYNCHRONIZATION [] = {
  TO_UNICODE ('L'),
  TO_UNICODE ('O'),
  TO_UNICODE ('C'),
  TO_UNICODE ('A'),
  TO_UNICODE ('L'),
  TO_UNICODE ('_'),
  TO_UNICODE ('T'),
  TO_UNICODE ('O'),
  TO_UNICODE ('_'),
  TO_UNICODE ('G'),
  TO_UNICODE ('L'),
  TO_UNICODE ('O'),
  TO_UNICODE ('B'),
  TO_UNICODE ('A'),
  TO_UNICODE ('L'),
  TO_UNICODE ('_'),
  TO_UNICODE ('T'),
  TO_UNICODE ('I'),
  TO_UNICODE ('M'),
  TO_UNICODE ('E'),
  TO_UNICODE ('_'),
  TO_UNICODE ('S'),
  TO_UNICODE ('Y'),
  TO_UNICODE ('N'),
  TO_UNICODE ('C'),
  TO_UNICODE ('H'),
  TO_UNICODE ('R'),
  TO_UNICODE ('O'),
  TO_UNICODE ('N'),
  TO_UNICODE ('I'),
  TO_UNICODE ('Z'),
  TO_UNICODE ('A'),
  TO_UNICODE ('T'),
  TO_UNICODE ('I'),
  TO_UNICODE ('O'),
  TO_UNICODE ('N'),
  TO_UNICODE (0)
} ;

//--- Unicode string for '$LOCKINGTIME$'
static const utf32 kUnicodeString_LOCKINGTIME [] = {
  TO_UNICODE ('L'),
  TO_UNICODE ('O'),
  TO_UNICODE ('C'),
  TO_UNICODE ('K'),
  TO_UNICODE ('I'),
  TO_UNICODE ('N'),
  TO_UNICODE ('G'),
  TO_UNICODE ('T'),
  TO_UNICODE ('I'),
  TO_UNICODE ('M'),
  TO_UNICODE ('E'),
  TO_UNICODE (0)
} ;

//--- Unicode string for '$MASK$'
static const utf32 kUnicodeString_MASK [] = {
  TO_UNICODE ('M'),
  TO_UNICODE ('A'),
  TO_UNICODE ('S'),
  TO_UNICODE ('K'),
  TO_UNICODE (0)
} ;

//--- Unicode string for '$MASKEDNEWDIFFERSMASKEDOLD$'
static const utf32 kUnicodeString_MASKEDNEWDIFFERSMASKEDOLD [] = {
  TO_UNICODE ('M'),
  TO_UNICODE ('A'),
  TO_UNICODE ('S'),
  TO_UNICODE ('K'),
  TO_UNICODE ('E'),
  TO_UNICODE ('D'),
  TO_UNICODE ('N'),
  TO_UNICODE ('E'),
  TO_UNICODE ('W'),
  TO_UNICODE ('D'),
  TO_UNICODE ('I'),
  TO_UNICODE ('F'),
  TO_UNICODE ('F'),
  TO_UNICODE ('E'),
  TO_UNICODE ('R'),
  TO_UNICODE ('S'),
  TO_UNICODE ('M'),
  TO_UNICODE ('A'),
  TO_UNICODE ('S'),
  TO_UNICODE ('K'),
  TO_UNICODE ('E'),
  TO_UNICODE ('D'),
  TO_UNICODE ('O'),
  TO_UNICODE ('L'),
  TO_UNICODE ('D'),
  TO_UNICODE (0)
} ;

//--- Unicode string for '$MASKEDNEWDIFFERSX$'
static const utf32 kUnicodeString_MASKEDNEWDIFFERSX [] = {
  TO_UNICODE ('M'),
  TO_UNICODE ('A'),
  TO_UNICODE ('S'),
  TO_UNICODE ('K'),
  TO_UNICODE ('E'),
  TO_UNICODE ('D'),
  TO_UNICODE ('N'),
  TO_UNICODE ('E'),
  TO_UNICODE ('W'),
  TO_UNICODE ('D'),
  TO_UNICODE ('I'),
  TO_UNICODE ('F'),
  TO_UNICODE ('F'),
  TO_UNICODE ('E'),
  TO_UNICODE ('R'),
  TO_UNICODE ('S'),
  TO_UNICODE ('X'),
  TO_UNICODE (0)
} ;

//--- Unicode string for '$MASKEDNEWEQUALSMASKEDOLD$'
static const utf32 kUnicodeString_MASKEDNEWEQUALSMASKEDOLD [] = {
  TO_UNICODE ('M'),
  TO_UNICODE ('A'),
  TO_UNICODE ('S'),
  TO_UNICODE ('K'),
  TO_UNICODE ('E'),
  TO_UNICODE ('D'),
  TO_UNICODE ('N'),
  TO_UNICODE ('E'),
  TO_UNICODE ('W'),
  TO_UNICODE ('E'),
  TO_UNICODE ('Q'),
  TO_UNICODE ('U'),
  TO_UNICODE ('A'),
  TO_UNICODE ('L'),
  TO_UNICODE ('S'),
  TO_UNICODE ('M'),
  TO_UNICODE ('A'),
  TO_UNICODE ('S'),
  TO_UNICODE ('K'),
  TO_UNICODE ('E'),
  TO_UNICODE ('D'),
  TO_UNICODE ('O'),
  TO_UNICODE ('L'),
  TO_UNICODE ('D'),
  TO_UNICODE (0)
} ;

//--- Unicode string for '$MASKEDNEWEQUALSX$'
static const utf32 kUnicodeString_MASKEDNEWEQUALSX [] = {
  TO_UNICODE ('M'),
  TO_UNICODE ('A'),
  TO_UNICODE ('S'),
  TO_UNICODE ('K'),
  TO_UNICODE ('E'),
  TO_UNICODE ('D'),
  TO_UNICODE ('N'),
  TO_UNICODE ('E'),
  TO_UNICODE ('W'),
  TO_UNICODE ('E'),
  TO_UNICODE ('Q'),
  TO_UNICODE ('U'),
  TO_UNICODE ('A'),
  TO_UNICODE ('L'),
  TO_UNICODE ('S'),
  TO_UNICODE ('X'),
  TO_UNICODE (0)
} ;

//--- Unicode string for '$MAX$'
static const utf32 kUnicodeString_MAX [] = {
  TO_UNICODE ('M'),
  TO_UNICODE ('A'),
  TO_UNICODE ('X'),
  TO_UNICODE (0)
} ;

//--- Unicode string for '$MAXALLINTERRUPTLOCKTIME$'
static const utf32 kUnicodeString_MAXALLINTERRUPTLOCKTIME [] = {
  TO_UNICODE ('M'),
  TO_UNICODE ('A'),
  TO_UNICODE ('X'),
  TO_UNICODE ('A'),
  TO_UNICODE ('L'),
  TO_UNICODE ('L'),
  TO_UNICODE ('I'),
  TO_UNICODE ('N'),
  TO_UNICODE ('T'),
  TO_UNICODE ('E'),
  TO_UNICODE ('R'),
  TO_UNICODE ('R'),
  TO_UNICODE ('U'),
  TO_UNICODE ('P'),
  TO_UNICODE ('T'),
  TO_UNICODE ('L'),
  TO_UNICODE ('O'),
  TO_UNICODE ('C'),
  TO_UNICODE ('K'),
  TO_UNICODE ('T'),
  TO_UNICODE ('I'),
  TO_UNICODE ('M'),
  TO_UNICODE ('E'),
  TO_UNICODE (0)
} ;

//--- Unicode string for '$MAXALLOWEDVALUE$'
static const utf32 kUnicodeString_MAXALLOWEDVALUE [] = {
  TO_UNICODE ('M'),
  TO_UNICODE ('A'),
  TO_UNICODE ('X'),
  TO_UNICODE ('A'),
  TO_UNICODE ('L'),
  TO_UNICODE ('L'),
  TO_UNICODE ('O'),
  TO_UNICODE ('W'),
  TO_UNICODE ('E'),
  TO_UNICODE ('D'),
  TO_UNICODE ('V'),
  TO_UNICODE ('A'),
  TO_UNICODE ('L'),
  TO_UNICODE ('U'),
  TO_UNICODE ('E'),
  TO_UNICODE (0)
} ;

//--- Unicode string for '$MAXOSINTERRUPTLOCKTIME$'
static const utf32 kUnicodeString_MAXOSINTERRUPTLOCKTIME [] = {
  TO_UNICODE ('M'),
  TO_UNICODE ('A'),
  TO_UNICODE ('X'),
  TO_UNICODE ('O'),
  TO_UNICODE ('S'),
  TO_UNICODE ('I'),
  TO_UNICODE ('N'),
  TO_UNICODE ('T'),
  TO_UNICODE ('E'),
  TO_UNICODE ('R'),
  TO_UNICODE ('R'),
  TO_UNICODE ('U'),
  TO_UNICODE ('P'),
  TO_UNICODE ('T'),
  TO_UNICODE ('L'),
  TO_UNICODE ('O'),
  TO_UNICODE ('C'),
  TO_UNICODE ('K'),
  TO_UNICODE ('T'),
  TO_UNICODE ('I'),
  TO_UNICODE ('M'),
  TO_UNICODE ('E'),
  TO_UNICODE (0)
} ;

//--- Unicode string for '$MAXRESOURCELOCKTIME$'
static const utf32 kUnicodeString_MAXRESOURCELOCKTIME [] = {
  TO_UNICODE ('M'),
  TO_UNICODE ('A'),
  TO_UNICODE ('X'),
  TO_UNICODE ('R'),
  TO_UNICODE ('E'),
  TO_UNICODE ('S'),
  TO_UNICODE ('O'),
  TO_UNICODE ('U'),
  TO_UNICODE ('R'),
  TO_UNICODE ('C'),
  TO_UNICODE ('E'),
  TO_UNICODE ('L'),
  TO_UNICODE ('O'),
  TO_UNICODE ('C'),
  TO_UNICODE ('K'),
  TO_UNICODE ('T'),
  TO_UNICODE ('I'),
  TO_UNICODE ('M'),
  TO_UNICODE ('E'),
  TO_UNICODE (0)
} ;

//--- Unicode string for '$MAXSIZEINBITS$'
static const utf32 kUnicodeString_MAXSIZEINBITS [] = {
  TO_UNICODE ('M'),
  TO_UNICODE ('A'),
  TO_UNICODE ('X'),
  TO_UNICODE ('S'),
  TO_UNICODE ('I'),
  TO_UNICODE ('Z'),
  TO_UNICODE ('E'),
  TO_UNICODE ('I'),
  TO_UNICODE ('N'),
  TO_UNICODE ('B'),
  TO_UNICODE ('I'),
  TO_UNICODE ('T'),
  TO_UNICODE ('S'),
  TO_UNICODE (0)
} ;

//--- Unicode string for '$MAX_5F_ADVANCE$'
static const utf32 kUnicodeString_MAX_5F_ADVANCE [] = {
  TO_UNICODE ('M'),
  TO_UNICODE ('A'),
  TO_UNICODE ('X'),
  TO_UNICODE ('_'),
  TO_UNICODE ('A'),
  TO_UNICODE ('D'),
  TO_UNICODE ('V'),
  TO_UNICODE ('A'),
  TO_UNICODE ('N'),
  TO_UNICODE ('C'),
  TO_UNICODE ('E'),
  TO_UNICODE (0)
} ;

//--- Unicode string for '$MAX_5F_DECREASE$'
static const utf32 kUnicodeString_MAX_5F_DECREASE [] = {
  TO_UNICODE ('M'),
  TO_UNICODE ('A'),
  TO_UNICODE ('X'),
  TO_UNICODE ('_'),
  TO_UNICODE ('D'),
  TO_UNICODE ('E'),
  TO_UNICODE ('C'),
  TO_UNICODE ('R'),
  TO_UNICODE ('E'),
  TO_UNICODE ('A'),
  TO_UNICODE ('S'),
  TO_UNICODE ('E'),
  TO_UNICODE (0)
} ;

//--- Unicode string for '$MAX_5F_DECREASE_5F_ASYNC$'
static const utf32 kUnicodeString_MAX_5F_DECREASE_5F_ASYNC [] = {
  TO_UNICODE ('M'),
  TO_UNICODE ('A'),
  TO_UNICODE ('X'),
  TO_UNICODE ('_'),
  TO_UNICODE ('D'),
  TO_UNICODE ('E'),
  TO_UNICODE ('C'),
  TO_UNICODE ('R'),
  TO_UNICODE ('E'),
  TO_UNICODE ('A'),
  TO_UNICODE ('S'),
  TO_UNICODE ('E'),
  TO_UNICODE ('_'),
  TO_UNICODE ('A'),
  TO_UNICODE ('S'),
  TO_UNICODE ('Y'),
  TO_UNICODE ('N'),
  TO_UNICODE ('C'),
  TO_UNICODE (0)
} ;

//--- Unicode string for '$MAX_5F_INCREASE$'
static const utf32 kUnicodeString_MAX_5F_INCREASE [] = {
  TO_UNICODE ('M'),
  TO_UNICODE ('A'),
  TO_UNICODE ('X'),
  TO_UNICODE ('_'),
  TO_UNICODE ('I'),
  TO_UNICODE ('N'),
  TO_UNICODE ('C'),
  TO_UNICODE ('R'),
  TO_UNICODE ('E'),
  TO_UNICODE ('A'),
  TO_UNICODE ('S'),
  TO_UNICODE ('E'),
  TO_UNICODE (0)
} ;

//--- Unicode string for '$MAX_5F_INCREASE_5F_ASYNC$'
static const utf32 kUnicodeString_MAX_5F_INCREASE_5F_ASYNC [] = {
  TO_UNICODE ('M'),
  TO_UNICODE ('A'),
  TO_UNICODE ('X'),
  TO_UNICODE ('_'),
  TO_UNICODE ('I'),
  TO_UNICODE ('N'),
  TO_UNICODE ('C'),
  TO_UNICODE ('R'),
  TO_UNICODE ('E'),
  TO_UNICODE ('A'),
  TO_UNICODE ('S'),
  TO_UNICODE ('E'),
  TO_UNICODE ('_'),
  TO_UNICODE ('A'),
  TO_UNICODE ('S'),
  TO_UNICODE ('Y'),
  TO_UNICODE ('N'),
  TO_UNICODE ('C'),
  TO_UNICODE (0)
} ;

//--- Unicode string for '$MAX_5F_RETARD$'
static const utf32 kUnicodeString_MAX_5F_RETARD [] = {
  TO_UNICODE ('M'),
  TO_UNICODE ('A'),
  TO_UNICODE ('X'),
  TO_UNICODE ('_'),
  TO_UNICODE ('R'),
  TO_UNICODE ('E'),
  TO_UNICODE ('T'),
  TO_UNICODE ('A'),
  TO_UNICODE ('R'),
  TO_UNICODE ('D'),
  TO_UNICODE (0)
} ;

//--- Unicode string for '$MEMMAP$'
static const utf32 kUnicodeString_MEMMAP [] = {
  TO_UNICODE ('M'),
  TO_UNICODE ('E'),
  TO_UNICODE ('M'),
  TO_UNICODE ('M'),
  TO_UNICODE ('A'),
  TO_UNICODE ('P'),
  TO_UNICODE (0)
} ;

//--- Unicode string for '$MEMORY_5F_PROTECTION$'
static const utf32 kUnicodeString_MEMORY_5F_PROTECTION [] = {
  TO_UNICODE ('M'),
  TO_UNICODE ('E'),
  TO_UNICODE ('M'),
  TO_UNICODE ('O'),
  TO_UNICODE ('R'),
  TO_UNICODE ('Y'),
  TO_UNICODE ('_'),
  TO_UNICODE ('P'),
  TO_UNICODE ('R'),
  TO_UNICODE ('O'),
  TO_UNICODE ('T'),
  TO_UNICODE ('E'),
  TO_UNICODE ('C'),
  TO_UNICODE ('T'),
  TO_UNICODE ('I'),
  TO_UNICODE ('O'),
  TO_UNICODE ('N'),
  TO_UNICODE (0)
} ;

//--- Unicode string for '$MESSAGE$'
static const utf32 kUnicodeString_MESSAGE [] = {
  TO_UNICODE ('M'),
  TO_UNICODE ('E'),
  TO_UNICODE ('S'),
  TO_UNICODE ('S'),
  TO_UNICODE ('A'),
  TO_UNICODE ('G'),
  TO_UNICODE ('E'),
  TO_UNICODE (0)
} ;

//--- Unicode string for '$MESSAGEPROPERTY$'
static const utf32 kUnicodeString_MESSAGEPROPERTY [] = {
  TO_UNICODE ('M'),
  TO_UNICODE ('E'),
  TO_UNICODE ('S'),
  TO_UNICODE ('S'),
  TO_UNICODE ('A'),
  TO_UNICODE ('G'),
  TO_UNICODE ('E'),
  TO_UNICODE ('P'),
  TO_UNICODE ('R'),
  TO_UNICODE ('O'),
  TO_UNICODE ('P'),
  TO_UNICODE ('E'),
  TO_UNICODE ('R'),
  TO_UNICODE ('T'),
  TO_UNICODE ('Y'),
  TO_UNICODE (0)
} ;

//--- Unicode string for '$MESSAGE_5F_TYPE$'
static const utf32 kUnicodeString_MESSAGE_5F_TYPE [] = {
  TO_UNICODE ('M'),
  TO_UNICODE ('E'),
  TO_UNICODE ('S'),
  TO_UNICODE ('S'),
  TO_UNICODE ('A'),
  TO_UNICODE ('G'),
  TO_UNICODE ('E'),
  TO_UNICODE ('_'),
  TO_UNICODE ('T'),
  TO_UNICODE ('Y'),
  TO_UNICODE ('P'),
  TO_UNICODE ('E'),
  TO_UNICODE (0)
} ;

//--- Unicode string for '$METHOD$'
static const utf32 kUnicodeString_METHOD [] = {
  TO_UNICODE ('M'),
  TO_UNICODE ('E'),
  TO_UNICODE ('T'),
  TO_UNICODE ('H'),
  TO_UNICODE ('O'),
  TO_UNICODE ('D'),
  TO_UNICODE (0)
} ;

//--- Unicode string for '$MIN$'
static const utf32 kUnicodeString_MIN [] = {
  TO_UNICODE ('M'),
  TO_UNICODE ('I'),
  TO_UNICODE ('N'),
  TO_UNICODE (0)
} ;

//--- Unicode string for '$MINCYCLE$'
static const utf32 kUnicodeString_MINCYCLE [] = {
  TO_UNICODE ('M'),
  TO_UNICODE ('I'),
  TO_UNICODE ('N'),
  TO_UNICODE ('C'),
  TO_UNICODE ('Y'),
  TO_UNICODE ('C'),
  TO_UNICODE ('L'),
  TO_UNICODE ('E'),
  TO_UNICODE (0)
} ;

//--- Unicode string for '$MINIMUMDELAYTIME$'
static const utf32 kUnicodeString_MINIMUMDELAYTIME [] = {
  TO_UNICODE ('M'),
  TO_UNICODE ('I'),
  TO_UNICODE ('N'),
  TO_UNICODE ('I'),
  TO_UNICODE ('M'),
  TO_UNICODE ('U'),
  TO_UNICODE ('M'),
  TO_UNICODE ('D'),
  TO_UNICODE ('E'),
  TO_UNICODE ('L'),
  TO_UNICODE ('A'),
  TO_UNICODE ('Y'),
  TO_UNICODE ('T'),
  TO_UNICODE ('I'),
  TO_UNICODE ('M'),
  TO_UNICODE ('E'),
  TO_UNICODE (0)
} ;

//--- Unicode string for '$MIXED$'
static const utf32 kUnicodeString_MIXED [] = {
  TO_UNICODE ('M'),
  TO_UNICODE ('I'),
  TO_UNICODE ('X'),
  TO_UNICODE ('E'),
  TO_UNICODE ('D'),
  TO_UNICODE (0)
} ;

//--- Unicode string for '$MONITOREDIPDU$'
static const utf32 kUnicodeString_MONITOREDIPDU [] = {
  TO_UNICODE ('M'),
  TO_UNICODE ('O'),
  TO_UNICODE ('N'),
  TO_UNICODE ('I'),
  TO_UNICODE ('T'),
  TO_UNICODE ('O'),
  TO_UNICODE ('R'),
  TO_UNICODE ('E'),
  TO_UNICODE ('D'),
  TO_UNICODE ('I'),
  TO_UNICODE ('P'),
  TO_UNICODE ('D'),
  TO_UNICODE ('U'),
  TO_UNICODE (0)
} ;

//--- Unicode string for '$NAME$'
static const utf32 kUnicodeString_NAME [] = {
  TO_UNICODE ('N'),
  TO_UNICODE ('A'),
  TO_UNICODE ('M'),
  TO_UNICODE ('E'),
  TO_UNICODE (0)
} ;

//--- Unicode string for '$NANOSECONDS$'
static const utf32 kUnicodeString_NANOSECONDS [] = {
  TO_UNICODE ('N'),
  TO_UNICODE ('A'),
  TO_UNICODE ('N'),
  TO_UNICODE ('O'),
  TO_UNICODE ('S'),
  TO_UNICODE ('E'),
  TO_UNICODE ('C'),
  TO_UNICODE ('O'),
  TO_UNICODE ('N'),
  TO_UNICODE ('D'),
  TO_UNICODE ('S'),
  TO_UNICODE (0)
} ;

//--- Unicode string for '$NETWORKMESSAGE$'
static const utf32 kUnicodeString_NETWORKMESSAGE [] = {
  TO_UNICODE ('N'),
  TO_UNICODE ('E'),
  TO_UNICODE ('T'),
  TO_UNICODE ('W'),
  TO_UNICODE ('O'),
  TO_UNICODE ('R'),
  TO_UNICODE ('K'),
  TO_UNICODE ('M'),
  TO_UNICODE ('E'),
  TO_UNICODE ('S'),
  TO_UNICODE ('S'),
  TO_UNICODE ('A'),
  TO_UNICODE ('G'),
  TO_UNICODE ('E'),
  TO_UNICODE (0)
} ;

//--- Unicode string for '$NETWORKORDERCALLOUT$'
static const utf32 kUnicodeString_NETWORKORDERCALLOUT [] = {
  TO_UNICODE ('N'),
  TO_UNICODE ('E'),
  TO_UNICODE ('T'),
  TO_UNICODE ('W'),
  TO_UNICODE ('O'),
  TO_UNICODE ('R'),
  TO_UNICODE ('K'),
  TO_UNICODE ('O'),
  TO_UNICODE ('R'),
  TO_UNICODE ('D'),
  TO_UNICODE ('E'),
  TO_UNICODE ('R'),
  TO_UNICODE ('C'),
  TO_UNICODE ('A'),
  TO_UNICODE ('L'),
  TO_UNICODE ('L'),
  TO_UNICODE ('O'),
  TO_UNICODE ('U'),
  TO_UNICODE ('T'),
  TO_UNICODE (0)
} ;

//--- Unicode string for '$NEVER$'
static const utf32 kUnicodeString_NEVER [] = {
  TO_UNICODE ('N'),
  TO_UNICODE ('E'),
  TO_UNICODE ('V'),
  TO_UNICODE ('E'),
  TO_UNICODE ('R'),
  TO_UNICODE (0)
} ;

//--- Unicode string for '$NEWISDIFFERENT$'
static const utf32 kUnicodeString_NEWISDIFFERENT [] = {
  TO_UNICODE ('N'),
  TO_UNICODE ('E'),
  TO_UNICODE ('W'),
  TO_UNICODE ('I'),
  TO_UNICODE ('S'),
  TO_UNICODE ('D'),
  TO_UNICODE ('I'),
  TO_UNICODE ('F'),
  TO_UNICODE ('F'),
  TO_UNICODE ('E'),
  TO_UNICODE ('R'),
  TO_UNICODE ('E'),
  TO_UNICODE ('N'),
  TO_UNICODE ('T'),
  TO_UNICODE (0)
} ;

//--- Unicode string for '$NEWISEQUAL$'
static const utf32 kUnicodeString_NEWISEQUAL [] = {
  TO_UNICODE ('N'),
  TO_UNICODE ('E'),
  TO_UNICODE ('W'),
  TO_UNICODE ('I'),
  TO_UNICODE ('S'),
  TO_UNICODE ('E'),
  TO_UNICODE ('Q'),
  TO_UNICODE ('U'),
  TO_UNICODE ('A'),
  TO_UNICODE ('L'),
  TO_UNICODE (0)
} ;

//--- Unicode string for '$NEWISGREATER$'
static const utf32 kUnicodeString_NEWISGREATER [] = {
  TO_UNICODE ('N'),
  TO_UNICODE ('E'),
  TO_UNICODE ('W'),
  TO_UNICODE ('I'),
  TO_UNICODE ('S'),
  TO_UNICODE ('G'),
  TO_UNICODE ('R'),
  TO_UNICODE ('E'),
  TO_UNICODE ('A'),
  TO_UNICODE ('T'),
  TO_UNICODE ('E'),
  TO_UNICODE ('R'),
  TO_UNICODE (0)
} ;

//--- Unicode string for '$NEWISGREATEROREQUAL$'
static const utf32 kUnicodeString_NEWISGREATEROREQUAL [] = {
  TO_UNICODE ('N'),
  TO_UNICODE ('E'),
  TO_UNICODE ('W'),
  TO_UNICODE ('I'),
  TO_UNICODE ('S'),
  TO_UNICODE ('G'),
  TO_UNICODE ('R'),
  TO_UNICODE ('E'),
  TO_UNICODE ('A'),
  TO_UNICODE ('T'),
  TO_UNICODE ('E'),
  TO_UNICODE ('R'),
  TO_UNICODE ('O'),
  TO_UNICODE ('R'),
  TO_UNICODE ('E'),
  TO_UNICODE ('Q'),
  TO_UNICODE ('U'),
  TO_UNICODE ('A'),
  TO_UNICODE ('L'),
  TO_UNICODE (0)
} ;

//--- Unicode string for '$NEWISLESS$'
static const utf32 kUnicodeString_NEWISLESS [] = {
  TO_UNICODE ('N'),
  TO_UNICODE ('E'),
  TO_UNICODE ('W'),
  TO_UNICODE ('I'),
  TO_UNICODE ('S'),
  TO_UNICODE ('L'),
  TO_UNICODE ('E'),
  TO_UNICODE ('S'),
  TO_UNICODE ('S'),
  TO_UNICODE (0)
} ;

//--- Unicode string for '$NEWISLESSOREQUAL$'
static const utf32 kUnicodeString_NEWISLESSOREQUAL [] = {
  TO_UNICODE ('N'),
  TO_UNICODE ('E'),
  TO_UNICODE ('W'),
  TO_UNICODE ('I'),
  TO_UNICODE ('S'),
  TO_UNICODE ('L'),
  TO_UNICODE ('E'),
  TO_UNICODE ('S'),
  TO_UNICODE ('S'),
  TO_UNICODE ('O'),
  TO_UNICODE ('R'),
  TO_UNICODE ('E'),
  TO_UNICODE ('Q'),
  TO_UNICODE ('U'),
  TO_UNICODE ('A'),
  TO_UNICODE ('L'),
  TO_UNICODE (0)
} ;

//--- Unicode string for '$NEWISOUTSIDE$'
static const utf32 kUnicodeString_NEWISOUTSIDE [] = {
  TO_UNICODE ('N'),
  TO_UNICODE ('E'),
  TO_UNICODE ('W'),
  TO_UNICODE ('I'),
  TO_UNICODE ('S'),
  TO_UNICODE ('O'),
  TO_UNICODE ('U'),
  TO_UNICODE ('T'),
  TO_UNICODE ('S'),
  TO_UNICODE ('I'),
  TO_UNICODE ('D'),
  TO_UNICODE ('E'),
  TO_UNICODE (0)
} ;

//--- Unicode string for '$NEWISWITHIN$'
static const utf32 kUnicodeString_NEWISWITHIN [] = {
  TO_UNICODE ('N'),
  TO_UNICODE ('E'),
  TO_UNICODE ('W'),
  TO_UNICODE ('I'),
  TO_UNICODE ('S'),
  TO_UNICODE ('W'),
  TO_UNICODE ('I'),
  TO_UNICODE ('T'),
  TO_UNICODE ('H'),
  TO_UNICODE ('I'),
  TO_UNICODE ('N'),
  TO_UNICODE (0)
} ;

//--- Unicode string for '$NM$'
static const utf32 kUnicodeString_NM [] = {
  TO_UNICODE ('N'),
  TO_UNICODE ('M'),
  TO_UNICODE (0)
} ;

//--- Unicode string for '$NM_5F_TYPE$'
static const utf32 kUnicodeString_NM_5F_TYPE [] = {
  TO_UNICODE ('N'),
  TO_UNICODE ('M'),
  TO_UNICODE ('_'),
  TO_UNICODE ('T'),
  TO_UNICODE ('Y'),
  TO_UNICODE ('P'),
  TO_UNICODE ('E'),
  TO_UNICODE (0)
} ;

//--- Unicode string for '$NON$'
static const utf32 kUnicodeString_NON [] = {
  TO_UNICODE ('N'),
  TO_UNICODE ('O'),
  TO_UNICODE ('N'),
  TO_UNICODE (0)
} ;

//--- Unicode string for '$NONE$'
static const utf32 kUnicodeString_NONE [] = {
  TO_UNICODE ('N'),
  TO_UNICODE ('O'),
  TO_UNICODE ('N'),
  TO_UNICODE ('E'),
  TO_UNICODE (0)
} ;

//--- Unicode string for '$NOTIFICATION$'
static const utf32 kUnicodeString_NOTIFICATION [] = {
  TO_UNICODE ('N'),
  TO_UNICODE ('O'),
  TO_UNICODE ('T'),
  TO_UNICODE ('I'),
  TO_UNICODE ('F'),
  TO_UNICODE ('I'),
  TO_UNICODE ('C'),
  TO_UNICODE ('A'),
  TO_UNICODE ('T'),
  TO_UNICODE ('I'),
  TO_UNICODE ('O'),
  TO_UNICODE ('N'),
  TO_UNICODE (0)
} ;

//--- Unicode string for '$NOTIFICATIONERROR$'
static const utf32 kUnicodeString_NOTIFICATIONERROR [] = {
  TO_UNICODE ('N'),
  TO_UNICODE ('O'),
  TO_UNICODE ('T'),
  TO_UNICODE ('I'),
  TO_UNICODE ('F'),
  TO_UNICODE ('I'),
  TO_UNICODE ('C'),
  TO_UNICODE ('A'),
  TO_UNICODE ('T'),
  TO_UNICODE ('I'),
  TO_UNICODE ('O'),
  TO_UNICODE ('N'),
  TO_UNICODE ('E'),
  TO_UNICODE ('R'),
  TO_UNICODE ('R'),
  TO_UNICODE ('O'),
  TO_UNICODE ('R'),
  TO_UNICODE (0)
} ;

//--- Unicode string for '$NO_5F_DEFAULT$'
static const utf32 kUnicodeString_NO_5F_DEFAULT [] = {
  TO_UNICODE ('N'),
  TO_UNICODE ('O'),
  TO_UNICODE ('_'),
  TO_UNICODE ('D'),
  TO_UNICODE ('E'),
  TO_UNICODE ('F'),
  TO_UNICODE ('A'),
  TO_UNICODE ('U'),
  TO_UNICODE ('L'),
  TO_UNICODE ('T'),
  TO_UNICODE (0)
} ;

//--- Unicode string for '$NS$'
static const utf32 kUnicodeString_NS [] = {
  TO_UNICODE ('N'),
  TO_UNICODE ('S'),
  TO_UNICODE (0)
} ;

//--- Unicode string for '$NS_5F_PER_5F_HW_5F_TICK$'
static const utf32 kUnicodeString_NS_5F_PER_5F_HW_5F_TICK [] = {
  TO_UNICODE ('N'),
  TO_UNICODE ('S'),
  TO_UNICODE ('_'),
  TO_UNICODE ('P'),
  TO_UNICODE ('E'),
  TO_UNICODE ('R'),
  TO_UNICODE ('_'),
  TO_UNICODE ('H'),
  TO_UNICODE ('W'),
  TO_UNICODE ('_'),
  TO_UNICODE ('T'),
  TO_UNICODE ('I'),
  TO_UNICODE ('C'),
  TO_UNICODE ('K'),
  TO_UNICODE (0)
} ;

//--- Unicode string for '$OFFSET$'
static const utf32 kUnicodeString_OFFSET [] = {
  TO_UNICODE ('O'),
  TO_UNICODE ('F'),
  TO_UNICODE ('F'),
  TO_UNICODE ('S'),
  TO_UNICODE ('E'),
  TO_UNICODE ('T'),
  TO_UNICODE (0)
} ;

//--- Unicode string for '$OIL_5F_VERSION$'
static const utf32 kUnicodeString_OIL_5F_VERSION [] = {
  TO_UNICODE ('O'),
  TO_UNICODE ('I'),
  TO_UNICODE ('L'),
  TO_UNICODE ('_'),
  TO_UNICODE ('V'),
  TO_UNICODE ('E'),
  TO_UNICODE ('R'),
  TO_UNICODE ('S'),
  TO_UNICODE ('I'),
  TO_UNICODE ('O'),
  TO_UNICODE ('N'),
  TO_UNICODE (0)
} ;

//--- Unicode string for '$ONEEVERYN$'
static const utf32 kUnicodeString_ONEEVERYN [] = {
  TO_UNICODE ('O'),
  TO_UNICODE ('N'),
  TO_UNICODE ('E'),
  TO_UNICODE ('E'),
  TO_UNICODE ('V'),
  TO_UNICODE ('E'),
  TO_UNICODE ('R'),
  TO_UNICODE ('Y'),
  TO_UNICODE ('N'),
  TO_UNICODE (0)
} ;

//--- Unicode string for '$OS$'
static const utf32 kUnicodeString_OS [] = {
  TO_UNICODE ('O'),
  TO_UNICODE ('S'),
  TO_UNICODE (0)
} ;

//--- Unicode string for '$OSINTERNAL$'
static const utf32 kUnicodeString_OSINTERNAL [] = {
  TO_UNICODE ('O'),
  TO_UNICODE ('S'),
  TO_UNICODE ('I'),
  TO_UNICODE ('N'),
  TO_UNICODE ('T'),
  TO_UNICODE ('E'),
  TO_UNICODE ('R'),
  TO_UNICODE ('N'),
  TO_UNICODE ('A'),
  TO_UNICODE ('L'),
  TO_UNICODE (0)
} ;

//--- Unicode string for '$OS_5F_TYPE$'
static const utf32 kUnicodeString_OS_5F_TYPE [] = {
  TO_UNICODE ('O'),
  TO_UNICODE ('S'),
  TO_UNICODE ('_'),
  TO_UNICODE ('T'),
  TO_UNICODE ('Y'),
  TO_UNICODE ('P'),
  TO_UNICODE ('E'),
  TO_UNICODE (0)
} ;

//--- Unicode string for '$PENDING$'
static const utf32 kUnicodeString_PENDING [] = {
  TO_UNICODE ('P'),
  TO_UNICODE ('E'),
  TO_UNICODE ('N'),
  TO_UNICODE ('D'),
  TO_UNICODE ('I'),
  TO_UNICODE ('N'),
  TO_UNICODE ('G'),
  TO_UNICODE (0)
} ;

//--- Unicode string for '$PERIOD$'
static const utf32 kUnicodeString_PERIOD [] = {
  TO_UNICODE ('P'),
  TO_UNICODE ('E'),
  TO_UNICODE ('R'),
  TO_UNICODE ('I'),
  TO_UNICODE ('O'),
  TO_UNICODE ('D'),
  TO_UNICODE (0)
} ;

//--- Unicode string for '$PERIODIC$'
static const utf32 kUnicodeString_PERIODIC [] = {
  TO_UNICODE ('P'),
  TO_UNICODE ('E'),
  TO_UNICODE ('R'),
  TO_UNICODE ('I'),
  TO_UNICODE ('O'),
  TO_UNICODE ('D'),
  TO_UNICODE ('I'),
  TO_UNICODE ('C'),
  TO_UNICODE (0)
} ;

//--- Unicode string for '$POSTTASKHOOK$'
static const utf32 kUnicodeString_POSTTASKHOOK [] = {
  TO_UNICODE ('P'),
  TO_UNICODE ('O'),
  TO_UNICODE ('S'),
  TO_UNICODE ('T'),
  TO_UNICODE ('T'),
  TO_UNICODE ('A'),
  TO_UNICODE ('S'),
  TO_UNICODE ('K'),
  TO_UNICODE ('H'),
  TO_UNICODE ('O'),
  TO_UNICODE ('O'),
  TO_UNICODE ('K'),
  TO_UNICODE (0)
} ;

//--- Unicode string for '$PRECISION$'
static const utf32 kUnicodeString_PRECISION [] = {
  TO_UNICODE ('P'),
  TO_UNICODE ('R'),
  TO_UNICODE ('E'),
  TO_UNICODE ('C'),
  TO_UNICODE ('I'),
  TO_UNICODE ('S'),
  TO_UNICODE ('I'),
  TO_UNICODE ('O'),
  TO_UNICODE ('N'),
  TO_UNICODE (0)
} ;

//--- Unicode string for '$PRETASKHOOK$'
static const utf32 kUnicodeString_PRETASKHOOK [] = {
  TO_UNICODE ('P'),
  TO_UNICODE ('R'),
  TO_UNICODE ('E'),
  TO_UNICODE ('T'),
  TO_UNICODE ('A'),
  TO_UNICODE ('S'),
  TO_UNICODE ('K'),
  TO_UNICODE ('H'),
  TO_UNICODE ('O'),
  TO_UNICODE ('O'),
  TO_UNICODE ('K'),
  TO_UNICODE (0)
} ;

//--- Unicode string for '$PRIORITY$'
static const utf32 kUnicodeString_PRIORITY [] = {
  TO_UNICODE ('P'),
  TO_UNICODE ('R'),
  TO_UNICODE ('I'),
  TO_UNICODE ('O'),
  TO_UNICODE ('R'),
  TO_UNICODE ('I'),
  TO_UNICODE ('T'),
  TO_UNICODE ('Y'),
  TO_UNICODE (0)
} ;

//--- Unicode string for '$PROTECTIONHOOK$'
static const utf32 kUnicodeString_PROTECTIONHOOK [] = {
  TO_UNICODE ('P'),
  TO_UNICODE ('R'),
  TO_UNICODE ('O'),
  TO_UNICODE ('T'),
  TO_UNICODE ('E'),
  TO_UNICODE ('C'),
  TO_UNICODE ('T'),
  TO_UNICODE ('I'),
  TO_UNICODE ('O'),
  TO_UNICODE ('N'),
  TO_UNICODE ('H'),
  TO_UNICODE ('O'),
  TO_UNICODE ('O'),
  TO_UNICODE ('K'),
  TO_UNICODE (0)
} ;

//--- Unicode string for '$QUEUESIZE$'
static const utf32 kUnicodeString_QUEUESIZE [] = {
  TO_UNICODE ('Q'),
  TO_UNICODE ('U'),
  TO_UNICODE ('E'),
  TO_UNICODE ('U'),
  TO_UNICODE ('E'),
  TO_UNICODE ('S'),
  TO_UNICODE ('I'),
  TO_UNICODE ('Z'),
  TO_UNICODE ('E'),
  TO_UNICODE (0)
} ;

//--- Unicode string for '$RECEIVED$'
static const utf32 kUnicodeString_RECEIVED [] = {
  TO_UNICODE ('R'),
  TO_UNICODE ('E'),
  TO_UNICODE ('C'),
  TO_UNICODE ('E'),
  TO_UNICODE ('I'),
  TO_UNICODE ('V'),
  TO_UNICODE ('E'),
  TO_UNICODE ('D'),
  TO_UNICODE (0)
} ;

//--- Unicode string for '$RECEIVEMESSAGE$'
static const utf32 kUnicodeString_RECEIVEMESSAGE [] = {
  TO_UNICODE ('R'),
  TO_UNICODE ('E'),
  TO_UNICODE ('C'),
  TO_UNICODE ('E'),
  TO_UNICODE ('I'),
  TO_UNICODE ('V'),
  TO_UNICODE ('E'),
  TO_UNICODE ('M'),
  TO_UNICODE ('E'),
  TO_UNICODE ('S'),
  TO_UNICODE ('S'),
  TO_UNICODE ('A'),
  TO_UNICODE ('G'),
  TO_UNICODE ('E'),
  TO_UNICODE (0)
} ;

//--- Unicode string for '$RECEIVE_5F_DYNAMIC_5F_EXTERNAL$'
static const utf32 kUnicodeString_RECEIVE_5F_DYNAMIC_5F_EXTERNAL [] = {
  TO_UNICODE ('R'),
  TO_UNICODE ('E'),
  TO_UNICODE ('C'),
  TO_UNICODE ('E'),
  TO_UNICODE ('I'),
  TO_UNICODE ('V'),
  TO_UNICODE ('E'),
  TO_UNICODE ('_'),
  TO_UNICODE ('D'),
  TO_UNICODE ('Y'),
  TO_UNICODE ('N'),
  TO_UNICODE ('A'),
  TO_UNICODE ('M'),
  TO_UNICODE ('I'),
  TO_UNICODE ('C'),
  TO_UNICODE ('_'),
  TO_UNICODE ('E'),
  TO_UNICODE ('X'),
  TO_UNICODE ('T'),
  TO_UNICODE ('E'),
  TO_UNICODE ('R'),
  TO_UNICODE ('N'),
  TO_UNICODE ('A'),
  TO_UNICODE ('L'),
  TO_UNICODE (0)
} ;

//--- Unicode string for '$RECEIVE_5F_QUEUED_5F_EXTERNAL$'
static const utf32 kUnicodeString_RECEIVE_5F_QUEUED_5F_EXTERNAL [] = {
  TO_UNICODE ('R'),
  TO_UNICODE ('E'),
  TO_UNICODE ('C'),
  TO_UNICODE ('E'),
  TO_UNICODE ('I'),
  TO_UNICODE ('V'),
  TO_UNICODE ('E'),
  TO_UNICODE ('_'),
  TO_UNICODE ('Q'),
  TO_UNICODE ('U'),
  TO_UNICODE ('E'),
  TO_UNICODE ('U'),
  TO_UNICODE ('E'),
  TO_UNICODE ('D'),
  TO_UNICODE ('_'),
  TO_UNICODE ('E'),
  TO_UNICODE ('X'),
  TO_UNICODE ('T'),
  TO_UNICODE ('E'),
  TO_UNICODE ('R'),
  TO_UNICODE ('N'),
  TO_UNICODE ('A'),
  TO_UNICODE ('L'),
  TO_UNICODE (0)
} ;

//--- Unicode string for '$RECEIVE_5F_QUEUED_5F_INTERNAL$'
static const utf32 kUnicodeString_RECEIVE_5F_QUEUED_5F_INTERNAL [] = {
  TO_UNICODE ('R'),
  TO_UNICODE ('E'),
  TO_UNICODE ('C'),
  TO_UNICODE ('E'),
  TO_UNICODE ('I'),
  TO_UNICODE ('V'),
  TO_UNICODE ('E'),
  TO_UNICODE ('_'),
  TO_UNICODE ('Q'),
  TO_UNICODE ('U'),
  TO_UNICODE ('E'),
  TO_UNICODE ('U'),
  TO_UNICODE ('E'),
  TO_UNICODE ('D'),
  TO_UNICODE ('_'),
  TO_UNICODE ('I'),
  TO_UNICODE ('N'),
  TO_UNICODE ('T'),
  TO_UNICODE ('E'),
  TO_UNICODE ('R'),
  TO_UNICODE ('N'),
  TO_UNICODE ('A'),
  TO_UNICODE ('L'),
  TO_UNICODE (0)
} ;

//--- Unicode string for '$RECEIVE_5F_UNQUEUED_5F_EXTERNAL$'
static const utf32 kUnicodeString_RECEIVE_5F_UNQUEUED_5F_EXTERNAL [] = {
  TO_UNICODE ('R'),
  TO_UNICODE ('E'),
  TO_UNICODE ('C'),
  TO_UNICODE ('E'),
  TO_UNICODE ('I'),
  TO_UNICODE ('V'),
  TO_UNICODE ('E'),
  TO_UNICODE ('_'),
  TO_UNICODE ('U'),
  TO_UNICODE ('N'),
  TO_UNICODE ('Q'),
  TO_UNICODE ('U'),
  TO_UNICODE ('E'),
  TO_UNICODE ('U'),
  TO_UNICODE ('E'),
  TO_UNICODE ('D'),
  TO_UNICODE ('_'),
  TO_UNICODE ('E'),
  TO_UNICODE ('X'),
  TO_UNICODE ('T'),
  TO_UNICODE ('E'),
  TO_UNICODE ('R'),
  TO_UNICODE ('N'),
  TO_UNICODE ('A'),
  TO_UNICODE ('L'),
  TO_UNICODE (0)
} ;

//--- Unicode string for '$RECEIVE_5F_UNQUEUED_5F_INTERNAL$'
static const utf32 kUnicodeString_RECEIVE_5F_UNQUEUED_5F_INTERNAL [] = {
  TO_UNICODE ('R'),
  TO_UNICODE ('E'),
  TO_UNICODE ('C'),
  TO_UNICODE ('E'),
  TO_UNICODE ('I'),
  TO_UNICODE ('V'),
  TO_UNICODE ('E'),
  TO_UNICODE ('_'),
  TO_UNICODE ('U'),
  TO_UNICODE ('N'),
  TO_UNICODE ('Q'),
  TO_UNICODE ('U'),
  TO_UNICODE ('E'),
  TO_UNICODE ('U'),
  TO_UNICODE ('E'),
  TO_UNICODE ('D'),
  TO_UNICODE ('_'),
  TO_UNICODE ('I'),
  TO_UNICODE ('N'),
  TO_UNICODE ('T'),
  TO_UNICODE ('E'),
  TO_UNICODE ('R'),
  TO_UNICODE ('N'),
  TO_UNICODE ('A'),
  TO_UNICODE ('L'),
  TO_UNICODE (0)
} ;

//--- Unicode string for '$RECEIVE_5F_ZERO_5F_EXTERNAL$'
static const utf32 kUnicodeString_RECEIVE_5F_ZERO_5F_EXTERNAL [] = {
  TO_UNICODE ('R'),
  TO_UNICODE ('E'),
  TO_UNICODE ('C'),
  TO_UNICODE ('E'),
  TO_UNICODE ('I'),
  TO_UNICODE ('V'),
  TO_UNICODE ('E'),
  TO_UNICODE ('_'),
  TO_UNICODE ('Z'),
  TO_UNICODE ('E'),
  TO_UNICODE ('R'),
  TO_UNICODE ('O'),
  TO_UNICODE ('_'),
  TO_UNICODE ('E'),
  TO_UNICODE ('X'),
  TO_UNICODE ('T'),
  TO_UNICODE ('E'),
  TO_UNICODE ('R'),
  TO_UNICODE ('N'),
  TO_UNICODE ('A'),
  TO_UNICODE ('L'),
  TO_UNICODE (0)
} ;

//--- Unicode string for '$RECEIVE_5F_ZERO_5F_INTERNAL$'
static const utf32 kUnicodeString_RECEIVE_5F_ZERO_5F_INTERNAL [] = {
  TO_UNICODE ('R'),
  TO_UNICODE ('E'),
  TO_UNICODE ('C'),
  TO_UNICODE ('E'),
  TO_UNICODE ('I'),
  TO_UNICODE ('V'),
  TO_UNICODE ('E'),
  TO_UNICODE ('_'),
  TO_UNICODE ('Z'),
  TO_UNICODE ('E'),
  TO_UNICODE ('R'),
  TO_UNICODE ('O'),
  TO_UNICODE ('_'),
  TO_UNICODE ('I'),
  TO_UNICODE ('N'),
  TO_UNICODE ('T'),
  TO_UNICODE ('E'),
  TO_UNICODE ('R'),
  TO_UNICODE ('N'),
  TO_UNICODE ('A'),
  TO_UNICODE ('L'),
  TO_UNICODE (0)
} ;

//--- Unicode string for '$RECEIVE_5F_ZERO_5F_SENDERS$'
static const utf32 kUnicodeString_RECEIVE_5F_ZERO_5F_SENDERS [] = {
  TO_UNICODE ('R'),
  TO_UNICODE ('E'),
  TO_UNICODE ('C'),
  TO_UNICODE ('E'),
  TO_UNICODE ('I'),
  TO_UNICODE ('V'),
  TO_UNICODE ('E'),
  TO_UNICODE ('_'),
  TO_UNICODE ('Z'),
  TO_UNICODE ('E'),
  TO_UNICODE ('R'),
  TO_UNICODE ('O'),
  TO_UNICODE ('_'),
  TO_UNICODE ('S'),
  TO_UNICODE ('E'),
  TO_UNICODE ('N'),
  TO_UNICODE ('D'),
  TO_UNICODE ('E'),
  TO_UNICODE ('R'),
  TO_UNICODE ('S'),
  TO_UNICODE (0)
} ;

//--- Unicode string for '$RELATIVE$'
static const utf32 kUnicodeString_RELATIVE [] = {
  TO_UNICODE ('R'),
  TO_UNICODE ('E'),
  TO_UNICODE ('L'),
  TO_UNICODE ('A'),
  TO_UNICODE ('T'),
  TO_UNICODE ('I'),
  TO_UNICODE ('V'),
  TO_UNICODE ('E'),
  TO_UNICODE (0)
} ;

//--- Unicode string for '$RESOURCE$'
static const utf32 kUnicodeString_RESOURCE [] = {
  TO_UNICODE ('R'),
  TO_UNICODE ('E'),
  TO_UNICODE ('S'),
  TO_UNICODE ('O'),
  TO_UNICODE ('U'),
  TO_UNICODE ('R'),
  TO_UNICODE ('C'),
  TO_UNICODE ('E'),
  TO_UNICODE (0)
} ;

//--- Unicode string for '$RESOURCELOCK$'
static const utf32 kUnicodeString_RESOURCELOCK [] = {
  TO_UNICODE ('R'),
  TO_UNICODE ('E'),
  TO_UNICODE ('S'),
  TO_UNICODE ('O'),
  TO_UNICODE ('U'),
  TO_UNICODE ('R'),
  TO_UNICODE ('C'),
  TO_UNICODE ('E'),
  TO_UNICODE ('L'),
  TO_UNICODE ('O'),
  TO_UNICODE ('C'),
  TO_UNICODE ('K'),
  TO_UNICODE (0)
} ;

//--- Unicode string for '$RESOURCEPROPERTY$'
static const utf32 kUnicodeString_RESOURCEPROPERTY [] = {
  TO_UNICODE ('R'),
  TO_UNICODE ('E'),
  TO_UNICODE ('S'),
  TO_UNICODE ('O'),
  TO_UNICODE ('U'),
  TO_UNICODE ('R'),
  TO_UNICODE ('C'),
  TO_UNICODE ('E'),
  TO_UNICODE ('P'),
  TO_UNICODE ('R'),
  TO_UNICODE ('O'),
  TO_UNICODE ('P'),
  TO_UNICODE ('E'),
  TO_UNICODE ('R'),
  TO_UNICODE ('T'),
  TO_UNICODE ('Y'),
  TO_UNICODE (0)
} ;

//--- Unicode string for '$RESOURCE_5F_TYPE$'
static const utf32 kUnicodeString_RESOURCE_5F_TYPE [] = {
  TO_UNICODE ('R'),
  TO_UNICODE ('E'),
  TO_UNICODE ('S'),
  TO_UNICODE ('O'),
  TO_UNICODE ('U'),
  TO_UNICODE ('R'),
  TO_UNICODE ('C'),
  TO_UNICODE ('E'),
  TO_UNICODE ('_'),
  TO_UNICODE ('T'),
  TO_UNICODE ('Y'),
  TO_UNICODE ('P'),
  TO_UNICODE ('E'),
  TO_UNICODE (0)
} ;

//--- Unicode string for '$RESTARTTASK$'
static const utf32 kUnicodeString_RESTARTTASK [] = {
  TO_UNICODE ('R'),
  TO_UNICODE ('E'),
  TO_UNICODE ('S'),
  TO_UNICODE ('T'),
  TO_UNICODE ('A'),
  TO_UNICODE ('R'),
  TO_UNICODE ('T'),
  TO_UNICODE ('T'),
  TO_UNICODE ('A'),
  TO_UNICODE ('S'),
  TO_UNICODE ('K'),
  TO_UNICODE (0)
} ;

//--- Unicode string for '$SC_31_$'
static const utf32 kUnicodeString_SC_31_ [] = {
  TO_UNICODE ('S'),
  TO_UNICODE ('C'),
  TO_UNICODE ('1'),
  TO_UNICODE (0)
} ;

//--- Unicode string for '$SC_32_$'
static const utf32 kUnicodeString_SC_32_ [] = {
  TO_UNICODE ('S'),
  TO_UNICODE ('C'),
  TO_UNICODE ('2'),
  TO_UNICODE (0)
} ;

//--- Unicode string for '$SC_33_$'
static const utf32 kUnicodeString_SC_33_ [] = {
  TO_UNICODE ('S'),
  TO_UNICODE ('C'),
  TO_UNICODE ('3'),
  TO_UNICODE (0)
} ;

//--- Unicode string for '$SC_34_$'
static const utf32 kUnicodeString_SC_34_ [] = {
  TO_UNICODE ('S'),
  TO_UNICODE ('C'),
  TO_UNICODE ('4'),
  TO_UNICODE (0)
} ;

//--- Unicode string for '$SCALABILITYCLASS$'
static const utf32 kUnicodeString_SCALABILITYCLASS [] = {
  TO_UNICODE ('S'),
  TO_UNICODE ('C'),
  TO_UNICODE ('A'),
  TO_UNICODE ('L'),
  TO_UNICODE ('A'),
  TO_UNICODE ('B'),
  TO_UNICODE ('I'),
  TO_UNICODE ('L'),
  TO_UNICODE ('I'),
  TO_UNICODE ('T'),
  TO_UNICODE ('Y'),
  TO_UNICODE ('C'),
  TO_UNICODE ('L'),
  TO_UNICODE ('A'),
  TO_UNICODE ('S'),
  TO_UNICODE ('S'),
  TO_UNICODE (0)
} ;

//--- Unicode string for '$SCHEDULE$'
static const utf32 kUnicodeString_SCHEDULE [] = {
  TO_UNICODE ('S'),
  TO_UNICODE ('C'),
  TO_UNICODE ('H'),
  TO_UNICODE ('E'),
  TO_UNICODE ('D'),
  TO_UNICODE ('U'),
  TO_UNICODE ('L'),
  TO_UNICODE ('E'),
  TO_UNICODE (0)
} ;

//--- Unicode string for '$SCHEDULETABLE$'
static const utf32 kUnicodeString_SCHEDULETABLE [] = {
  TO_UNICODE ('S'),
  TO_UNICODE ('C'),
  TO_UNICODE ('H'),
  TO_UNICODE ('E'),
  TO_UNICODE ('D'),
  TO_UNICODE ('U'),
  TO_UNICODE ('L'),
  TO_UNICODE ('E'),
  TO_UNICODE ('T'),
  TO_UNICODE ('A'),
  TO_UNICODE ('B'),
  TO_UNICODE ('L'),
  TO_UNICODE ('E'),
  TO_UNICODE (0)
} ;

//--- Unicode string for '$SCRIPT$'
static const utf32 kUnicodeString_SCRIPT [] = {
  TO_UNICODE ('S'),
  TO_UNICODE ('C'),
  TO_UNICODE ('R'),
  TO_UNICODE ('I'),
  TO_UNICODE ('P'),
  TO_UNICODE ('T'),
  TO_UNICODE (0)
} ;

//--- Unicode string for '$SENDINGMESSAGE$'
static const utf32 kUnicodeString_SENDINGMESSAGE [] = {
  TO_UNICODE ('S'),
  TO_UNICODE ('E'),
  TO_UNICODE ('N'),
  TO_UNICODE ('D'),
  TO_UNICODE ('I'),
  TO_UNICODE ('N'),
  TO_UNICODE ('G'),
  TO_UNICODE ('M'),
  TO_UNICODE ('E'),
  TO_UNICODE ('S'),
  TO_UNICODE ('S'),
  TO_UNICODE ('A'),
  TO_UNICODE ('G'),
  TO_UNICODE ('E'),
  TO_UNICODE (0)
} ;

//--- Unicode string for '$SEND_5F_DYNAMIC_5F_EXTERNAL$'
static const utf32 kUnicodeString_SEND_5F_DYNAMIC_5F_EXTERNAL [] = {
  TO_UNICODE ('S'),
  TO_UNICODE ('E'),
  TO_UNICODE ('N'),
  TO_UNICODE ('D'),
  TO_UNICODE ('_'),
  TO_UNICODE ('D'),
  TO_UNICODE ('Y'),
  TO_UNICODE ('N'),
  TO_UNICODE ('A'),
  TO_UNICODE ('M'),
  TO_UNICODE ('I'),
  TO_UNICODE ('C'),
  TO_UNICODE ('_'),
  TO_UNICODE ('E'),
  TO_UNICODE ('X'),
  TO_UNICODE ('T'),
  TO_UNICODE ('E'),
  TO_UNICODE ('R'),
  TO_UNICODE ('N'),
  TO_UNICODE ('A'),
  TO_UNICODE ('L'),
  TO_UNICODE (0)
} ;

//--- Unicode string for '$SEND_5F_STATIC_5F_EXTERNAL$'
static const utf32 kUnicodeString_SEND_5F_STATIC_5F_EXTERNAL [] = {
  TO_UNICODE ('S'),
  TO_UNICODE ('E'),
  TO_UNICODE ('N'),
  TO_UNICODE ('D'),
  TO_UNICODE ('_'),
  TO_UNICODE ('S'),
  TO_UNICODE ('T'),
  TO_UNICODE ('A'),
  TO_UNICODE ('T'),
  TO_UNICODE ('I'),
  TO_UNICODE ('C'),
  TO_UNICODE ('_'),
  TO_UNICODE ('E'),
  TO_UNICODE ('X'),
  TO_UNICODE ('T'),
  TO_UNICODE ('E'),
  TO_UNICODE ('R'),
  TO_UNICODE ('N'),
  TO_UNICODE ('A'),
  TO_UNICODE ('L'),
  TO_UNICODE (0)
} ;

//--- Unicode string for '$SEND_5F_STATIC_5F_INTERNAL$'
static const utf32 kUnicodeString_SEND_5F_STATIC_5F_INTERNAL [] = {
  TO_UNICODE ('S'),
  TO_UNICODE ('E'),
  TO_UNICODE ('N'),
  TO_UNICODE ('D'),
  TO_UNICODE ('_'),
  TO_UNICODE ('S'),
  TO_UNICODE ('T'),
  TO_UNICODE ('A'),
  TO_UNICODE ('T'),
  TO_UNICODE ('I'),
  TO_UNICODE ('C'),
  TO_UNICODE ('_'),
  TO_UNICODE ('I'),
  TO_UNICODE ('N'),
  TO_UNICODE ('T'),
  TO_UNICODE ('E'),
  TO_UNICODE ('R'),
  TO_UNICODE ('N'),
  TO_UNICODE ('A'),
  TO_UNICODE ('L'),
  TO_UNICODE (0)
} ;

//--- Unicode string for '$SEND_5F_ZERO_5F_EXTERNAL$'
static const utf32 kUnicodeString_SEND_5F_ZERO_5F_EXTERNAL [] = {
  TO_UNICODE ('S'),
  TO_UNICODE ('E'),
  TO_UNICODE ('N'),
  TO_UNICODE ('D'),
  TO_UNICODE ('_'),
  TO_UNICODE ('Z'),
  TO_UNICODE ('E'),
  TO_UNICODE ('R'),
  TO_UNICODE ('O'),
  TO_UNICODE ('_'),
  TO_UNICODE ('E'),
  TO_UNICODE ('X'),
  TO_UNICODE ('T'),
  TO_UNICODE ('E'),
  TO_UNICODE ('R'),
  TO_UNICODE ('N'),
  TO_UNICODE ('A'),
  TO_UNICODE ('L'),
  TO_UNICODE (0)
} ;

//--- Unicode string for '$SEND_5F_ZERO_5F_INTERNAL$'
static const utf32 kUnicodeString_SEND_5F_ZERO_5F_INTERNAL [] = {
  TO_UNICODE ('S'),
  TO_UNICODE ('E'),
  TO_UNICODE ('N'),
  TO_UNICODE ('D'),
  TO_UNICODE ('_'),
  TO_UNICODE ('Z'),
  TO_UNICODE ('E'),
  TO_UNICODE ('R'),
  TO_UNICODE ('O'),
  TO_UNICODE ('_'),
  TO_UNICODE ('I'),
  TO_UNICODE ('N'),
  TO_UNICODE ('T'),
  TO_UNICODE ('E'),
  TO_UNICODE ('R'),
  TO_UNICODE ('N'),
  TO_UNICODE ('A'),
  TO_UNICODE ('L'),
  TO_UNICODE (0)
} ;

//--- Unicode string for '$SENT$'
static const utf32 kUnicodeString_SENT [] = {
  TO_UNICODE ('S'),
  TO_UNICODE ('E'),
  TO_UNICODE ('N'),
  TO_UNICODE ('T'),
  TO_UNICODE (0)
} ;

//--- Unicode string for '$SETEVENT$'
static const utf32 kUnicodeString_SETEVENT [] = {
  TO_UNICODE ('S'),
  TO_UNICODE ('E'),
  TO_UNICODE ('T'),
  TO_UNICODE ('E'),
  TO_UNICODE ('V'),
  TO_UNICODE ('E'),
  TO_UNICODE ('N'),
  TO_UNICODE ('T'),
  TO_UNICODE (0)
} ;

//--- Unicode string for '$SHUTDOWNHOOK$'
static const utf32 kUnicodeString_SHUTDOWNHOOK [] = {
  TO_UNICODE ('S'),
  TO_UNICODE ('H'),
  TO_UNICODE ('U'),
  TO_UNICODE ('T'),
  TO_UNICODE ('D'),
  TO_UNICODE ('O'),
  TO_UNICODE ('W'),
  TO_UNICODE ('N'),
  TO_UNICODE ('H'),
  TO_UNICODE ('O'),
  TO_UNICODE ('O'),
  TO_UNICODE ('K'),
  TO_UNICODE (0)
} ;

//--- Unicode string for '$SIZEINBITS$'
static const utf32 kUnicodeString_SIZEINBITS [] = {
  TO_UNICODE ('S'),
  TO_UNICODE ('I'),
  TO_UNICODE ('Z'),
  TO_UNICODE ('E'),
  TO_UNICODE ('I'),
  TO_UNICODE ('N'),
  TO_UNICODE ('B'),
  TO_UNICODE ('I'),
  TO_UNICODE ('T'),
  TO_UNICODE ('S'),
  TO_UNICODE (0)
} ;

//--- Unicode string for '$SMOOTH$'
static const utf32 kUnicodeString_SMOOTH [] = {
  TO_UNICODE ('S'),
  TO_UNICODE ('M'),
  TO_UNICODE ('O'),
  TO_UNICODE ('O'),
  TO_UNICODE ('T'),
  TO_UNICODE ('H'),
  TO_UNICODE (0)
} ;

//--- Unicode string for '$SOFTWARE$'
static const utf32 kUnicodeString_SOFTWARE [] = {
  TO_UNICODE ('S'),
  TO_UNICODE ('O'),
  TO_UNICODE ('F'),
  TO_UNICODE ('T'),
  TO_UNICODE ('W'),
  TO_UNICODE ('A'),
  TO_UNICODE ('R'),
  TO_UNICODE ('E'),
  TO_UNICODE (0)
} ;

//--- Unicode string for '$SOURCE$'
static const utf32 kUnicodeString_SOURCE [] = {
  TO_UNICODE ('S'),
  TO_UNICODE ('O'),
  TO_UNICODE ('U'),
  TO_UNICODE ('R'),
  TO_UNICODE ('C'),
  TO_UNICODE ('E'),
  TO_UNICODE (0)
} ;

//--- Unicode string for '$STACKMONITORING$'
static const utf32 kUnicodeString_STACKMONITORING [] = {
  TO_UNICODE ('S'),
  TO_UNICODE ('T'),
  TO_UNICODE ('A'),
  TO_UNICODE ('C'),
  TO_UNICODE ('K'),
  TO_UNICODE ('M'),
  TO_UNICODE ('O'),
  TO_UNICODE ('N'),
  TO_UNICODE ('I'),
  TO_UNICODE ('T'),
  TO_UNICODE ('O'),
  TO_UNICODE ('R'),
  TO_UNICODE ('I'),
  TO_UNICODE ('N'),
  TO_UNICODE ('G'),
  TO_UNICODE (0)
} ;

//--- Unicode string for '$STANDARD$'
static const utf32 kUnicodeString_STANDARD [] = {
  TO_UNICODE ('S'),
  TO_UNICODE ('T'),
  TO_UNICODE ('A'),
  TO_UNICODE ('N'),
  TO_UNICODE ('D'),
  TO_UNICODE ('A'),
  TO_UNICODE ('R'),
  TO_UNICODE ('D'),
  TO_UNICODE (0)
} ;

//--- Unicode string for '$START$'
static const utf32 kUnicodeString_START [] = {
  TO_UNICODE ('S'),
  TO_UNICODE ('T'),
  TO_UNICODE ('A'),
  TO_UNICODE ('R'),
  TO_UNICODE ('T'),
  TO_UNICODE (0)
} ;

//--- Unicode string for '$STARTUPHOOK$'
static const utf32 kUnicodeString_STARTUPHOOK [] = {
  TO_UNICODE ('S'),
  TO_UNICODE ('T'),
  TO_UNICODE ('A'),
  TO_UNICODE ('R'),
  TO_UNICODE ('T'),
  TO_UNICODE ('U'),
  TO_UNICODE ('P'),
  TO_UNICODE ('H'),
  TO_UNICODE ('O'),
  TO_UNICODE ('O'),
  TO_UNICODE ('K'),
  TO_UNICODE (0)
} ;

//--- Unicode string for '$STATIC$'
static const utf32 kUnicodeString_STATIC [] = {
  TO_UNICODE ('S'),
  TO_UNICODE ('T'),
  TO_UNICODE ('A'),
  TO_UNICODE ('T'),
  TO_UNICODE ('I'),
  TO_UNICODE ('C'),
  TO_UNICODE (0)
} ;

//--- Unicode string for '$STATUS$'
static const utf32 kUnicodeString_STATUS [] = {
  TO_UNICODE ('S'),
  TO_UNICODE ('T'),
  TO_UNICODE ('A'),
  TO_UNICODE ('T'),
  TO_UNICODE ('U'),
  TO_UNICODE ('S'),
  TO_UNICODE (0)
} ;

//--- Unicode string for '$STRING$'
static const utf32 kUnicodeString_STRING [] = {
  TO_UNICODE ('S'),
  TO_UNICODE ('T'),
  TO_UNICODE ('R'),
  TO_UNICODE ('I'),
  TO_UNICODE ('N'),
  TO_UNICODE ('G'),
  TO_UNICODE (0)
} ;

//--- Unicode string for '$SYNCHRON$'
static const utf32 kUnicodeString_SYNCHRON [] = {
  TO_UNICODE ('S'),
  TO_UNICODE ('Y'),
  TO_UNICODE ('N'),
  TO_UNICODE ('C'),
  TO_UNICODE ('H'),
  TO_UNICODE ('R'),
  TO_UNICODE ('O'),
  TO_UNICODE ('N'),
  TO_UNICODE (0)
} ;

//--- Unicode string for '$SYNC_5F_STRATEGY$'
static const utf32 kUnicodeString_SYNC_5F_STRATEGY [] = {
  TO_UNICODE ('S'),
  TO_UNICODE ('Y'),
  TO_UNICODE ('N'),
  TO_UNICODE ('C'),
  TO_UNICODE ('_'),
  TO_UNICODE ('S'),
  TO_UNICODE ('T'),
  TO_UNICODE ('R'),
  TO_UNICODE ('A'),
  TO_UNICODE ('T'),
  TO_UNICODE ('E'),
  TO_UNICODE ('G'),
  TO_UNICODE ('Y'),
  TO_UNICODE (0)
} ;

//--- Unicode string for '$SYSTEM_5F_CALL$'
static const utf32 kUnicodeString_SYSTEM_5F_CALL [] = {
  TO_UNICODE ('S'),
  TO_UNICODE ('Y'),
  TO_UNICODE ('S'),
  TO_UNICODE ('T'),
  TO_UNICODE ('E'),
  TO_UNICODE ('M'),
  TO_UNICODE ('_'),
  TO_UNICODE ('C'),
  TO_UNICODE ('A'),
  TO_UNICODE ('L'),
  TO_UNICODE ('L'),
  TO_UNICODE (0)
} ;

//--- Unicode string for '$TASK$'
static const utf32 kUnicodeString_TASK [] = {
  TO_UNICODE ('T'),
  TO_UNICODE ('A'),
  TO_UNICODE ('S'),
  TO_UNICODE ('K'),
  TO_UNICODE (0)
} ;

//--- Unicode string for '$TASK_5F_TYPE$'
static const utf32 kUnicodeString_TASK_5F_TYPE [] = {
  TO_UNICODE ('T'),
  TO_UNICODE ('A'),
  TO_UNICODE ('S'),
  TO_UNICODE ('K'),
  TO_UNICODE ('_'),
  TO_UNICODE ('T'),
  TO_UNICODE ('Y'),
  TO_UNICODE ('P'),
  TO_UNICODE ('E'),
  TO_UNICODE (0)
} ;

//--- Unicode string for '$TICKS$'
static const utf32 kUnicodeString_TICKS [] = {
  TO_UNICODE ('T'),
  TO_UNICODE ('I'),
  TO_UNICODE ('C'),
  TO_UNICODE ('K'),
  TO_UNICODE ('S'),
  TO_UNICODE (0)
} ;

//--- Unicode string for '$TICKSPERBASE$'
static const utf32 kUnicodeString_TICKSPERBASE [] = {
  TO_UNICODE ('T'),
  TO_UNICODE ('I'),
  TO_UNICODE ('C'),
  TO_UNICODE ('K'),
  TO_UNICODE ('S'),
  TO_UNICODE ('P'),
  TO_UNICODE ('E'),
  TO_UNICODE ('R'),
  TO_UNICODE ('B'),
  TO_UNICODE ('A'),
  TO_UNICODE ('S'),
  TO_UNICODE ('E'),
  TO_UNICODE (0)
} ;

//--- Unicode string for '$TIMECONSTANT$'
static const utf32 kUnicodeString_TIMECONSTANT [] = {
  TO_UNICODE ('T'),
  TO_UNICODE ('I'),
  TO_UNICODE ('M'),
  TO_UNICODE ('E'),
  TO_UNICODE ('C'),
  TO_UNICODE ('O'),
  TO_UNICODE ('N'),
  TO_UNICODE ('S'),
  TO_UNICODE ('T'),
  TO_UNICODE ('A'),
  TO_UNICODE ('N'),
  TO_UNICODE ('T'),
  TO_UNICODE (0)
} ;

//--- Unicode string for '$TIMECONSTANTS$'
static const utf32 kUnicodeString_TIMECONSTANTS [] = {
  TO_UNICODE ('T'),
  TO_UNICODE ('I'),
  TO_UNICODE ('M'),
  TO_UNICODE ('E'),
  TO_UNICODE ('C'),
  TO_UNICODE ('O'),
  TO_UNICODE ('N'),
  TO_UNICODE ('S'),
  TO_UNICODE ('T'),
  TO_UNICODE ('A'),
  TO_UNICODE ('N'),
  TO_UNICODE ('T'),
  TO_UNICODE ('S'),
  TO_UNICODE (0)
} ;

//--- Unicode string for '$TIMEFRAME$'
static const utf32 kUnicodeString_TIMEFRAME [] = {
  TO_UNICODE ('T'),
  TO_UNICODE ('I'),
  TO_UNICODE ('M'),
  TO_UNICODE ('E'),
  TO_UNICODE ('F'),
  TO_UNICODE ('R'),
  TO_UNICODE ('A'),
  TO_UNICODE ('M'),
  TO_UNICODE ('E'),
  TO_UNICODE (0)
} ;

//--- Unicode string for '$TIMEOFFSET$'
static const utf32 kUnicodeString_TIMEOFFSET [] = {
  TO_UNICODE ('T'),
  TO_UNICODE ('I'),
  TO_UNICODE ('M'),
  TO_UNICODE ('E'),
  TO_UNICODE ('O'),
  TO_UNICODE ('F'),
  TO_UNICODE ('F'),
  TO_UNICODE ('S'),
  TO_UNICODE ('E'),
  TO_UNICODE ('T'),
  TO_UNICODE (0)
} ;

//--- Unicode string for '$TIMEOUT$'
static const utf32 kUnicodeString_TIMEOUT [] = {
  TO_UNICODE ('T'),
  TO_UNICODE ('I'),
  TO_UNICODE ('M'),
  TO_UNICODE ('E'),
  TO_UNICODE ('O'),
  TO_UNICODE ('U'),
  TO_UNICODE ('T'),
  TO_UNICODE (0)
} ;

//--- Unicode string for '$TIMEPERIOD$'
static const utf32 kUnicodeString_TIMEPERIOD [] = {
  TO_UNICODE ('T'),
  TO_UNICODE ('I'),
  TO_UNICODE ('M'),
  TO_UNICODE ('E'),
  TO_UNICODE ('P'),
  TO_UNICODE ('E'),
  TO_UNICODE ('R'),
  TO_UNICODE ('I'),
  TO_UNICODE ('O'),
  TO_UNICODE ('D'),
  TO_UNICODE (0)
} ;

//--- Unicode string for '$TIMING_5F_PROTECTION$'
static const utf32 kUnicodeString_TIMING_5F_PROTECTION [] = {
  TO_UNICODE ('T'),
  TO_UNICODE ('I'),
  TO_UNICODE ('M'),
  TO_UNICODE ('I'),
  TO_UNICODE ('N'),
  TO_UNICODE ('G'),
  TO_UNICODE ('_'),
  TO_UNICODE ('P'),
  TO_UNICODE ('R'),
  TO_UNICODE ('O'),
  TO_UNICODE ('T'),
  TO_UNICODE ('E'),
  TO_UNICODE ('C'),
  TO_UNICODE ('T'),
  TO_UNICODE ('I'),
  TO_UNICODE ('O'),
  TO_UNICODE ('N'),
  TO_UNICODE (0)
} ;

//--- Unicode string for '$TRACE$'
static const utf32 kUnicodeString_TRACE [] = {
  TO_UNICODE ('T'),
  TO_UNICODE ('R'),
  TO_UNICODE ('A'),
  TO_UNICODE ('C'),
  TO_UNICODE ('E'),
  TO_UNICODE (0)
} ;

//--- Unicode string for '$TRACE_5F_ALARM$'
static const utf32 kUnicodeString_TRACE_5F_ALARM [] = {
  TO_UNICODE ('T'),
  TO_UNICODE ('R'),
  TO_UNICODE ('A'),
  TO_UNICODE ('C'),
  TO_UNICODE ('E'),
  TO_UNICODE ('_'),
  TO_UNICODE ('A'),
  TO_UNICODE ('L'),
  TO_UNICODE ('A'),
  TO_UNICODE ('R'),
  TO_UNICODE ('M'),
  TO_UNICODE (0)
} ;

//--- Unicode string for '$TRACE_5F_ISR$'
static const utf32 kUnicodeString_TRACE_5F_ISR [] = {
  TO_UNICODE ('T'),
  TO_UNICODE ('R'),
  TO_UNICODE ('A'),
  TO_UNICODE ('C'),
  TO_UNICODE ('E'),
  TO_UNICODE ('_'),
  TO_UNICODE ('I'),
  TO_UNICODE ('S'),
  TO_UNICODE ('R'),
  TO_UNICODE (0)
} ;

//--- Unicode string for '$TRACE_5F_RESOURCE$'
static const utf32 kUnicodeString_TRACE_5F_RESOURCE [] = {
  TO_UNICODE ('T'),
  TO_UNICODE ('R'),
  TO_UNICODE ('A'),
  TO_UNICODE ('C'),
  TO_UNICODE ('E'),
  TO_UNICODE ('_'),
  TO_UNICODE ('R'),
  TO_UNICODE ('E'),
  TO_UNICODE ('S'),
  TO_UNICODE ('O'),
  TO_UNICODE ('U'),
  TO_UNICODE ('R'),
  TO_UNICODE ('C'),
  TO_UNICODE ('E'),
  TO_UNICODE (0)
} ;

//--- Unicode string for '$TRACE_5F_TASK$'
static const utf32 kUnicodeString_TRACE_5F_TASK [] = {
  TO_UNICODE ('T'),
  TO_UNICODE ('R'),
  TO_UNICODE ('A'),
  TO_UNICODE ('C'),
  TO_UNICODE ('E'),
  TO_UNICODE ('_'),
  TO_UNICODE ('T'),
  TO_UNICODE ('A'),
  TO_UNICODE ('S'),
  TO_UNICODE ('K'),
  TO_UNICODE (0)
} ;

//--- Unicode string for '$TRACE_5F_USER$'
static const utf32 kUnicodeString_TRACE_5F_USER [] = {
  TO_UNICODE ('T'),
  TO_UNICODE ('R'),
  TO_UNICODE ('A'),
  TO_UNICODE ('C'),
  TO_UNICODE ('E'),
  TO_UNICODE ('_'),
  TO_UNICODE ('U'),
  TO_UNICODE ('S'),
  TO_UNICODE ('E'),
  TO_UNICODE ('R'),
  TO_UNICODE (0)
} ;

//--- Unicode string for '$TRAMPOLINE_5F_BASE_5F_PATH$'
static const utf32 kUnicodeString_TRAMPOLINE_5F_BASE_5F_PATH [] = {
  TO_UNICODE ('T'),
  TO_UNICODE ('R'),
  TO_UNICODE ('A'),
  TO_UNICODE ('M'),
  TO_UNICODE ('P'),
  TO_UNICODE ('O'),
  TO_UNICODE ('L'),
  TO_UNICODE ('I'),
  TO_UNICODE ('N'),
  TO_UNICODE ('E'),
  TO_UNICODE ('_'),
  TO_UNICODE ('B'),
  TO_UNICODE ('A'),
  TO_UNICODE ('S'),
  TO_UNICODE ('E'),
  TO_UNICODE ('_'),
  TO_UNICODE ('P'),
  TO_UNICODE ('A'),
  TO_UNICODE ('T'),
  TO_UNICODE ('H'),
  TO_UNICODE (0)
} ;

//--- Unicode string for '$TRANSFERPROPERTY$'
static const utf32 kUnicodeString_TRANSFERPROPERTY [] = {
  TO_UNICODE ('T'),
  TO_UNICODE ('R'),
  TO_UNICODE ('A'),
  TO_UNICODE ('N'),
  TO_UNICODE ('S'),
  TO_UNICODE ('F'),
  TO_UNICODE ('E'),
  TO_UNICODE ('R'),
  TO_UNICODE ('P'),
  TO_UNICODE ('R'),
  TO_UNICODE ('O'),
  TO_UNICODE ('P'),
  TO_UNICODE ('E'),
  TO_UNICODE ('R'),
  TO_UNICODE ('T'),
  TO_UNICODE ('Y'),
  TO_UNICODE (0)
} ;

//--- Unicode string for '$TRANSMISSIONMODE$'
static const utf32 kUnicodeString_TRANSMISSIONMODE [] = {
  TO_UNICODE ('T'),
  TO_UNICODE ('R'),
  TO_UNICODE ('A'),
  TO_UNICODE ('N'),
  TO_UNICODE ('S'),
  TO_UNICODE ('M'),
  TO_UNICODE ('I'),
  TO_UNICODE ('S'),
  TO_UNICODE ('S'),
  TO_UNICODE ('I'),
  TO_UNICODE ('O'),
  TO_UNICODE ('N'),
  TO_UNICODE ('M'),
  TO_UNICODE ('O'),
  TO_UNICODE ('D'),
  TO_UNICODE ('E'),
  TO_UNICODE (0)
} ;

//--- Unicode string for '$TRIGGERED$'
static const utf32 kUnicodeString_TRIGGERED [] = {
  TO_UNICODE ('T'),
  TO_UNICODE ('R'),
  TO_UNICODE ('I'),
  TO_UNICODE ('G'),
  TO_UNICODE ('G'),
  TO_UNICODE ('E'),
  TO_UNICODE ('R'),
  TO_UNICODE ('E'),
  TO_UNICODE ('D'),
  TO_UNICODE (0)
} ;

//--- Unicode string for '$TRUE$'
static const utf32 kUnicodeString_TRUE [] = {
  TO_UNICODE ('T'),
  TO_UNICODE ('R'),
  TO_UNICODE ('U'),
  TO_UNICODE ('E'),
  TO_UNICODE (0)
} ;

//--- Unicode string for '$TRUSTED$'
static const utf32 kUnicodeString_TRUSTED [] = {
  TO_UNICODE ('T'),
  TO_UNICODE ('R'),
  TO_UNICODE ('U'),
  TO_UNICODE ('S'),
  TO_UNICODE ('T'),
  TO_UNICODE ('E'),
  TO_UNICODE ('D'),
  TO_UNICODE (0)
} ;

//--- Unicode string for '$TRUSTED_5F_FUNCTION$'
static const utf32 kUnicodeString_TRUSTED_5F_FUNCTION [] = {
  TO_UNICODE ('T'),
  TO_UNICODE ('R'),
  TO_UNICODE ('U'),
  TO_UNICODE ('S'),
  TO_UNICODE ('T'),
  TO_UNICODE ('E'),
  TO_UNICODE ('D'),
  TO_UNICODE ('_'),
  TO_UNICODE ('F'),
  TO_UNICODE ('U'),
  TO_UNICODE ('N'),
  TO_UNICODE ('C'),
  TO_UNICODE ('T'),
  TO_UNICODE ('I'),
  TO_UNICODE ('O'),
  TO_UNICODE ('N'),
  TO_UNICODE (0)
} ;

//--- Unicode string for '$TYPE$'
static const utf32 kUnicodeString_TYPE [] = {
  TO_UNICODE ('T'),
  TO_UNICODE ('Y'),
  TO_UNICODE ('P'),
  TO_UNICODE ('E'),
  TO_UNICODE (0)
} ;

//--- Unicode string for '$UINT_33__32_$'
static const utf32 kUnicodeString_UINT_33__32_ [] = {
  TO_UNICODE ('U'),
  TO_UNICODE ('I'),
  TO_UNICODE ('N'),
  TO_UNICODE ('T'),
  TO_UNICODE ('3'),
  TO_UNICODE ('2'),
  TO_UNICODE (0)
} ;

//--- Unicode string for '$UINT_36__34_$'
static const utf32 kUnicodeString_UINT_36__34_ [] = {
  TO_UNICODE ('U'),
  TO_UNICODE ('I'),
  TO_UNICODE ('N'),
  TO_UNICODE ('T'),
  TO_UNICODE ('6'),
  TO_UNICODE ('4'),
  TO_UNICODE (0)
} ;

//--- Unicode string for '$UNIT$'
static const utf32 kUnicodeString_UNIT [] = {
  TO_UNICODE ('U'),
  TO_UNICODE ('N'),
  TO_UNICODE ('I'),
  TO_UNICODE ('T'),
  TO_UNICODE (0)
} ;

//--- Unicode string for '$UNSIGNEDINTEGER$'
static const utf32 kUnicodeString_UNSIGNEDINTEGER [] = {
  TO_UNICODE ('U'),
  TO_UNICODE ('N'),
  TO_UNICODE ('S'),
  TO_UNICODE ('I'),
  TO_UNICODE ('G'),
  TO_UNICODE ('N'),
  TO_UNICODE ('E'),
  TO_UNICODE ('D'),
  TO_UNICODE ('I'),
  TO_UNICODE ('N'),
  TO_UNICODE ('T'),
  TO_UNICODE ('E'),
  TO_UNICODE ('G'),
  TO_UNICODE ('E'),
  TO_UNICODE ('R'),
  TO_UNICODE (0)
} ;

//--- Unicode string for '$USE$'
static const utf32 kUnicodeString_USE [] = {
  TO_UNICODE ('U'),
  TO_UNICODE ('S'),
  TO_UNICODE ('E'),
  TO_UNICODE (0)
} ;

//--- Unicode string for '$USEGETSERVICEID$'
static const utf32 kUnicodeString_USEGETSERVICEID [] = {
  TO_UNICODE ('U'),
  TO_UNICODE ('S'),
  TO_UNICODE ('E'),
  TO_UNICODE ('G'),
  TO_UNICODE ('E'),
  TO_UNICODE ('T'),
  TO_UNICODE ('S'),
  TO_UNICODE ('E'),
  TO_UNICODE ('R'),
  TO_UNICODE ('V'),
  TO_UNICODE ('I'),
  TO_UNICODE ('C'),
  TO_UNICODE ('E'),
  TO_UNICODE ('I'),
  TO_UNICODE ('D'),
  TO_UNICODE (0)
} ;

//--- Unicode string for '$USEPARAMETERACCESS$'
static const utf32 kUnicodeString_USEPARAMETERACCESS [] = {
  TO_UNICODE ('U'),
  TO_UNICODE ('S'),
  TO_UNICODE ('E'),
  TO_UNICODE ('P'),
  TO_UNICODE ('A'),
  TO_UNICODE ('R'),
  TO_UNICODE ('A'),
  TO_UNICODE ('M'),
  TO_UNICODE ('E'),
  TO_UNICODE ('T'),
  TO_UNICODE ('E'),
  TO_UNICODE ('R'),
  TO_UNICODE ('A'),
  TO_UNICODE ('C'),
  TO_UNICODE ('C'),
  TO_UNICODE ('E'),
  TO_UNICODE ('S'),
  TO_UNICODE ('S'),
  TO_UNICODE (0)
} ;

//--- Unicode string for '$USERESSCHEDULER$'
static const utf32 kUnicodeString_USERESSCHEDULER [] = {
  TO_UNICODE ('U'),
  TO_UNICODE ('S'),
  TO_UNICODE ('E'),
  TO_UNICODE ('R'),
  TO_UNICODE ('E'),
  TO_UNICODE ('S'),
  TO_UNICODE ('S'),
  TO_UNICODE ('C'),
  TO_UNICODE ('H'),
  TO_UNICODE ('E'),
  TO_UNICODE ('D'),
  TO_UNICODE ('U'),
  TO_UNICODE ('L'),
  TO_UNICODE ('E'),
  TO_UNICODE ('R'),
  TO_UNICODE (0)
} ;

//--- Unicode string for '$WITH_5F_AUTO$'
static const utf32 kUnicodeString_WITH_5F_AUTO [] = {
  TO_UNICODE ('W'),
  TO_UNICODE ('I'),
  TO_UNICODE ('T'),
  TO_UNICODE ('H'),
  TO_UNICODE ('_'),
  TO_UNICODE ('A'),
  TO_UNICODE ('U'),
  TO_UNICODE ('T'),
  TO_UNICODE ('O'),
  TO_UNICODE (0)
} ;

//--- Unicode string for '$X$'
static const utf32 kUnicodeString_X [] = {
  TO_UNICODE ('X'),
  TO_UNICODE (0)
} ;

//--- Unicode string for '$ZERO$'
static const utf32 kUnicodeString_ZERO [] = {
  TO_UNICODE ('Z'),
  TO_UNICODE ('E'),
  TO_UNICODE ('R'),
  TO_UNICODE ('O'),
  TO_UNICODE (0)
} ;

//--- Unicode string for '$_5B_$'
static const utf32 kUnicodeString__5B_ [] = {
  TO_UNICODE ('['),
  TO_UNICODE (0)
} ;

//--- Unicode string for '$_5D_$'
static const utf32 kUnicodeString__5D_ [] = {
  TO_UNICODE (']'),
  TO_UNICODE (0)
} ;

//--- Unicode string for '$include$'
static const utf32 kUnicodeString_include [] = {
  TO_UNICODE ('i'),
  TO_UNICODE ('n'),
  TO_UNICODE ('c'),
  TO_UNICODE ('l'),
  TO_UNICODE ('u'),
  TO_UNICODE ('d'),
  TO_UNICODE ('e'),
  TO_UNICODE (0)
} ;

//--- Unicode string for '$_7B_$'
static const utf32 kUnicodeString__7B_ [] = {
  TO_UNICODE ('{'),
  TO_UNICODE (0)
} ;

//--- Unicode string for '$_7D_$'
static const utf32 kUnicodeString__7D_ [] = {
  TO_UNICODE ('}'),
  TO_UNICODE (0)
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//             Key words table 'OILDelimiters'                            *
//                                                                           *
//---------------------------------------------------------------------------*

static const PMSInt32 ktable_size_OILDelimiters = 11 ;

static const C_unicode_lexique_table_entry ktable_for_OILDelimiters [ktable_size_OILDelimiters] = {
  C_unicode_lexique_table_entry (kUnicodeString__2C_, 1, C_Lexique_goil_5F_lexique::kToken__2C_),
  C_unicode_lexique_table_entry (kUnicodeString__2D_, 1, C_Lexique_goil_5F_lexique::kToken__2D_),
  C_unicode_lexique_table_entry (kUnicodeString__2E_, 1, C_Lexique_goil_5F_lexique::kToken__2E_),
  C_unicode_lexique_table_entry (kUnicodeString__3A_, 1, C_Lexique_goil_5F_lexique::kToken__3A_),
  C_unicode_lexique_table_entry (kUnicodeString__3B_, 1, C_Lexique_goil_5F_lexique::kToken__3B_),
  C_unicode_lexique_table_entry (kUnicodeString__3D_, 1, C_Lexique_goil_5F_lexique::kToken__3D_),
  C_unicode_lexique_table_entry (kUnicodeString__5B_, 1, C_Lexique_goil_5F_lexique::kToken__5B_),
  C_unicode_lexique_table_entry (kUnicodeString__5D_, 1, C_Lexique_goil_5F_lexique::kToken__5D_),
  C_unicode_lexique_table_entry (kUnicodeString__7B_, 1, C_Lexique_goil_5F_lexique::kToken__7B_),
  C_unicode_lexique_table_entry (kUnicodeString__7D_, 1, C_Lexique_goil_5F_lexique::kToken__7D_),
  C_unicode_lexique_table_entry (kUnicodeString__2E__2E_, 2, C_Lexique_goil_5F_lexique::kToken__2E__2E_)
} ;

PMSInt16 C_Lexique_goil_5F_lexique::search_into_OILDelimiters (const C_String & inSearchedString) {
  return searchInList (inSearchedString, ktable_for_OILDelimiters, ktable_size_OILDelimiters) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//             Key words table 'alarm_attributes'                            *
//                                                                           *
//---------------------------------------------------------------------------*

static const PMSInt32 ktable_size_alarm_attributes = 8 ;

static const C_unicode_lexique_table_entry ktable_for_alarm_attributes [ktable_size_alarm_attributes] = {
  C_unicode_lexique_table_entry (kUnicodeString_ACTION, 6, C_Lexique_goil_5F_lexique::kToken_ACTION),
  C_unicode_lexique_table_entry (kUnicodeString_SETEVENT, 8, C_Lexique_goil_5F_lexique::kToken_SETEVENT),
  C_unicode_lexique_table_entry (kUnicodeString_ALARMTIME, 9, C_Lexique_goil_5F_lexique::kToken_ALARMTIME),
  C_unicode_lexique_table_entry (kUnicodeString_CYCLETIME, 9, C_Lexique_goil_5F_lexique::kToken_CYCLETIME),
  C_unicode_lexique_table_entry (kUnicodeString_ACTIVATETASK, 12, C_Lexique_goil_5F_lexique::kToken_ACTIVATETASK),
  C_unicode_lexique_table_entry (kUnicodeString_ALARMCALLBACK, 13, C_Lexique_goil_5F_lexique::kToken_ALARMCALLBACK),
  C_unicode_lexique_table_entry (kUnicodeString_INCREMENTCOUNTER, 16, C_Lexique_goil_5F_lexique::kToken_INCREMENTCOUNTER),
  C_unicode_lexique_table_entry (kUnicodeString_ALARMCALLBACKNAME, 17, C_Lexique_goil_5F_lexique::kToken_ALARMCALLBACKNAME)
} ;

PMSInt16 C_Lexique_goil_5F_lexique::search_into_alarm_attributes (const C_String & inSearchedString) {
  return searchInList (inSearchedString, ktable_for_alarm_attributes, ktable_size_alarm_attributes) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//             Key words table 'application_attrs'                            *
//                                                                           *
//---------------------------------------------------------------------------*

static const PMSInt32 ktable_size_application_attrs = 5 ;

static const C_unicode_lexique_table_entry ktable_for_application_attrs [ktable_size_application_attrs] = {
  C_unicode_lexique_table_entry (kUnicodeString_NAME, 4, C_Lexique_goil_5F_lexique::kToken_NAME),
  C_unicode_lexique_table_entry (kUnicodeString_TRUSTED, 7, C_Lexique_goil_5F_lexique::kToken_TRUSTED),
  C_unicode_lexique_table_entry (kUnicodeString_RESTARTTASK, 11, C_Lexique_goil_5F_lexique::kToken_RESTARTTASK),
  C_unicode_lexique_table_entry (kUnicodeString_HAS_5F_RESTARTTASK, 15, C_Lexique_goil_5F_lexique::kToken_HAS_5F_RESTARTTASK),
  C_unicode_lexique_table_entry (kUnicodeString_TRUSTED_5F_FUNCTION, 16, C_Lexique_goil_5F_lexique::kToken_TRUSTED_5F_FUNCTION)
} ;

PMSInt16 C_Lexique_goil_5F_lexique::search_into_application_attrs (const C_String & inSearchedString) {
  return searchInList (inSearchedString, ktable_for_application_attrs, ktable_size_application_attrs) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//             Key words table 'as_counter_attributes'                            *
//                                                                           *
//---------------------------------------------------------------------------*

static const PMSInt32 ktable_size_as_counter_attributes = 2 ;

static const C_unicode_lexique_table_entry ktable_for_as_counter_attributes [ktable_size_as_counter_attributes] = {
  C_unicode_lexique_table_entry (kUnicodeString_TYPE, 4, C_Lexique_goil_5F_lexique::kToken_TYPE),
  C_unicode_lexique_table_entry (kUnicodeString_UNIT, 4, C_Lexique_goil_5F_lexique::kToken_UNIT)
} ;

PMSInt16 C_Lexique_goil_5F_lexique::search_into_as_counter_attributes (const C_String & inSearchedString) {
  return searchInList (inSearchedString, ktable_for_as_counter_attributes, ktable_size_as_counter_attributes) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//             Key words table 'autosar_attr'                            *
//                                                                           *
//---------------------------------------------------------------------------*

static const PMSInt32 ktable_size_autosar_attr = 5 ;

static const C_unicode_lexique_table_entry ktable_for_autosar_attr [ktable_size_autosar_attr] = {
  C_unicode_lexique_table_entry (kUnicodeString_PROTECTIONHOOK, 14, C_Lexique_goil_5F_lexique::kToken_PROTECTIONHOOK),
  C_unicode_lexique_table_entry (kUnicodeString_STACKMONITORING, 15, C_Lexique_goil_5F_lexique::kToken_STACKMONITORING),
  C_unicode_lexique_table_entry (kUnicodeString_SCALABILITYCLASS, 16, C_Lexique_goil_5F_lexique::kToken_SCALABILITYCLASS),
  C_unicode_lexique_table_entry (kUnicodeString_TIMING_5F_PROTECTION, 17, C_Lexique_goil_5F_lexique::kToken_TIMING_5F_PROTECTION),
  C_unicode_lexique_table_entry (kUnicodeString_ACCESSING_5F_APPLICATION, 21, C_Lexique_goil_5F_lexique::kToken_ACCESSING_5F_APPLICATION)
} ;

PMSInt16 C_Lexique_goil_5F_lexique::search_into_autosar_attr (const C_String & inSearchedString) {
  return searchInList (inSearchedString, ktable_for_autosar_attr, ktable_size_autosar_attr) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//             Key words table 'autosar_key'                            *
//                                                                           *
//---------------------------------------------------------------------------*

static const PMSInt32 ktable_size_autosar_key = 4 ;

static const C_unicode_lexique_table_entry ktable_for_autosar_key [ktable_size_autosar_key] = {
  C_unicode_lexique_table_entry (kUnicodeString_SC_31_, 3, C_Lexique_goil_5F_lexique::kToken_SC_31_),
  C_unicode_lexique_table_entry (kUnicodeString_SC_32_, 3, C_Lexique_goil_5F_lexique::kToken_SC_32_),
  C_unicode_lexique_table_entry (kUnicodeString_SC_33_, 3, C_Lexique_goil_5F_lexique::kToken_SC_33_),
  C_unicode_lexique_table_entry (kUnicodeString_SC_34_, 3, C_Lexique_goil_5F_lexique::kToken_SC_34_)
} ;

PMSInt16 C_Lexique_goil_5F_lexique::search_into_autosar_key (const C_String & inSearchedString) {
  return searchInList (inSearchedString, ktable_for_autosar_key, ktable_size_autosar_key) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//             Key words table 'autosar_objs'                            *
//                                                                           *
//---------------------------------------------------------------------------*

static const PMSInt32 ktable_size_autosar_objs = 2 ;

static const C_unicode_lexique_table_entry ktable_for_autosar_objs [ktable_size_autosar_objs] = {
  C_unicode_lexique_table_entry (kUnicodeString_APPLICATION, 11, C_Lexique_goil_5F_lexique::kToken_APPLICATION),
  C_unicode_lexique_table_entry (kUnicodeString_SCHEDULETABLE, 13, C_Lexique_goil_5F_lexique::kToken_SCHEDULETABLE)
} ;

PMSInt16 C_Lexique_goil_5F_lexique::search_into_autosar_objs (const C_String & inSearchedString) {
  return searchInList (inSearchedString, ktable_for_autosar_objs, ktable_size_autosar_objs) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//             Key words table 'autostart_attrs'                            *
//                                                                           *
//---------------------------------------------------------------------------*

static const PMSInt32 ktable_size_autostart_attrs = 4 ;

static const C_unicode_lexique_table_entry ktable_for_autostart_attrs [ktable_size_autostart_attrs] = {
  C_unicode_lexique_table_entry (kUnicodeString_START, 5, C_Lexique_goil_5F_lexique::kToken_START),
  C_unicode_lexique_table_entry (kUnicodeString_ABSOLUTE, 8, C_Lexique_goil_5F_lexique::kToken_ABSOLUTE),
  C_unicode_lexique_table_entry (kUnicodeString_RELATIVE, 8, C_Lexique_goil_5F_lexique::kToken_RELATIVE),
  C_unicode_lexique_table_entry (kUnicodeString_SYNCHRON, 8, C_Lexique_goil_5F_lexique::kToken_SYNCHRON)
} ;

PMSInt16 C_Lexique_goil_5F_lexique::search_into_autostart_attrs (const C_String & inSearchedString) {
  return searchInList (inSearchedString, ktable_for_autostart_attrs, ktable_size_autostart_attrs) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//             Key words table 'boolean'                            *
//                                                                           *
//---------------------------------------------------------------------------*

static const PMSInt32 ktable_size_boolean = 2 ;

static const C_unicode_lexique_table_entry ktable_for_boolean [ktable_size_boolean] = {
  C_unicode_lexique_table_entry (kUnicodeString_TRUE, 4, C_Lexique_goil_5F_lexique::kToken_TRUE),
  C_unicode_lexique_table_entry (kUnicodeString_FALSE, 5, C_Lexique_goil_5F_lexique::kToken_FALSE)
} ;

PMSInt16 C_Lexique_goil_5F_lexique::search_into_boolean (const C_String & inSearchedString) {
  return searchInList (inSearchedString, ktable_for_boolean, ktable_size_boolean) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//             Key words table 'com_attribute'                            *
//                                                                           *
//---------------------------------------------------------------------------*

static const PMSInt32 ktable_size_com_attribute = 10 ;

static const C_unicode_lexique_table_entry ktable_for_com_attribute [ktable_size_com_attribute] = {
  C_unicode_lexique_table_entry (kUnicodeString_USE, 3, C_Lexique_goil_5F_lexique::kToken_USE),
  C_unicode_lexique_table_entry (kUnicodeString_COMSTATUS, 9, C_Lexique_goil_5F_lexique::kToken_COMSTATUS),
  C_unicode_lexique_table_entry (kUnicodeString_COMAPPMODE, 10, C_Lexique_goil_5F_lexique::kToken_COMAPPMODE),
  C_unicode_lexique_table_entry (kUnicodeString_COMEXTENDED, 11, C_Lexique_goil_5F_lexique::kToken_COMEXTENDED),
  C_unicode_lexique_table_entry (kUnicodeString_COMSTANDARD, 11, C_Lexique_goil_5F_lexique::kToken_COMSTANDARD),
  C_unicode_lexique_table_entry (kUnicodeString_COMTIMEBASE, 11, C_Lexique_goil_5F_lexique::kToken_COMTIMEBASE),
  C_unicode_lexique_table_entry (kUnicodeString_COMERRORHOOK, 12, C_Lexique_goil_5F_lexique::kToken_COMERRORHOOK),
  C_unicode_lexique_table_entry (kUnicodeString_COMUSEGETSERVICEID, 18, C_Lexique_goil_5F_lexique::kToken_COMUSEGETSERVICEID),
  C_unicode_lexique_table_entry (kUnicodeString_COMSTARTCOMEXTENSION, 20, C_Lexique_goil_5F_lexique::kToken_COMSTARTCOMEXTENSION),
  C_unicode_lexique_table_entry (kUnicodeString_COMUSEPARAMETERACCESS, 21, C_Lexique_goil_5F_lexique::kToken_COMUSEPARAMETERACCESS)
} ;

PMSInt16 C_Lexique_goil_5F_lexique::search_into_com_attribute (const C_String & inSearchedString) {
  return searchInList (inSearchedString, ktable_for_com_attribute, ktable_size_com_attribute) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//             Key words table 'commands'                            *
//                                                                           *
//---------------------------------------------------------------------------*

static const PMSInt32 ktable_size_commands = 1 ;

static const C_unicode_lexique_table_entry ktable_for_commands [ktable_size_commands] = {
  C_unicode_lexique_table_entry (kUnicodeString_include, 7, C_Lexique_goil_5F_lexique::kToken_include)
} ;

PMSInt16 C_Lexique_goil_5F_lexique::search_into_commands (const C_String & inSearchedString) {
  return searchInList (inSearchedString, ktable_for_commands, ktable_size_commands) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//             Key words table 'counter_attributes'                            *
//                                                                           *
//---------------------------------------------------------------------------*

static const PMSInt32 ktable_size_counter_attributes = 3 ;

static const C_unicode_lexique_table_entry ktable_for_counter_attributes [ktable_size_counter_attributes] = {
  C_unicode_lexique_table_entry (kUnicodeString_MINCYCLE, 8, C_Lexique_goil_5F_lexique::kToken_MINCYCLE),
  C_unicode_lexique_table_entry (kUnicodeString_TICKSPERBASE, 12, C_Lexique_goil_5F_lexique::kToken_TICKSPERBASE),
  C_unicode_lexique_table_entry (kUnicodeString_MAXALLOWEDVALUE, 15, C_Lexique_goil_5F_lexique::kToken_MAXALLOWEDVALUE)
} ;

PMSInt16 C_Lexique_goil_5F_lexique::search_into_counter_attributes (const C_String & inSearchedString) {
  return searchInList (inSearchedString, ktable_for_counter_attributes, ktable_size_counter_attributes) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//             Key words table 'cpt_type_attr'                            *
//                                                                           *
//---------------------------------------------------------------------------*

static const PMSInt32 ktable_size_cpt_type_attr = 11 ;

static const C_unicode_lexique_table_entry ktable_for_cpt_type_attr [ktable_size_cpt_type_attr] = {
  C_unicode_lexique_table_entry (kUnicodeString_NS, 2, C_Lexique_goil_5F_lexique::kToken_NS),
  C_unicode_lexique_table_entry (kUnicodeString_GPT, 3, C_Lexique_goil_5F_lexique::kToken_GPT),
  C_unicode_lexique_table_entry (kUnicodeString_DRIVER, 6, C_Lexique_goil_5F_lexique::kToken_DRIVER),
  C_unicode_lexique_table_entry (kUnicodeString_HARDWARE, 8, C_Lexique_goil_5F_lexique::kToken_HARDWARE),
  C_unicode_lexique_table_entry (kUnicodeString_SOFTWARE, 8, C_Lexique_goil_5F_lexique::kToken_SOFTWARE),
  C_unicode_lexique_table_entry (kUnicodeString_CONSTNAME, 9, C_Lexique_goil_5F_lexique::kToken_CONSTNAME),
  C_unicode_lexique_table_entry (kUnicodeString_OSINTERNAL, 10, C_Lexique_goil_5F_lexique::kToken_OSINTERNAL),
  C_unicode_lexique_table_entry (kUnicodeString_TIMECONSTANT, 12, C_Lexique_goil_5F_lexique::kToken_TIMECONSTANT),
  C_unicode_lexique_table_entry (kUnicodeString_TIMECONSTANTS, 13, C_Lexique_goil_5F_lexique::kToken_TIMECONSTANTS),
  C_unicode_lexique_table_entry (kUnicodeString_GPTCHANNELNAME, 14, C_Lexique_goil_5F_lexique::kToken_GPTCHANNELNAME),
  C_unicode_lexique_table_entry (kUnicodeString_NS_5F_PER_5F_HW_5F_TICK, 14, C_Lexique_goil_5F_lexique::kToken_NS_5F_PER_5F_HW_5F_TICK)
} ;

PMSInt16 C_Lexique_goil_5F_lexique::search_into_cpt_type_attr (const C_String & inSearchedString) {
  return searchInList (inSearchedString, ktable_for_cpt_type_attr, ktable_size_cpt_type_attr) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//             Key words table 'dataTypes'                            *
//                                                                           *
//---------------------------------------------------------------------------*

static const PMSInt32 ktable_size_dataTypes = 8 ;

static const C_unicode_lexique_table_entry ktable_for_dataTypes [ktable_size_dataTypes] = {
  C_unicode_lexique_table_entry (kUnicodeString_ENUM, 4, C_Lexique_goil_5F_lexique::kToken_ENUM),
  C_unicode_lexique_table_entry (kUnicodeString_FLOAT, 5, C_Lexique_goil_5F_lexique::kToken_FLOAT),
  C_unicode_lexique_table_entry (kUnicodeString_INT_33__32_, 5, C_Lexique_goil_5F_lexique::kToken_INT_33__32_),
  C_unicode_lexique_table_entry (kUnicodeString_INT_36__34_, 5, C_Lexique_goil_5F_lexique::kToken_INT_36__34_),
  C_unicode_lexique_table_entry (kUnicodeString_STRING, 6, C_Lexique_goil_5F_lexique::kToken_STRING),
  C_unicode_lexique_table_entry (kUnicodeString_UINT_33__32_, 6, C_Lexique_goil_5F_lexique::kToken_UINT_33__32_),
  C_unicode_lexique_table_entry (kUnicodeString_UINT_36__34_, 6, C_Lexique_goil_5F_lexique::kToken_UINT_36__34_),
  C_unicode_lexique_table_entry (kUnicodeString_BOOLEAN, 7, C_Lexique_goil_5F_lexique::kToken_BOOLEAN)
} ;

PMSInt16 C_Lexique_goil_5F_lexique::search_into_dataTypes (const C_String & inSearchedString) {
  return searchInList (inSearchedString, ktable_for_dataTypes, ktable_size_dataTypes) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//             Key words table 'ipdu_attribute'                            *
//                                                                           *
//---------------------------------------------------------------------------*

static const PMSInt32 ktable_size_ipdu_attribute = 12 ;

static const C_unicode_lexique_table_entry ktable_for_ipdu_attribute [ktable_size_ipdu_attribute] = {
  C_unicode_lexique_table_entry (kUnicodeString_MIXED, 5, C_Lexique_goil_5F_lexique::kToken_MIXED),
  C_unicode_lexique_table_entry (kUnicodeString_DIRECT, 6, C_Lexique_goil_5F_lexique::kToken_DIRECT),
  C_unicode_lexique_table_entry (kUnicodeString_TIMEOUT, 7, C_Lexique_goil_5F_lexique::kToken_TIMEOUT),
  C_unicode_lexique_table_entry (kUnicodeString_PERIODIC, 8, C_Lexique_goil_5F_lexique::kToken_PERIODIC),
  C_unicode_lexique_table_entry (kUnicodeString_LAYERUSED, 9, C_Lexique_goil_5F_lexique::kToken_LAYERUSED),
  C_unicode_lexique_table_entry (kUnicodeString_TIMEOFFSET, 10, C_Lexique_goil_5F_lexique::kToken_TIMEOFFSET),
  C_unicode_lexique_table_entry (kUnicodeString_TIMEPERIOD, 10, C_Lexique_goil_5F_lexique::kToken_TIMEPERIOD),
  C_unicode_lexique_table_entry (kUnicodeString_IPDUCALLOUT, 11, C_Lexique_goil_5F_lexique::kToken_IPDUCALLOUT),
  C_unicode_lexique_table_entry (kUnicodeString_FIRTSTIMEOUT, 12, C_Lexique_goil_5F_lexique::kToken_FIRTSTIMEOUT),
  C_unicode_lexique_table_entry (kUnicodeString_IPDUPROPERTY, 12, C_Lexique_goil_5F_lexique::kToken_IPDUPROPERTY),
  C_unicode_lexique_table_entry (kUnicodeString_MINIMUMDELAYTIME, 16, C_Lexique_goil_5F_lexique::kToken_MINIMUMDELAYTIME),
  C_unicode_lexique_table_entry (kUnicodeString_TRANSMISSIONMODE, 16, C_Lexique_goil_5F_lexique::kToken_TRANSMISSIONMODE)
} ;

PMSInt16 C_Lexique_goil_5F_lexique::search_into_ipdu_attribute (const C_String & inSearchedString) {
  return searchInList (inSearchedString, ktable_for_ipdu_attribute, ktable_size_ipdu_attribute) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//             Key words table 'it_src_attr'                            *
//                                                                           *
//---------------------------------------------------------------------------*

static const PMSInt32 ktable_size_it_src_attr = 1 ;

static const C_unicode_lexique_table_entry ktable_for_it_src_attr [ktable_size_it_src_attr] = {
  C_unicode_lexique_table_entry (kUnicodeString_SOURCE, 6, C_Lexique_goil_5F_lexique::kToken_SOURCE)
} ;

PMSInt16 C_Lexique_goil_5F_lexique::search_into_it_src_attr (const C_String & inSearchedString) {
  return searchInList (inSearchedString, ktable_for_it_src_attr, ktable_size_it_src_attr) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//             Key words table 'makefileKeywords'                            *
//                                                                           *
//---------------------------------------------------------------------------*

static const PMSInt32 ktable_size_makefileKeywords = 11 ;

static const C_unicode_lexique_table_entry ktable_for_makefileKeywords [ktable_size_makefileKeywords] = {
  C_unicode_lexique_table_entry (kUnicodeString_CFLAGS, 6, C_Lexique_goil_5F_lexique::kToken_CFLAGS),
  C_unicode_lexique_table_entry (kUnicodeString_LINKER, 6, C_Lexique_goil_5F_lexique::kToken_LINKER),
  C_unicode_lexique_table_entry (kUnicodeString_SCRIPT, 6, C_Lexique_goil_5F_lexique::kToken_SCRIPT),
  C_unicode_lexique_table_entry (kUnicodeString_APP_5F_SRC, 7, C_Lexique_goil_5F_lexique::kToken_APP_5F_SRC),
  C_unicode_lexique_table_entry (kUnicodeString_ASFLAGS, 7, C_Lexique_goil_5F_lexique::kToken_ASFLAGS),
  C_unicode_lexique_table_entry (kUnicodeString_LDFLAGS, 7, C_Lexique_goil_5F_lexique::kToken_LDFLAGS),
  C_unicode_lexique_table_entry (kUnicodeString_APP_5F_NAME, 8, C_Lexique_goil_5F_lexique::kToken_APP_5F_NAME),
  C_unicode_lexique_table_entry (kUnicodeString_COMPILER, 8, C_Lexique_goil_5F_lexique::kToken_COMPILER),
  C_unicode_lexique_table_entry (kUnicodeString_CPPFLAGS, 8, C_Lexique_goil_5F_lexique::kToken_CPPFLAGS),
  C_unicode_lexique_table_entry (kUnicodeString_ASSEMBLER, 9, C_Lexique_goil_5F_lexique::kToken_ASSEMBLER),
  C_unicode_lexique_table_entry (kUnicodeString_TRAMPOLINE_5F_BASE_5F_PATH, 20, C_Lexique_goil_5F_lexique::kToken_TRAMPOLINE_5F_BASE_5F_PATH)
} ;

PMSInt16 C_Lexique_goil_5F_lexique::search_into_makefileKeywords (const C_String & inSearchedString) {
  return searchInList (inSearchedString, ktable_for_makefileKeywords, ktable_size_makefileKeywords) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//             Key words table 'message_attributes'                            *
//                                                                           *
//---------------------------------------------------------------------------*

static const PMSInt32 ktable_size_message_attributes = 57 ;

static const C_unicode_lexique_table_entry ktable_for_message_attributes [ktable_size_message_attributes] = {
  C_unicode_lexique_table_entry (kUnicodeString_X, 1, C_Lexique_goil_5F_lexique::kToken_X),
  C_unicode_lexique_table_entry (kUnicodeString_MAX, 3, C_Lexique_goil_5F_lexique::kToken_MAX),
  C_unicode_lexique_table_entry (kUnicodeString_MIN, 3, C_Lexique_goil_5F_lexique::kToken_MIN),
  C_unicode_lexique_table_entry (kUnicodeString_FLAG, 4, C_Lexique_goil_5F_lexique::kToken_FLAG),
  C_unicode_lexique_table_entry (kUnicodeString_LINK, 4, C_Lexique_goil_5F_lexique::kToken_LINK),
  C_unicode_lexique_table_entry (kUnicodeString_NONE, 4, C_Lexique_goil_5F_lexique::kToken_NONE),
  C_unicode_lexique_table_entry (kUnicodeString_NEVER, 5, C_Lexique_goil_5F_lexique::kToken_NEVER),
  C_unicode_lexique_table_entry (kUnicodeString_ALWAYS, 6, C_Lexique_goil_5F_lexique::kToken_ALWAYS),
  C_unicode_lexique_table_entry (kUnicodeString_FILTER, 6, C_Lexique_goil_5F_lexique::kToken_FILTER),
  C_unicode_lexique_table_entry (kUnicodeString_OFFSET, 6, C_Lexique_goil_5F_lexique::kToken_OFFSET),
  C_unicode_lexique_table_entry (kUnicodeString_PERIOD, 6, C_Lexique_goil_5F_lexique::kToken_PERIOD),
  C_unicode_lexique_table_entry (kUnicodeString_PENDING, 7, C_Lexique_goil_5F_lexique::kToken_PENDING),
  C_unicode_lexique_table_entry (kUnicodeString_FLAGNAME, 8, C_Lexique_goil_5F_lexique::kToken_FLAGNAME),
  C_unicode_lexique_table_entry (kUnicodeString_CDATATYPE, 9, C_Lexique_goil_5F_lexique::kToken_CDATATYPE),
  C_unicode_lexique_table_entry (kUnicodeString_NEWISLESS, 9, C_Lexique_goil_5F_lexique::kToken_NEWISLESS),
  C_unicode_lexique_table_entry (kUnicodeString_ONEEVERYN, 9, C_Lexique_goil_5F_lexique::kToken_ONEEVERYN),
  C_unicode_lexique_table_entry (kUnicodeString_QUEUESIZE, 9, C_Lexique_goil_5F_lexique::kToken_QUEUESIZE),
  C_unicode_lexique_table_entry (kUnicodeString_TRIGGERED, 9, C_Lexique_goil_5F_lexique::kToken_TRIGGERED),
  C_unicode_lexique_table_entry (kUnicodeString_NEWISEQUAL, 10, C_Lexique_goil_5F_lexique::kToken_NEWISEQUAL),
  C_unicode_lexique_table_entry (kUnicodeString_COMCALLBACK, 11, C_Lexique_goil_5F_lexique::kToken_COMCALLBACK),
  C_unicode_lexique_table_entry (kUnicodeString_INMCALLBACK, 11, C_Lexique_goil_5F_lexique::kToken_INMCALLBACK),
  C_unicode_lexique_table_entry (kUnicodeString_NEWISWITHIN, 11, C_Lexique_goil_5F_lexique::kToken_NEWISWITHIN),
  C_unicode_lexique_table_entry (kUnicodeString_INITIALVALUE, 12, C_Lexique_goil_5F_lexique::kToken_INITIALVALUE),
  C_unicode_lexique_table_entry (kUnicodeString_NEWISGREATER, 12, C_Lexique_goil_5F_lexique::kToken_NEWISGREATER),
  C_unicode_lexique_table_entry (kUnicodeString_NEWISOUTSIDE, 12, C_Lexique_goil_5F_lexique::kToken_NEWISOUTSIDE),
  C_unicode_lexique_table_entry (kUnicodeString_NOTIFICATION, 12, C_Lexique_goil_5F_lexique::kToken_NOTIFICATION),
  C_unicode_lexique_table_entry (kUnicodeString_MONITOREDIPDU, 13, C_Lexique_goil_5F_lexique::kToken_MONITOREDIPDU),
  C_unicode_lexique_table_entry (kUnicodeString_NETWORKMESSAGE, 14, C_Lexique_goil_5F_lexique::kToken_NETWORKMESSAGE),
  C_unicode_lexique_table_entry (kUnicodeString_NEWISDIFFERENT, 14, C_Lexique_goil_5F_lexique::kToken_NEWISDIFFERENT),
  C_unicode_lexique_table_entry (kUnicodeString_RECEIVEMESSAGE, 14, C_Lexique_goil_5F_lexique::kToken_RECEIVEMESSAGE),
  C_unicode_lexique_table_entry (kUnicodeString_SENDINGMESSAGE, 14, C_Lexique_goil_5F_lexique::kToken_SENDINGMESSAGE),
  C_unicode_lexique_table_entry (kUnicodeString_COMCALLBACKNAME, 15, C_Lexique_goil_5F_lexique::kToken_COMCALLBACKNAME),
  C_unicode_lexique_table_entry (kUnicodeString_CPUORDERCALLOUT, 15, C_Lexique_goil_5F_lexique::kToken_CPUORDERCALLOUT),
  C_unicode_lexique_table_entry (kUnicodeString_MESSAGEPROPERTY, 15, C_Lexique_goil_5F_lexique::kToken_MESSAGEPROPERTY),
  C_unicode_lexique_table_entry (kUnicodeString_MASKEDNEWEQUALSX, 16, C_Lexique_goil_5F_lexique::kToken_MASKEDNEWEQUALSX),
  C_unicode_lexique_table_entry (kUnicodeString_NEWISLESSOREQUAL, 16, C_Lexique_goil_5F_lexique::kToken_NEWISLESSOREQUAL),
  C_unicode_lexique_table_entry (kUnicodeString_TRANSFERPROPERTY, 16, C_Lexique_goil_5F_lexique::kToken_TRANSFERPROPERTY),
  C_unicode_lexique_table_entry (kUnicodeString_MASKEDNEWDIFFERSX, 17, C_Lexique_goil_5F_lexique::kToken_MASKEDNEWDIFFERSX),
  C_unicode_lexique_table_entry (kUnicodeString_NOTIFICATIONERROR, 17, C_Lexique_goil_5F_lexique::kToken_NOTIFICATIONERROR),
  C_unicode_lexique_table_entry (kUnicodeString_SEND_5F_ZERO_5F_EXTERNAL, 18, C_Lexique_goil_5F_lexique::kToken_SEND_5F_ZERO_5F_EXTERNAL),
  C_unicode_lexique_table_entry (kUnicodeString_SEND_5F_ZERO_5F_INTERNAL, 18, C_Lexique_goil_5F_lexique::kToken_SEND_5F_ZERO_5F_INTERNAL),
  C_unicode_lexique_table_entry (kUnicodeString_CALLBACKROUTINENAME, 19, C_Lexique_goil_5F_lexique::kToken_CALLBACKROUTINENAME),
  C_unicode_lexique_table_entry (kUnicodeString_NETWORKORDERCALLOUT, 19, C_Lexique_goil_5F_lexique::kToken_NETWORKORDERCALLOUT),
  C_unicode_lexique_table_entry (kUnicodeString_NEWISGREATEROREQUAL, 19, C_Lexique_goil_5F_lexique::kToken_NEWISGREATEROREQUAL),
  C_unicode_lexique_table_entry (kUnicodeString_RECEIVE_5F_ZERO_5F_SENDERS, 20, C_Lexique_goil_5F_lexique::kToken_RECEIVE_5F_ZERO_5F_SENDERS),
  C_unicode_lexique_table_entry (kUnicodeString_SEND_5F_STATIC_5F_EXTERNAL, 20, C_Lexique_goil_5F_lexique::kToken_SEND_5F_STATIC_5F_EXTERNAL),
  C_unicode_lexique_table_entry (kUnicodeString_SEND_5F_STATIC_5F_INTERNAL, 20, C_Lexique_goil_5F_lexique::kToken_SEND_5F_STATIC_5F_INTERNAL),
  C_unicode_lexique_table_entry (kUnicodeString_RECEIVE_5F_ZERO_5F_EXTERNAL, 21, C_Lexique_goil_5F_lexique::kToken_RECEIVE_5F_ZERO_5F_EXTERNAL),
  C_unicode_lexique_table_entry (kUnicodeString_RECEIVE_5F_ZERO_5F_INTERNAL, 21, C_Lexique_goil_5F_lexique::kToken_RECEIVE_5F_ZERO_5F_INTERNAL),
  C_unicode_lexique_table_entry (kUnicodeString_SEND_5F_DYNAMIC_5F_EXTERNAL, 21, C_Lexique_goil_5F_lexique::kToken_SEND_5F_DYNAMIC_5F_EXTERNAL),
  C_unicode_lexique_table_entry (kUnicodeString_RECEIVE_5F_QUEUED_5F_EXTERNAL, 23, C_Lexique_goil_5F_lexique::kToken_RECEIVE_5F_QUEUED_5F_EXTERNAL),
  C_unicode_lexique_table_entry (kUnicodeString_RECEIVE_5F_QUEUED_5F_INTERNAL, 23, C_Lexique_goil_5F_lexique::kToken_RECEIVE_5F_QUEUED_5F_INTERNAL),
  C_unicode_lexique_table_entry (kUnicodeString_MASKEDNEWEQUALSMASKEDOLD, 24, C_Lexique_goil_5F_lexique::kToken_MASKEDNEWEQUALSMASKEDOLD),
  C_unicode_lexique_table_entry (kUnicodeString_RECEIVE_5F_DYNAMIC_5F_EXTERNAL, 24, C_Lexique_goil_5F_lexique::kToken_RECEIVE_5F_DYNAMIC_5F_EXTERNAL),
  C_unicode_lexique_table_entry (kUnicodeString_MASKEDNEWDIFFERSMASKEDOLD, 25, C_Lexique_goil_5F_lexique::kToken_MASKEDNEWDIFFERSMASKEDOLD),
  C_unicode_lexique_table_entry (kUnicodeString_RECEIVE_5F_UNQUEUED_5F_EXTERNAL, 25, C_Lexique_goil_5F_lexique::kToken_RECEIVE_5F_UNQUEUED_5F_EXTERNAL),
  C_unicode_lexique_table_entry (kUnicodeString_RECEIVE_5F_UNQUEUED_5F_INTERNAL, 25, C_Lexique_goil_5F_lexique::kToken_RECEIVE_5F_UNQUEUED_5F_INTERNAL)
} ;

PMSInt16 C_Lexique_goil_5F_lexique::search_into_message_attributes (const C_String & inSearchedString) {
  return searchInList (inSearchedString, ktable_for_message_attributes, ktable_size_message_attributes) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//             Key words table 'miscSpecifiers'                            *
//                                                                           *
//---------------------------------------------------------------------------*

static const PMSInt32 ktable_size_miscSpecifiers = 5 ;

static const C_unicode_lexique_table_entry ktable_for_miscSpecifiers [ktable_size_miscSpecifiers] = {
  C_unicode_lexique_table_entry (kUnicodeString_AUTO, 4, C_Lexique_goil_5F_lexique::kToken_AUTO),
  C_unicode_lexique_table_entry (kUnicodeString_MASK, 4, C_Lexique_goil_5F_lexique::kToken_MASK),
  C_unicode_lexique_table_entry (kUnicodeString_CATEGORY, 8, C_Lexique_goil_5F_lexique::kToken_CATEGORY),
  C_unicode_lexique_table_entry (kUnicodeString_WITH_5F_AUTO, 9, C_Lexique_goil_5F_lexique::kToken_WITH_5F_AUTO),
  C_unicode_lexique_table_entry (kUnicodeString_NO_5F_DEFAULT, 10, C_Lexique_goil_5F_lexique::kToken_NO_5F_DEFAULT)
} ;

PMSInt16 C_Lexique_goil_5F_lexique::search_into_miscSpecifiers (const C_String & inSearchedString) {
  return searchInList (inSearchedString, ktable_for_miscSpecifiers, ktable_size_miscSpecifiers) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//             Key words table 'networkmessage_attribute'                            *
//                                                                           *
//---------------------------------------------------------------------------*

static const PMSInt32 ktable_size_networkmessage_attribute = 15 ;

static const C_unicode_lexique_table_entry ktable_for_networkmessage_attribute [ktable_size_networkmessage_attribute] = {
  C_unicode_lexique_table_entry (kUnicodeString_SENT, 4, C_Lexique_goil_5F_lexique::kToken_SENT),
  C_unicode_lexique_table_entry (kUnicodeString_ZERO, 4, C_Lexique_goil_5F_lexique::kToken_ZERO),
  C_unicode_lexique_table_entry (kUnicodeString_STATIC, 6, C_Lexique_goil_5F_lexique::kToken_STATIC),
  C_unicode_lexique_table_entry (kUnicodeString_DYNAMIC, 7, C_Lexique_goil_5F_lexique::kToken_DYNAMIC),
  C_unicode_lexique_table_entry (kUnicodeString_RECEIVED, 8, C_Lexique_goil_5F_lexique::kToken_RECEIVED),
  C_unicode_lexique_table_entry (kUnicodeString_BIGENDIAN, 9, C_Lexique_goil_5F_lexique::kToken_BIGENDIAN),
  C_unicode_lexique_table_entry (kUnicodeString_BYTEARRAY, 9, C_Lexique_goil_5F_lexique::kToken_BYTEARRAY),
  C_unicode_lexique_table_entry (kUnicodeString_DIRECTION, 9, C_Lexique_goil_5F_lexique::kToken_DIRECTION),
  C_unicode_lexique_table_entry (kUnicodeString_SIZEINBITS, 10, C_Lexique_goil_5F_lexique::kToken_SIZEINBITS),
  C_unicode_lexique_table_entry (kUnicodeString_BITORDERING, 11, C_Lexique_goil_5F_lexique::kToken_BITORDERING),
  C_unicode_lexique_table_entry (kUnicodeString_BITPOSITION, 11, C_Lexique_goil_5F_lexique::kToken_BITPOSITION),
  C_unicode_lexique_table_entry (kUnicodeString_LITTLEENDIAN, 12, C_Lexique_goil_5F_lexique::kToken_LITTLEENDIAN),
  C_unicode_lexique_table_entry (kUnicodeString_MAXSIZEINBITS, 13, C_Lexique_goil_5F_lexique::kToken_MAXSIZEINBITS),
  C_unicode_lexique_table_entry (kUnicodeString_UNSIGNEDINTEGER, 15, C_Lexique_goil_5F_lexique::kToken_UNSIGNEDINTEGER),
  C_unicode_lexique_table_entry (kUnicodeString_DATAINTERPRETATION, 18, C_Lexique_goil_5F_lexique::kToken_DATAINTERPRETATION)
} ;

PMSInt16 C_Lexique_goil_5F_lexique::search_into_networkmessage_attribute (const C_String & inSearchedString) {
  return searchInList (inSearchedString, ktable_for_networkmessage_attribute, ktable_size_networkmessage_attribute) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//             Key words table 'objList'                            *
//                                                                           *
//---------------------------------------------------------------------------*

static const PMSInt32 ktable_size_objList = 13 ;

static const C_unicode_lexique_table_entry ktable_for_objList [ktable_size_objList] = {
  C_unicode_lexique_table_entry (kUnicodeString_NM, 2, C_Lexique_goil_5F_lexique::kToken_NM),
  C_unicode_lexique_table_entry (kUnicodeString_OS, 2, C_Lexique_goil_5F_lexique::kToken_OS),
  C_unicode_lexique_table_entry (kUnicodeString_COM, 3, C_Lexique_goil_5F_lexique::kToken_COM),
  C_unicode_lexique_table_entry (kUnicodeString_CPU, 3, C_Lexique_goil_5F_lexique::kToken_CPU),
  C_unicode_lexique_table_entry (kUnicodeString_ISR, 3, C_Lexique_goil_5F_lexique::kToken_ISR),
  C_unicode_lexique_table_entry (kUnicodeString_IPDU, 4, C_Lexique_goil_5F_lexique::kToken_IPDU),
  C_unicode_lexique_table_entry (kUnicodeString_TASK, 4, C_Lexique_goil_5F_lexique::kToken_TASK),
  C_unicode_lexique_table_entry (kUnicodeString_ALARM, 5, C_Lexique_goil_5F_lexique::kToken_ALARM),
  C_unicode_lexique_table_entry (kUnicodeString_EVENT, 5, C_Lexique_goil_5F_lexique::kToken_EVENT),
  C_unicode_lexique_table_entry (kUnicodeString_APPMODE, 7, C_Lexique_goil_5F_lexique::kToken_APPMODE),
  C_unicode_lexique_table_entry (kUnicodeString_COUNTER, 7, C_Lexique_goil_5F_lexique::kToken_COUNTER),
  C_unicode_lexique_table_entry (kUnicodeString_MESSAGE, 7, C_Lexique_goil_5F_lexique::kToken_MESSAGE),
  C_unicode_lexique_table_entry (kUnicodeString_RESOURCE, 8, C_Lexique_goil_5F_lexique::kToken_RESOURCE)
} ;

PMSInt16 C_Lexique_goil_5F_lexique::search_into_objList (const C_String & inSearchedString) {
  return searchInList (inSearchedString, ktable_for_objList, ktable_size_objList) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//             Key words table 'objectRefType'                            *
//                                                                           *
//---------------------------------------------------------------------------*

static const PMSInt32 ktable_size_objectRefType = 12 ;

static const C_unicode_lexique_table_entry ktable_for_objectRefType [ktable_size_objectRefType] = {
  C_unicode_lexique_table_entry (kUnicodeString_NM_5F_TYPE, 7, C_Lexique_goil_5F_lexique::kToken_NM_5F_TYPE),
  C_unicode_lexique_table_entry (kUnicodeString_OS_5F_TYPE, 7, C_Lexique_goil_5F_lexique::kToken_OS_5F_TYPE),
  C_unicode_lexique_table_entry (kUnicodeString_COM_5F_TYPE, 8, C_Lexique_goil_5F_lexique::kToken_COM_5F_TYPE),
  C_unicode_lexique_table_entry (kUnicodeString_ISR_5F_TYPE, 8, C_Lexique_goil_5F_lexique::kToken_ISR_5F_TYPE),
  C_unicode_lexique_table_entry (kUnicodeString_IPDU_5F_TYPE, 9, C_Lexique_goil_5F_lexique::kToken_IPDU_5F_TYPE),
  C_unicode_lexique_table_entry (kUnicodeString_TASK_5F_TYPE, 9, C_Lexique_goil_5F_lexique::kToken_TASK_5F_TYPE),
  C_unicode_lexique_table_entry (kUnicodeString_ALARM_5F_TYPE, 10, C_Lexique_goil_5F_lexique::kToken_ALARM_5F_TYPE),
  C_unicode_lexique_table_entry (kUnicodeString_EVENT_5F_TYPE, 10, C_Lexique_goil_5F_lexique::kToken_EVENT_5F_TYPE),
  C_unicode_lexique_table_entry (kUnicodeString_APPMODE_5F_TYPE, 12, C_Lexique_goil_5F_lexique::kToken_APPMODE_5F_TYPE),
  C_unicode_lexique_table_entry (kUnicodeString_COUNTER_5F_TYPE, 12, C_Lexique_goil_5F_lexique::kToken_COUNTER_5F_TYPE),
  C_unicode_lexique_table_entry (kUnicodeString_MESSAGE_5F_TYPE, 12, C_Lexique_goil_5F_lexique::kToken_MESSAGE_5F_TYPE),
  C_unicode_lexique_table_entry (kUnicodeString_RESOURCE_5F_TYPE, 13, C_Lexique_goil_5F_lexique::kToken_RESOURCE_5F_TYPE)
} ;

PMSInt16 C_Lexique_goil_5F_lexique::search_into_objectRefType (const C_String & inSearchedString) {
  return searchInList (inSearchedString, ktable_for_objectRefType, ktable_size_objectRefType) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//             Key words table 'oilDefinitions'                            *
//                                                                           *
//---------------------------------------------------------------------------*

static const PMSInt32 ktable_size_oilDefinitions = 1 ;

static const C_unicode_lexique_table_entry ktable_for_oilDefinitions [ktable_size_oilDefinitions] = {
  C_unicode_lexique_table_entry (kUnicodeString_IMPLEMENTATION, 14, C_Lexique_goil_5F_lexique::kToken_IMPLEMENTATION)
} ;

PMSInt16 C_Lexique_goil_5F_lexique::search_into_oilDefinitions (const C_String & inSearchedString) {
  return searchInList (inSearchedString, ktable_for_oilDefinitions, ktable_size_oilDefinitions) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//             Key words table 'oilVersion'                            *
//                                                                           *
//---------------------------------------------------------------------------*

static const PMSInt32 ktable_size_oilVersion = 1 ;

static const C_unicode_lexique_table_entry ktable_for_oilVersion [ktable_size_oilVersion] = {
  C_unicode_lexique_table_entry (kUnicodeString_OIL_5F_VERSION, 11, C_Lexique_goil_5F_lexique::kToken_OIL_5F_VERSION)
} ;

PMSInt16 C_Lexique_goil_5F_lexique::search_into_oilVersion (const C_String & inSearchedString) {
  return searchInList (inSearchedString, ktable_for_oilVersion, ktable_size_oilVersion) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//             Key words table 'os_attributes'                            *
//                                                                           *
//---------------------------------------------------------------------------*

static const PMSInt32 ktable_size_os_attributes = 15 ;

static const C_unicode_lexique_table_entry ktable_for_os_attributes [ktable_size_os_attributes] = {
  C_unicode_lexique_table_entry (kUnicodeString_DEBUG, 5, C_Lexique_goil_5F_lexique::kToken_DEBUG),
  C_unicode_lexique_table_entry (kUnicodeString_TRACE, 5, C_Lexique_goil_5F_lexique::kToken_TRACE),
  C_unicode_lexique_table_entry (kUnicodeString_MEMMAP, 6, C_Lexique_goil_5F_lexique::kToken_MEMMAP),
  C_unicode_lexique_table_entry (kUnicodeString_STATUS, 6, C_Lexique_goil_5F_lexique::kToken_STATUS),
  C_unicode_lexique_table_entry (kUnicodeString_EXTENDED, 8, C_Lexique_goil_5F_lexique::kToken_EXTENDED),
  C_unicode_lexique_table_entry (kUnicodeString_ERRORHOOK, 9, C_Lexique_goil_5F_lexique::kToken_ERRORHOOK),
  C_unicode_lexique_table_entry (kUnicodeString_PRETASKHOOK, 11, C_Lexique_goil_5F_lexique::kToken_PRETASKHOOK),
  C_unicode_lexique_table_entry (kUnicodeString_STARTUPHOOK, 11, C_Lexique_goil_5F_lexique::kToken_STARTUPHOOK),
  C_unicode_lexique_table_entry (kUnicodeString_SYSTEM_5F_CALL, 11, C_Lexique_goil_5F_lexique::kToken_SYSTEM_5F_CALL),
  C_unicode_lexique_table_entry (kUnicodeString_POSTTASKHOOK, 12, C_Lexique_goil_5F_lexique::kToken_POSTTASKHOOK),
  C_unicode_lexique_table_entry (kUnicodeString_SHUTDOWNHOOK, 12, C_Lexique_goil_5F_lexique::kToken_SHUTDOWNHOOK),
  C_unicode_lexique_table_entry (kUnicodeString_USEGETSERVICEID, 15, C_Lexique_goil_5F_lexique::kToken_USEGETSERVICEID),
  C_unicode_lexique_table_entry (kUnicodeString_USERESSCHEDULER, 15, C_Lexique_goil_5F_lexique::kToken_USERESSCHEDULER),
  C_unicode_lexique_table_entry (kUnicodeString_MEMORY_5F_PROTECTION, 17, C_Lexique_goil_5F_lexique::kToken_MEMORY_5F_PROTECTION),
  C_unicode_lexique_table_entry (kUnicodeString_USEPARAMETERACCESS, 18, C_Lexique_goil_5F_lexique::kToken_USEPARAMETERACCESS)
} ;

PMSInt16 C_Lexique_goil_5F_lexique::search_into_os_attributes (const C_String & inSearchedString) {
  return searchInList (inSearchedString, ktable_for_os_attributes, ktable_size_os_attributes) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//             Key words table 'resource_attributes'                            *
//                                                                           *
//---------------------------------------------------------------------------*

static const PMSInt32 ktable_size_resource_attributes = 5 ;

static const C_unicode_lexique_table_entry ktable_for_resource_attributes [ktable_size_resource_attributes] = {
  C_unicode_lexique_table_entry (kUnicodeString_LINKED, 6, C_Lexique_goil_5F_lexique::kToken_LINKED),
  C_unicode_lexique_table_entry (kUnicodeString_INTERNAL, 8, C_Lexique_goil_5F_lexique::kToken_INTERNAL),
  C_unicode_lexique_table_entry (kUnicodeString_STANDARD, 8, C_Lexique_goil_5F_lexique::kToken_STANDARD),
  C_unicode_lexique_table_entry (kUnicodeString_LINKEDRESOURCE, 14, C_Lexique_goil_5F_lexique::kToken_LINKEDRESOURCE),
  C_unicode_lexique_table_entry (kUnicodeString_RESOURCEPROPERTY, 16, C_Lexique_goil_5F_lexique::kToken_RESOURCEPROPERTY)
} ;

PMSInt16 C_Lexique_goil_5F_lexique::search_into_resource_attributes (const C_String & inSearchedString) {
  return searchInList (inSearchedString, ktable_for_resource_attributes, ktable_size_resource_attributes) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//             Key words table 'schedtable_attrs'                            *
//                                                                           *
//---------------------------------------------------------------------------*

static const PMSInt32 ktable_size_schedtable_attrs = 12 ;

static const C_unicode_lexique_table_entry ktable_for_schedtable_attrs [ktable_size_schedtable_attrs] = {
  C_unicode_lexique_table_entry (kUnicodeString_LENGTH, 6, C_Lexique_goil_5F_lexique::kToken_LENGTH),
  C_unicode_lexique_table_entry (kUnicodeString_PRECISION, 9, C_Lexique_goil_5F_lexique::kToken_PRECISION),
  C_unicode_lexique_table_entry (kUnicodeString_ADJUSTABLE, 10, C_Lexique_goil_5F_lexique::kToken_ADJUSTABLE),
  C_unicode_lexique_table_entry (kUnicodeString_MAX_5F_RETARD, 10, C_Lexique_goil_5F_lexique::kToken_MAX_5F_RETARD),
  C_unicode_lexique_table_entry (kUnicodeString_MAX_5F_ADVANCE, 11, C_Lexique_goil_5F_lexique::kToken_MAX_5F_ADVANCE),
  C_unicode_lexique_table_entry (kUnicodeString_EXPIRY_5F_POINT, 12, C_Lexique_goil_5F_lexique::kToken_EXPIRY_5F_POINT),
  C_unicode_lexique_table_entry (kUnicodeString_MAX_5F_DECREASE, 12, C_Lexique_goil_5F_lexique::kToken_MAX_5F_DECREASE),
  C_unicode_lexique_table_entry (kUnicodeString_MAX_5F_INCREASE, 12, C_Lexique_goil_5F_lexique::kToken_MAX_5F_INCREASE),
  C_unicode_lexique_table_entry (kUnicodeString_SYNC_5F_STRATEGY, 13, C_Lexique_goil_5F_lexique::kToken_SYNC_5F_STRATEGY),
  C_unicode_lexique_table_entry (kUnicodeString_MAX_5F_DECREASE_5F_ASYNC, 18, C_Lexique_goil_5F_lexique::kToken_MAX_5F_DECREASE_5F_ASYNC),
  C_unicode_lexique_table_entry (kUnicodeString_MAX_5F_INCREASE_5F_ASYNC, 18, C_Lexique_goil_5F_lexique::kToken_MAX_5F_INCREASE_5F_ASYNC),
  C_unicode_lexique_table_entry (kUnicodeString_LOCAL_5F_TO_5F_GLOBAL_5F_TIME_5F_SYNCHRONIZATION, 36, C_Lexique_goil_5F_lexique::kToken_LOCAL_5F_TO_5F_GLOBAL_5F_TIME_5F_SYNCHRONIZATION)
} ;

PMSInt16 C_Lexique_goil_5F_lexique::search_into_schedtable_attrs (const C_String & inSearchedString) {
  return searchInList (inSearchedString, ktable_for_schedtable_attrs, ktable_size_schedtable_attrs) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//             Key words table 'scheduling'                            *
//                                                                           *
//---------------------------------------------------------------------------*

static const PMSInt32 ktable_size_scheduling = 2 ;

static const C_unicode_lexique_table_entry ktable_for_scheduling [ktable_size_scheduling] = {
  C_unicode_lexique_table_entry (kUnicodeString_NON, 3, C_Lexique_goil_5F_lexique::kToken_NON),
  C_unicode_lexique_table_entry (kUnicodeString_FULL, 4, C_Lexique_goil_5F_lexique::kToken_FULL)
} ;

PMSInt16 C_Lexique_goil_5F_lexique::search_into_scheduling (const C_String & inSearchedString) {
  return searchInList (inSearchedString, ktable_for_scheduling, ktable_size_scheduling) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//             Key words table 'sync_strategy'                            *
//                                                                           *
//---------------------------------------------------------------------------*

static const PMSInt32 ktable_size_sync_strategy = 2 ;

static const C_unicode_lexique_table_entry ktable_for_sync_strategy [ktable_size_sync_strategy] = {
  C_unicode_lexique_table_entry (kUnicodeString_HARD, 4, C_Lexique_goil_5F_lexique::kToken_HARD),
  C_unicode_lexique_table_entry (kUnicodeString_SMOOTH, 6, C_Lexique_goil_5F_lexique::kToken_SMOOTH)
} ;

PMSInt16 C_Lexique_goil_5F_lexique::search_into_sync_strategy (const C_String & inSearchedString) {
  return searchInList (inSearchedString, ktable_for_sync_strategy, ktable_size_sync_strategy) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//             Key words table 'task_attributes'                            *
//                                                                           *
//---------------------------------------------------------------------------*

static const PMSInt32 ktable_size_task_attributes = 4 ;

static const C_unicode_lexique_table_entry ktable_for_task_attributes [ktable_size_task_attributes] = {
  C_unicode_lexique_table_entry (kUnicodeString_PRIORITY, 8, C_Lexique_goil_5F_lexique::kToken_PRIORITY),
  C_unicode_lexique_table_entry (kUnicodeString_SCHEDULE, 8, C_Lexique_goil_5F_lexique::kToken_SCHEDULE),
  C_unicode_lexique_table_entry (kUnicodeString_AUTOSTART, 9, C_Lexique_goil_5F_lexique::kToken_AUTOSTART),
  C_unicode_lexique_table_entry (kUnicodeString_ACTIVATION, 10, C_Lexique_goil_5F_lexique::kToken_ACTIVATION)
} ;

PMSInt16 C_Lexique_goil_5F_lexique::search_into_task_attributes (const C_String & inSearchedString) {
  return searchInList (inSearchedString, ktable_for_task_attributes, ktable_size_task_attributes) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//             Key words table 'timing_prot_attribs'                            *
//                                                                           *
//---------------------------------------------------------------------------*

static const PMSInt32 ktable_size_timing_prot_attribs = 8 ;

static const C_unicode_lexique_table_entry ktable_for_timing_prot_attribs [ktable_size_timing_prot_attribs] = {
  C_unicode_lexique_table_entry (kUnicodeString_TIMEFRAME, 9, C_Lexique_goil_5F_lexique::kToken_TIMEFRAME),
  C_unicode_lexique_table_entry (kUnicodeString_LOCKINGTIME, 11, C_Lexique_goil_5F_lexique::kToken_LOCKINGTIME),
  C_unicode_lexique_table_entry (kUnicodeString_RESOURCELOCK, 12, C_Lexique_goil_5F_lexique::kToken_RESOURCELOCK),
  C_unicode_lexique_table_entry (kUnicodeString_EXECUTIONTIME, 13, C_Lexique_goil_5F_lexique::kToken_EXECUTIONTIME),
  C_unicode_lexique_table_entry (kUnicodeString_EXECUTIONBUDGET, 15, C_Lexique_goil_5F_lexique::kToken_EXECUTIONBUDGET),
  C_unicode_lexique_table_entry (kUnicodeString_MAXRESOURCELOCKTIME, 19, C_Lexique_goil_5F_lexique::kToken_MAXRESOURCELOCKTIME),
  C_unicode_lexique_table_entry (kUnicodeString_MAXOSINTERRUPTLOCKTIME, 22, C_Lexique_goil_5F_lexique::kToken_MAXOSINTERRUPTLOCKTIME),
  C_unicode_lexique_table_entry (kUnicodeString_MAXALLINTERRUPTLOCKTIME, 23, C_Lexique_goil_5F_lexique::kToken_MAXALLINTERRUPTLOCKTIME)
} ;

PMSInt16 C_Lexique_goil_5F_lexique::search_into_timing_prot_attribs (const C_String & inSearchedString) {
  return searchInList (inSearchedString, ktable_for_timing_prot_attribs, ktable_size_timing_prot_attribs) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//             Key words table 'trace_attributes'                            *
//                                                                           *
//---------------------------------------------------------------------------*

static const PMSInt32 ktable_size_trace_attributes = 9 ;

static const C_unicode_lexique_table_entry ktable_for_trace_attributes [ktable_size_trace_attributes] = {
  C_unicode_lexique_table_entry (kUnicodeString_FILE, 4, C_Lexique_goil_5F_lexique::kToken_FILE),
  C_unicode_lexique_table_entry (kUnicodeString_FORMAT, 6, C_Lexique_goil_5F_lexique::kToken_FORMAT),
  C_unicode_lexique_table_entry (kUnicodeString_METHOD, 6, C_Lexique_goil_5F_lexique::kToken_METHOD),
  C_unicode_lexique_table_entry (kUnicodeString_TRACE_5F_ISR, 9, C_Lexique_goil_5F_lexique::kToken_TRACE_5F_ISR),
  C_unicode_lexique_table_entry (kUnicodeString_TRACE_5F_TASK, 10, C_Lexique_goil_5F_lexique::kToken_TRACE_5F_TASK),
  C_unicode_lexique_table_entry (kUnicodeString_TRACE_5F_USER, 10, C_Lexique_goil_5F_lexique::kToken_TRACE_5F_USER),
  C_unicode_lexique_table_entry (kUnicodeString_DESCRIPTION, 11, C_Lexique_goil_5F_lexique::kToken_DESCRIPTION),
  C_unicode_lexique_table_entry (kUnicodeString_TRACE_5F_ALARM, 11, C_Lexique_goil_5F_lexique::kToken_TRACE_5F_ALARM),
  C_unicode_lexique_table_entry (kUnicodeString_TRACE_5F_RESOURCE, 14, C_Lexique_goil_5F_lexique::kToken_TRACE_5F_RESOURCE)
} ;

PMSInt16 C_Lexique_goil_5F_lexique::search_into_trace_attributes (const C_String & inSearchedString) {
  return searchInList (inSearchedString, ktable_for_trace_attributes, ktable_size_trace_attributes) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//             Key words table 'unit'                            *
//                                                                           *
//---------------------------------------------------------------------------*

static const PMSInt32 ktable_size_unit = 2 ;

static const C_unicode_lexique_table_entry ktable_for_unit [ktable_size_unit] = {
  C_unicode_lexique_table_entry (kUnicodeString_TICKS, 5, C_Lexique_goil_5F_lexique::kToken_TICKS),
  C_unicode_lexique_table_entry (kUnicodeString_NANOSECONDS, 11, C_Lexique_goil_5F_lexique::kToken_NANOSECONDS)
} ;

PMSInt16 C_Lexique_goil_5F_lexique::search_into_unit (const C_String & inSearchedString) {
  return searchInList (inSearchedString, ktable_for_unit, ktable_size_unit) ;
}


//---------------------------------------------------------------------------*
//                                                                           *
//                          getCurrentTokenString                            *
//                                                                           *
//---------------------------------------------------------------------------*

C_String C_Lexique_goil_5F_lexique::getCurrentTokenString (const cToken * inTokenPtr) const {
  const cTokenFor_goil_5F_lexique * ptr = (const cTokenFor_goil_5F_lexique *) inTokenPtr ;
  C_String s ;
  if (ptr == NULL) {
    s.appendCString("$$") ;
  }else{
    switch (ptr->mTokenCode) {
    case kToken_:
      s.appendCString("$$") ;
      break ;
    case kToken_comment:
      s.appendUnicodeCharacter (TO_UNICODE ('$') COMMA_HERE) ;
      s.appendCString ("comment") ;
      s.appendUnicodeCharacter (TO_UNICODE ('$') COMMA_HERE) ;
      break ;
    case kToken_idf:
      s.appendUnicodeCharacter (TO_UNICODE ('$') COMMA_HERE) ;
      s.appendCString ("idf") ;
      s.appendUnicodeCharacter (TO_UNICODE ('$') COMMA_HERE) ;
      s.appendUnicodeCharacter (TO_UNICODE (' ') COMMA_HERE) ;
      s.appendCLiteralStringConstant (ptr->mLexicalAttribute_att_5F_token) ;
      break ;
    case kToken_string:
      s.appendUnicodeCharacter (TO_UNICODE ('$') COMMA_HERE) ;
      s.appendCString ("string") ;
      s.appendUnicodeCharacter (TO_UNICODE ('$') COMMA_HERE) ;
      s.appendUnicodeCharacter (TO_UNICODE (' ') COMMA_HERE) ;
      s.appendCLiteralStringConstant (ptr->mLexicalAttribute_a_5F_string) ;
      break ;
    case kToken_g_5F_string:
      s.appendUnicodeCharacter (TO_UNICODE ('$') COMMA_HERE) ;
      s.appendCString ("g_string") ;
      s.appendUnicodeCharacter (TO_UNICODE ('$') COMMA_HERE) ;
      s.appendUnicodeCharacter (TO_UNICODE (' ') COMMA_HERE) ;
      s.appendCLiteralStringConstant (ptr->mLexicalAttribute_a_5F_string) ;
      break ;
    case kToken_uint_5F_number:
      s.appendUnicodeCharacter (TO_UNICODE ('$') COMMA_HERE) ;
      s.appendCString ("uint_number") ;
      s.appendUnicodeCharacter (TO_UNICODE ('$') COMMA_HERE) ;
      s.appendUnicodeCharacter (TO_UNICODE (' ') COMMA_HERE) ;
      s.appendUnsigned64 (ptr->mLexicalAttribute_integerNumber) ;
      break ;
    case kToken_float_5F_number:
      s.appendUnicodeCharacter (TO_UNICODE ('$') COMMA_HERE) ;
      s.appendCString ("float_number") ;
      s.appendUnicodeCharacter (TO_UNICODE ('$') COMMA_HERE) ;
      s.appendUnicodeCharacter (TO_UNICODE (' ') COMMA_HERE) ;
      s.appendDouble (ptr->mLexicalAttribute_floatNumber) ;
      break ;
    case kToken_set_5F_start_5F_uint_5F_number:
      s.appendUnicodeCharacter (TO_UNICODE ('$') COMMA_HERE) ;
      s.appendCString ("set_start_uint_number") ;
      s.appendUnicodeCharacter (TO_UNICODE ('$') COMMA_HERE) ;
      s.appendUnicodeCharacter (TO_UNICODE (' ') COMMA_HERE) ;
      s.appendUnsigned64 (ptr->mLexicalAttribute_integerNumber) ;
      break ;
    case kToken_command:
      s.appendUnicodeCharacter (TO_UNICODE ('$') COMMA_HERE) ;
      s.appendCString ("command") ;
      s.appendUnicodeCharacter (TO_UNICODE ('$') COMMA_HERE) ;
      s.appendUnicodeCharacter (TO_UNICODE (' ') COMMA_HERE) ;
      s.appendCLiteralStringConstant (ptr->mLexicalAttribute_att_5F_token) ;
      break ;
    case kToken_APP_5F_SRC:
      s.appendUnicodeCharacter (TO_UNICODE ('$') COMMA_HERE) ;
      s.appendCString ("APP_SRC") ;
      s.appendUnicodeCharacter (TO_UNICODE ('$') COMMA_HERE) ;
      break ;
    case kToken_COMPILER:
      s.appendUnicodeCharacter (TO_UNICODE ('$') COMMA_HERE) ;
      s.appendCString ("COMPILER") ;
      s.appendUnicodeCharacter (TO_UNICODE ('$') COMMA_HERE) ;
      break ;
    case kToken_ASSEMBLER:
      s.appendUnicodeCharacter (TO_UNICODE ('$') COMMA_HERE) ;
      s.appendCString ("ASSEMBLER") ;
      s.appendUnicodeCharacter (TO_UNICODE ('$') COMMA_HERE) ;
      break ;
    case kToken_LINKER:
      s.appendUnicodeCharacter (TO_UNICODE ('$') COMMA_HERE) ;
      s.appendCString ("LINKER") ;
      s.appendUnicodeCharacter (TO_UNICODE ('$') COMMA_HERE) ;
      break ;
    case kToken_SCRIPT:
      s.appendUnicodeCharacter (TO_UNICODE ('$') COMMA_HERE) ;
      s.appendCString ("SCRIPT") ;
      s.appendUnicodeCharacter (TO_UNICODE ('$') COMMA_HERE) ;
      break ;
    case kToken_CFLAGS:
      s.appendUnicodeCharacter (TO_UNICODE ('$') COMMA_HERE) ;
      s.appendCString ("CFLAGS") ;
      s.appendUnicodeCharacter (TO_UNICODE ('$') COMMA_HERE) ;
      break ;
    case kToken_CPPFLAGS:
      s.appendUnicodeCharacter (TO_UNICODE ('$') COMMA_HERE) ;
      s.appendCString ("CPPFLAGS") ;
      s.appendUnicodeCharacter (TO_UNICODE ('$') COMMA_HERE) ;
      break ;
    case kToken_ASFLAGS:
      s.appendUnicodeCharacter (TO_UNICODE ('$') COMMA_HERE) ;
      s.appendCString ("ASFLAGS") ;
      s.appendUnicodeCharacter (TO_UNICODE ('$') COMMA_HERE) ;
      break ;
    case kToken_LDFLAGS:
      s.appendUnicodeCharacter (TO_UNICODE ('$') COMMA_HERE) ;
      s.appendCString ("LDFLAGS") ;
      s.appendUnicodeCharacter (TO_UNICODE ('$') COMMA_HERE) ;
      break ;
    case kToken_APP_5F_NAME:
      s.appendUnicodeCharacter (TO_UNICODE ('$') COMMA_HERE) ;
      s.appendCString ("APP_NAME") ;
      s.appendUnicodeCharacter (TO_UNICODE ('$') COMMA_HERE) ;
      break ;
    case kToken_TRAMPOLINE_5F_BASE_5F_PATH:
      s.appendUnicodeCharacter (TO_UNICODE ('$') COMMA_HERE) ;
      s.appendCString ("TRAMPOLINE_BASE_PATH") ;
      s.appendUnicodeCharacter (TO_UNICODE ('$') COMMA_HERE) ;
      break ;
    case kToken_OIL_5F_VERSION:
      s.appendUnicodeCharacter (TO_UNICODE ('$') COMMA_HERE) ;
      s.appendCString ("OIL_VERSION") ;
      s.appendUnicodeCharacter (TO_UNICODE ('$') COMMA_HERE) ;
      break ;
    case kToken_IMPLEMENTATION:
      s.appendUnicodeCharacter (TO_UNICODE ('$') COMMA_HERE) ;
      s.appendCString ("IMPLEMENTATION") ;
      s.appendUnicodeCharacter (TO_UNICODE ('$') COMMA_HERE) ;
      break ;
    case kToken_OS:
      s.appendUnicodeCharacter (TO_UNICODE ('$') COMMA_HERE) ;
      s.appendCString ("OS") ;
      s.appendUnicodeCharacter (TO_UNICODE ('$') COMMA_HERE) ;
      break ;
    case kToken_TASK:
      s.appendUnicodeCharacter (TO_UNICODE ('$') COMMA_HERE) ;
      s.appendCString ("TASK") ;
      s.appendUnicodeCharacter (TO_UNICODE ('$') COMMA_HERE) ;
      break ;
    case kToken_COUNTER:
      s.appendUnicodeCharacter (TO_UNICODE ('$') COMMA_HERE) ;
      s.appendCString ("COUNTER") ;
      s.appendUnicodeCharacter (TO_UNICODE ('$') COMMA_HERE) ;
      break ;
    case kToken_ALARM:
      s.appendUnicodeCharacter (TO_UNICODE ('$') COMMA_HERE) ;
      s.appendCString ("ALARM") ;
      s.appendUnicodeCharacter (TO_UNICODE ('$') COMMA_HERE) ;
      break ;
    case kToken_RESOURCE:
      s.appendUnicodeCharacter (TO_UNICODE ('$') COMMA_HERE) ;
      s.appendCString ("RESOURCE") ;
      s.appendUnicodeCharacter (TO_UNICODE ('$') COMMA_HERE) ;
      break ;
    case kToken_EVENT:
      s.appendUnicodeCharacter (TO_UNICODE ('$') COMMA_HERE) ;
      s.appendCString ("EVENT") ;
      s.appendUnicodeCharacter (TO_UNICODE ('$') COMMA_HERE) ;
      break ;
    case kToken_ISR:
      s.appendUnicodeCharacter (TO_UNICODE ('$') COMMA_HERE) ;
      s.appendCString ("ISR") ;
      s.appendUnicodeCharacter (TO_UNICODE ('$') COMMA_HERE) ;
      break ;
    case kToken_MESSAGE:
      s.appendUnicodeCharacter (TO_UNICODE ('$') COMMA_HERE) ;
      s.appendCString ("MESSAGE") ;
      s.appendUnicodeCharacter (TO_UNICODE ('$') COMMA_HERE) ;
      break ;
    case kToken_COM:
      s.appendUnicodeCharacter (TO_UNICODE ('$') COMMA_HERE) ;
      s.appendCString ("COM") ;
      s.appendUnicodeCharacter (TO_UNICODE ('$') COMMA_HERE) ;
      break ;
    case kToken_NM:
      s.appendUnicodeCharacter (TO_UNICODE ('$') COMMA_HERE) ;
      s.appendCString ("NM") ;
      s.appendUnicodeCharacter (TO_UNICODE ('$') COMMA_HERE) ;
      break ;
    case kToken_APPMODE:
      s.appendUnicodeCharacter (TO_UNICODE ('$') COMMA_HERE) ;
      s.appendCString ("APPMODE") ;
      s.appendUnicodeCharacter (TO_UNICODE ('$') COMMA_HERE) ;
      break ;
    case kToken_IPDU:
      s.appendUnicodeCharacter (TO_UNICODE ('$') COMMA_HERE) ;
      s.appendCString ("IPDU") ;
      s.appendUnicodeCharacter (TO_UNICODE ('$') COMMA_HERE) ;
      break ;
    case kToken_CPU:
      s.appendUnicodeCharacter (TO_UNICODE ('$') COMMA_HERE) ;
      s.appendCString ("CPU") ;
      s.appendUnicodeCharacter (TO_UNICODE ('$') COMMA_HERE) ;
      break ;
    case kToken_UINT_33__32_:
      s.appendUnicodeCharacter (TO_UNICODE ('$') COMMA_HERE) ;
      s.appendCString ("UINT32") ;
      s.appendUnicodeCharacter (TO_UNICODE ('$') COMMA_HERE) ;
      s.appendUnicodeCharacter (TO_UNICODE (' ') COMMA_HERE) ;
      s.appendCLiteralStringConstant (ptr->mLexicalAttribute_att_5F_token) ;
      break ;
    case kToken_INT_33__32_:
      s.appendUnicodeCharacter (TO_UNICODE ('$') COMMA_HERE) ;
      s.appendCString ("INT32") ;
      s.appendUnicodeCharacter (TO_UNICODE ('$') COMMA_HERE) ;
      s.appendUnicodeCharacter (TO_UNICODE (' ') COMMA_HERE) ;
      s.appendCLiteralStringConstant (ptr->mLexicalAttribute_att_5F_token) ;
      break ;
    case kToken_UINT_36__34_:
      s.appendUnicodeCharacter (TO_UNICODE ('$') COMMA_HERE) ;
      s.appendCString ("UINT64") ;
      s.appendUnicodeCharacter (TO_UNICODE ('$') COMMA_HERE) ;
      s.appendUnicodeCharacter (TO_UNICODE (' ') COMMA_HERE) ;
      s.appendCLiteralStringConstant (ptr->mLexicalAttribute_att_5F_token) ;
      break ;
    case kToken_INT_36__34_:
      s.appendUnicodeCharacter (TO_UNICODE ('$') COMMA_HERE) ;
      s.appendCString ("INT64") ;
      s.appendUnicodeCharacter (TO_UNICODE ('$') COMMA_HERE) ;
      s.appendUnicodeCharacter (TO_UNICODE (' ') COMMA_HERE) ;
      s.appendCLiteralStringConstant (ptr->mLexicalAttribute_att_5F_token) ;
      break ;
    case kToken_FLOAT:
      s.appendUnicodeCharacter (TO_UNICODE ('$') COMMA_HERE) ;
      s.appendCString ("FLOAT") ;
      s.appendUnicodeCharacter (TO_UNICODE ('$') COMMA_HERE) ;
      s.appendUnicodeCharacter (TO_UNICODE (' ') COMMA_HERE) ;
      s.appendCLiteralStringConstant (ptr->mLexicalAttribute_att_5F_token) ;
      break ;
    case kToken_ENUM:
      s.appendUnicodeCharacter (TO_UNICODE ('$') COMMA_HERE) ;
      s.appendCString ("ENUM") ;
      s.appendUnicodeCharacter (TO_UNICODE ('$') COMMA_HERE) ;
      s.appendUnicodeCharacter (TO_UNICODE (' ') COMMA_HERE) ;
      s.appendCLiteralStringConstant (ptr->mLexicalAttribute_att_5F_token) ;
      break ;
    case kToken_STRING:
      s.appendUnicodeCharacter (TO_UNICODE ('$') COMMA_HERE) ;
      s.appendCString ("STRING") ;
      s.appendUnicodeCharacter (TO_UNICODE ('$') COMMA_HERE) ;
      s.appendUnicodeCharacter (TO_UNICODE (' ') COMMA_HERE) ;
      s.appendCLiteralStringConstant (ptr->mLexicalAttribute_att_5F_token) ;
      break ;
    case kToken_BOOLEAN:
      s.appendUnicodeCharacter (TO_UNICODE ('$') COMMA_HERE) ;
      s.appendCString ("BOOLEAN") ;
      s.appendUnicodeCharacter (TO_UNICODE ('$') COMMA_HERE) ;
      s.appendUnicodeCharacter (TO_UNICODE (' ') COMMA_HERE) ;
      s.appendCLiteralStringConstant (ptr->mLexicalAttribute_att_5F_token) ;
      break ;
    case kToken_WITH_5F_AUTO:
      s.appendUnicodeCharacter (TO_UNICODE ('$') COMMA_HERE) ;
      s.appendCString ("WITH_AUTO") ;
      s.appendUnicodeCharacter (TO_UNICODE ('$') COMMA_HERE) ;
      break ;
    case kToken_NO_5F_DEFAULT:
      s.appendUnicodeCharacter (TO_UNICODE ('$') COMMA_HERE) ;
      s.appendCString ("NO_DEFAULT") ;
      s.appendUnicodeCharacter (TO_UNICODE ('$') COMMA_HERE) ;
      break ;
    case kToken_AUTO:
      s.appendUnicodeCharacter (TO_UNICODE ('$') COMMA_HERE) ;
      s.appendCString ("AUTO") ;
      s.appendUnicodeCharacter (TO_UNICODE ('$') COMMA_HERE) ;
      break ;
    case kToken_MASK:
      s.appendUnicodeCharacter (TO_UNICODE ('$') COMMA_HERE) ;
      s.appendCString ("MASK") ;
      s.appendUnicodeCharacter (TO_UNICODE ('$') COMMA_HERE) ;
      break ;
    case kToken_CATEGORY:
      s.appendUnicodeCharacter (TO_UNICODE ('$') COMMA_HERE) ;
      s.appendCString ("CATEGORY") ;
      s.appendUnicodeCharacter (TO_UNICODE ('$') COMMA_HERE) ;
      break ;
    case kToken_OS_5F_TYPE:
      s.appendUnicodeCharacter (TO_UNICODE ('$') COMMA_HERE) ;
      s.appendCString ("OS_TYPE") ;
      s.appendUnicodeCharacter (TO_UNICODE ('$') COMMA_HERE) ;
      break ;
    case kToken_TASK_5F_TYPE:
      s.appendUnicodeCharacter (TO_UNICODE ('$') COMMA_HERE) ;
      s.appendCString ("TASK_TYPE") ;
      s.appendUnicodeCharacter (TO_UNICODE ('$') COMMA_HERE) ;
      break ;
    case kToken_COUNTER_5F_TYPE:
      s.appendUnicodeCharacter (TO_UNICODE ('$') COMMA_HERE) ;
      s.appendCString ("COUNTER_TYPE") ;
      s.appendUnicodeCharacter (TO_UNICODE ('$') COMMA_HERE) ;
      break ;
    case kToken_ALARM_5F_TYPE:
      s.appendUnicodeCharacter (TO_UNICODE ('$') COMMA_HERE) ;
      s.appendCString ("ALARM_TYPE") ;
      s.appendUnicodeCharacter (TO_UNICODE ('$') COMMA_HERE) ;
      break ;
    case kToken_RESOURCE_5F_TYPE:
      s.appendUnicodeCharacter (TO_UNICODE ('$') COMMA_HERE) ;
      s.appendCString ("RESOURCE_TYPE") ;
      s.appendUnicodeCharacter (TO_UNICODE ('$') COMMA_HERE) ;
      break ;
    case kToken_EVENT_5F_TYPE:
      s.appendUnicodeCharacter (TO_UNICODE ('$') COMMA_HERE) ;
      s.appendCString ("EVENT_TYPE") ;
      s.appendUnicodeCharacter (TO_UNICODE ('$') COMMA_HERE) ;
      break ;
    case kToken_ISR_5F_TYPE:
      s.appendUnicodeCharacter (TO_UNICODE ('$') COMMA_HERE) ;
      s.appendCString ("ISR_TYPE") ;
      s.appendUnicodeCharacter (TO_UNICODE ('$') COMMA_HERE) ;
      break ;
    case kToken_MESSAGE_5F_TYPE:
      s.appendUnicodeCharacter (TO_UNICODE ('$') COMMA_HERE) ;
      s.appendCString ("MESSAGE_TYPE") ;
      s.appendUnicodeCharacter (TO_UNICODE ('$') COMMA_HERE) ;
      break ;
    case kToken_COM_5F_TYPE:
      s.appendUnicodeCharacter (TO_UNICODE ('$') COMMA_HERE) ;
      s.appendCString ("COM_TYPE") ;
      s.appendUnicodeCharacter (TO_UNICODE ('$') COMMA_HERE) ;
      break ;
    case kToken_NM_5F_TYPE:
      s.appendUnicodeCharacter (TO_UNICODE ('$') COMMA_HERE) ;
      s.appendCString ("NM_TYPE") ;
      s.appendUnicodeCharacter (TO_UNICODE ('$') COMMA_HERE) ;
      break ;
    case kToken_APPMODE_5F_TYPE:
      s.appendUnicodeCharacter (TO_UNICODE ('$') COMMA_HERE) ;
      s.appendCString ("APPMODE_TYPE") ;
      s.appendUnicodeCharacter (TO_UNICODE ('$') COMMA_HERE) ;
      break ;
    case kToken_IPDU_5F_TYPE:
      s.appendUnicodeCharacter (TO_UNICODE ('$') COMMA_HERE) ;
      s.appendCString ("IPDU_TYPE") ;
      s.appendUnicodeCharacter (TO_UNICODE ('$') COMMA_HERE) ;
      break ;
    case kToken_STATUS:
      s.appendUnicodeCharacter (TO_UNICODE ('$') COMMA_HERE) ;
      s.appendCString ("STATUS") ;
      s.appendUnicodeCharacter (TO_UNICODE ('$') COMMA_HERE) ;
      break ;
    case kToken_EXTENDED:
      s.appendUnicodeCharacter (TO_UNICODE ('$') COMMA_HERE) ;
      s.appendCString ("EXTENDED") ;
      s.appendUnicodeCharacter (TO_UNICODE ('$') COMMA_HERE) ;
      break ;
    case kToken_STARTUPHOOK:
      s.appendUnicodeCharacter (TO_UNICODE ('$') COMMA_HERE) ;
      s.appendCString ("STARTUPHOOK") ;
      s.appendUnicodeCharacter (TO_UNICODE ('$') COMMA_HERE) ;
      break ;
    case kToken_ERRORHOOK:
      s.appendUnicodeCharacter (TO_UNICODE ('$') COMMA_HERE) ;
      s.appendCString ("ERRORHOOK") ;
      s.appendUnicodeCharacter (TO_UNICODE ('$') COMMA_HERE) ;
      break ;
    case kToken_SHUTDOWNHOOK:
      s.appendUnicodeCharacter (TO_UNICODE ('$') COMMA_HERE) ;
      s.appendCString ("SHUTDOWNHOOK") ;
      s.appendUnicodeCharacter (TO_UNICODE ('$') COMMA_HERE) ;
      break ;
    case kToken_PRETASKHOOK:
      s.appendUnicodeCharacter (TO_UNICODE ('$') COMMA_HERE) ;
      s.appendCString ("PRETASKHOOK") ;
      s.appendUnicodeCharacter (TO_UNICODE ('$') COMMA_HERE) ;
      break ;
    case kToken_POSTTASKHOOK:
      s.appendUnicodeCharacter (TO_UNICODE ('$') COMMA_HERE) ;
      s.appendCString ("POSTTASKHOOK") ;
      s.appendUnicodeCharacter (TO_UNICODE ('$') COMMA_HERE) ;
      break ;
    case kToken_USEGETSERVICEID:
      s.appendUnicodeCharacter (TO_UNICODE ('$') COMMA_HERE) ;
      s.appendCString ("USEGETSERVICEID") ;
      s.appendUnicodeCharacter (TO_UNICODE ('$') COMMA_HERE) ;
      break ;
    case kToken_USEPARAMETERACCESS:
      s.appendUnicodeCharacter (TO_UNICODE ('$') COMMA_HERE) ;
      s.appendCString ("USEPARAMETERACCESS") ;
      s.appendUnicodeCharacter (TO_UNICODE ('$') COMMA_HERE) ;
      break ;
    case kToken_USERESSCHEDULER:
      s.appendUnicodeCharacter (TO_UNICODE ('$') COMMA_HERE) ;
      s.appendCString ("USERESSCHEDULER") ;
      s.appendUnicodeCharacter (TO_UNICODE ('$') COMMA_HERE) ;
      break ;
    case kToken_SYSTEM_5F_CALL:
      s.appendUnicodeCharacter (TO_UNICODE ('$') COMMA_HERE) ;
      s.appendCString ("SYSTEM_CALL") ;
      s.appendUnicodeCharacter (TO_UNICODE ('$') COMMA_HERE) ;
      break ;
    case kToken_MEMMAP:
      s.appendUnicodeCharacter (TO_UNICODE ('$') COMMA_HERE) ;
      s.appendCString ("MEMMAP") ;
      s.appendUnicodeCharacter (TO_UNICODE ('$') COMMA_HERE) ;
      break ;
    case kToken_MEMORY_5F_PROTECTION:
      s.appendUnicodeCharacter (TO_UNICODE ('$') COMMA_HERE) ;
      s.appendCString ("MEMORY_PROTECTION") ;
      s.appendUnicodeCharacter (TO_UNICODE ('$') COMMA_HERE) ;
      break ;
    case kToken_TRACE:
      s.appendUnicodeCharacter (TO_UNICODE ('$') COMMA_HERE) ;
      s.appendCString ("TRACE") ;
      s.appendUnicodeCharacter (TO_UNICODE ('$') COMMA_HERE) ;
      break ;
    case kToken_DEBUG:
      s.appendUnicodeCharacter (TO_UNICODE ('$') COMMA_HERE) ;
      s.appendCString ("DEBUG") ;
      s.appendUnicodeCharacter (TO_UNICODE ('$') COMMA_HERE) ;
      break ;
    case kToken_FILE:
      s.appendUnicodeCharacter (TO_UNICODE ('$') COMMA_HERE) ;
      s.appendCString ("FILE") ;
      s.appendUnicodeCharacter (TO_UNICODE ('$') COMMA_HERE) ;
      break ;
    case kToken_METHOD:
      s.appendUnicodeCharacter (TO_UNICODE ('$') COMMA_HERE) ;
      s.appendCString ("METHOD") ;
      s.appendUnicodeCharacter (TO_UNICODE ('$') COMMA_HERE) ;
      break ;
    case kToken_FORMAT:
      s.appendUnicodeCharacter (TO_UNICODE ('$') COMMA_HERE) ;
      s.appendCString ("FORMAT") ;
      s.appendUnicodeCharacter (TO_UNICODE ('$') COMMA_HERE) ;
      break ;
    case kToken_TRACE_5F_TASK:
      s.appendUnicodeCharacter (TO_UNICODE ('$') COMMA_HERE) ;
      s.appendCString ("TRACE_TASK") ;
      s.appendUnicodeCharacter (TO_UNICODE ('$') COMMA_HERE) ;
      break ;
    case kToken_TRACE_5F_ISR:
      s.appendUnicodeCharacter (TO_UNICODE ('$') COMMA_HERE) ;
      s.appendCString ("TRACE_ISR") ;
      s.appendUnicodeCharacter (TO_UNICODE ('$') COMMA_HERE) ;
      break ;
    case kToken_TRACE_5F_RESOURCE:
      s.appendUnicodeCharacter (TO_UNICODE ('$') COMMA_HERE) ;
      s.appendCString ("TRACE_RESOURCE") ;
      s.appendUnicodeCharacter (TO_UNICODE ('$') COMMA_HERE) ;
      break ;
    case kToken_TRACE_5F_ALARM:
      s.appendUnicodeCharacter (TO_UNICODE ('$') COMMA_HERE) ;
      s.appendCString ("TRACE_ALARM") ;
      s.appendUnicodeCharacter (TO_UNICODE ('$') COMMA_HERE) ;
      break ;
    case kToken_TRACE_5F_USER:
      s.appendUnicodeCharacter (TO_UNICODE ('$') COMMA_HERE) ;
      s.appendCString ("TRACE_USER") ;
      s.appendUnicodeCharacter (TO_UNICODE ('$') COMMA_HERE) ;
      break ;
    case kToken_DESCRIPTION:
      s.appendUnicodeCharacter (TO_UNICODE ('$') COMMA_HERE) ;
      s.appendCString ("DESCRIPTION") ;
      s.appendUnicodeCharacter (TO_UNICODE ('$') COMMA_HERE) ;
      break ;
    case kToken_PRIORITY:
      s.appendUnicodeCharacter (TO_UNICODE ('$') COMMA_HERE) ;
      s.appendCString ("PRIORITY") ;
      s.appendUnicodeCharacter (TO_UNICODE ('$') COMMA_HERE) ;
      break ;
    case kToken_SCHEDULE:
      s.appendUnicodeCharacter (TO_UNICODE ('$') COMMA_HERE) ;
      s.appendCString ("SCHEDULE") ;
      s.appendUnicodeCharacter (TO_UNICODE ('$') COMMA_HERE) ;
      break ;
    case kToken_ACTIVATION:
      s.appendUnicodeCharacter (TO_UNICODE ('$') COMMA_HERE) ;
      s.appendCString ("ACTIVATION") ;
      s.appendUnicodeCharacter (TO_UNICODE ('$') COMMA_HERE) ;
      break ;
    case kToken_AUTOSTART:
      s.appendUnicodeCharacter (TO_UNICODE ('$') COMMA_HERE) ;
      s.appendCString ("AUTOSTART") ;
      s.appendUnicodeCharacter (TO_UNICODE ('$') COMMA_HERE) ;
      break ;
    case kToken_MAXALLOWEDVALUE:
      s.appendUnicodeCharacter (TO_UNICODE ('$') COMMA_HERE) ;
      s.appendCString ("MAXALLOWEDVALUE") ;
      s.appendUnicodeCharacter (TO_UNICODE ('$') COMMA_HERE) ;
      break ;
    case kToken_TICKSPERBASE:
      s.appendUnicodeCharacter (TO_UNICODE ('$') COMMA_HERE) ;
      s.appendCString ("TICKSPERBASE") ;
      s.appendUnicodeCharacter (TO_UNICODE ('$') COMMA_HERE) ;
      break ;
    case kToken_MINCYCLE:
      s.appendUnicodeCharacter (TO_UNICODE ('$') COMMA_HERE) ;
      s.appendCString ("MINCYCLE") ;
      s.appendUnicodeCharacter (TO_UNICODE ('$') COMMA_HERE) ;
      break ;
    case kToken_TYPE:
      s.appendUnicodeCharacter (TO_UNICODE ('$') COMMA_HERE) ;
      s.appendCString ("TYPE") ;
      s.appendUnicodeCharacter (TO_UNICODE ('$') COMMA_HERE) ;
      break ;
    case kToken_UNIT:
      s.appendUnicodeCharacter (TO_UNICODE ('$') COMMA_HERE) ;
      s.appendCString ("UNIT") ;
      s.appendUnicodeCharacter (TO_UNICODE ('$') COMMA_HERE) ;
      break ;
    case kToken_ACTION:
      s.appendUnicodeCharacter (TO_UNICODE ('$') COMMA_HERE) ;
      s.appendCString ("ACTION") ;
      s.appendUnicodeCharacter (TO_UNICODE ('$') COMMA_HERE) ;
      break ;
    case kToken_SETEVENT:
      s.appendUnicodeCharacter (TO_UNICODE ('$') COMMA_HERE) ;
      s.appendCString ("SETEVENT") ;
      s.appendUnicodeCharacter (TO_UNICODE ('$') COMMA_HERE) ;
      break ;
    case kToken_ACTIVATETASK:
      s.appendUnicodeCharacter (TO_UNICODE ('$') COMMA_HERE) ;
      s.appendCString ("ACTIVATETASK") ;
      s.appendUnicodeCharacter (TO_UNICODE ('$') COMMA_HERE) ;
      break ;
    case kToken_ALARMCALLBACK:
      s.appendUnicodeCharacter (TO_UNICODE ('$') COMMA_HERE) ;
      s.appendCString ("ALARMCALLBACK") ;
      s.appendUnicodeCharacter (TO_UNICODE ('$') COMMA_HERE) ;
      break ;
    case kToken_ALARMCALLBACKNAME:
      s.appendUnicodeCharacter (TO_UNICODE ('$') COMMA_HERE) ;
      s.appendCString ("ALARMCALLBACKNAME") ;
      s.appendUnicodeCharacter (TO_UNICODE ('$') COMMA_HERE) ;
      break ;
    case kToken_ALARMTIME:
      s.appendUnicodeCharacter (TO_UNICODE ('$') COMMA_HERE) ;
      s.appendCString ("ALARMTIME") ;
      s.appendUnicodeCharacter (TO_UNICODE ('$') COMMA_HERE) ;
      break ;
    case kToken_CYCLETIME:
      s.appendUnicodeCharacter (TO_UNICODE ('$') COMMA_HERE) ;
      s.appendCString ("CYCLETIME") ;
      s.appendUnicodeCharacter (TO_UNICODE ('$') COMMA_HERE) ;
      break ;
    case kToken_INCREMENTCOUNTER:
      s.appendUnicodeCharacter (TO_UNICODE ('$') COMMA_HERE) ;
      s.appendCString ("INCREMENTCOUNTER") ;
      s.appendUnicodeCharacter (TO_UNICODE ('$') COMMA_HERE) ;
      break ;
    case kToken_RESOURCEPROPERTY:
      s.appendUnicodeCharacter (TO_UNICODE ('$') COMMA_HERE) ;
      s.appendCString ("RESOURCEPROPERTY") ;
      s.appendUnicodeCharacter (TO_UNICODE ('$') COMMA_HERE) ;
      break ;
    case kToken_STANDARD:
      s.appendUnicodeCharacter (TO_UNICODE ('$') COMMA_HERE) ;
      s.appendCString ("STANDARD") ;
      s.appendUnicodeCharacter (TO_UNICODE ('$') COMMA_HERE) ;
      break ;
    case kToken_LINKED:
      s.appendUnicodeCharacter (TO_UNICODE ('$') COMMA_HERE) ;
      s.appendCString ("LINKED") ;
      s.appendUnicodeCharacter (TO_UNICODE ('$') COMMA_HERE) ;
      break ;
    case kToken_LINKEDRESOURCE:
      s.appendUnicodeCharacter (TO_UNICODE ('$') COMMA_HERE) ;
      s.appendCString ("LINKEDRESOURCE") ;
      s.appendUnicodeCharacter (TO_UNICODE ('$') COMMA_HERE) ;
      break ;
    case kToken_INTERNAL:
      s.appendUnicodeCharacter (TO_UNICODE ('$') COMMA_HERE) ;
      s.appendCString ("INTERNAL") ;
      s.appendUnicodeCharacter (TO_UNICODE ('$') COMMA_HERE) ;
      break ;
    case kToken_MESSAGEPROPERTY:
      s.appendUnicodeCharacter (TO_UNICODE ('$') COMMA_HERE) ;
      s.appendCString ("MESSAGEPROPERTY") ;
      s.appendUnicodeCharacter (TO_UNICODE ('$') COMMA_HERE) ;
      break ;
    case kToken_NOTIFICATION:
      s.appendUnicodeCharacter (TO_UNICODE ('$') COMMA_HERE) ;
      s.appendCString ("NOTIFICATION") ;
      s.appendUnicodeCharacter (TO_UNICODE ('$') COMMA_HERE) ;
      break ;
    case kToken_NOTIFICATIONERROR:
      s.appendUnicodeCharacter (TO_UNICODE ('$') COMMA_HERE) ;
      s.appendCString ("NOTIFICATIONERROR") ;
      s.appendUnicodeCharacter (TO_UNICODE ('$') COMMA_HERE) ;
      break ;
    case kToken_SEND_5F_STATIC_5F_INTERNAL:
      s.appendUnicodeCharacter (TO_UNICODE ('$') COMMA_HERE) ;
      s.appendCString ("SEND_STATIC_INTERNAL") ;
      s.appendUnicodeCharacter (TO_UNICODE ('$') COMMA_HERE) ;
      break ;
    case kToken_SEND_5F_STATIC_5F_EXTERNAL:
      s.appendUnicodeCharacter (TO_UNICODE ('$') COMMA_HERE) ;
      s.appendCString ("SEND_STATIC_EXTERNAL") ;
      s.appendUnicodeCharacter (TO_UNICODE ('$') COMMA_HERE) ;
      break ;
    case kToken_SEND_5F_DYNAMIC_5F_EXTERNAL:
      s.appendUnicodeCharacter (TO_UNICODE ('$') COMMA_HERE) ;
      s.appendCString ("SEND_DYNAMIC_EXTERNAL") ;
      s.appendUnicodeCharacter (TO_UNICODE ('$') COMMA_HERE) ;
      break ;
    case kToken_SEND_5F_ZERO_5F_INTERNAL:
      s.appendUnicodeCharacter (TO_UNICODE ('$') COMMA_HERE) ;
      s.appendCString ("SEND_ZERO_INTERNAL") ;
      s.appendUnicodeCharacter (TO_UNICODE ('$') COMMA_HERE) ;
      break ;
    case kToken_SEND_5F_ZERO_5F_EXTERNAL:
      s.appendUnicodeCharacter (TO_UNICODE ('$') COMMA_HERE) ;
      s.appendCString ("SEND_ZERO_EXTERNAL") ;
      s.appendUnicodeCharacter (TO_UNICODE ('$') COMMA_HERE) ;
      break ;
    case kToken_RECEIVE_5F_ZERO_5F_INTERNAL:
      s.appendUnicodeCharacter (TO_UNICODE ('$') COMMA_HERE) ;
      s.appendCString ("RECEIVE_ZERO_INTERNAL") ;
      s.appendUnicodeCharacter (TO_UNICODE ('$') COMMA_HERE) ;
      break ;
    case kToken_RECEIVE_5F_ZERO_5F_EXTERNAL:
      s.appendUnicodeCharacter (TO_UNICODE ('$') COMMA_HERE) ;
      s.appendCString ("RECEIVE_ZERO_EXTERNAL") ;
      s.appendUnicodeCharacter (TO_UNICODE ('$') COMMA_HERE) ;
      break ;
    case kToken_RECEIVE_5F_UNQUEUED_5F_INTERNAL:
      s.appendUnicodeCharacter (TO_UNICODE ('$') COMMA_HERE) ;
      s.appendCString ("RECEIVE_UNQUEUED_INTERNAL") ;
      s.appendUnicodeCharacter (TO_UNICODE ('$') COMMA_HERE) ;
      break ;
    case kToken_RECEIVE_5F_QUEUED_5F_INTERNAL:
      s.appendUnicodeCharacter (TO_UNICODE ('$') COMMA_HERE) ;
      s.appendCString ("RECEIVE_QUEUED_INTERNAL") ;
      s.appendUnicodeCharacter (TO_UNICODE ('$') COMMA_HERE) ;
      break ;
    case kToken_RECEIVE_5F_UNQUEUED_5F_EXTERNAL:
      s.appendUnicodeCharacter (TO_UNICODE ('$') COMMA_HERE) ;
      s.appendCString ("RECEIVE_UNQUEUED_EXTERNAL") ;
      s.appendUnicodeCharacter (TO_UNICODE ('$') COMMA_HERE) ;
      break ;
    case kToken_RECEIVE_5F_QUEUED_5F_EXTERNAL:
      s.appendUnicodeCharacter (TO_UNICODE ('$') COMMA_HERE) ;
      s.appendCString ("RECEIVE_QUEUED_EXTERNAL") ;
      s.appendUnicodeCharacter (TO_UNICODE ('$') COMMA_HERE) ;
      break ;
    case kToken_RECEIVE_5F_DYNAMIC_5F_EXTERNAL:
      s.appendUnicodeCharacter (TO_UNICODE ('$') COMMA_HERE) ;
      s.appendCString ("RECEIVE_DYNAMIC_EXTERNAL") ;
      s.appendUnicodeCharacter (TO_UNICODE ('$') COMMA_HERE) ;
      break ;
    case kToken_RECEIVE_5F_ZERO_5F_SENDERS:
      s.appendUnicodeCharacter (TO_UNICODE ('$') COMMA_HERE) ;
      s.appendCString ("RECEIVE_ZERO_SENDERS") ;
      s.appendUnicodeCharacter (TO_UNICODE ('$') COMMA_HERE) ;
      break ;
    case kToken_CDATATYPE:
      s.appendUnicodeCharacter (TO_UNICODE ('$') COMMA_HERE) ;
      s.appendCString ("CDATATYPE") ;
      s.appendUnicodeCharacter (TO_UNICODE ('$') COMMA_HERE) ;
      break ;
    case kToken_SENDINGMESSAGE:
      s.appendUnicodeCharacter (TO_UNICODE ('$') COMMA_HERE) ;
      s.appendCString ("SENDINGMESSAGE") ;
      s.appendUnicodeCharacter (TO_UNICODE ('$') COMMA_HERE) ;
      break ;
    case kToken_NONE:
      s.appendUnicodeCharacter (TO_UNICODE ('$') COMMA_HERE) ;
      s.appendCString ("NONE") ;
      s.appendUnicodeCharacter (TO_UNICODE ('$') COMMA_HERE) ;
      break ;
    case kToken_COMCALLBACK:
      s.appendUnicodeCharacter (TO_UNICODE ('$') COMMA_HERE) ;
      s.appendCString ("COMCALLBACK") ;
      s.appendUnicodeCharacter (TO_UNICODE ('$') COMMA_HERE) ;
      break ;
    case kToken_COMCALLBACKNAME:
      s.appendUnicodeCharacter (TO_UNICODE ('$') COMMA_HERE) ;
      s.appendCString ("COMCALLBACKNAME") ;
      s.appendUnicodeCharacter (TO_UNICODE ('$') COMMA_HERE) ;
      break ;
    case kToken_INMCALLBACK:
      s.appendUnicodeCharacter (TO_UNICODE ('$') COMMA_HERE) ;
      s.appendCString ("INMCALLBACK") ;
      s.appendUnicodeCharacter (TO_UNICODE ('$') COMMA_HERE) ;
      break ;
    case kToken_CALLBACKROUTINENAME:
      s.appendUnicodeCharacter (TO_UNICODE ('$') COMMA_HERE) ;
      s.appendCString ("CALLBACKROUTINENAME") ;
      s.appendUnicodeCharacter (TO_UNICODE ('$') COMMA_HERE) ;
      break ;
    case kToken_MONITOREDIPDU:
      s.appendUnicodeCharacter (TO_UNICODE ('$') COMMA_HERE) ;
      s.appendCString ("MONITOREDIPDU") ;
      s.appendUnicodeCharacter (TO_UNICODE ('$') COMMA_HERE) ;
      break ;
    case kToken_TRANSFERPROPERTY:
      s.appendUnicodeCharacter (TO_UNICODE ('$') COMMA_HERE) ;
      s.appendCString ("TRANSFERPROPERTY") ;
      s.appendUnicodeCharacter (TO_UNICODE ('$') COMMA_HERE) ;
      break ;
    case kToken_TRIGGERED:
      s.appendUnicodeCharacter (TO_UNICODE ('$') COMMA_HERE) ;
      s.appendCString ("TRIGGERED") ;
      s.appendUnicodeCharacter (TO_UNICODE ('$') COMMA_HERE) ;
      break ;
    case kToken_PENDING:
      s.appendUnicodeCharacter (TO_UNICODE ('$') COMMA_HERE) ;
      s.appendCString ("PENDING") ;
      s.appendUnicodeCharacter (TO_UNICODE ('$') COMMA_HERE) ;
      break ;
    case kToken_NETWORKMESSAGE:
      s.appendUnicodeCharacter (TO_UNICODE ('$') COMMA_HERE) ;
      s.appendCString ("NETWORKMESSAGE") ;
      s.appendUnicodeCharacter (TO_UNICODE ('$') COMMA_HERE) ;
      break ;
    case kToken_FILTER:
      s.appendUnicodeCharacter (TO_UNICODE ('$') COMMA_HERE) ;
      s.appendCString ("FILTER") ;
      s.appendUnicodeCharacter (TO_UNICODE ('$') COMMA_HERE) ;
      break ;
    case kToken_ALWAYS:
      s.appendUnicodeCharacter (TO_UNICODE ('$') COMMA_HERE) ;
      s.appendCString ("ALWAYS") ;
      s.appendUnicodeCharacter (TO_UNICODE ('$') COMMA_HERE) ;
      break ;
    case kToken_NEVER:
      s.appendUnicodeCharacter (TO_UNICODE ('$') COMMA_HERE) ;
      s.appendCString ("NEVER") ;
      s.appendUnicodeCharacter (TO_UNICODE ('$') COMMA_HERE) ;
      break ;
    case kToken_MASKEDNEWEQUALSX:
      s.appendUnicodeCharacter (TO_UNICODE ('$') COMMA_HERE) ;
      s.appendCString ("MASKEDNEWEQUALSX") ;
      s.appendUnicodeCharacter (TO_UNICODE ('$') COMMA_HERE) ;
      break ;
    case kToken_MASKEDNEWDIFFERSX:
      s.appendUnicodeCharacter (TO_UNICODE ('$') COMMA_HERE) ;
      s.appendCString ("MASKEDNEWDIFFERSX") ;
      s.appendUnicodeCharacter (TO_UNICODE ('$') COMMA_HERE) ;
      break ;
    case kToken_NEWISEQUAL:
      s.appendUnicodeCharacter (TO_UNICODE ('$') COMMA_HERE) ;
      s.appendCString ("NEWISEQUAL") ;
      s.appendUnicodeCharacter (TO_UNICODE ('$') COMMA_HERE) ;
      break ;
    case kToken_NEWISDIFFERENT:
      s.appendUnicodeCharacter (TO_UNICODE ('$') COMMA_HERE) ;
      s.appendCString ("NEWISDIFFERENT") ;
      s.appendUnicodeCharacter (TO_UNICODE ('$') COMMA_HERE) ;
      break ;
    case kToken_MASKEDNEWEQUALSMASKEDOLD:
      s.appendUnicodeCharacter (TO_UNICODE ('$') COMMA_HERE) ;
      s.appendCString ("MASKEDNEWEQUALSMASKEDOLD") ;
      s.appendUnicodeCharacter (TO_UNICODE ('$') COMMA_HERE) ;
      break ;
    case kToken_MASKEDNEWDIFFERSMASKEDOLD:
      s.appendUnicodeCharacter (TO_UNICODE ('$') COMMA_HERE) ;
      s.appendCString ("MASKEDNEWDIFFERSMASKEDOLD") ;
      s.appendUnicodeCharacter (TO_UNICODE ('$') COMMA_HERE) ;
      break ;
    case kToken_NEWISWITHIN:
      s.appendUnicodeCharacter (TO_UNICODE ('$') COMMA_HERE) ;
      s.appendCString ("NEWISWITHIN") ;
      s.appendUnicodeCharacter (TO_UNICODE ('$') COMMA_HERE) ;
      break ;
    case kToken_NEWISOUTSIDE:
      s.appendUnicodeCharacter (TO_UNICODE ('$') COMMA_HERE) ;
      s.appendCString ("NEWISOUTSIDE") ;
      s.appendUnicodeCharacter (TO_UNICODE ('$') COMMA_HERE) ;
      break ;
    case kToken_NEWISGREATER:
      s.appendUnicodeCharacter (TO_UNICODE ('$') COMMA_HERE) ;
      s.appendCString ("NEWISGREATER") ;
      s.appendUnicodeCharacter (TO_UNICODE ('$') COMMA_HERE) ;
      break ;
    case kToken_NEWISLESSOREQUAL:
      s.appendUnicodeCharacter (TO_UNICODE ('$') COMMA_HERE) ;
      s.appendCString ("NEWISLESSOREQUAL") ;
      s.appendUnicodeCharacter (TO_UNICODE ('$') COMMA_HERE) ;
      break ;
    case kToken_NEWISLESS:
      s.appendUnicodeCharacter (TO_UNICODE ('$') COMMA_HERE) ;
      s.appendCString ("NEWISLESS") ;
      s.appendUnicodeCharacter (TO_UNICODE ('$') COMMA_HERE) ;
      break ;
    case kToken_NEWISGREATEROREQUAL:
      s.appendUnicodeCharacter (TO_UNICODE ('$') COMMA_HERE) ;
      s.appendCString ("NEWISGREATEROREQUAL") ;
      s.appendUnicodeCharacter (TO_UNICODE ('$') COMMA_HERE) ;
      break ;
    case kToken_ONEEVERYN:
      s.appendUnicodeCharacter (TO_UNICODE ('$') COMMA_HERE) ;
      s.appendCString ("ONEEVERYN") ;
      s.appendUnicodeCharacter (TO_UNICODE ('$') COMMA_HERE) ;
      break ;
    case kToken_MIN:
      s.appendUnicodeCharacter (TO_UNICODE ('$') COMMA_HERE) ;
      s.appendCString ("MIN") ;
      s.appendUnicodeCharacter (TO_UNICODE ('$') COMMA_HERE) ;
      break ;
    case kToken_MAX:
      s.appendUnicodeCharacter (TO_UNICODE ('$') COMMA_HERE) ;
      s.appendCString ("MAX") ;
      s.appendUnicodeCharacter (TO_UNICODE ('$') COMMA_HERE) ;
      break ;
    case kToken_X:
      s.appendUnicodeCharacter (TO_UNICODE ('$') COMMA_HERE) ;
      s.appendCString ("X") ;
      s.appendUnicodeCharacter (TO_UNICODE ('$') COMMA_HERE) ;
      break ;
    case kToken_PERIOD:
      s.appendUnicodeCharacter (TO_UNICODE ('$') COMMA_HERE) ;
      s.appendCString ("PERIOD") ;
      s.appendUnicodeCharacter (TO_UNICODE ('$') COMMA_HERE) ;
      break ;
    case kToken_OFFSET:
      s.appendUnicodeCharacter (TO_UNICODE ('$') COMMA_HERE) ;
      s.appendCString ("OFFSET") ;
      s.appendUnicodeCharacter (TO_UNICODE ('$') COMMA_HERE) ;
      break ;
    case kToken_NETWORKORDERCALLOUT:
      s.appendUnicodeCharacter (TO_UNICODE ('$') COMMA_HERE) ;
      s.appendCString ("NETWORKORDERCALLOUT") ;
      s.appendUnicodeCharacter (TO_UNICODE ('$') COMMA_HERE) ;
      break ;
    case kToken_CPUORDERCALLOUT:
      s.appendUnicodeCharacter (TO_UNICODE ('$') COMMA_HERE) ;
      s.appendCString ("CPUORDERCALLOUT") ;
      s.appendUnicodeCharacter (TO_UNICODE ('$') COMMA_HERE) ;
      break ;
    case kToken_INITIALVALUE:
      s.appendUnicodeCharacter (TO_UNICODE ('$') COMMA_HERE) ;
      s.appendCString ("INITIALVALUE") ;
      s.appendUnicodeCharacter (TO_UNICODE ('$') COMMA_HERE) ;
      break ;
    case kToken_QUEUESIZE:
      s.appendUnicodeCharacter (TO_UNICODE ('$') COMMA_HERE) ;
      s.appendCString ("QUEUESIZE") ;
      s.appendUnicodeCharacter (TO_UNICODE ('$') COMMA_HERE) ;
      break ;
    case kToken_LINK:
      s.appendUnicodeCharacter (TO_UNICODE ('$') COMMA_HERE) ;
      s.appendCString ("LINK") ;
      s.appendUnicodeCharacter (TO_UNICODE ('$') COMMA_HERE) ;
      break ;
    case kToken_RECEIVEMESSAGE:
      s.appendUnicodeCharacter (TO_UNICODE ('$') COMMA_HERE) ;
      s.appendCString ("RECEIVEMESSAGE") ;
      s.appendUnicodeCharacter (TO_UNICODE ('$') COMMA_HERE) ;
      break ;
    case kToken_FLAG:
      s.appendUnicodeCharacter (TO_UNICODE ('$') COMMA_HERE) ;
      s.appendCString ("FLAG") ;
      s.appendUnicodeCharacter (TO_UNICODE ('$') COMMA_HERE) ;
      break ;
    case kToken_FLAGNAME:
      s.appendUnicodeCharacter (TO_UNICODE ('$') COMMA_HERE) ;
      s.appendCString ("FLAGNAME") ;
      s.appendUnicodeCharacter (TO_UNICODE ('$') COMMA_HERE) ;
      break ;
    case kToken_STATIC:
      s.appendUnicodeCharacter (TO_UNICODE ('$') COMMA_HERE) ;
      s.appendCString ("STATIC") ;
      s.appendUnicodeCharacter (TO_UNICODE ('$') COMMA_HERE) ;
      break ;
    case kToken_DYNAMIC:
      s.appendUnicodeCharacter (TO_UNICODE ('$') COMMA_HERE) ;
      s.appendCString ("DYNAMIC") ;
      s.appendUnicodeCharacter (TO_UNICODE ('$') COMMA_HERE) ;
      break ;
    case kToken_ZERO:
      s.appendUnicodeCharacter (TO_UNICODE ('$') COMMA_HERE) ;
      s.appendCString ("ZERO") ;
      s.appendUnicodeCharacter (TO_UNICODE ('$') COMMA_HERE) ;
      break ;
    case kToken_SIZEINBITS:
      s.appendUnicodeCharacter (TO_UNICODE ('$') COMMA_HERE) ;
      s.appendCString ("SIZEINBITS") ;
      s.appendUnicodeCharacter (TO_UNICODE ('$') COMMA_HERE) ;
      break ;
    case kToken_MAXSIZEINBITS:
      s.appendUnicodeCharacter (TO_UNICODE ('$') COMMA_HERE) ;
      s.appendCString ("MAXSIZEINBITS") ;
      s.appendUnicodeCharacter (TO_UNICODE ('$') COMMA_HERE) ;
      break ;
    case kToken_BITORDERING:
      s.appendUnicodeCharacter (TO_UNICODE ('$') COMMA_HERE) ;
      s.appendCString ("BITORDERING") ;
      s.appendUnicodeCharacter (TO_UNICODE ('$') COMMA_HERE) ;
      break ;
    case kToken_BIGENDIAN:
      s.appendUnicodeCharacter (TO_UNICODE ('$') COMMA_HERE) ;
      s.appendCString ("BIGENDIAN") ;
      s.appendUnicodeCharacter (TO_UNICODE ('$') COMMA_HERE) ;
      break ;
    case kToken_LITTLEENDIAN:
      s.appendUnicodeCharacter (TO_UNICODE ('$') COMMA_HERE) ;
      s.appendCString ("LITTLEENDIAN") ;
      s.appendUnicodeCharacter (TO_UNICODE ('$') COMMA_HERE) ;
      break ;
    case kToken_BITPOSITION:
      s.appendUnicodeCharacter (TO_UNICODE ('$') COMMA_HERE) ;
      s.appendCString ("BITPOSITION") ;
      s.appendUnicodeCharacter (TO_UNICODE ('$') COMMA_HERE) ;
      break ;
    case kToken_DATAINTERPRETATION:
      s.appendUnicodeCharacter (TO_UNICODE ('$') COMMA_HERE) ;
      s.appendCString ("DATAINTERPRETATION") ;
      s.appendUnicodeCharacter (TO_UNICODE ('$') COMMA_HERE) ;
      break ;
    case kToken_UNSIGNEDINTEGER:
      s.appendUnicodeCharacter (TO_UNICODE ('$') COMMA_HERE) ;
      s.appendCString ("UNSIGNEDINTEGER") ;
      s.appendUnicodeCharacter (TO_UNICODE ('$') COMMA_HERE) ;
      break ;
    case kToken_BYTEARRAY:
      s.appendUnicodeCharacter (TO_UNICODE ('$') COMMA_HERE) ;
      s.appendCString ("BYTEARRAY") ;
      s.appendUnicodeCharacter (TO_UNICODE ('$') COMMA_HERE) ;
      break ;
    case kToken_DIRECTION:
      s.appendUnicodeCharacter (TO_UNICODE ('$') COMMA_HERE) ;
      s.appendCString ("DIRECTION") ;
      s.appendUnicodeCharacter (TO_UNICODE ('$') COMMA_HERE) ;
      break ;
    case kToken_SENT:
      s.appendUnicodeCharacter (TO_UNICODE ('$') COMMA_HERE) ;
      s.appendCString ("SENT") ;
      s.appendUnicodeCharacter (TO_UNICODE ('$') COMMA_HERE) ;
      break ;
    case kToken_RECEIVED:
      s.appendUnicodeCharacter (TO_UNICODE ('$') COMMA_HERE) ;
      s.appendCString ("RECEIVED") ;
      s.appendUnicodeCharacter (TO_UNICODE ('$') COMMA_HERE) ;
      break ;
    case kToken_COMTIMEBASE:
      s.appendUnicodeCharacter (TO_UNICODE ('$') COMMA_HERE) ;
      s.appendCString ("COMTIMEBASE") ;
      s.appendUnicodeCharacter (TO_UNICODE ('$') COMMA_HERE) ;
      break ;
    case kToken_COMERRORHOOK:
      s.appendUnicodeCharacter (TO_UNICODE ('$') COMMA_HERE) ;
      s.appendCString ("COMERRORHOOK") ;
      s.appendUnicodeCharacter (TO_UNICODE ('$') COMMA_HERE) ;
      break ;
    case kToken_COMUSEGETSERVICEID:
      s.appendUnicodeCharacter (TO_UNICODE ('$') COMMA_HERE) ;
      s.appendCString ("COMUSEGETSERVICEID") ;
      s.appendUnicodeCharacter (TO_UNICODE ('$') COMMA_HERE) ;
      break ;
    case kToken_COMUSEPARAMETERACCESS:
      s.appendUnicodeCharacter (TO_UNICODE ('$') COMMA_HERE) ;
      s.appendCString ("COMUSEPARAMETERACCESS") ;
      s.appendUnicodeCharacter (TO_UNICODE ('$') COMMA_HERE) ;
      break ;
    case kToken_COMSTARTCOMEXTENSION:
      s.appendUnicodeCharacter (TO_UNICODE ('$') COMMA_HERE) ;
      s.appendCString ("COMSTARTCOMEXTENSION") ;
      s.appendUnicodeCharacter (TO_UNICODE ('$') COMMA_HERE) ;
      break ;
    case kToken_COMAPPMODE:
      s.appendUnicodeCharacter (TO_UNICODE ('$') COMMA_HERE) ;
      s.appendCString ("COMAPPMODE") ;
      s.appendUnicodeCharacter (TO_UNICODE ('$') COMMA_HERE) ;
      break ;
    case kToken_COMSTATUS:
      s.appendUnicodeCharacter (TO_UNICODE ('$') COMMA_HERE) ;
      s.appendCString ("COMSTATUS") ;
      s.appendUnicodeCharacter (TO_UNICODE ('$') COMMA_HERE) ;
      break ;
    case kToken_USE:
      s.appendUnicodeCharacter (TO_UNICODE ('$') COMMA_HERE) ;
      s.appendCString ("USE") ;
      s.appendUnicodeCharacter (TO_UNICODE ('$') COMMA_HERE) ;
      break ;
    case kToken_COMEXTENDED:
      s.appendUnicodeCharacter (TO_UNICODE ('$') COMMA_HERE) ;
      s.appendCString ("COMEXTENDED") ;
      s.appendUnicodeCharacter (TO_UNICODE ('$') COMMA_HERE) ;
      break ;
    case kToken_COMSTANDARD:
      s.appendUnicodeCharacter (TO_UNICODE ('$') COMMA_HERE) ;
      s.appendCString ("COMSTANDARD") ;
      s.appendUnicodeCharacter (TO_UNICODE ('$') COMMA_HERE) ;
      break ;
    case kToken_IPDUPROPERTY:
      s.appendUnicodeCharacter (TO_UNICODE ('$') COMMA_HERE) ;
      s.appendCString ("IPDUPROPERTY") ;
      s.appendUnicodeCharacter (TO_UNICODE ('$') COMMA_HERE) ;
      break ;
    case kToken_IPDUCALLOUT:
      s.appendUnicodeCharacter (TO_UNICODE ('$') COMMA_HERE) ;
      s.appendCString ("IPDUCALLOUT") ;
      s.appendUnicodeCharacter (TO_UNICODE ('$') COMMA_HERE) ;
      break ;
    case kToken_LAYERUSED:
      s.appendUnicodeCharacter (TO_UNICODE ('$') COMMA_HERE) ;
      s.appendCString ("LAYERUSED") ;
      s.appendUnicodeCharacter (TO_UNICODE ('$') COMMA_HERE) ;
      break ;
    case kToken_TRANSMISSIONMODE:
      s.appendUnicodeCharacter (TO_UNICODE ('$') COMMA_HERE) ;
      s.appendCString ("TRANSMISSIONMODE") ;
      s.appendUnicodeCharacter (TO_UNICODE ('$') COMMA_HERE) ;
      break ;
    case kToken_DIRECT:
      s.appendUnicodeCharacter (TO_UNICODE ('$') COMMA_HERE) ;
      s.appendCString ("DIRECT") ;
      s.appendUnicodeCharacter (TO_UNICODE ('$') COMMA_HERE) ;
      break ;
    case kToken_PERIODIC:
      s.appendUnicodeCharacter (TO_UNICODE ('$') COMMA_HERE) ;
      s.appendCString ("PERIODIC") ;
      s.appendUnicodeCharacter (TO_UNICODE ('$') COMMA_HERE) ;
      break ;
    case kToken_MIXED:
      s.appendUnicodeCharacter (TO_UNICODE ('$') COMMA_HERE) ;
      s.appendCString ("MIXED") ;
      s.appendUnicodeCharacter (TO_UNICODE ('$') COMMA_HERE) ;
      break ;
    case kToken_TIMEOUT:
      s.appendUnicodeCharacter (TO_UNICODE ('$') COMMA_HERE) ;
      s.appendCString ("TIMEOUT") ;
      s.appendUnicodeCharacter (TO_UNICODE ('$') COMMA_HERE) ;
      break ;
    case kToken_FIRTSTIMEOUT:
      s.appendUnicodeCharacter (TO_UNICODE ('$') COMMA_HERE) ;
      s.appendCString ("FIRTSTIMEOUT") ;
      s.appendUnicodeCharacter (TO_UNICODE ('$') COMMA_HERE) ;
      break ;
    case kToken_MINIMUMDELAYTIME:
      s.appendUnicodeCharacter (TO_UNICODE ('$') COMMA_HERE) ;
      s.appendCString ("MINIMUMDELAYTIME") ;
      s.appendUnicodeCharacter (TO_UNICODE ('$') COMMA_HERE) ;
      break ;
    case kToken_TIMEPERIOD:
      s.appendUnicodeCharacter (TO_UNICODE ('$') COMMA_HERE) ;
      s.appendCString ("TIMEPERIOD") ;
      s.appendUnicodeCharacter (TO_UNICODE ('$') COMMA_HERE) ;
      break ;
    case kToken_TIMEOFFSET:
      s.appendUnicodeCharacter (TO_UNICODE ('$') COMMA_HERE) ;
      s.appendCString ("TIMEOFFSET") ;
      s.appendUnicodeCharacter (TO_UNICODE ('$') COMMA_HERE) ;
      break ;
    case kToken_NON:
      s.appendUnicodeCharacter (TO_UNICODE ('$') COMMA_HERE) ;
      s.appendCString ("NON") ;
      s.appendUnicodeCharacter (TO_UNICODE ('$') COMMA_HERE) ;
      break ;
    case kToken_FULL:
      s.appendUnicodeCharacter (TO_UNICODE ('$') COMMA_HERE) ;
      s.appendCString ("FULL") ;
      s.appendUnicodeCharacter (TO_UNICODE ('$') COMMA_HERE) ;
      break ;
    case kToken_FALSE:
      s.appendUnicodeCharacter (TO_UNICODE ('$') COMMA_HERE) ;
      s.appendCString ("FALSE") ;
      s.appendUnicodeCharacter (TO_UNICODE ('$') COMMA_HERE) ;
      break ;
    case kToken_TRUE:
      s.appendUnicodeCharacter (TO_UNICODE ('$') COMMA_HERE) ;
      s.appendCString ("TRUE") ;
      s.appendUnicodeCharacter (TO_UNICODE ('$') COMMA_HERE) ;
      break ;
    case kToken_PROTECTIONHOOK:
      s.appendUnicodeCharacter (TO_UNICODE ('$') COMMA_HERE) ;
      s.appendCString ("PROTECTIONHOOK") ;
      s.appendUnicodeCharacter (TO_UNICODE ('$') COMMA_HERE) ;
      break ;
    case kToken_SCALABILITYCLASS:
      s.appendUnicodeCharacter (TO_UNICODE ('$') COMMA_HERE) ;
      s.appendCString ("SCALABILITYCLASS") ;
      s.appendUnicodeCharacter (TO_UNICODE ('$') COMMA_HERE) ;
      break ;
    case kToken_STACKMONITORING:
      s.appendUnicodeCharacter (TO_UNICODE ('$') COMMA_HERE) ;
      s.appendCString ("STACKMONITORING") ;
      s.appendUnicodeCharacter (TO_UNICODE ('$') COMMA_HERE) ;
      break ;
    case kToken_TIMING_5F_PROTECTION:
      s.appendUnicodeCharacter (TO_UNICODE ('$') COMMA_HERE) ;
      s.appendCString ("TIMING_PROTECTION") ;
      s.appendUnicodeCharacter (TO_UNICODE ('$') COMMA_HERE) ;
      break ;
    case kToken_ACCESSING_5F_APPLICATION:
      s.appendUnicodeCharacter (TO_UNICODE ('$') COMMA_HERE) ;
      s.appendCString ("ACCESSING_APPLICATION") ;
      s.appendUnicodeCharacter (TO_UNICODE ('$') COMMA_HERE) ;
      break ;
    case kToken_SC_31_:
      s.appendUnicodeCharacter (TO_UNICODE ('$') COMMA_HERE) ;
      s.appendCString ("SC1") ;
      s.appendUnicodeCharacter (TO_UNICODE ('$') COMMA_HERE) ;
      break ;
    case kToken_SC_32_:
      s.appendUnicodeCharacter (TO_UNICODE ('$') COMMA_HERE) ;
      s.appendCString ("SC2") ;
      s.appendUnicodeCharacter (TO_UNICODE ('$') COMMA_HERE) ;
      break ;
    case kToken_SC_33_:
      s.appendUnicodeCharacter (TO_UNICODE ('$') COMMA_HERE) ;
      s.appendCString ("SC3") ;
      s.appendUnicodeCharacter (TO_UNICODE ('$') COMMA_HERE) ;
      break ;
    case kToken_SC_34_:
      s.appendUnicodeCharacter (TO_UNICODE ('$') COMMA_HERE) ;
      s.appendCString ("SC4") ;
      s.appendUnicodeCharacter (TO_UNICODE ('$') COMMA_HERE) ;
      break ;
    case kToken_SCHEDULETABLE:
      s.appendUnicodeCharacter (TO_UNICODE ('$') COMMA_HERE) ;
      s.appendCString ("SCHEDULETABLE") ;
      s.appendUnicodeCharacter (TO_UNICODE ('$') COMMA_HERE) ;
      break ;
    case kToken_APPLICATION:
      s.appendUnicodeCharacter (TO_UNICODE ('$') COMMA_HERE) ;
      s.appendCString ("APPLICATION") ;
      s.appendUnicodeCharacter (TO_UNICODE ('$') COMMA_HERE) ;
      break ;
    case kToken_LOCAL_5F_TO_5F_GLOBAL_5F_TIME_5F_SYNCHRONIZATION:
      s.appendUnicodeCharacter (TO_UNICODE ('$') COMMA_HERE) ;
      s.appendCString ("LOCAL_TO_GLOBAL_TIME_SYNCHRONIZATION") ;
      s.appendUnicodeCharacter (TO_UNICODE ('$') COMMA_HERE) ;
      break ;
    case kToken_SYNC_5F_STRATEGY:
      s.appendUnicodeCharacter (TO_UNICODE ('$') COMMA_HERE) ;
      s.appendCString ("SYNC_STRATEGY") ;
      s.appendUnicodeCharacter (TO_UNICODE ('$') COMMA_HERE) ;
      break ;
    case kToken_MAX_5F_INCREASE:
      s.appendUnicodeCharacter (TO_UNICODE ('$') COMMA_HERE) ;
      s.appendCString ("MAX_INCREASE") ;
      s.appendUnicodeCharacter (TO_UNICODE ('$') COMMA_HERE) ;
      break ;
    case kToken_MAX_5F_DECREASE:
      s.appendUnicodeCharacter (TO_UNICODE ('$') COMMA_HERE) ;
      s.appendCString ("MAX_DECREASE") ;
      s.appendUnicodeCharacter (TO_UNICODE ('$') COMMA_HERE) ;
      break ;
    case kToken_MAX_5F_INCREASE_5F_ASYNC:
      s.appendUnicodeCharacter (TO_UNICODE ('$') COMMA_HERE) ;
      s.appendCString ("MAX_INCREASE_ASYNC") ;
      s.appendUnicodeCharacter (TO_UNICODE ('$') COMMA_HERE) ;
      break ;
    case kToken_MAX_5F_DECREASE_5F_ASYNC:
      s.appendUnicodeCharacter (TO_UNICODE ('$') COMMA_HERE) ;
      s.appendCString ("MAX_DECREASE_ASYNC") ;
      s.appendUnicodeCharacter (TO_UNICODE ('$') COMMA_HERE) ;
      break ;
    case kToken_PRECISION:
      s.appendUnicodeCharacter (TO_UNICODE ('$') COMMA_HERE) ;
      s.appendCString ("PRECISION") ;
      s.appendUnicodeCharacter (TO_UNICODE ('$') COMMA_HERE) ;
      break ;
    case kToken_LENGTH:
      s.appendUnicodeCharacter (TO_UNICODE ('$') COMMA_HERE) ;
      s.appendCString ("LENGTH") ;
      s.appendUnicodeCharacter (TO_UNICODE ('$') COMMA_HERE) ;
      break ;
    case kToken_EXPIRY_5F_POINT:
      s.appendUnicodeCharacter (TO_UNICODE ('$') COMMA_HERE) ;
      s.appendCString ("EXPIRY_POINT") ;
      s.appendUnicodeCharacter (TO_UNICODE ('$') COMMA_HERE) ;
      break ;
    case kToken_MAX_5F_RETARD:
      s.appendUnicodeCharacter (TO_UNICODE ('$') COMMA_HERE) ;
      s.appendCString ("MAX_RETARD") ;
      s.appendUnicodeCharacter (TO_UNICODE ('$') COMMA_HERE) ;
      break ;
    case kToken_MAX_5F_ADVANCE:
      s.appendUnicodeCharacter (TO_UNICODE ('$') COMMA_HERE) ;
      s.appendCString ("MAX_ADVANCE") ;
      s.appendUnicodeCharacter (TO_UNICODE ('$') COMMA_HERE) ;
      break ;
    case kToken_ADJUSTABLE:
      s.appendUnicodeCharacter (TO_UNICODE ('$') COMMA_HERE) ;
      s.appendCString ("ADJUSTABLE") ;
      s.appendUnicodeCharacter (TO_UNICODE ('$') COMMA_HERE) ;
      break ;
    case kToken_ABSOLUTE:
      s.appendUnicodeCharacter (TO_UNICODE ('$') COMMA_HERE) ;
      s.appendCString ("ABSOLUTE") ;
      s.appendUnicodeCharacter (TO_UNICODE ('$') COMMA_HERE) ;
      break ;
    case kToken_RELATIVE:
      s.appendUnicodeCharacter (TO_UNICODE ('$') COMMA_HERE) ;
      s.appendCString ("RELATIVE") ;
      s.appendUnicodeCharacter (TO_UNICODE ('$') COMMA_HERE) ;
      break ;
    case kToken_SYNCHRON:
      s.appendUnicodeCharacter (TO_UNICODE ('$') COMMA_HERE) ;
      s.appendCString ("SYNCHRON") ;
      s.appendUnicodeCharacter (TO_UNICODE ('$') COMMA_HERE) ;
      break ;
    case kToken_START:
      s.appendUnicodeCharacter (TO_UNICODE ('$') COMMA_HERE) ;
      s.appendCString ("START") ;
      s.appendUnicodeCharacter (TO_UNICODE ('$') COMMA_HERE) ;
      break ;
    case kToken_TRUSTED:
      s.appendUnicodeCharacter (TO_UNICODE ('$') COMMA_HERE) ;
      s.appendCString ("TRUSTED") ;
      s.appendUnicodeCharacter (TO_UNICODE ('$') COMMA_HERE) ;
      break ;
    case kToken_HAS_5F_RESTARTTASK:
      s.appendUnicodeCharacter (TO_UNICODE ('$') COMMA_HERE) ;
      s.appendCString ("HAS_RESTARTTASK") ;
      s.appendUnicodeCharacter (TO_UNICODE ('$') COMMA_HERE) ;
      break ;
    case kToken_RESTARTTASK:
      s.appendUnicodeCharacter (TO_UNICODE ('$') COMMA_HERE) ;
      s.appendCString ("RESTARTTASK") ;
      s.appendUnicodeCharacter (TO_UNICODE ('$') COMMA_HERE) ;
      break ;
    case kToken_TRUSTED_5F_FUNCTION:
      s.appendUnicodeCharacter (TO_UNICODE ('$') COMMA_HERE) ;
      s.appendCString ("TRUSTED_FUNCTION") ;
      s.appendUnicodeCharacter (TO_UNICODE ('$') COMMA_HERE) ;
      break ;
    case kToken_NAME:
      s.appendUnicodeCharacter (TO_UNICODE ('$') COMMA_HERE) ;
      s.appendCString ("NAME") ;
      s.appendUnicodeCharacter (TO_UNICODE ('$') COMMA_HERE) ;
      break ;
    case kToken_EXECUTIONBUDGET:
      s.appendUnicodeCharacter (TO_UNICODE ('$') COMMA_HERE) ;
      s.appendCString ("EXECUTIONBUDGET") ;
      s.appendUnicodeCharacter (TO_UNICODE ('$') COMMA_HERE) ;
      break ;
    case kToken_EXECUTIONTIME:
      s.appendUnicodeCharacter (TO_UNICODE ('$') COMMA_HERE) ;
      s.appendCString ("EXECUTIONTIME") ;
      s.appendUnicodeCharacter (TO_UNICODE ('$') COMMA_HERE) ;
      break ;
    case kToken_TIMEFRAME:
      s.appendUnicodeCharacter (TO_UNICODE ('$') COMMA_HERE) ;
      s.appendCString ("TIMEFRAME") ;
      s.appendUnicodeCharacter (TO_UNICODE ('$') COMMA_HERE) ;
      break ;
    case kToken_MAXOSINTERRUPTLOCKTIME:
      s.appendUnicodeCharacter (TO_UNICODE ('$') COMMA_HERE) ;
      s.appendCString ("MAXOSINTERRUPTLOCKTIME") ;
      s.appendUnicodeCharacter (TO_UNICODE ('$') COMMA_HERE) ;
      break ;
    case kToken_MAXALLINTERRUPTLOCKTIME:
      s.appendUnicodeCharacter (TO_UNICODE ('$') COMMA_HERE) ;
      s.appendCString ("MAXALLINTERRUPTLOCKTIME") ;
      s.appendUnicodeCharacter (TO_UNICODE ('$') COMMA_HERE) ;
      break ;
    case kToken_LOCKINGTIME:
      s.appendUnicodeCharacter (TO_UNICODE ('$') COMMA_HERE) ;
      s.appendCString ("LOCKINGTIME") ;
      s.appendUnicodeCharacter (TO_UNICODE ('$') COMMA_HERE) ;
      break ;
    case kToken_RESOURCELOCK:
      s.appendUnicodeCharacter (TO_UNICODE ('$') COMMA_HERE) ;
      s.appendCString ("RESOURCELOCK") ;
      s.appendUnicodeCharacter (TO_UNICODE ('$') COMMA_HERE) ;
      break ;
    case kToken_MAXRESOURCELOCKTIME:
      s.appendUnicodeCharacter (TO_UNICODE ('$') COMMA_HERE) ;
      s.appendCString ("MAXRESOURCELOCKTIME") ;
      s.appendUnicodeCharacter (TO_UNICODE ('$') COMMA_HERE) ;
      break ;
    case kToken_SMOOTH:
      s.appendUnicodeCharacter (TO_UNICODE ('$') COMMA_HERE) ;
      s.appendCString ("SMOOTH") ;
      s.appendUnicodeCharacter (TO_UNICODE ('$') COMMA_HERE) ;
      break ;
    case kToken_HARD:
      s.appendUnicodeCharacter (TO_UNICODE ('$') COMMA_HERE) ;
      s.appendCString ("HARD") ;
      s.appendUnicodeCharacter (TO_UNICODE ('$') COMMA_HERE) ;
      break ;
    case kToken_TICKS:
      s.appendUnicodeCharacter (TO_UNICODE ('$') COMMA_HERE) ;
      s.appendCString ("TICKS") ;
      s.appendUnicodeCharacter (TO_UNICODE ('$') COMMA_HERE) ;
      s.appendUnicodeCharacter (TO_UNICODE (' ') COMMA_HERE) ;
      s.appendCLiteralStringConstant (ptr->mLexicalAttribute_att_5F_token) ;
      break ;
    case kToken_NANOSECONDS:
      s.appendUnicodeCharacter (TO_UNICODE ('$') COMMA_HERE) ;
      s.appendCString ("NANOSECONDS") ;
      s.appendUnicodeCharacter (TO_UNICODE ('$') COMMA_HERE) ;
      s.appendUnicodeCharacter (TO_UNICODE (' ') COMMA_HERE) ;
      s.appendCLiteralStringConstant (ptr->mLexicalAttribute_att_5F_token) ;
      break ;
    case kToken_SOFTWARE:
      s.appendUnicodeCharacter (TO_UNICODE ('$') COMMA_HERE) ;
      s.appendCString ("SOFTWARE") ;
      s.appendUnicodeCharacter (TO_UNICODE ('$') COMMA_HERE) ;
      break ;
    case kToken_HARDWARE:
      s.appendUnicodeCharacter (TO_UNICODE ('$') COMMA_HERE) ;
      s.appendCString ("HARDWARE") ;
      s.appendUnicodeCharacter (TO_UNICODE ('$') COMMA_HERE) ;
      break ;
    case kToken_OSINTERNAL:
      s.appendUnicodeCharacter (TO_UNICODE ('$') COMMA_HERE) ;
      s.appendCString ("OSINTERNAL") ;
      s.appendUnicodeCharacter (TO_UNICODE ('$') COMMA_HERE) ;
      break ;
    case kToken_GPT:
      s.appendUnicodeCharacter (TO_UNICODE ('$') COMMA_HERE) ;
      s.appendCString ("GPT") ;
      s.appendUnicodeCharacter (TO_UNICODE ('$') COMMA_HERE) ;
      break ;
    case kToken_NS_5F_PER_5F_HW_5F_TICK:
      s.appendUnicodeCharacter (TO_UNICODE ('$') COMMA_HERE) ;
      s.appendCString ("NS_PER_HW_TICK") ;
      s.appendUnicodeCharacter (TO_UNICODE ('$') COMMA_HERE) ;
      break ;
    case kToken_GPTCHANNELNAME:
      s.appendUnicodeCharacter (TO_UNICODE ('$') COMMA_HERE) ;
      s.appendCString ("GPTCHANNELNAME") ;
      s.appendUnicodeCharacter (TO_UNICODE ('$') COMMA_HERE) ;
      break ;
    case kToken_DRIVER:
      s.appendUnicodeCharacter (TO_UNICODE ('$') COMMA_HERE) ;
      s.appendCString ("DRIVER") ;
      s.appendUnicodeCharacter (TO_UNICODE ('$') COMMA_HERE) ;
      break ;
    case kToken_TIMECONSTANTS:
      s.appendUnicodeCharacter (TO_UNICODE ('$') COMMA_HERE) ;
      s.appendCString ("TIMECONSTANTS") ;
      s.appendUnicodeCharacter (TO_UNICODE ('$') COMMA_HERE) ;
      break ;
    case kToken_TIMECONSTANT:
      s.appendUnicodeCharacter (TO_UNICODE ('$') COMMA_HERE) ;
      s.appendCString ("TIMECONSTANT") ;
      s.appendUnicodeCharacter (TO_UNICODE ('$') COMMA_HERE) ;
      break ;
    case kToken_NS:
      s.appendUnicodeCharacter (TO_UNICODE ('$') COMMA_HERE) ;
      s.appendCString ("NS") ;
      s.appendUnicodeCharacter (TO_UNICODE ('$') COMMA_HERE) ;
      break ;
    case kToken_CONSTNAME:
      s.appendUnicodeCharacter (TO_UNICODE ('$') COMMA_HERE) ;
      s.appendCString ("CONSTNAME") ;
      s.appendUnicodeCharacter (TO_UNICODE ('$') COMMA_HERE) ;
      break ;
    case kToken_SOURCE:
      s.appendUnicodeCharacter (TO_UNICODE ('$') COMMA_HERE) ;
      s.appendCString ("SOURCE") ;
      s.appendUnicodeCharacter (TO_UNICODE ('$') COMMA_HERE) ;
      break ;
    case kToken__3B_:
      s.appendUnicodeCharacter (TO_UNICODE ('$') COMMA_HERE) ;
      s.appendCString (";") ;
      s.appendUnicodeCharacter (TO_UNICODE ('$') COMMA_HERE) ;
      break ;
    case kToken__3A_:
      s.appendUnicodeCharacter (TO_UNICODE ('$') COMMA_HERE) ;
      s.appendCString (":") ;
      s.appendUnicodeCharacter (TO_UNICODE ('$') COMMA_HERE) ;
      break ;
    case kToken__3D_:
      s.appendUnicodeCharacter (TO_UNICODE ('$') COMMA_HERE) ;
      s.appendCString ("=") ;
      s.appendUnicodeCharacter (TO_UNICODE ('$') COMMA_HERE) ;
      break ;
    case kToken__7B_:
      s.appendUnicodeCharacter (TO_UNICODE ('$') COMMA_HERE) ;
      s.appendCString ("{") ;
      s.appendUnicodeCharacter (TO_UNICODE ('$') COMMA_HERE) ;
      break ;
    case kToken__7D_:
      s.appendUnicodeCharacter (TO_UNICODE ('$') COMMA_HERE) ;
      s.appendCString ("}") ;
      s.appendUnicodeCharacter (TO_UNICODE ('$') COMMA_HERE) ;
      break ;
    case kToken__2E__2E_:
      s.appendUnicodeCharacter (TO_UNICODE ('$') COMMA_HERE) ;
      s.appendCString ("..") ;
      s.appendUnicodeCharacter (TO_UNICODE ('$') COMMA_HERE) ;
      break ;
    case kToken__5B_:
      s.appendUnicodeCharacter (TO_UNICODE ('$') COMMA_HERE) ;
      s.appendCString ("[") ;
      s.appendUnicodeCharacter (TO_UNICODE ('$') COMMA_HERE) ;
      break ;
    case kToken__5D_:
      s.appendUnicodeCharacter (TO_UNICODE ('$') COMMA_HERE) ;
      s.appendCString ("]") ;
      s.appendUnicodeCharacter (TO_UNICODE ('$') COMMA_HERE) ;
      break ;
    case kToken__2C_:
      s.appendUnicodeCharacter (TO_UNICODE ('$') COMMA_HERE) ;
      s.appendCString (",") ;
      s.appendUnicodeCharacter (TO_UNICODE ('$') COMMA_HERE) ;
      break ;
    case kToken__2E_:
      s.appendUnicodeCharacter (TO_UNICODE ('$') COMMA_HERE) ;
      s.appendCString (".") ;
      s.appendUnicodeCharacter (TO_UNICODE ('$') COMMA_HERE) ;
      break ;
    case kToken__2D_:
      s.appendUnicodeCharacter (TO_UNICODE ('$') COMMA_HERE) ;
      s.appendCString ("-") ;
      s.appendUnicodeCharacter (TO_UNICODE ('$') COMMA_HERE) ;
      break ;
    case kToken_include:
      s.appendUnicodeCharacter (TO_UNICODE ('$') COMMA_HERE) ;
      s.appendCString ("include") ;
      s.appendUnicodeCharacter (TO_UNICODE ('$') COMMA_HERE) ;
      break ;
    default:
      break ;
    }
  }
  return s ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                           Template Delimiters                             *
//                                                                           *
//---------------------------------------------------------------------------*


//---------------------------------------------------------------------------*
//                                                                           *
//                           Template Replacements                           *
//                                                                           *
//---------------------------------------------------------------------------*


//---------------------------------------------------------------------------*
//                                                                           *
//            Terminal Symbols as end of script in template mark             *
//                                                                           *
//---------------------------------------------------------------------------*

static const bool kEndOfScriptInTemplateArray [271] = {
  false /* comment */,
  false /* idf */,
  false /* string */,
  false /* g_string */,
  false /* uint_number */,
  false /* float_number */,
  false /* set_start_uint_number */,
  false /* command */,
  false /* APP_SRC */,
  false /* COMPILER */,
  false /* ASSEMBLER */,
  false /* LINKER */,
  false /* SCRIPT */,
  false /* CFLAGS */,
  false /* CPPFLAGS */,
  false /* ASFLAGS */,
  false /* LDFLAGS */,
  false /* APP_NAME */,
  false /* TRAMPOLINE_BASE_PATH */,
  false /* OIL_VERSION */,
  false /* IMPLEMENTATION */,
  false /* OS */,
  false /* TASK */,
  false /* COUNTER */,
  false /* ALARM */,
  false /* RESOURCE */,
  false /* EVENT */,
  false /* ISR */,
  false /* MESSAGE */,
  false /* COM */,
  false /* NM */,
  false /* APPMODE */,
  false /* IPDU */,
  false /* CPU */,
  false /* UINT32 */,
  false /* INT32 */,
  false /* UINT64 */,
  false /* INT64 */,
  false /* FLOAT */,
  false /* ENUM */,
  false /* STRING */,
  false /* BOOLEAN */,
  false /* WITH_AUTO */,
  false /* NO_DEFAULT */,
  false /* AUTO */,
  false /* MASK */,
  false /* CATEGORY */,
  false /* OS_TYPE */,
  false /* TASK_TYPE */,
  false /* COUNTER_TYPE */,
  false /* ALARM_TYPE */,
  false /* RESOURCE_TYPE */,
  false /* EVENT_TYPE */,
  false /* ISR_TYPE */,
  false /* MESSAGE_TYPE */,
  false /* COM_TYPE */,
  false /* NM_TYPE */,
  false /* APPMODE_TYPE */,
  false /* IPDU_TYPE */,
  false /* STATUS */,
  false /* EXTENDED */,
  false /* STARTUPHOOK */,
  false /* ERRORHOOK */,
  false /* SHUTDOWNHOOK */,
  false /* PRETASKHOOK */,
  false /* POSTTASKHOOK */,
  false /* USEGETSERVICEID */,
  false /* USEPARAMETERACCESS */,
  false /* USERESSCHEDULER */,
  false /* SYSTEM_CALL */,
  false /* MEMMAP */,
  false /* MEMORY_PROTECTION */,
  false /* TRACE */,
  false /* DEBUG */,
  false /* FILE */,
  false /* METHOD */,
  false /* FORMAT */,
  false /* TRACE_TASK */,
  false /* TRACE_ISR */,
  false /* TRACE_RESOURCE */,
  false /* TRACE_ALARM */,
  false /* TRACE_USER */,
  false /* DESCRIPTION */,
  false /* PRIORITY */,
  false /* SCHEDULE */,
  false /* ACTIVATION */,
  false /* AUTOSTART */,
  false /* MAXALLOWEDVALUE */,
  false /* TICKSPERBASE */,
  false /* MINCYCLE */,
  false /* TYPE */,
  false /* UNIT */,
  false /* ACTION */,
  false /* SETEVENT */,
  false /* ACTIVATETASK */,
  false /* ALARMCALLBACK */,
  false /* ALARMCALLBACKNAME */,
  false /* ALARMTIME */,
  false /* CYCLETIME */,
  false /* INCREMENTCOUNTER */,
  false /* RESOURCEPROPERTY */,
  false /* STANDARD */,
  false /* LINKED */,
  false /* LINKEDRESOURCE */,
  false /* INTERNAL */,
  false /* MESSAGEPROPERTY */,
  false /* NOTIFICATION */,
  false /* NOTIFICATIONERROR */,
  false /* SEND_STATIC_INTERNAL */,
  false /* SEND_STATIC_EXTERNAL */,
  false /* SEND_DYNAMIC_EXTERNAL */,
  false /* SEND_ZERO_INTERNAL */,
  false /* SEND_ZERO_EXTERNAL */,
  false /* RECEIVE_ZERO_INTERNAL */,
  false /* RECEIVE_ZERO_EXTERNAL */,
  false /* RECEIVE_UNQUEUED_INTERNAL */,
  false /* RECEIVE_QUEUED_INTERNAL */,
  false /* RECEIVE_UNQUEUED_EXTERNAL */,
  false /* RECEIVE_QUEUED_EXTERNAL */,
  false /* RECEIVE_DYNAMIC_EXTERNAL */,
  false /* RECEIVE_ZERO_SENDERS */,
  false /* CDATATYPE */,
  false /* SENDINGMESSAGE */,
  false /* NONE */,
  false /* COMCALLBACK */,
  false /* COMCALLBACKNAME */,
  false /* INMCALLBACK */,
  false /* CALLBACKROUTINENAME */,
  false /* MONITOREDIPDU */,
  false /* TRANSFERPROPERTY */,
  false /* TRIGGERED */,
  false /* PENDING */,
  false /* NETWORKMESSAGE */,
  false /* FILTER */,
  false /* ALWAYS */,
  false /* NEVER */,
  false /* MASKEDNEWEQUALSX */,
  false /* MASKEDNEWDIFFERSX */,
  false /* NEWISEQUAL */,
  false /* NEWISDIFFERENT */,
  false /* MASKEDNEWEQUALSMASKEDOLD */,
  false /* MASKEDNEWDIFFERSMASKEDOLD */,
  false /* NEWISWITHIN */,
  false /* NEWISOUTSIDE */,
  false /* NEWISGREATER */,
  false /* NEWISLESSOREQUAL */,
  false /* NEWISLESS */,
  false /* NEWISGREATEROREQUAL */,
  false /* ONEEVERYN */,
  false /* MIN */,
  false /* MAX */,
  false /* X */,
  false /* PERIOD */,
  false /* OFFSET */,
  false /* NETWORKORDERCALLOUT */,
  false /* CPUORDERCALLOUT */,
  false /* INITIALVALUE */,
  false /* QUEUESIZE */,
  false /* LINK */,
  false /* RECEIVEMESSAGE */,
  false /* FLAG */,
  false /* FLAGNAME */,
  false /* STATIC */,
  false /* DYNAMIC */,
  false /* ZERO */,
  false /* SIZEINBITS */,
  false /* MAXSIZEINBITS */,
  false /* BITORDERING */,
  false /* BIGENDIAN */,
  false /* LITTLEENDIAN */,
  false /* BITPOSITION */,
  false /* DATAINTERPRETATION */,
  false /* UNSIGNEDINTEGER */,
  false /* BYTEARRAY */,
  false /* DIRECTION */,
  false /* SENT */,
  false /* RECEIVED */,
  false /* COMTIMEBASE */,
  false /* COMERRORHOOK */,
  false /* COMUSEGETSERVICEID */,
  false /* COMUSEPARAMETERACCESS */,
  false /* COMSTARTCOMEXTENSION */,
  false /* COMAPPMODE */,
  false /* COMSTATUS */,
  false /* USE */,
  false /* COMEXTENDED */,
  false /* COMSTANDARD */,
  false /* IPDUPROPERTY */,
  false /* IPDUCALLOUT */,
  false /* LAYERUSED */,
  false /* TRANSMISSIONMODE */,
  false /* DIRECT */,
  false /* PERIODIC */,
  false /* MIXED */,
  false /* TIMEOUT */,
  false /* FIRTSTIMEOUT */,
  false /* MINIMUMDELAYTIME */,
  false /* TIMEPERIOD */,
  false /* TIMEOFFSET */,
  false /* NON */,
  false /* FULL */,
  false /* FALSE */,
  false /* TRUE */,
  false /* PROTECTIONHOOK */,
  false /* SCALABILITYCLASS */,
  false /* STACKMONITORING */,
  false /* TIMING_PROTECTION */,
  false /* ACCESSING_APPLICATION */,
  false /* SC1 */,
  false /* SC2 */,
  false /* SC3 */,
  false /* SC4 */,
  false /* SCHEDULETABLE */,
  false /* APPLICATION */,
  false /* LOCAL_TO_GLOBAL_TIME_SYNCHRONIZATION */,
  false /* SYNC_STRATEGY */,
  false /* MAX_INCREASE */,
  false /* MAX_DECREASE */,
  false /* MAX_INCREASE_ASYNC */,
  false /* MAX_DECREASE_ASYNC */,
  false /* PRECISION */,
  false /* LENGTH */,
  false /* EXPIRY_POINT */,
  false /* MAX_RETARD */,
  false /* MAX_ADVANCE */,
  false /* ADJUSTABLE */,
  false /* ABSOLUTE */,
  false /* RELATIVE */,
  false /* SYNCHRON */,
  false /* START */,
  false /* TRUSTED */,
  false /* HAS_RESTARTTASK */,
  false /* RESTARTTASK */,
  false /* TRUSTED_FUNCTION */,
  false /* NAME */,
  false /* EXECUTIONBUDGET */,
  false /* EXECUTIONTIME */,
  false /* TIMEFRAME */,
  false /* MAXOSINTERRUPTLOCKTIME */,
  false /* MAXALLINTERRUPTLOCKTIME */,
  false /* LOCKINGTIME */,
  false /* RESOURCELOCK */,
  false /* MAXRESOURCELOCKTIME */,
  false /* SMOOTH */,
  false /* HARD */,
  false /* TICKS */,
  false /* NANOSECONDS */,
  false /* SOFTWARE */,
  false /* HARDWARE */,
  false /* OSINTERNAL */,
  false /* GPT */,
  false /* NS_PER_HW_TICK */,
  false /* GPTCHANNELNAME */,
  false /* DRIVER */,
  false /* TIMECONSTANTS */,
  false /* TIMECONSTANT */,
  false /* NS */,
  false /* CONSTNAME */,
  false /* SOURCE */,
  false /* ; */,
  false /* : */,
  false /* = */,
  false /* { */,
  false /* } */,
  false /* .. */,
  false /* [ */,
  false /* ] */,
  false /* , */,
  false /* . */,
  false /* - */,
  false /* include */
} ;


//---------------------------------------------------------------------------*
//                                                                           *
//               P A R S E    L E X I C A L    T O K E N                     *
//                                                                           *
//---------------------------------------------------------------------------*

bool C_Lexique_goil_5F_lexique::parseLexicalToken (void) {
  cTokenFor_goil_5F_lexique token ;
  mLoop = true ;
  token.mTokenCode = -1 ;
  while ((token.mTokenCode < 0) && (UNICODE_VALUE (mCurrentChar) != '\0')) {
    token.mLexicalAttribute_a_5F_string.setLengthToZero () ;
    token.mLexicalAttribute_att_5F_token.setLengthToZero () ;
    token.mLexicalAttribute_floatNumber = 0.0 ;
    token.mLexicalAttribute_integerNumber = 0 ;
    token.mLexicalAttribute_number.setLengthToZero () ;
    mTokenFirstLocation = mCurrentLocation ;
    try{
      if (testForInputUTF32String (kUnicodeString__2F__2F_, 2, true)) {
        do {
          if (testForInputUTF32CharRange (TO_UNICODE (1), TO_UNICODE ('\t')) || testForInputUTF32Char (TO_UNICODE ('\v')) || testForInputUTF32Char (TO_UNICODE ('\f')) || testForInputUTF32CharRange (TO_UNICODE (14), TO_UNICODE (65533))) {
          }else{
            mLoop = false ;
          }
        }while (mLoop) ;
        mLoop = true ;
      }else if (testForInputUTF32String (kUnicodeString__2F__2A_, 2, true)) {
        do {
          if (notTestForInputUTF32String (kUnicodeString__2A__2F_, 2, gLexicalMessage_unterminated_comment_error COMMA_LINE_AND_SOURCE_FILE)) {
          }else{
            mLoop = false ;
          }
        }while (mLoop) ;
        mLoop = true ;
      }else if (testForInputUTF32CharRange (TO_UNICODE ('a'), TO_UNICODE ('z')) || testForInputUTF32CharRange (TO_UNICODE ('A'), TO_UNICODE ('Z'))) {
        do {
          ::scanner_routine_enterCharacterIntoString (*this, token.mLexicalAttribute_att_5F_token, previousChar ()) ;
          if (testForInputUTF32CharRange (TO_UNICODE ('a'), TO_UNICODE ('z')) || testForInputUTF32CharRange (TO_UNICODE ('A'), TO_UNICODE ('Z')) || testForInputUTF32Char (TO_UNICODE ('_')) || testForInputUTF32CharRange (TO_UNICODE ('0'), TO_UNICODE ('9'))) {
          }else{
            mLoop = false ;
          }
        }while (mLoop) ;
        mLoop = true ;
        if (token.mTokenCode == -1) {
          token.mTokenCode = search_into_oilVersion (token.mLexicalAttribute_att_5F_token) ;
        }
        if (token.mTokenCode == -1) {
          token.mTokenCode = search_into_makefileKeywords (token.mLexicalAttribute_att_5F_token) ;
        }
        if (token.mTokenCode == -1) {
          token.mTokenCode = search_into_oilDefinitions (token.mLexicalAttribute_att_5F_token) ;
        }
        if (token.mTokenCode == -1) {
          token.mTokenCode = search_into_objList (token.mLexicalAttribute_att_5F_token) ;
        }
        if (token.mTokenCode == -1) {
          token.mTokenCode = search_into_dataTypes (token.mLexicalAttribute_att_5F_token) ;
        }
        if (token.mTokenCode == -1) {
          token.mTokenCode = search_into_miscSpecifiers (token.mLexicalAttribute_att_5F_token) ;
        }
        if (token.mTokenCode == -1) {
          token.mTokenCode = search_into_objectRefType (token.mLexicalAttribute_att_5F_token) ;
        }
        if (token.mTokenCode == -1) {
          token.mTokenCode = search_into_os_attributes (token.mLexicalAttribute_att_5F_token) ;
        }
        if (token.mTokenCode == -1) {
          token.mTokenCode = search_into_trace_attributes (token.mLexicalAttribute_att_5F_token) ;
        }
        if (token.mTokenCode == -1) {
          token.mTokenCode = search_into_task_attributes (token.mLexicalAttribute_att_5F_token) ;
        }
        if (token.mTokenCode == -1) {
          token.mTokenCode = search_into_counter_attributes (token.mLexicalAttribute_att_5F_token) ;
        }
        if (token.mTokenCode == -1) {
          token.mTokenCode = search_into_as_counter_attributes (token.mLexicalAttribute_att_5F_token) ;
        }
        if (token.mTokenCode == -1) {
          token.mTokenCode = search_into_alarm_attributes (token.mLexicalAttribute_att_5F_token) ;
        }
        if (token.mTokenCode == -1) {
          token.mTokenCode = search_into_resource_attributes (token.mLexicalAttribute_att_5F_token) ;
        }
        if (token.mTokenCode == -1) {
          token.mTokenCode = search_into_message_attributes (token.mLexicalAttribute_att_5F_token) ;
        }
        if (token.mTokenCode == -1) {
          token.mTokenCode = search_into_networkmessage_attribute (token.mLexicalAttribute_att_5F_token) ;
        }
        if (token.mTokenCode == -1) {
          token.mTokenCode = search_into_com_attribute (token.mLexicalAttribute_att_5F_token) ;
        }
        if (token.mTokenCode == -1) {
          token.mTokenCode = search_into_ipdu_attribute (token.mLexicalAttribute_att_5F_token) ;
        }
        if (token.mTokenCode == -1) {
          token.mTokenCode = search_into_scheduling (token.mLexicalAttribute_att_5F_token) ;
        }
        if (token.mTokenCode == -1) {
          token.mTokenCode = search_into_boolean (token.mLexicalAttribute_att_5F_token) ;
        }
        if (token.mTokenCode == -1) {
          token.mTokenCode = search_into_autosar_attr (token.mLexicalAttribute_att_5F_token) ;
        }
        if (token.mTokenCode == -1) {
          token.mTokenCode = search_into_autosar_key (token.mLexicalAttribute_att_5F_token) ;
        }
        if (token.mTokenCode == -1) {
          token.mTokenCode = search_into_autosar_objs (token.mLexicalAttribute_att_5F_token) ;
        }
        if (token.mTokenCode == -1) {
          token.mTokenCode = search_into_schedtable_attrs (token.mLexicalAttribute_att_5F_token) ;
        }
        if (token.mTokenCode == -1) {
          token.mTokenCode = search_into_autostart_attrs (token.mLexicalAttribute_att_5F_token) ;
        }
        if (token.mTokenCode == -1) {
          token.mTokenCode = search_into_application_attrs (token.mLexicalAttribute_att_5F_token) ;
        }
        if (token.mTokenCode == -1) {
          token.mTokenCode = search_into_sync_strategy (token.mLexicalAttribute_att_5F_token) ;
        }
        if (token.mTokenCode == -1) {
          token.mTokenCode = search_into_timing_prot_attribs (token.mLexicalAttribute_att_5F_token) ;
        }
        if (token.mTokenCode == -1) {
          token.mTokenCode = search_into_unit (token.mLexicalAttribute_att_5F_token) ;
        }
        if (token.mTokenCode == -1) {
          token.mTokenCode = search_into_cpt_type_attr (token.mLexicalAttribute_att_5F_token) ;
        }
        if (token.mTokenCode == -1) {
          token.mTokenCode = search_into_it_src_attr (token.mLexicalAttribute_att_5F_token) ;
        }
        if (token.mTokenCode == -1) {
          token.mTokenCode = kToken_idf ;
        }
        enterToken (token) ;
      }else if (testForInputUTF32String (kUnicodeString__2E__2E_, 2, true)) {
        token.mTokenCode = kToken__2E__2E_ ;
        enterToken (token) ;
      }else if (testForInputUTF32String (kUnicodeString__7D_, 1, true)) {
        token.mTokenCode = kToken__7D_ ;
        enterToken (token) ;
      }else if (testForInputUTF32String (kUnicodeString__7B_, 1, true)) {
        token.mTokenCode = kToken__7B_ ;
        enterToken (token) ;
      }else if (testForInputUTF32String (kUnicodeString__5D_, 1, true)) {
        token.mTokenCode = kToken__5D_ ;
        enterToken (token) ;
      }else if (testForInputUTF32String (kUnicodeString__5B_, 1, true)) {
        token.mTokenCode = kToken__5B_ ;
        enterToken (token) ;
      }else if (testForInputUTF32String (kUnicodeString__3D_, 1, true)) {
        token.mTokenCode = kToken__3D_ ;
        enterToken (token) ;
      }else if (testForInputUTF32String (kUnicodeString__3B_, 1, true)) {
        token.mTokenCode = kToken__3B_ ;
        enterToken (token) ;
      }else if (testForInputUTF32String (kUnicodeString__3A_, 1, true)) {
        token.mTokenCode = kToken__3A_ ;
        enterToken (token) ;
      }else if (testForInputUTF32String (kUnicodeString__2E_, 1, true)) {
        token.mTokenCode = kToken__2E_ ;
        enterToken (token) ;
      }else if (testForInputUTF32String (kUnicodeString__2D_, 1, true)) {
        token.mTokenCode = kToken__2D_ ;
        enterToken (token) ;
      }else if (testForInputUTF32String (kUnicodeString__2C_, 1, true)) {
        token.mTokenCode = kToken__2C_ ;
        enterToken (token) ;
      }else if (testForInputUTF32CharRange (TO_UNICODE (1), TO_UNICODE (' '))) {
      }else if (testForInputUTF32Char (TO_UNICODE ('\"'))) {
        do {
          if (testForInputUTF32CharRange (TO_UNICODE (' '), TO_UNICODE ('!')) || testForInputUTF32CharRange (TO_UNICODE ('#'), TO_UNICODE (65533))) {
            ::scanner_routine_enterCharacterIntoString (*this, token.mLexicalAttribute_a_5F_string, previousChar ()) ;
          }else{
            mLoop = false ;
          }
        }while (mLoop) ;
        mLoop = true ;
        if (testForInputUTF32Char (TO_UNICODE ('\"'))) {
          token.mTokenCode = kToken_string ;
          enterToken (token) ;
        }else{
          lexicalError (gLexicalMessage_unterminatedLitteralString COMMA_LINE_AND_SOURCE_FILE) ;
        }
      }else if (testForInputUTF32Char (TO_UNICODE ('<'))) {
        do {
          if (testForInputUTF32CharRange (TO_UNICODE (' '), TO_UNICODE ('=')) || testForInputUTF32CharRange (TO_UNICODE ('\?'), TO_UNICODE (65533))) {
            ::scanner_routine_enterCharacterIntoString (*this, token.mLexicalAttribute_a_5F_string, previousChar ()) ;
          }else{
            mLoop = false ;
          }
        }while (mLoop) ;
        mLoop = true ;
        if (testForInputUTF32Char (TO_UNICODE ('>'))) {
          token.mTokenCode = kToken_g_5F_string ;
          enterToken (token) ;
        }else{
          lexicalError (gLexicalMessage_unterminatedLitteralString COMMA_LINE_AND_SOURCE_FILE) ;
        }
      }else if (testForInputUTF32String (kUnicodeString__30_x, 2, true) || testForInputUTF32String (kUnicodeString__30_X, 2, true)) {
        do {
          if (testForInputUTF32CharRange (TO_UNICODE ('0'), TO_UNICODE ('9')) || testForInputUTF32CharRange (TO_UNICODE ('a'), TO_UNICODE ('f')) || testForInputUTF32CharRange (TO_UNICODE ('A'), TO_UNICODE ('F'))) {
            ::scanner_routine_enterHexDigitIntoUInt64 (*this, previousChar (), token.mLexicalAttribute_integerNumber, gLexicalMessage_decimalNumberTooLarge, gLexicalMessage_internalError) ;
          }else{
            mLoop = false ;
          }
        }while (mLoop) ;
        mLoop = true ;
        token.mTokenCode = kToken_uint_5F_number ;
        enterToken (token) ;
      }else if (testForInputUTF32CharRange (TO_UNICODE ('0'), TO_UNICODE ('9'))) {
        do {
          ::scanner_routine_enterCharacterIntoString (*this, token.mLexicalAttribute_number, previousChar ()) ;
          ::scanner_routine_enterDigitIntoUInt64 (*this, previousChar (), token.mLexicalAttribute_integerNumber, gLexicalMessage_decimalNumberTooLarge, gLexicalMessage_internalError) ;
          if (testForInputUTF32CharRange (TO_UNICODE ('0'), TO_UNICODE ('9'))) {
          }else{
            mLoop = false ;
          }
        }while (mLoop) ;
        mLoop = true ;
        if (testForInputUTF32Char (TO_UNICODE ('.'))) {
          if (testForInputUTF32Char (TO_UNICODE ('.'))) {
            token.mTokenCode = kToken_set_5F_start_5F_uint_5F_number ;
            enterToken (token) ;
          }else{
            do {
              ::scanner_routine_enterCharacterIntoString (*this, token.mLexicalAttribute_number, previousChar ()) ;
              if (testForInputUTF32CharRange (TO_UNICODE ('0'), TO_UNICODE ('9'))) {
              }else{
                mLoop = false ;
              }
            }while (mLoop) ;
            mLoop = true ;
            ::scanner_routine_convertStringToDouble (*this, token.mLexicalAttribute_number, token.mLexicalAttribute_floatNumber, gLexicalMessage_unableToConvertToDouble) ;
            token.mTokenCode = kToken_float_5F_number ;
            enterToken (token) ;
          }
        }else{
          token.mTokenCode = kToken_uint_5F_number ;
          enterToken (token) ;
        }
      }else if (testForInputUTF32Char (TO_UNICODE ('#'))) {
        do {
          if (testForInputUTF32CharRange (TO_UNICODE ('a'), TO_UNICODE ('z')) || testForInputUTF32CharRange (TO_UNICODE ('A'), TO_UNICODE ('Z'))) {
            ::scanner_routine_enterCharacterIntoString (*this, token.mLexicalAttribute_att_5F_token, previousChar ()) ;
          }else{
            mLoop = false ;
          }
        }while (mLoop) ;
        mLoop = true ;
        if (token.mTokenCode == -1) {
          token.mTokenCode = search_into_commands (token.mLexicalAttribute_att_5F_token) ;
        }
        if (token.mTokenCode == -1) {
          token.mTokenCode = kToken_command ;
        }
        enterToken (token) ;
      }else if (testForInputUTF32Char (TO_UNICODE ('\0'))) { // End of source text ? 
        token.mTokenCode = kToken_ ; // Empty string code
      }else{ // Unknown input character
        unknownCharacterLexicalError (LINE_AND_SOURCE_FILE) ;
      }
    }catch (const C_lexicalErrorException &) {
      token.mTokenCode = -1 ; // No token
      advance () ; // ... go throught unknown character
    }
  }
  if ((UNICODE_VALUE (mCurrentChar) == '\0') && (token.mTemplateStringBeforeToken.length () > 0)) {
    token.mTokenCode = 0 ;
    enterToken (token) ;
  }
  return token.mTokenCode > 0 ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                         E N T E R    T O K E N                            *
//                                                                           *
//---------------------------------------------------------------------------*

void C_Lexique_goil_5F_lexique::enterToken (const cTokenFor_goil_5F_lexique & inToken) {
  cTokenFor_goil_5F_lexique * ptr = NULL ;
  macroMyNew (ptr, cTokenFor_goil_5F_lexique ()) ;
  ptr->mTokenCode = inToken.mTokenCode ;
  ptr->mStartLocation = mTokenFirstLocation ;
  ptr->mEndLocation = mTokenLastLocation ;
  ptr->mTemplateStringBeforeToken = inToken.mTemplateStringBeforeToken ;
  ptr->mLexicalAttribute_a_5F_string = inToken.mLexicalAttribute_a_5F_string ;
  ptr->mLexicalAttribute_att_5F_token = inToken.mLexicalAttribute_att_5F_token ;
  ptr->mLexicalAttribute_floatNumber = inToken.mLexicalAttribute_floatNumber ;
  ptr->mLexicalAttribute_integerNumber = inToken.mLexicalAttribute_integerNumber ;
  ptr->mLexicalAttribute_number = inToken.mLexicalAttribute_number ;
  enterTokenFromPointer (ptr) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//               A T T R I B U T E   A C C E S S                             *
//                                                                           *
//---------------------------------------------------------------------------*

C_String C_Lexique_goil_5F_lexique::attributeValue_a_5F_string (void) const {
  cTokenFor_goil_5F_lexique * ptr = (cTokenFor_goil_5F_lexique *) mCurrentTokenPtr ;
  return ptr->mLexicalAttribute_a_5F_string ;
}

//---------------------------------------------------------------------------*

C_String C_Lexique_goil_5F_lexique::attributeValue_att_5F_token (void) const {
  cTokenFor_goil_5F_lexique * ptr = (cTokenFor_goil_5F_lexique *) mCurrentTokenPtr ;
  return ptr->mLexicalAttribute_att_5F_token ;
}

//---------------------------------------------------------------------------*

double C_Lexique_goil_5F_lexique::attributeValue_floatNumber (void) const {
  cTokenFor_goil_5F_lexique * ptr = (cTokenFor_goil_5F_lexique *) mCurrentTokenPtr ;
  return ptr->mLexicalAttribute_floatNumber ;
}

//---------------------------------------------------------------------------*

PMUInt64 C_Lexique_goil_5F_lexique::attributeValue_integerNumber (void) const {
  cTokenFor_goil_5F_lexique * ptr = (cTokenFor_goil_5F_lexique *) mCurrentTokenPtr ;
  return ptr->mLexicalAttribute_integerNumber ;
}

//---------------------------------------------------------------------------*

C_String C_Lexique_goil_5F_lexique::attributeValue_number (void) const {
  cTokenFor_goil_5F_lexique * ptr = (cTokenFor_goil_5F_lexique *) mCurrentTokenPtr ;
  return ptr->mLexicalAttribute_number ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//         A S S I G N    F R O M    A T T R I B U T E    ( V 1 )            *
//                                                                           *
//---------------------------------------------------------------------------*

void C_Lexique_goil_5F_lexique::assignFromAttribute_a_5F_string (GGS_lstring & outValue) const {
  cTokenFor_goil_5F_lexique * ptr = (cTokenFor_goil_5F_lexique *) mCurrentTokenPtr ;
  outValue = GGS_lstring (* this, ptr->mLexicalAttribute_a_5F_string) ;
}

//---------------------------------------------------------------------------*

void C_Lexique_goil_5F_lexique::assignFromAttribute_att_5F_token (GGS_lstring & outValue) const {
  cTokenFor_goil_5F_lexique * ptr = (cTokenFor_goil_5F_lexique *) mCurrentTokenPtr ;
  outValue = GGS_lstring (* this, ptr->mLexicalAttribute_att_5F_token) ;
}

//---------------------------------------------------------------------------*

void C_Lexique_goil_5F_lexique::assignFromAttribute_floatNumber (GGS_ldouble & outValue) const {
  cTokenFor_goil_5F_lexique * ptr = (cTokenFor_goil_5F_lexique *) mCurrentTokenPtr ;
  outValue = GGS_ldouble (* this, ptr->mLexicalAttribute_floatNumber) ;
}

//---------------------------------------------------------------------------*

void C_Lexique_goil_5F_lexique::assignFromAttribute_integerNumber (GGS_luint64 & outValue) const {
  cTokenFor_goil_5F_lexique * ptr = (cTokenFor_goil_5F_lexique *) mCurrentTokenPtr ;
  outValue = GGS_luint64 (* this, ptr->mLexicalAttribute_integerNumber) ;
}

//---------------------------------------------------------------------------*

void C_Lexique_goil_5F_lexique::assignFromAttribute_number (GGS_lstring & outValue) const {
  cTokenFor_goil_5F_lexique * ptr = (cTokenFor_goil_5F_lexique *) mCurrentTokenPtr ;
  outValue = GGS_lstring (* this, ptr->mLexicalAttribute_number) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//         A S S I G N    F R O M    A T T R I B U T E    ( V 2 )            *
//                                                                           *
//---------------------------------------------------------------------------*

GALGASap_lstring C_Lexique_goil_5F_lexique::synthetizedAttribute_a_5F_string (void) const {
  cTokenFor_goil_5F_lexique * ptr = (cTokenFor_goil_5F_lexique *) mCurrentTokenPtr ;
  macroValidObject (ptr, cTokenFor_goil_5F_lexique) ;
  GALGASap_location currentLocation (GALGASap_location::constructor_new (ptr->mStartLocation, ptr->mEndLocation, sourceText () COMMA_HERE)) ;
  GALGASap_string value (GALGASap_string::constructor_new (ptr->mLexicalAttribute_a_5F_string COMMA_HERE)) ;
  GALGASap_lstring result (GALGASap_lstring::constructor_new (value, currentLocation COMMA_HERE)) ;
  return result ;
}

//---------------------------------------------------------------------------*

GALGASap_lstring C_Lexique_goil_5F_lexique::synthetizedAttribute_att_5F_token (void) const {
  cTokenFor_goil_5F_lexique * ptr = (cTokenFor_goil_5F_lexique *) mCurrentTokenPtr ;
  macroValidObject (ptr, cTokenFor_goil_5F_lexique) ;
  GALGASap_location currentLocation (GALGASap_location::constructor_new (ptr->mStartLocation, ptr->mEndLocation, sourceText () COMMA_HERE)) ;
  GALGASap_string value (GALGASap_string::constructor_new (ptr->mLexicalAttribute_att_5F_token COMMA_HERE)) ;
  GALGASap_lstring result (GALGASap_lstring::constructor_new (value, currentLocation COMMA_HERE)) ;
  return result ;
}

//---------------------------------------------------------------------------*

GALGASap_ldouble C_Lexique_goil_5F_lexique::synthetizedAttribute_floatNumber (void) const {
  cTokenFor_goil_5F_lexique * ptr = (cTokenFor_goil_5F_lexique *) mCurrentTokenPtr ;
  macroValidObject (ptr, cTokenFor_goil_5F_lexique) ;
  GALGASap_location currentLocation (GALGASap_location::constructor_new (ptr->mStartLocation, ptr->mEndLocation, sourceText () COMMA_HERE)) ;
  GALGASap_double value (GALGASap_double::constructor_new (ptr->mLexicalAttribute_floatNumber COMMA_HERE)) ;
  GALGASap_ldouble result (GALGASap_ldouble::constructor_new (value, currentLocation COMMA_HERE)) ;
  return result ;
}

//---------------------------------------------------------------------------*

GALGASap_luint_36__34_ C_Lexique_goil_5F_lexique::synthetizedAttribute_integerNumber (void) const {
  cTokenFor_goil_5F_lexique * ptr = (cTokenFor_goil_5F_lexique *) mCurrentTokenPtr ;
  macroValidObject (ptr, cTokenFor_goil_5F_lexique) ;
  GALGASap_location currentLocation (GALGASap_location::constructor_new (ptr->mStartLocation, ptr->mEndLocation, sourceText () COMMA_HERE)) ;
  GALGASap_uint_36__34_ value (GALGASap_uint_36__34_::constructor_new (ptr->mLexicalAttribute_integerNumber COMMA_HERE)) ;
  GALGASap_luint_36__34_ result (GALGASap_luint_36__34_::constructor_new (value, currentLocation COMMA_HERE)) ;
  return result ;
}

//---------------------------------------------------------------------------*

GALGASap_lstring C_Lexique_goil_5F_lexique::synthetizedAttribute_number (void) const {
  cTokenFor_goil_5F_lexique * ptr = (cTokenFor_goil_5F_lexique *) mCurrentTokenPtr ;
  macroValidObject (ptr, cTokenFor_goil_5F_lexique) ;
  GALGASap_location currentLocation (GALGASap_location::constructor_new (ptr->mStartLocation, ptr->mEndLocation, sourceText () COMMA_HERE)) ;
  GALGASap_string value (GALGASap_string::constructor_new (ptr->mLexicalAttribute_number COMMA_HERE)) ;
  GALGASap_lstring result (GALGASap_lstring::constructor_new (value, currentLocation COMMA_HERE)) ;
  return result ;
}

//---------------------------------------------------------------------------*
//--- START OF USER ZONE 2


//--- END OF USER ZONE 2



