//---------------------------------------------------------------------------*
//                                                                           *
//                         File 'goil_types_root.h'                          *
//                        Generated by version 2.0.0                         *
//                       july 7th, 2010, at 17h16'15"                        *
//                                                                           *
//---------------------------------------------------------------------------*

//--- START OF USER ZONE 1


//--- END OF USER ZONE 1

#ifndef goil_types_root_DEFINED
#define goil_types_root_DEFINED

#include <string.h>

//---------------------------------------------------------------------------*

#include "galgas/GGS__header.h"

//---------------------------------------------------------------------------*

// Include imported semantics
#include "com_type.h"
#include "goil_semantic_types.h"
#include "goil_types_app.h"
#include "goil_types_counter.h"
#include "goil_types_isr.h"
#include "goil_types_networkmessage.h"
#include "goil_types_os.h"
#include "goil_types_scheduletable.h"
#include "goil_types_task.h"

//--- START OF USER ZONE 2


//--- END OF USER ZONE 2

//---------------------------------------------------------------------------*
//                                                                           *
//                          Class Predeclarations                            *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_root_obj ;
class cPtr_root_obj ;

//---------------------------------------------------------------------------*
//                                                                           *
//                       GALGAS class 'GGS_root_obj'                         *
//                                                                           *
//---------------------------------------------------------------------------*

extern const C_galgas_type_descriptorEX kTypeDescriptor_GGS_root_obj ;

//---------------------------------------------------------------------------*

class GGS_root_obj : public AC_GGS_class {
//--- Default constructor
  public : inline GGS_root_obj (void) :
  AC_GGS_class () {}

//--- Pointer assignment constructor
  public : GGS_root_obj (const cPtr__AC_galgas_class * inPointer) ;

//--- Object assignment constructor
  public : GGS_root_obj (cPtr__AC_galgas_class & inObject) ;

//--- castFrom class method (implements cast expression)
  public : static GGS_root_obj
  castFrom (C_Compiler & inLexique,
             cPtr__AC_galgas_class * inPointer,
             const bool inUseKindOfClass,
             const GGS_location & inErrorLocation
             COMMA_LOCATION_ARGS) ;

//--- 'new' constructor
  public : static GGS_root_obj constructor_new (C_Compiler & inLexique,
                                const GGS_lstring & argument_0,
                                const GGS_os_obj & argument_1,
                                const GGS_com & argument_2,
                                const GGS_task_map & argument_3,
                                const GGS_counter_map & argument_4,
                                const GGS_alarm_map & argument_5,
                                const GGS_resource_map & argument_6,
                                const GGS_event_map & argument_7,
                                const GGS_isr_map & argument_8,
                                const GGS_message_map & argument_9,
                                const GGS_netmess_map & argument_10,
                                const GGS_scheduletable_map & argument_11,
                                const GGS_app_map & argument_12
                                COMMA_LOCATION_ARGS) ;

//--- getPtr
  public : inline cPtr_root_obj * getPtr (void) const {
    return (cPtr_root_obj *) mPointer ;
  }

//--- 'description' reader
  public : virtual const char * actualTypeName (void) const ;

//--- Readers
  public : GGS_lstring  reader_name (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;
  public : GGS_os_obj  reader_os (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;
  public : GGS_com  reader_com (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;
  public : GGS_task_map  reader_tasks (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;
  public : GGS_counter_map  reader_counters (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;
  public : GGS_alarm_map  reader_alarms (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;
  public : GGS_resource_map  reader_resources (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;
  public : GGS_event_map  reader_events (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;
  public : GGS_isr_map  reader_isrs (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;
  public : GGS_message_map  reader_messages (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;
  public : GGS_netmess_map  reader_net_messages (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;
  public : GGS_scheduletable_map  reader_scheduletables (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;
  public : GGS_app_map  reader_applis (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;

//--- Modifiers
  public : void modifier_setOs (C_Compiler & inLexique, const GGS_os_obj  & inValue COMMA_LOCATION_ARGS) ;
  public : void modifier_setTasks (C_Compiler & inLexique, const GGS_task_map  & inValue COMMA_LOCATION_ARGS) ;
  public : void modifier_setCounters (C_Compiler & inLexique, const GGS_counter_map  & inValue COMMA_LOCATION_ARGS) ;
  public : void modifier_setResources (C_Compiler & inLexique, const GGS_resource_map  & inValue COMMA_LOCATION_ARGS) ;
  public : void modifier_setIsrs (C_Compiler & inLexique, const GGS_isr_map  & inValue COMMA_LOCATION_ARGS) ;
  public : void modifier_setScheduletables (C_Compiler & inLexique, const GGS_scheduletable_map  & inValue COMMA_LOCATION_ARGS) ;

//--- operator ()
  #ifndef DO_NOT_GENERATE_CHECKINGS
    public : cPtr_root_obj * operator () (LOCATION_ARGS) const ;
  #else
    public : inline cPtr_root_obj * operator () (LOCATION_ARGS) const {
      return (cPtr_root_obj *) mPointer ;
    }
  #endif

//--- Galgas RTTI
AC_galgasClassRunTimeInformationEX * galgasObjectRunTimeInfo (void) const ;

//--- Introspection
  public : virtual const C_galgas_type_descriptorEX * typeDescriptor (void) const ;

  public : GGS_object reader_object (void) const ;

  public : static GGS_root_obj castFromObject (C_Compiler & inLexique,
                                           const GGS_object & inObject,
                                           const GGS_location & inErrorLocation
                                           COMMA_LOCATION_ARGS) ;

} ;

//---------------------------------------------------------------------------*

extern C_galgasRootClassRunTimeInformationEX gClassInfoFor__root_obj ;

//---------------------------------------------------------------------------*
//                                                                           *
//                         Function 'void_root_obj'                          *
//                                                                           *
//---------------------------------------------------------------------------*

extern const C_galgas_function_descriptorEX kFunction_descriptor_void_root_obj ;

//---------------------------------------------------------------------------*

GGS_root_obj  function_void_root_obj (C_Compiler & COMMA_LOCATION_ARGS) ;

//---------------------------------------------------------------------------*
//                                                                           *
//                      abstract class 'cPtr_root_obj'                       *
//                                                                           *
//---------------------------------------------------------------------------*

class cPtr_root_obj : public cPtr__AC_galgas_class {
//--- Constructor
  public : cPtr_root_obj (const GGS_lstring & ,
                                const GGS_os_obj & ,
                                const GGS_com & ,
                                const GGS_task_map & ,
                                const GGS_counter_map & ,
                                const GGS_alarm_map & ,
                                const GGS_resource_map & ,
                                const GGS_event_map & ,
                                const GGS_isr_map & ,
                                const GGS_message_map & ,
                                const GGS_netmess_map & ,
                                const GGS_scheduletable_map & ,
                                const GGS_app_map & 
                                COMMA_LOCATION_ARGS) ;

//--- Attributes
  public : GGS_lstring  name ;
  public : GGS_os_obj  os ;
  public : GGS_com  com ;
  public : GGS_task_map  tasks ;
  public : GGS_counter_map  counters ;
  public : GGS_alarm_map  alarms ;
  public : GGS_resource_map  resources ;
  public : GGS_event_map  events ;
  public : GGS_isr_map  isrs ;
  public : GGS_message_map  messages ;
  public : GGS_netmess_map  net_messages ;
  public : GGS_scheduletable_map  scheduletables ;
  public : GGS_app_map  applis ;
//--- Class message
  public : virtual const char * instanceMessage (void) const ;
  public : static const char * _static_message (void) ;

//--- Method for 'description' reader
  public : virtual void
  appendForDescription (C_String & ioString,
                        const PMSInt32 inIndentation) const ;

//--- Comparison
  public : virtual bool
  isEqualToObject (const cPtr__AC_galgas_class * inOperand) const ;

//--- Galgas RTTI
  public : virtual AC_galgasClassRunTimeInformationEX * galgasRTTI (void) const ;

//--- Make clone
  public : virtual cPtr__AC_galgas_class * makeClone (void) const ;
} ;

//---------------------------------------------------------------------------*

#endif
