//---------------------------------------------------------------------------*
//                                                                           *
//                   File 'goil_types_scheduletable.cpp'                     *
//                        Generated by version 2.0.0                         *
//                       july 7th, 2010, at 17h16'15"                        *
//                                                                           *
//---------------------------------------------------------------------------*

//--- START OF USER ZONE 1


//--- END OF USER ZONE 1

//---------------------------------------------------------------------------*

#include "version_libpm.h"
#if CURRENT_LIBPM_VERSION != 820
  #error "This file has been compiled with a version of GALGAS that uses libpm version 820, different than the current version (CURRENT_LIBPM_VERSION) of libpm"
#endif

//---------------------------------------------------------------------------*

#include <typeinfo>
#include "utilities/MF_MemoryControl.h"
#include "files/C_TextFileWrite.h"
#include "galgas/C_galgas_CLI_Options.h"
#include "goil_types_scheduletable.h"

//---------------------------------------------------------------------------*

#ifndef DO_NOT_GENERATE_CHECKINGS
  #define SOURCE_FILE_AT_LINE(line) "goil_types_scheduletable.gSemantics", line
  #define COMMA_SOURCE_FILE_AT_LINE(line) , SOURCE_FILE_AT_LINE(line)
#else
  #define SOURCE_FILE_AT_LINE(line) 
  #define COMMA_SOURCE_FILE_AT_LINE(line) 
#endif


//--- START OF USER ZONE 2


//--- END OF USER ZONE 2

//---------------------------------------------------------------------------*
//                                                                           *
//                     class 'cPtr_sd_autostart_false'                       *
//                                                                           *
//---------------------------------------------------------------------------*

cPtr_sd_autostart_false::
cPtr_sd_autostart_false (const GGS_location & argument_0
                                COMMA_LOCATION_ARGS)
:cPtr_autostart_obj (argument_0 COMMA_THERE) {
}

//---------------------------------------------------------------------------*

#ifndef DO_NOT_GENERATE_CHECKINGS
  cPtr_sd_autostart_false * GGS_sd_autostart_false::
  operator () (LOCATION_ARGS) const {
    macroValidObjectThere (mPointer, cPtr_sd_autostart_false) ;
    return (cPtr_sd_autostart_false *) mPointer ;
  }
#endif

//---------------------------------------------------------------------------*

bool cPtr_sd_autostart_false::
isEqualToObject (const cPtr__AC_galgas_class * inOperand) const {
  bool equal = typeid (this) == typeid (inOperand) ;
  if (equal) {
    const cPtr_sd_autostart_false * ptr = dynamic_cast <const cPtr_sd_autostart_false *> (inOperand) ;
    macroValidPointer (ptr) ;
    equal = location.operator_isEqual (ptr->location).boolValue () ;
  }
  return equal ;
}

//---------------------------------------------------------------------------*

void cPtr_sd_autostart_false::
appendForDescription (C_String & ioString,
                      const PMSInt32 inIndentation) const {
  ioString << "->@sd_autostart_false:"
           << location.reader_description (inIndentation + 1) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                              Class message                                *
//                                                                           *
//---------------------------------------------------------------------------*

const char * cPtr_sd_autostart_false::
instanceMessage (void) const {
  return "" ;
}

//---------------------------------------------------------------------------*

const char * cPtr_sd_autostart_false::
_static_message (void) {
  return "" ;
}

//---------------------------------------------------------------------------*

C_galgas_class_inspector _gInspectorFor_sd_autostart_false (& typeid (cPtr_sd_autostart_false), & typeid (cPtr_autostart_obj), "") ;

//---------------------------------------------------------------------------*

AC_galgasClassRunTimeInformationEX * cPtr_sd_autostart_false::galgasRTTI (void) const {
  return & gClassInfoFor__sd_autostart_false ;
}

//---------------------------------------------------------------------------*

cPtr__AC_galgas_class * cPtr_sd_autostart_false::makeClone (void) const {
  cPtr__AC_galgas_class * result = NULL ;
  macroMyNew (result, cPtr_sd_autostart_false (location COMMA_HERE)) ;
  return result ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                  GALGAS class 'GGS_sd_autostart_false'                    *
//                                                                           *
//---------------------------------------------------------------------------*

const C_galgas_type_descriptorEX kTypeDescriptor_GGS_sd_autostart_false ("sd_autostart_false", true, & kTypeDescriptor_GGS_autostart_obj) ;

//---------------------------------------------------------------------------*

GGS_sd_autostart_false::
GGS_sd_autostart_false (const cPtr__AC_galgas_class * inPointer) {
  macroAssignObject (mPointer, (cPtr__AC_galgas_class *) inPointer) ;
}

//---------------------------------------------------------------------------*

GGS_sd_autostart_false::
GGS_sd_autostart_false (cPtr__AC_galgas_class & inObject) {
  macroAssignObject (mPointer, & inObject) ;
}

//---------------------------------------------------------------------------*

//--- castFrom class method (implements cast expression)
GGS_sd_autostart_false GGS_sd_autostart_false::
castFrom (C_Compiler & inLexique,
           cPtr__AC_galgas_class * inPointer,
           const bool inUseKindOfClass,
           const GGS_location & inErrorLocation
           COMMA_LOCATION_ARGS) {
  GGS_sd_autostart_false result ;
  if (inPointer != NULL) {
    macroValidPointer (inPointer) ;
    const bool ok = inUseKindOfClass
      ? (dynamic_cast <cPtr_sd_autostart_false *> (inPointer) != NULL)
      : (typeid (cPtr_sd_autostart_false) == typeid (*inPointer)) ;
    if (ok) {
      result = GGS_sd_autostart_false (inPointer) ;
    }else{
      inErrorLocation.signalCastError (inLexique,
                                       & typeid (cPtr_sd_autostart_false),
                                       inUseKindOfClass,
                                       inPointer->instanceMessage ()
                                       COMMA_THERE) ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_sd_autostart_false GGS_sd_autostart_false::
constructor_new (C_Compiler & /* inLexique */,
                 const GGS_location & argument_0
                                COMMA_LOCATION_ARGS) {
  GGS_sd_autostart_false result ;
  macroMyNew (result.mPointer, cPtr_sd_autostart_false (argument_0 COMMA_THERE)) ;
  macroRetainObject (result.mPointer) ;
  return result ;
}

//---------------------------------------------------------------------------*

const char * GGS_sd_autostart_false::actualTypeName (void) const {
  return "sd_autostart_false" ;
}

//---------------------------------------------------------------------------*

C_galgasClassRunTimeInformationEX gClassInfoFor__sd_autostart_false ("sd_autostart_false", gClassInfoFor__autostart_obj, & kTypeDescriptor_GGS_sd_autostart_false) ;

//---------------------------------------------------------------------------*

GGS_object GGS_sd_autostart_false::reader_object (void) const {
  GGS_object result ;
  if (isBuilt ()) {
    GGS_sd_autostart_false * p = NULL ;
    macroMyNew (p, GGS_sd_autostart_false (*this)) ;
    result = GGS_object (p) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_sd_autostart_false GGS_sd_autostart_false::castFromObject (C_Compiler & inLexique,
                                   const GGS_object & inObject,
                                   const GGS_location & inErrorLocation
                                   COMMA_LOCATION_ARGS) {
  GGS_sd_autostart_false result ;
  const GGS__root * embeddedObject = inObject.embeddedObject () ;
  if (NULL != embeddedObject) {
    const GGS_sd_autostart_false * p = dynamic_cast <const GGS_sd_autostart_false *> (embeddedObject) ;
    if (NULL != p) {
      result = * p ;
    }else{
      castFromObjectErrorSignaling (inLexique, inErrorLocation, & kTypeDescriptor_GGS_sd_autostart_false, embeddedObject COMMA_THERE) ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*

const C_galgas_type_descriptorEX * GGS_sd_autostart_false::typeDescriptor (void) const {
  return & kTypeDescriptor_GGS_sd_autostart_false ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                      class 'cPtr_sd_autostart_true'                       *
//                                                                           *
//---------------------------------------------------------------------------*

cPtr_sd_autostart_true::
cPtr_sd_autostart_true (const GGS_location & argument_0,
                                const GGS_stringset & argument_1
                                COMMA_LOCATION_ARGS)
:cPtr_autostart_obj (argument_0 COMMA_THERE),
app_modes (argument_1) {
}

//---------------------------------------------------------------------------*

#ifndef DO_NOT_GENERATE_CHECKINGS
  cPtr_sd_autostart_true * GGS_sd_autostart_true::
  operator () (LOCATION_ARGS) const {
    macroValidObjectThere (mPointer, cPtr_sd_autostart_true) ;
    return (cPtr_sd_autostart_true *) mPointer ;
  }
#endif

//---------------------------------------------------------------------------*

bool cPtr_sd_autostart_true::
isEqualToObject (const cPtr__AC_galgas_class * inOperand) const {
  bool equal = typeid (this) == typeid (inOperand) ;
  if (equal) {
    const cPtr_sd_autostart_true * ptr = dynamic_cast <const cPtr_sd_autostart_true *> (inOperand) ;
    macroValidPointer (ptr) ;
    equal = location.operator_isEqual (ptr->location).boolValue ()
         && app_modes.operator_isEqual (ptr->app_modes).boolValue () ;
  }
  return equal ;
}

//---------------------------------------------------------------------------*

void cPtr_sd_autostart_true::
appendForDescription (C_String & ioString,
                      const PMSInt32 inIndentation) const {
  ioString << "->@sd_autostart_true:"
           << location.reader_description (inIndentation + 1)
           << app_modes.reader_description (inIndentation + 1) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                              Class message                                *
//                                                                           *
//---------------------------------------------------------------------------*

const char * cPtr_sd_autostart_true::
instanceMessage (void) const {
  return "" ;
}

//---------------------------------------------------------------------------*

const char * cPtr_sd_autostart_true::
_static_message (void) {
  return "" ;
}

//---------------------------------------------------------------------------*

C_galgas_class_inspector _gInspectorFor_sd_autostart_true (& typeid (cPtr_sd_autostart_true), & typeid (cPtr_autostart_obj), "") ;

//---------------------------------------------------------------------------*

AC_galgasClassRunTimeInformationEX * cPtr_sd_autostart_true::galgasRTTI (void) const {
  return & gClassInfoFor__sd_autostart_true ;
}

//---------------------------------------------------------------------------*

cPtr__AC_galgas_class * cPtr_sd_autostart_true::makeClone (void) const {
  cPtr__AC_galgas_class * result = NULL ;
  macroMyNew (result, cPtr_sd_autostart_true (location, app_modes COMMA_HERE)) ;
  return result ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                   GALGAS class 'GGS_sd_autostart_true'                    *
//                                                                           *
//---------------------------------------------------------------------------*

const C_galgas_type_descriptorEX kTypeDescriptor_GGS_sd_autostart_true ("sd_autostart_true", true, & kTypeDescriptor_GGS_autostart_obj) ;

//---------------------------------------------------------------------------*

GGS_sd_autostart_true::
GGS_sd_autostart_true (const cPtr__AC_galgas_class * inPointer) {
  macroAssignObject (mPointer, (cPtr__AC_galgas_class *) inPointer) ;
}

//---------------------------------------------------------------------------*

GGS_sd_autostart_true::
GGS_sd_autostart_true (cPtr__AC_galgas_class & inObject) {
  macroAssignObject (mPointer, & inObject) ;
}

//---------------------------------------------------------------------------*

//--- castFrom class method (implements cast expression)
GGS_sd_autostart_true GGS_sd_autostart_true::
castFrom (C_Compiler & inLexique,
           cPtr__AC_galgas_class * inPointer,
           const bool inUseKindOfClass,
           const GGS_location & inErrorLocation
           COMMA_LOCATION_ARGS) {
  GGS_sd_autostart_true result ;
  if (inPointer != NULL) {
    macroValidPointer (inPointer) ;
    const bool ok = inUseKindOfClass
      ? (dynamic_cast <cPtr_sd_autostart_true *> (inPointer) != NULL)
      : (typeid (cPtr_sd_autostart_true) == typeid (*inPointer)) ;
    if (ok) {
      result = GGS_sd_autostart_true (inPointer) ;
    }else{
      inErrorLocation.signalCastError (inLexique,
                                       & typeid (cPtr_sd_autostart_true),
                                       inUseKindOfClass,
                                       inPointer->instanceMessage ()
                                       COMMA_THERE) ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_sd_autostart_true GGS_sd_autostart_true::
constructor_new (C_Compiler & /* inLexique */,
                 const GGS_location & argument_0,
                 const GGS_stringset & argument_1
                                COMMA_LOCATION_ARGS) {
  GGS_sd_autostart_true result ;
  macroMyNew (result.mPointer, cPtr_sd_autostart_true (argument_0,
                                argument_1 COMMA_THERE)) ;
  macroRetainObject (result.mPointer) ;
  return result ;
}

//---------------------------------------------------------------------------*

GGS_stringset  GGS_sd_autostart_true::
reader_app_modes (C_Compiler & /* inLexique */ COMMA_UNUSED_LOCATION_ARGS) const {
  GGS_stringset   result ;
  if (mPointer != NULL) {
    macroValidPointer (mPointer) ;
    MF_Assert (dynamic_cast <cPtr_sd_autostart_true *> (mPointer) != NULL,
               "dynamic cast error", 0, 0) ;
    result = ((cPtr_sd_autostart_true *) mPointer)->app_modes ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

const char * GGS_sd_autostart_true::actualTypeName (void) const {
  return "sd_autostart_true" ;
}

//---------------------------------------------------------------------------*

C_galgasClassRunTimeInformationEX gClassInfoFor__sd_autostart_true ("sd_autostart_true", gClassInfoFor__autostart_obj, & kTypeDescriptor_GGS_sd_autostart_true) ;

//---------------------------------------------------------------------------*

GGS_object GGS_sd_autostart_true::reader_object (void) const {
  GGS_object result ;
  if (isBuilt ()) {
    GGS_sd_autostart_true * p = NULL ;
    macroMyNew (p, GGS_sd_autostart_true (*this)) ;
    result = GGS_object (p) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_sd_autostart_true GGS_sd_autostart_true::castFromObject (C_Compiler & inLexique,
                                   const GGS_object & inObject,
                                   const GGS_location & inErrorLocation
                                   COMMA_LOCATION_ARGS) {
  GGS_sd_autostart_true result ;
  const GGS__root * embeddedObject = inObject.embeddedObject () ;
  if (NULL != embeddedObject) {
    const GGS_sd_autostart_true * p = dynamic_cast <const GGS_sd_autostart_true *> (embeddedObject) ;
    if (NULL != p) {
      result = * p ;
    }else{
      castFromObjectErrorSignaling (inLexique, inErrorLocation, & kTypeDescriptor_GGS_sd_autostart_true, embeddedObject COMMA_THERE) ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*

const C_galgas_type_descriptorEX * GGS_sd_autostart_true::typeDescriptor (void) const {
  return & kTypeDescriptor_GGS_sd_autostart_true ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                    class 'cPtr_sd_autostart_synchron'                     *
//                                                                           *
//---------------------------------------------------------------------------*

cPtr_sd_autostart_synchron::
cPtr_sd_autostart_synchron (const GGS_location & argument_0,
                                const GGS_stringset & argument_1
                                COMMA_LOCATION_ARGS)
:cPtr_sd_autostart_true (argument_0, argument_1 COMMA_THERE) {
}

//---------------------------------------------------------------------------*

#ifndef DO_NOT_GENERATE_CHECKINGS
  cPtr_sd_autostart_synchron * GGS_sd_autostart_synchron::
  operator () (LOCATION_ARGS) const {
    macroValidObjectThere (mPointer, cPtr_sd_autostart_synchron) ;
    return (cPtr_sd_autostart_synchron *) mPointer ;
  }
#endif

//---------------------------------------------------------------------------*

bool cPtr_sd_autostart_synchron::
isEqualToObject (const cPtr__AC_galgas_class * inOperand) const {
  bool equal = typeid (this) == typeid (inOperand) ;
  if (equal) {
    const cPtr_sd_autostart_synchron * ptr = dynamic_cast <const cPtr_sd_autostart_synchron *> (inOperand) ;
    macroValidPointer (ptr) ;
    equal = location.operator_isEqual (ptr->location).boolValue ()
         && app_modes.operator_isEqual (ptr->app_modes).boolValue () ;
  }
  return equal ;
}

//---------------------------------------------------------------------------*

void cPtr_sd_autostart_synchron::
appendForDescription (C_String & ioString,
                      const PMSInt32 inIndentation) const {
  ioString << "->@sd_autostart_synchron:"
           << location.reader_description (inIndentation + 1)
           << app_modes.reader_description (inIndentation + 1) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                              Class message                                *
//                                                                           *
//---------------------------------------------------------------------------*

const char * cPtr_sd_autostart_synchron::
instanceMessage (void) const {
  return "" ;
}

//---------------------------------------------------------------------------*

const char * cPtr_sd_autostart_synchron::
_static_message (void) {
  return "" ;
}

//---------------------------------------------------------------------------*

C_galgas_class_inspector _gInspectorFor_sd_autostart_synchron (& typeid (cPtr_sd_autostart_synchron), & typeid (cPtr_sd_autostart_true), "") ;

//---------------------------------------------------------------------------*

AC_galgasClassRunTimeInformationEX * cPtr_sd_autostart_synchron::galgasRTTI (void) const {
  return & gClassInfoFor__sd_autostart_synchron ;
}

//---------------------------------------------------------------------------*

cPtr__AC_galgas_class * cPtr_sd_autostart_synchron::makeClone (void) const {
  cPtr__AC_galgas_class * result = NULL ;
  macroMyNew (result, cPtr_sd_autostart_synchron (location, app_modes COMMA_HERE)) ;
  return result ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                 GALGAS class 'GGS_sd_autostart_synchron'                  *
//                                                                           *
//---------------------------------------------------------------------------*

const C_galgas_type_descriptorEX kTypeDescriptor_GGS_sd_autostart_synchron ("sd_autostart_synchron", true, & kTypeDescriptor_GGS_sd_autostart_true) ;

//---------------------------------------------------------------------------*

GGS_sd_autostart_synchron::
GGS_sd_autostart_synchron (const cPtr__AC_galgas_class * inPointer) {
  macroAssignObject (mPointer, (cPtr__AC_galgas_class *) inPointer) ;
}

//---------------------------------------------------------------------------*

GGS_sd_autostart_synchron::
GGS_sd_autostart_synchron (cPtr__AC_galgas_class & inObject) {
  macroAssignObject (mPointer, & inObject) ;
}

//---------------------------------------------------------------------------*

//--- castFrom class method (implements cast expression)
GGS_sd_autostart_synchron GGS_sd_autostart_synchron::
castFrom (C_Compiler & inLexique,
           cPtr__AC_galgas_class * inPointer,
           const bool inUseKindOfClass,
           const GGS_location & inErrorLocation
           COMMA_LOCATION_ARGS) {
  GGS_sd_autostart_synchron result ;
  if (inPointer != NULL) {
    macroValidPointer (inPointer) ;
    const bool ok = inUseKindOfClass
      ? (dynamic_cast <cPtr_sd_autostart_synchron *> (inPointer) != NULL)
      : (typeid (cPtr_sd_autostart_synchron) == typeid (*inPointer)) ;
    if (ok) {
      result = GGS_sd_autostart_synchron (inPointer) ;
    }else{
      inErrorLocation.signalCastError (inLexique,
                                       & typeid (cPtr_sd_autostart_synchron),
                                       inUseKindOfClass,
                                       inPointer->instanceMessage ()
                                       COMMA_THERE) ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_sd_autostart_synchron GGS_sd_autostart_synchron::
constructor_new (C_Compiler & /* inLexique */,
                 const GGS_location & argument_0,
                 const GGS_stringset & argument_1
                                COMMA_LOCATION_ARGS) {
  GGS_sd_autostart_synchron result ;
  macroMyNew (result.mPointer, cPtr_sd_autostart_synchron (argument_0,
                                argument_1 COMMA_THERE)) ;
  macroRetainObject (result.mPointer) ;
  return result ;
}

//---------------------------------------------------------------------------*

const char * GGS_sd_autostart_synchron::actualTypeName (void) const {
  return "sd_autostart_synchron" ;
}

//---------------------------------------------------------------------------*

C_galgasClassRunTimeInformationEX gClassInfoFor__sd_autostart_synchron ("sd_autostart_synchron", gClassInfoFor__sd_autostart_true, & kTypeDescriptor_GGS_sd_autostart_synchron) ;

//---------------------------------------------------------------------------*

GGS_object GGS_sd_autostart_synchron::reader_object (void) const {
  GGS_object result ;
  if (isBuilt ()) {
    GGS_sd_autostart_synchron * p = NULL ;
    macroMyNew (p, GGS_sd_autostart_synchron (*this)) ;
    result = GGS_object (p) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_sd_autostart_synchron GGS_sd_autostart_synchron::castFromObject (C_Compiler & inLexique,
                                   const GGS_object & inObject,
                                   const GGS_location & inErrorLocation
                                   COMMA_LOCATION_ARGS) {
  GGS_sd_autostart_synchron result ;
  const GGS__root * embeddedObject = inObject.embeddedObject () ;
  if (NULL != embeddedObject) {
    const GGS_sd_autostart_synchron * p = dynamic_cast <const GGS_sd_autostart_synchron *> (embeddedObject) ;
    if (NULL != p) {
      result = * p ;
    }else{
      castFromObjectErrorSignaling (inLexique, inErrorLocation, & kTypeDescriptor_GGS_sd_autostart_synchron, embeddedObject COMMA_THERE) ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*

const C_galgas_type_descriptorEX * GGS_sd_autostart_synchron::typeDescriptor (void) const {
  return & kTypeDescriptor_GGS_sd_autostart_synchron ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                    class 'cPtr_sd_autostart_relative'                     *
//                                                                           *
//---------------------------------------------------------------------------*

cPtr_sd_autostart_relative::
cPtr_sd_autostart_relative (const GGS_location & argument_0,
                                const GGS_stringset & argument_1,
                                const GGS_luint64 & argument_2
                                COMMA_LOCATION_ARGS)
:cPtr_sd_autostart_true (argument_0, argument_1 COMMA_THERE),
offset (argument_2) {
}

//---------------------------------------------------------------------------*

#ifndef DO_NOT_GENERATE_CHECKINGS
  cPtr_sd_autostart_relative * GGS_sd_autostart_relative::
  operator () (LOCATION_ARGS) const {
    macroValidObjectThere (mPointer, cPtr_sd_autostart_relative) ;
    return (cPtr_sd_autostart_relative *) mPointer ;
  }
#endif

//---------------------------------------------------------------------------*

bool cPtr_sd_autostart_relative::
isEqualToObject (const cPtr__AC_galgas_class * inOperand) const {
  bool equal = typeid (this) == typeid (inOperand) ;
  if (equal) {
    const cPtr_sd_autostart_relative * ptr = dynamic_cast <const cPtr_sd_autostart_relative *> (inOperand) ;
    macroValidPointer (ptr) ;
    equal = location.operator_isEqual (ptr->location).boolValue ()
         && app_modes.operator_isEqual (ptr->app_modes).boolValue ()
         && offset.operator_isEqual (ptr->offset).boolValue () ;
  }
  return equal ;
}

//---------------------------------------------------------------------------*

void cPtr_sd_autostart_relative::
appendForDescription (C_String & ioString,
                      const PMSInt32 inIndentation) const {
  ioString << "->@sd_autostart_relative:"
           << location.reader_description (inIndentation + 1)
           << app_modes.reader_description (inIndentation + 1)
           << offset.reader_description (inIndentation + 1) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                              Class message                                *
//                                                                           *
//---------------------------------------------------------------------------*

const char * cPtr_sd_autostart_relative::
instanceMessage (void) const {
  return "" ;
}

//---------------------------------------------------------------------------*

const char * cPtr_sd_autostart_relative::
_static_message (void) {
  return "" ;
}

//---------------------------------------------------------------------------*

C_galgas_class_inspector _gInspectorFor_sd_autostart_relative (& typeid (cPtr_sd_autostart_relative), & typeid (cPtr_sd_autostart_true), "") ;

//---------------------------------------------------------------------------*

AC_galgasClassRunTimeInformationEX * cPtr_sd_autostart_relative::galgasRTTI (void) const {
  return & gClassInfoFor__sd_autostart_relative ;
}

//---------------------------------------------------------------------------*

cPtr__AC_galgas_class * cPtr_sd_autostart_relative::makeClone (void) const {
  cPtr__AC_galgas_class * result = NULL ;
  macroMyNew (result, cPtr_sd_autostart_relative (location, app_modes, offset COMMA_HERE)) ;
  return result ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                 GALGAS class 'GGS_sd_autostart_relative'                  *
//                                                                           *
//---------------------------------------------------------------------------*

const C_galgas_type_descriptorEX kTypeDescriptor_GGS_sd_autostart_relative ("sd_autostart_relative", true, & kTypeDescriptor_GGS_sd_autostart_true) ;

//---------------------------------------------------------------------------*

GGS_sd_autostart_relative::
GGS_sd_autostart_relative (const cPtr__AC_galgas_class * inPointer) {
  macroAssignObject (mPointer, (cPtr__AC_galgas_class *) inPointer) ;
}

//---------------------------------------------------------------------------*

GGS_sd_autostart_relative::
GGS_sd_autostart_relative (cPtr__AC_galgas_class & inObject) {
  macroAssignObject (mPointer, & inObject) ;
}

//---------------------------------------------------------------------------*

//--- castFrom class method (implements cast expression)
GGS_sd_autostart_relative GGS_sd_autostart_relative::
castFrom (C_Compiler & inLexique,
           cPtr__AC_galgas_class * inPointer,
           const bool inUseKindOfClass,
           const GGS_location & inErrorLocation
           COMMA_LOCATION_ARGS) {
  GGS_sd_autostart_relative result ;
  if (inPointer != NULL) {
    macroValidPointer (inPointer) ;
    const bool ok = inUseKindOfClass
      ? (dynamic_cast <cPtr_sd_autostart_relative *> (inPointer) != NULL)
      : (typeid (cPtr_sd_autostart_relative) == typeid (*inPointer)) ;
    if (ok) {
      result = GGS_sd_autostart_relative (inPointer) ;
    }else{
      inErrorLocation.signalCastError (inLexique,
                                       & typeid (cPtr_sd_autostart_relative),
                                       inUseKindOfClass,
                                       inPointer->instanceMessage ()
                                       COMMA_THERE) ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_sd_autostart_relative GGS_sd_autostart_relative::
constructor_new (C_Compiler & /* inLexique */,
                 const GGS_location & argument_0,
                 const GGS_stringset & argument_1,
                 const GGS_luint64 & argument_2
                                COMMA_LOCATION_ARGS) {
  GGS_sd_autostart_relative result ;
  macroMyNew (result.mPointer, cPtr_sd_autostart_relative (argument_0,
                                argument_1,
                                argument_2 COMMA_THERE)) ;
  macroRetainObject (result.mPointer) ;
  return result ;
}

//---------------------------------------------------------------------------*

GGS_luint64  GGS_sd_autostart_relative::
reader_offset (C_Compiler & /* inLexique */ COMMA_UNUSED_LOCATION_ARGS) const {
  GGS_luint64   result ;
  if (mPointer != NULL) {
    macroValidPointer (mPointer) ;
    MF_Assert (dynamic_cast <cPtr_sd_autostart_relative *> (mPointer) != NULL,
               "dynamic cast error", 0, 0) ;
    result = ((cPtr_sd_autostart_relative *) mPointer)->offset ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

const char * GGS_sd_autostart_relative::actualTypeName (void) const {
  return "sd_autostart_relative" ;
}

//---------------------------------------------------------------------------*

C_galgasClassRunTimeInformationEX gClassInfoFor__sd_autostart_relative ("sd_autostart_relative", gClassInfoFor__sd_autostart_true, & kTypeDescriptor_GGS_sd_autostart_relative) ;

//---------------------------------------------------------------------------*

GGS_object GGS_sd_autostart_relative::reader_object (void) const {
  GGS_object result ;
  if (isBuilt ()) {
    GGS_sd_autostart_relative * p = NULL ;
    macroMyNew (p, GGS_sd_autostart_relative (*this)) ;
    result = GGS_object (p) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_sd_autostart_relative GGS_sd_autostart_relative::castFromObject (C_Compiler & inLexique,
                                   const GGS_object & inObject,
                                   const GGS_location & inErrorLocation
                                   COMMA_LOCATION_ARGS) {
  GGS_sd_autostart_relative result ;
  const GGS__root * embeddedObject = inObject.embeddedObject () ;
  if (NULL != embeddedObject) {
    const GGS_sd_autostart_relative * p = dynamic_cast <const GGS_sd_autostart_relative *> (embeddedObject) ;
    if (NULL != p) {
      result = * p ;
    }else{
      castFromObjectErrorSignaling (inLexique, inErrorLocation, & kTypeDescriptor_GGS_sd_autostart_relative, embeddedObject COMMA_THERE) ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*

const C_galgas_type_descriptorEX * GGS_sd_autostart_relative::typeDescriptor (void) const {
  return & kTypeDescriptor_GGS_sd_autostart_relative ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                    class 'cPtr_sd_autostart_absolute'                     *
//                                                                           *
//---------------------------------------------------------------------------*

cPtr_sd_autostart_absolute::
cPtr_sd_autostart_absolute (const GGS_location & argument_0,
                                const GGS_stringset & argument_1,
                                const GGS_luint64 & argument_2
                                COMMA_LOCATION_ARGS)
:cPtr_sd_autostart_true (argument_0, argument_1 COMMA_THERE),
value (argument_2) {
}

//---------------------------------------------------------------------------*

#ifndef DO_NOT_GENERATE_CHECKINGS
  cPtr_sd_autostart_absolute * GGS_sd_autostart_absolute::
  operator () (LOCATION_ARGS) const {
    macroValidObjectThere (mPointer, cPtr_sd_autostart_absolute) ;
    return (cPtr_sd_autostart_absolute *) mPointer ;
  }
#endif

//---------------------------------------------------------------------------*

bool cPtr_sd_autostart_absolute::
isEqualToObject (const cPtr__AC_galgas_class * inOperand) const {
  bool equal = typeid (this) == typeid (inOperand) ;
  if (equal) {
    const cPtr_sd_autostart_absolute * ptr = dynamic_cast <const cPtr_sd_autostart_absolute *> (inOperand) ;
    macroValidPointer (ptr) ;
    equal = location.operator_isEqual (ptr->location).boolValue ()
         && app_modes.operator_isEqual (ptr->app_modes).boolValue ()
         && value.operator_isEqual (ptr->value).boolValue () ;
  }
  return equal ;
}

//---------------------------------------------------------------------------*

void cPtr_sd_autostart_absolute::
appendForDescription (C_String & ioString,
                      const PMSInt32 inIndentation) const {
  ioString << "->@sd_autostart_absolute:"
           << location.reader_description (inIndentation + 1)
           << app_modes.reader_description (inIndentation + 1)
           << value.reader_description (inIndentation + 1) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                              Class message                                *
//                                                                           *
//---------------------------------------------------------------------------*

const char * cPtr_sd_autostart_absolute::
instanceMessage (void) const {
  return "" ;
}

//---------------------------------------------------------------------------*

const char * cPtr_sd_autostart_absolute::
_static_message (void) {
  return "" ;
}

//---------------------------------------------------------------------------*

C_galgas_class_inspector _gInspectorFor_sd_autostart_absolute (& typeid (cPtr_sd_autostart_absolute), & typeid (cPtr_sd_autostart_true), "") ;

//---------------------------------------------------------------------------*

AC_galgasClassRunTimeInformationEX * cPtr_sd_autostart_absolute::galgasRTTI (void) const {
  return & gClassInfoFor__sd_autostart_absolute ;
}

//---------------------------------------------------------------------------*

cPtr__AC_galgas_class * cPtr_sd_autostart_absolute::makeClone (void) const {
  cPtr__AC_galgas_class * result = NULL ;
  macroMyNew (result, cPtr_sd_autostart_absolute (location, app_modes, value COMMA_HERE)) ;
  return result ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                 GALGAS class 'GGS_sd_autostart_absolute'                  *
//                                                                           *
//---------------------------------------------------------------------------*

const C_galgas_type_descriptorEX kTypeDescriptor_GGS_sd_autostart_absolute ("sd_autostart_absolute", true, & kTypeDescriptor_GGS_sd_autostart_true) ;

//---------------------------------------------------------------------------*

GGS_sd_autostart_absolute::
GGS_sd_autostart_absolute (const cPtr__AC_galgas_class * inPointer) {
  macroAssignObject (mPointer, (cPtr__AC_galgas_class *) inPointer) ;
}

//---------------------------------------------------------------------------*

GGS_sd_autostart_absolute::
GGS_sd_autostart_absolute (cPtr__AC_galgas_class & inObject) {
  macroAssignObject (mPointer, & inObject) ;
}

//---------------------------------------------------------------------------*

//--- castFrom class method (implements cast expression)
GGS_sd_autostart_absolute GGS_sd_autostart_absolute::
castFrom (C_Compiler & inLexique,
           cPtr__AC_galgas_class * inPointer,
           const bool inUseKindOfClass,
           const GGS_location & inErrorLocation
           COMMA_LOCATION_ARGS) {
  GGS_sd_autostart_absolute result ;
  if (inPointer != NULL) {
    macroValidPointer (inPointer) ;
    const bool ok = inUseKindOfClass
      ? (dynamic_cast <cPtr_sd_autostart_absolute *> (inPointer) != NULL)
      : (typeid (cPtr_sd_autostart_absolute) == typeid (*inPointer)) ;
    if (ok) {
      result = GGS_sd_autostart_absolute (inPointer) ;
    }else{
      inErrorLocation.signalCastError (inLexique,
                                       & typeid (cPtr_sd_autostart_absolute),
                                       inUseKindOfClass,
                                       inPointer->instanceMessage ()
                                       COMMA_THERE) ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_sd_autostart_absolute GGS_sd_autostart_absolute::
constructor_new (C_Compiler & /* inLexique */,
                 const GGS_location & argument_0,
                 const GGS_stringset & argument_1,
                 const GGS_luint64 & argument_2
                                COMMA_LOCATION_ARGS) {
  GGS_sd_autostart_absolute result ;
  macroMyNew (result.mPointer, cPtr_sd_autostart_absolute (argument_0,
                                argument_1,
                                argument_2 COMMA_THERE)) ;
  macroRetainObject (result.mPointer) ;
  return result ;
}

//---------------------------------------------------------------------------*

GGS_luint64  GGS_sd_autostart_absolute::
reader_value (C_Compiler & /* inLexique */ COMMA_UNUSED_LOCATION_ARGS) const {
  GGS_luint64   result ;
  if (mPointer != NULL) {
    macroValidPointer (mPointer) ;
    MF_Assert (dynamic_cast <cPtr_sd_autostart_absolute *> (mPointer) != NULL,
               "dynamic cast error", 0, 0) ;
    result = ((cPtr_sd_autostart_absolute *) mPointer)->value ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

const char * GGS_sd_autostart_absolute::actualTypeName (void) const {
  return "sd_autostart_absolute" ;
}

//---------------------------------------------------------------------------*

C_galgasClassRunTimeInformationEX gClassInfoFor__sd_autostart_absolute ("sd_autostart_absolute", gClassInfoFor__sd_autostart_true, & kTypeDescriptor_GGS_sd_autostart_absolute) ;

//---------------------------------------------------------------------------*

GGS_object GGS_sd_autostart_absolute::reader_object (void) const {
  GGS_object result ;
  if (isBuilt ()) {
    GGS_sd_autostart_absolute * p = NULL ;
    macroMyNew (p, GGS_sd_autostart_absolute (*this)) ;
    result = GGS_object (p) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_sd_autostart_absolute GGS_sd_autostart_absolute::castFromObject (C_Compiler & inLexique,
                                   const GGS_object & inObject,
                                   const GGS_location & inErrorLocation
                                   COMMA_LOCATION_ARGS) {
  GGS_sd_autostart_absolute result ;
  const GGS__root * embeddedObject = inObject.embeddedObject () ;
  if (NULL != embeddedObject) {
    const GGS_sd_autostart_absolute * p = dynamic_cast <const GGS_sd_autostart_absolute *> (embeddedObject) ;
    if (NULL != p) {
      result = * p ;
    }else{
      castFromObjectErrorSignaling (inLexique, inErrorLocation, & kTypeDescriptor_GGS_sd_autostart_absolute, embeddedObject COMMA_THERE) ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*

const C_galgas_type_descriptorEX * GGS_sd_autostart_absolute::typeDescriptor (void) const {
  return & kTypeDescriptor_GGS_sd_autostart_absolute ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                        class 'cPtr_ltgt_sync_obj'                         *
//                                                                           *
//---------------------------------------------------------------------------*

cPtr_ltgt_sync_obj::
cPtr_ltgt_sync_obj (const GGS_location & argument_0
                                COMMA_LOCATION_ARGS)
:cPtr__AC_galgas_class (THERE),
loc (argument_0) {
}

//---------------------------------------------------------------------------*

#ifndef DO_NOT_GENERATE_CHECKINGS
  cPtr_ltgt_sync_obj * GGS_ltgt_sync_obj::
  operator () (LOCATION_ARGS) const {
    macroValidObjectThere (mPointer, cPtr_ltgt_sync_obj) ;
    return (cPtr_ltgt_sync_obj *) mPointer ;
  }
#endif

//---------------------------------------------------------------------------*

void cPtr_ltgt_sync_obj::
appendForDescription (C_String & ioString,
                      const PMSInt32 inIndentation) const {
  ioString << "->@ltgt_sync_obj:"
           << loc.reader_description (inIndentation + 1) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                              Class message                                *
//                                                                           *
//---------------------------------------------------------------------------*

const char * cPtr_ltgt_sync_obj::
instanceMessage (void) const {
  return "" ;
}

//---------------------------------------------------------------------------*

const char * cPtr_ltgt_sync_obj::
_static_message (void) {
  return "" ;
}

//---------------------------------------------------------------------------*

C_galgas_class_inspector _gInspectorFor_ltgt_sync_obj (& typeid (cPtr_ltgt_sync_obj), NULL, "") ;

//---------------------------------------------------------------------------*

AC_galgasClassRunTimeInformationEX * cPtr_ltgt_sync_obj::galgasRTTI (void) const {
  return & gClassInfoFor__ltgt_sync_obj ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                     GALGAS class 'GGS_ltgt_sync_obj'                      *
//                                                                           *
//---------------------------------------------------------------------------*

const C_galgas_type_descriptorEX kTypeDescriptor_GGS_ltgt_sync_obj ("ltgt_sync_obj", true, NULL) ;

//---------------------------------------------------------------------------*

GGS_ltgt_sync_obj::
GGS_ltgt_sync_obj (const cPtr__AC_galgas_class * inPointer) {
  macroAssignObject (mPointer, (cPtr__AC_galgas_class *) inPointer) ;
}

//---------------------------------------------------------------------------*

GGS_ltgt_sync_obj::
GGS_ltgt_sync_obj (cPtr__AC_galgas_class & inObject) {
  macroAssignObject (mPointer, & inObject) ;
}

//---------------------------------------------------------------------------*

//--- castFrom class method (implements cast expression)
GGS_ltgt_sync_obj GGS_ltgt_sync_obj::
castFrom (C_Compiler & inLexique,
           cPtr__AC_galgas_class * inPointer,
           const bool inUseKindOfClass,
           const GGS_location & inErrorLocation
           COMMA_LOCATION_ARGS) {
  GGS_ltgt_sync_obj result ;
  if (inPointer != NULL) {
    macroValidPointer (inPointer) ;
    const bool ok = inUseKindOfClass
      ? (dynamic_cast <cPtr_ltgt_sync_obj *> (inPointer) != NULL)
      : (typeid (cPtr_ltgt_sync_obj) == typeid (*inPointer)) ;
    if (ok) {
      result = GGS_ltgt_sync_obj (inPointer) ;
    }else{
      inErrorLocation.signalCastError (inLexique,
                                       & typeid (cPtr_ltgt_sync_obj),
                                       inUseKindOfClass,
                                       inPointer->instanceMessage ()
                                       COMMA_THERE) ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_location  GGS_ltgt_sync_obj::
reader_loc (C_Compiler & /* inLexique */ COMMA_UNUSED_LOCATION_ARGS) const {
  GGS_location   result ;
  if (mPointer != NULL) {
    macroValidPointer (mPointer) ;
    MF_Assert (dynamic_cast <cPtr_ltgt_sync_obj *> (mPointer) != NULL,
               "dynamic cast error", 0, 0) ;
    result = ((cPtr_ltgt_sync_obj *) mPointer)->loc ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

const char * GGS_ltgt_sync_obj::actualTypeName (void) const {
  return "ltgt_sync_obj" ;
}

//---------------------------------------------------------------------------*

AC_galgasClassRunTimeInformationEX * GGS_ltgt_sync_obj::galgasObjectRunTimeInfo (void) const {
  AC_galgasClassRunTimeInformationEX * result = NULL ;
  if (mPointer != NULL) {
    result = mPointer->galgasRTTI () ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

C_galgasRootClassRunTimeInformationEX gClassInfoFor__ltgt_sync_obj ("ltgt_sync_obj", & kTypeDescriptor_GGS_ltgt_sync_obj) ;

//---------------------------------------------------------------------------*

GGS_object GGS_ltgt_sync_obj::reader_object (void) const {
  GGS_object result ;
  if (isBuilt ()) {
    GGS_ltgt_sync_obj * p = NULL ;
    macroMyNew (p, GGS_ltgt_sync_obj (*this)) ;
    result = GGS_object (p) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_ltgt_sync_obj GGS_ltgt_sync_obj::castFromObject (C_Compiler & inLexique,
                                   const GGS_object & inObject,
                                   const GGS_location & inErrorLocation
                                   COMMA_LOCATION_ARGS) {
  GGS_ltgt_sync_obj result ;
  const GGS__root * embeddedObject = inObject.embeddedObject () ;
  if (NULL != embeddedObject) {
    const GGS_ltgt_sync_obj * p = dynamic_cast <const GGS_ltgt_sync_obj *> (embeddedObject) ;
    if (NULL != p) {
      result = * p ;
    }else{
      castFromObjectErrorSignaling (inLexique, inErrorLocation, & kTypeDescriptor_GGS_ltgt_sync_obj, embeddedObject COMMA_THERE) ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*

const C_galgas_type_descriptorEX * GGS_ltgt_sync_obj::typeDescriptor (void) const {
  return & kTypeDescriptor_GGS_ltgt_sync_obj ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                       class 'cPtr_ltgt_sync_void'                         *
//                                                                           *
//---------------------------------------------------------------------------*

cPtr_ltgt_sync_void::
cPtr_ltgt_sync_void (const GGS_location & argument_0
                                COMMA_LOCATION_ARGS)
:cPtr_ltgt_sync_obj (argument_0 COMMA_THERE) {
}

//---------------------------------------------------------------------------*

#ifndef DO_NOT_GENERATE_CHECKINGS
  cPtr_ltgt_sync_void * GGS_ltgt_sync_void::
  operator () (LOCATION_ARGS) const {
    macroValidObjectThere (mPointer, cPtr_ltgt_sync_void) ;
    return (cPtr_ltgt_sync_void *) mPointer ;
  }
#endif

//---------------------------------------------------------------------------*

bool cPtr_ltgt_sync_void::
isEqualToObject (const cPtr__AC_galgas_class * inOperand) const {
  bool equal = typeid (this) == typeid (inOperand) ;
  if (equal) {
    const cPtr_ltgt_sync_void * ptr = dynamic_cast <const cPtr_ltgt_sync_void *> (inOperand) ;
    macroValidPointer (ptr) ;
    equal = loc.operator_isEqual (ptr->loc).boolValue () ;
  }
  return equal ;
}

//---------------------------------------------------------------------------*

void cPtr_ltgt_sync_void::
appendForDescription (C_String & ioString,
                      const PMSInt32 inIndentation) const {
  ioString << "->@ltgt_sync_void:"
           << loc.reader_description (inIndentation + 1) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                              Class message                                *
//                                                                           *
//---------------------------------------------------------------------------*

const char * cPtr_ltgt_sync_void::
instanceMessage (void) const {
  return "" ;
}

//---------------------------------------------------------------------------*

const char * cPtr_ltgt_sync_void::
_static_message (void) {
  return "" ;
}

//---------------------------------------------------------------------------*

C_galgas_class_inspector _gInspectorFor_ltgt_sync_void (& typeid (cPtr_ltgt_sync_void), & typeid (cPtr_ltgt_sync_obj), "") ;

//---------------------------------------------------------------------------*

AC_galgasClassRunTimeInformationEX * cPtr_ltgt_sync_void::galgasRTTI (void) const {
  return & gClassInfoFor__ltgt_sync_void ;
}

//---------------------------------------------------------------------------*

cPtr__AC_galgas_class * cPtr_ltgt_sync_void::makeClone (void) const {
  cPtr__AC_galgas_class * result = NULL ;
  macroMyNew (result, cPtr_ltgt_sync_void (loc COMMA_HERE)) ;
  return result ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                    GALGAS class 'GGS_ltgt_sync_void'                      *
//                                                                           *
//---------------------------------------------------------------------------*

const C_galgas_type_descriptorEX kTypeDescriptor_GGS_ltgt_sync_void ("ltgt_sync_void", true, & kTypeDescriptor_GGS_ltgt_sync_obj) ;

//---------------------------------------------------------------------------*

GGS_ltgt_sync_void::
GGS_ltgt_sync_void (const cPtr__AC_galgas_class * inPointer) {
  macroAssignObject (mPointer, (cPtr__AC_galgas_class *) inPointer) ;
}

//---------------------------------------------------------------------------*

GGS_ltgt_sync_void::
GGS_ltgt_sync_void (cPtr__AC_galgas_class & inObject) {
  macroAssignObject (mPointer, & inObject) ;
}

//---------------------------------------------------------------------------*

//--- castFrom class method (implements cast expression)
GGS_ltgt_sync_void GGS_ltgt_sync_void::
castFrom (C_Compiler & inLexique,
           cPtr__AC_galgas_class * inPointer,
           const bool inUseKindOfClass,
           const GGS_location & inErrorLocation
           COMMA_LOCATION_ARGS) {
  GGS_ltgt_sync_void result ;
  if (inPointer != NULL) {
    macroValidPointer (inPointer) ;
    const bool ok = inUseKindOfClass
      ? (dynamic_cast <cPtr_ltgt_sync_void *> (inPointer) != NULL)
      : (typeid (cPtr_ltgt_sync_void) == typeid (*inPointer)) ;
    if (ok) {
      result = GGS_ltgt_sync_void (inPointer) ;
    }else{
      inErrorLocation.signalCastError (inLexique,
                                       & typeid (cPtr_ltgt_sync_void),
                                       inUseKindOfClass,
                                       inPointer->instanceMessage ()
                                       COMMA_THERE) ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_ltgt_sync_void GGS_ltgt_sync_void::
constructor_new (C_Compiler & /* inLexique */,
                 const GGS_location & argument_0
                                COMMA_LOCATION_ARGS) {
  GGS_ltgt_sync_void result ;
  macroMyNew (result.mPointer, cPtr_ltgt_sync_void (argument_0 COMMA_THERE)) ;
  macroRetainObject (result.mPointer) ;
  return result ;
}

//---------------------------------------------------------------------------*

const char * GGS_ltgt_sync_void::actualTypeName (void) const {
  return "ltgt_sync_void" ;
}

//---------------------------------------------------------------------------*

C_galgasClassRunTimeInformationEX gClassInfoFor__ltgt_sync_void ("ltgt_sync_void", gClassInfoFor__ltgt_sync_obj, & kTypeDescriptor_GGS_ltgt_sync_void) ;

//---------------------------------------------------------------------------*

GGS_object GGS_ltgt_sync_void::reader_object (void) const {
  GGS_object result ;
  if (isBuilt ()) {
    GGS_ltgt_sync_void * p = NULL ;
    macroMyNew (p, GGS_ltgt_sync_void (*this)) ;
    result = GGS_object (p) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_ltgt_sync_void GGS_ltgt_sync_void::castFromObject (C_Compiler & inLexique,
                                   const GGS_object & inObject,
                                   const GGS_location & inErrorLocation
                                   COMMA_LOCATION_ARGS) {
  GGS_ltgt_sync_void result ;
  const GGS__root * embeddedObject = inObject.embeddedObject () ;
  if (NULL != embeddedObject) {
    const GGS_ltgt_sync_void * p = dynamic_cast <const GGS_ltgt_sync_void *> (embeddedObject) ;
    if (NULL != p) {
      result = * p ;
    }else{
      castFromObjectErrorSignaling (inLexique, inErrorLocation, & kTypeDescriptor_GGS_ltgt_sync_void, embeddedObject COMMA_THERE) ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*

const C_galgas_type_descriptorEX * GGS_ltgt_sync_void::typeDescriptor (void) const {
  return & kTypeDescriptor_GGS_ltgt_sync_void ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                       class 'cPtr_ltgt_sync_false'                        *
//                                                                           *
//---------------------------------------------------------------------------*

cPtr_ltgt_sync_false::
cPtr_ltgt_sync_false (const GGS_location & argument_0
                                COMMA_LOCATION_ARGS)
:cPtr_ltgt_sync_obj (argument_0 COMMA_THERE) {
}

//---------------------------------------------------------------------------*

#ifndef DO_NOT_GENERATE_CHECKINGS
  cPtr_ltgt_sync_false * GGS_ltgt_sync_false::
  operator () (LOCATION_ARGS) const {
    macroValidObjectThere (mPointer, cPtr_ltgt_sync_false) ;
    return (cPtr_ltgt_sync_false *) mPointer ;
  }
#endif

//---------------------------------------------------------------------------*

bool cPtr_ltgt_sync_false::
isEqualToObject (const cPtr__AC_galgas_class * inOperand) const {
  bool equal = typeid (this) == typeid (inOperand) ;
  if (equal) {
    const cPtr_ltgt_sync_false * ptr = dynamic_cast <const cPtr_ltgt_sync_false *> (inOperand) ;
    macroValidPointer (ptr) ;
    equal = loc.operator_isEqual (ptr->loc).boolValue () ;
  }
  return equal ;
}

//---------------------------------------------------------------------------*

void cPtr_ltgt_sync_false::
appendForDescription (C_String & ioString,
                      const PMSInt32 inIndentation) const {
  ioString << "->@ltgt_sync_false:"
           << loc.reader_description (inIndentation + 1) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                              Class message                                *
//                                                                           *
//---------------------------------------------------------------------------*

const char * cPtr_ltgt_sync_false::
instanceMessage (void) const {
  return "" ;
}

//---------------------------------------------------------------------------*

const char * cPtr_ltgt_sync_false::
_static_message (void) {
  return "" ;
}

//---------------------------------------------------------------------------*

C_galgas_class_inspector _gInspectorFor_ltgt_sync_false (& typeid (cPtr_ltgt_sync_false), & typeid (cPtr_ltgt_sync_obj), "") ;

//---------------------------------------------------------------------------*

AC_galgasClassRunTimeInformationEX * cPtr_ltgt_sync_false::galgasRTTI (void) const {
  return & gClassInfoFor__ltgt_sync_false ;
}

//---------------------------------------------------------------------------*

cPtr__AC_galgas_class * cPtr_ltgt_sync_false::makeClone (void) const {
  cPtr__AC_galgas_class * result = NULL ;
  macroMyNew (result, cPtr_ltgt_sync_false (loc COMMA_HERE)) ;
  return result ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                    GALGAS class 'GGS_ltgt_sync_false'                     *
//                                                                           *
//---------------------------------------------------------------------------*

const C_galgas_type_descriptorEX kTypeDescriptor_GGS_ltgt_sync_false ("ltgt_sync_false", true, & kTypeDescriptor_GGS_ltgt_sync_obj) ;

//---------------------------------------------------------------------------*

GGS_ltgt_sync_false::
GGS_ltgt_sync_false (const cPtr__AC_galgas_class * inPointer) {
  macroAssignObject (mPointer, (cPtr__AC_galgas_class *) inPointer) ;
}

//---------------------------------------------------------------------------*

GGS_ltgt_sync_false::
GGS_ltgt_sync_false (cPtr__AC_galgas_class & inObject) {
  macroAssignObject (mPointer, & inObject) ;
}

//---------------------------------------------------------------------------*

//--- castFrom class method (implements cast expression)
GGS_ltgt_sync_false GGS_ltgt_sync_false::
castFrom (C_Compiler & inLexique,
           cPtr__AC_galgas_class * inPointer,
           const bool inUseKindOfClass,
           const GGS_location & inErrorLocation
           COMMA_LOCATION_ARGS) {
  GGS_ltgt_sync_false result ;
  if (inPointer != NULL) {
    macroValidPointer (inPointer) ;
    const bool ok = inUseKindOfClass
      ? (dynamic_cast <cPtr_ltgt_sync_false *> (inPointer) != NULL)
      : (typeid (cPtr_ltgt_sync_false) == typeid (*inPointer)) ;
    if (ok) {
      result = GGS_ltgt_sync_false (inPointer) ;
    }else{
      inErrorLocation.signalCastError (inLexique,
                                       & typeid (cPtr_ltgt_sync_false),
                                       inUseKindOfClass,
                                       inPointer->instanceMessage ()
                                       COMMA_THERE) ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_ltgt_sync_false GGS_ltgt_sync_false::
constructor_new (C_Compiler & /* inLexique */,
                 const GGS_location & argument_0
                                COMMA_LOCATION_ARGS) {
  GGS_ltgt_sync_false result ;
  macroMyNew (result.mPointer, cPtr_ltgt_sync_false (argument_0 COMMA_THERE)) ;
  macroRetainObject (result.mPointer) ;
  return result ;
}

//---------------------------------------------------------------------------*

const char * GGS_ltgt_sync_false::actualTypeName (void) const {
  return "ltgt_sync_false" ;
}

//---------------------------------------------------------------------------*

C_galgasClassRunTimeInformationEX gClassInfoFor__ltgt_sync_false ("ltgt_sync_false", gClassInfoFor__ltgt_sync_obj, & kTypeDescriptor_GGS_ltgt_sync_false) ;

//---------------------------------------------------------------------------*

GGS_object GGS_ltgt_sync_false::reader_object (void) const {
  GGS_object result ;
  if (isBuilt ()) {
    GGS_ltgt_sync_false * p = NULL ;
    macroMyNew (p, GGS_ltgt_sync_false (*this)) ;
    result = GGS_object (p) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_ltgt_sync_false GGS_ltgt_sync_false::castFromObject (C_Compiler & inLexique,
                                   const GGS_object & inObject,
                                   const GGS_location & inErrorLocation
                                   COMMA_LOCATION_ARGS) {
  GGS_ltgt_sync_false result ;
  const GGS__root * embeddedObject = inObject.embeddedObject () ;
  if (NULL != embeddedObject) {
    const GGS_ltgt_sync_false * p = dynamic_cast <const GGS_ltgt_sync_false *> (embeddedObject) ;
    if (NULL != p) {
      result = * p ;
    }else{
      castFromObjectErrorSignaling (inLexique, inErrorLocation, & kTypeDescriptor_GGS_ltgt_sync_false, embeddedObject COMMA_THERE) ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*

const C_galgas_type_descriptorEX * GGS_ltgt_sync_false::typeDescriptor (void) const {
  return & kTypeDescriptor_GGS_ltgt_sync_false ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                       class 'cPtr_ltgt_sync_true'                         *
//                                                                           *
//---------------------------------------------------------------------------*

cPtr_ltgt_sync_true::
cPtr_ltgt_sync_true (const GGS_location & argument_0,
                                const GGS_lstring & argument_1,
                                const GGS_basic_type & argument_2
                                COMMA_LOCATION_ARGS)
:cPtr_ltgt_sync_obj (argument_0 COMMA_THERE),
strategy (argument_1),
precision (argument_2) {
}

//---------------------------------------------------------------------------*

#ifndef DO_NOT_GENERATE_CHECKINGS
  cPtr_ltgt_sync_true * GGS_ltgt_sync_true::
  operator () (LOCATION_ARGS) const {
    macroValidObjectThere (mPointer, cPtr_ltgt_sync_true) ;
    return (cPtr_ltgt_sync_true *) mPointer ;
  }
#endif

//---------------------------------------------------------------------------*

bool cPtr_ltgt_sync_true::
isEqualToObject (const cPtr__AC_galgas_class * inOperand) const {
  bool equal = typeid (this) == typeid (inOperand) ;
  if (equal) {
    const cPtr_ltgt_sync_true * ptr = dynamic_cast <const cPtr_ltgt_sync_true *> (inOperand) ;
    macroValidPointer (ptr) ;
    equal = loc.operator_isEqual (ptr->loc).boolValue ()
         && strategy.operator_isEqual (ptr->strategy).boolValue ()
         && precision.operator_isEqual (ptr->precision).boolValue () ;
  }
  return equal ;
}

//---------------------------------------------------------------------------*

void cPtr_ltgt_sync_true::
appendForDescription (C_String & ioString,
                      const PMSInt32 inIndentation) const {
  ioString << "->@ltgt_sync_true:"
           << loc.reader_description (inIndentation + 1)
           << strategy.reader_description (inIndentation + 1)
           << precision.reader_description (inIndentation + 1) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                              Class message                                *
//                                                                           *
//---------------------------------------------------------------------------*

const char * cPtr_ltgt_sync_true::
instanceMessage (void) const {
  return "" ;
}

//---------------------------------------------------------------------------*

const char * cPtr_ltgt_sync_true::
_static_message (void) {
  return "" ;
}

//---------------------------------------------------------------------------*

C_galgas_class_inspector _gInspectorFor_ltgt_sync_true (& typeid (cPtr_ltgt_sync_true), & typeid (cPtr_ltgt_sync_obj), "") ;

//---------------------------------------------------------------------------*

AC_galgasClassRunTimeInformationEX * cPtr_ltgt_sync_true::galgasRTTI (void) const {
  return & gClassInfoFor__ltgt_sync_true ;
}

//---------------------------------------------------------------------------*

cPtr__AC_galgas_class * cPtr_ltgt_sync_true::makeClone (void) const {
  cPtr__AC_galgas_class * result = NULL ;
  macroMyNew (result, cPtr_ltgt_sync_true (loc, strategy, precision COMMA_HERE)) ;
  return result ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                    GALGAS class 'GGS_ltgt_sync_true'                      *
//                                                                           *
//---------------------------------------------------------------------------*

const C_galgas_type_descriptorEX kTypeDescriptor_GGS_ltgt_sync_true ("ltgt_sync_true", true, & kTypeDescriptor_GGS_ltgt_sync_obj) ;

//---------------------------------------------------------------------------*

GGS_ltgt_sync_true::
GGS_ltgt_sync_true (const cPtr__AC_galgas_class * inPointer) {
  macroAssignObject (mPointer, (cPtr__AC_galgas_class *) inPointer) ;
}

//---------------------------------------------------------------------------*

GGS_ltgt_sync_true::
GGS_ltgt_sync_true (cPtr__AC_galgas_class & inObject) {
  macroAssignObject (mPointer, & inObject) ;
}

//---------------------------------------------------------------------------*

//--- castFrom class method (implements cast expression)
GGS_ltgt_sync_true GGS_ltgt_sync_true::
castFrom (C_Compiler & inLexique,
           cPtr__AC_galgas_class * inPointer,
           const bool inUseKindOfClass,
           const GGS_location & inErrorLocation
           COMMA_LOCATION_ARGS) {
  GGS_ltgt_sync_true result ;
  if (inPointer != NULL) {
    macroValidPointer (inPointer) ;
    const bool ok = inUseKindOfClass
      ? (dynamic_cast <cPtr_ltgt_sync_true *> (inPointer) != NULL)
      : (typeid (cPtr_ltgt_sync_true) == typeid (*inPointer)) ;
    if (ok) {
      result = GGS_ltgt_sync_true (inPointer) ;
    }else{
      inErrorLocation.signalCastError (inLexique,
                                       & typeid (cPtr_ltgt_sync_true),
                                       inUseKindOfClass,
                                       inPointer->instanceMessage ()
                                       COMMA_THERE) ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_ltgt_sync_true GGS_ltgt_sync_true::
constructor_new (C_Compiler & /* inLexique */,
                 const GGS_location & argument_0,
                 const GGS_lstring & argument_1,
                 const GGS_basic_type & argument_2
                                COMMA_LOCATION_ARGS) {
  GGS_ltgt_sync_true result ;
  macroMyNew (result.mPointer, cPtr_ltgt_sync_true (argument_0,
                                argument_1,
                                argument_2 COMMA_THERE)) ;
  macroRetainObject (result.mPointer) ;
  return result ;
}

//---------------------------------------------------------------------------*

GGS_lstring  GGS_ltgt_sync_true::
reader_strategy (C_Compiler & /* inLexique */ COMMA_UNUSED_LOCATION_ARGS) const {
  GGS_lstring   result ;
  if (mPointer != NULL) {
    macroValidPointer (mPointer) ;
    MF_Assert (dynamic_cast <cPtr_ltgt_sync_true *> (mPointer) != NULL,
               "dynamic cast error", 0, 0) ;
    result = ((cPtr_ltgt_sync_true *) mPointer)->strategy ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_basic_type  GGS_ltgt_sync_true::
reader_precision (C_Compiler & /* inLexique */ COMMA_UNUSED_LOCATION_ARGS) const {
  GGS_basic_type   result ;
  if (mPointer != NULL) {
    macroValidPointer (mPointer) ;
    MF_Assert (dynamic_cast <cPtr_ltgt_sync_true *> (mPointer) != NULL,
               "dynamic cast error", 0, 0) ;
    result = ((cPtr_ltgt_sync_true *) mPointer)->precision ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

const char * GGS_ltgt_sync_true::actualTypeName (void) const {
  return "ltgt_sync_true" ;
}

//---------------------------------------------------------------------------*

C_galgasClassRunTimeInformationEX gClassInfoFor__ltgt_sync_true ("ltgt_sync_true", gClassInfoFor__ltgt_sync_obj, & kTypeDescriptor_GGS_ltgt_sync_true) ;

//---------------------------------------------------------------------------*

GGS_object GGS_ltgt_sync_true::reader_object (void) const {
  GGS_object result ;
  if (isBuilt ()) {
    GGS_ltgt_sync_true * p = NULL ;
    macroMyNew (p, GGS_ltgt_sync_true (*this)) ;
    result = GGS_object (p) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_ltgt_sync_true GGS_ltgt_sync_true::castFromObject (C_Compiler & inLexique,
                                   const GGS_object & inObject,
                                   const GGS_location & inErrorLocation
                                   COMMA_LOCATION_ARGS) {
  GGS_ltgt_sync_true result ;
  const GGS__root * embeddedObject = inObject.embeddedObject () ;
  if (NULL != embeddedObject) {
    const GGS_ltgt_sync_true * p = dynamic_cast <const GGS_ltgt_sync_true *> (embeddedObject) ;
    if (NULL != p) {
      result = * p ;
    }else{
      castFromObjectErrorSignaling (inLexique, inErrorLocation, & kTypeDescriptor_GGS_ltgt_sync_true, embeddedObject COMMA_THERE) ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*

const C_galgas_type_descriptorEX * GGS_ltgt_sync_true::typeDescriptor (void) const {
  return & kTypeDescriptor_GGS_ltgt_sync_true ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                      Element of list '@action_list'                       *
//                                                                           *
//---------------------------------------------------------------------------*

elementOf_GGS_action_list::
elementOf_GGS_action_list (const GGS_uint & argument_0,
                                const GGS_action_obj & argument_1):
order (argument_0),
actionobj (argument_1) {
}

//---------------------------------------------------------------------------*

bool elementOf_GGS_action_list::
isEqualToObject (const cSortedListElement * inOperand) const {
  bool equal = inOperand == this ;
  if (! equal) {
    const elementOf_GGS_action_list * ptr = dynamic_cast <const elementOf_GGS_action_list *> (inOperand) ;
    macroValidPointer (ptr) ;
    equal = order.operator_isEqual (ptr->order).boolValue ()
         && actionobj.operator_isEqual (ptr->actionobj).boolValue () ;
  }
  return equal ;
}

//---------------------------------------------------------------------------*

PMSInt32 elementOf_GGS_action_list::
compareForSorting (const cSortedListElement * inOperand) const {
  const elementOf_GGS_action_list * operand = (const elementOf_GGS_action_list *) inOperand ;
  PMSInt32 result = order.genericObjectCompare (operand->order) ;
  return result ;
}

//---------------------------------------------------------------------------*

void elementOf_GGS_action_list::
appendForDescription (C_String & ioString,
                      const PMSInt32 inIndentation) const {
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "|-" ;
  ioString << order.reader_description (inIndentation) ;
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "|-" ;
  ioString << actionobj.reader_description (inIndentation) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                        Sorted list '@action_list'                         *
//                                                                           *
//---------------------------------------------------------------------------*

const C_galgas_type_descriptorEX kTypeDescriptor_GGS_action_list ("action_list", false, NULL) ;

//---------------------------------------------------------------------------*

GGS_action_list::GGS_action_list (void): AC_GGS_sortedlist () { // Default Constructor
}

//---------------------------------------------------------------------------*

GGS_action_list::
GGS_action_list (const GGS_action_list & inSource): AC_GGS_sortedlist (inSource) {
}

//---------------------------------------------------------------------------*

GGS_bool GGS_action_list::
operator_isEqual (const GGS_action_list & inOperand) const {
  return GGS_bool (isBuilt () && inOperand.isBuilt (), isEqualToList (inOperand)) ;
}

//---------------------------------------------------------------------------*

GGS_bool GGS_action_list::
operator_isNotEqual (const GGS_action_list & inOperand) const {
  return GGS_bool (isBuilt () && inOperand.isBuilt (), ! isEqualToList (inOperand)) ;
}

//---------------------------------------------------------------------------*

void GGS_action_list::
internalAppendValues (const GGS_uint & argument_0,
                    const GGS_action_obj & argument_1) {
  cElement * newElement = (cElement *) NULL ;
  macroMyNew (newElement, cElement (argument_0,
                                argument_1)) ;
  internalAppendItem (newElement) ;
}

//---------------------------------------------------------------------------*

void GGS_action_list::
addAssign_operation (const GGS_uint & argument_0,
                                const GGS_action_obj & argument_1) {
  if (isBuilt ()) {
    insulateList () ;
    internalAppendValues (argument_0,
                                argument_1) ;
  }
}

//---------------------------------------------------------------------------*

GGS_action_list GGS_action_list::
operator_concat (const GGS_action_list & inOperand) const {
  GGS_action_list result = * this ;
  result.dotAssign_operation (inOperand) ;
  return result ;
}

//---------------------------------------------------------------------------*

void GGS_action_list::
dotAssign_operation (const GGS_action_list inOperand) {
  if (isBuilt () && inOperand.isBuilt ()) {
    if (count () == 0) {
      *this = inOperand ;
    }else{
      if (inOperand.count () > 0) {
        insulateList () ;
        elementOf_GGS_action_list * p = inOperand.firstObject () ;
        while (p != NULL) {
          macroValidPointer (p) ;
          GGS_uint  p_0 = p->order ;
          GGS_action_obj  p_1 = p->actionobj ;
          internalAppendValues (p_0, p_1) ;
          p = p->nextObject () ;
        }
      }
    }
  }
}

//---------------------------------------------------------------------------*

void GGS_action_list::
insulateList (void) {
  if (isShared ()) {
    cElement * ptr = firstObject () ;
    alloc () ;
    while (ptr != NULL) {
      macroValidPointer (ptr) ;
      internalAppendValues (ptr->order,
                                ptr->actionobj) ;
      ptr = ptr->nextObject () ;
    }
  }
}

//---------------------------------------------------------------------------*

GGS_action_list  GGS_action_list::
constructor_emptySortedList (void) {
  GGS_action_list result ;
  result.alloc () ;
  return result ;
}

//---------------------------------------------------------------------------*

GGS_action_list  GGS_action_list::
constructor_sortedListWithValue (const GGS_uint & argument_0,
                           const GGS_action_obj & argument_1) {
  GGS_action_list result ;
  result.alloc () ;
  result.addAssign_operation (argument_0, argument_1) ;
  return result ;
}

//---------------------------------------------------------------------------*

GGS_string GGS_action_list::
reader_description (const PMSInt32 inIndentation) const {
  return performDescription ("@action_list", inIndentation) ;
}

//---------------------------------------------------------------------------*

void GGS_action_list::
method_smallest (C_Compiler & inLexique,
                 GGS_uint & _out_0,
                 GGS_action_obj & _out_1
                 COMMA_LOCATION_ARGS) const {
  cElement * ptr = NULL ;
  if (isBuilt ()) {
    ptr = firstObject () ;
    if (ptr == NULL) {
      inLexique.onTheFlyRunTimeError ("'first' method invoked on an empty list" COMMA_THERE) ;
    }
  }
  if (ptr != NULL) {
    _out_0 = ptr->order ;
    _out_1 = ptr->actionobj ;
  }else{
    _out_0.drop () ;
    _out_1.drop () ;
  }
}

//---------------------------------------------------------------------------*

void GGS_action_list::
method_greatest (C_Compiler & inLexique,
             GGS_uint & _out_0,
             GGS_action_obj & _out_1
             COMMA_LOCATION_ARGS) const {
  cElement * ptr = NULL ;
  if (isBuilt ()) {
    ptr = lastObject () ;
    if (ptr == NULL) {
      inLexique.onTheFlyRunTimeError ("'greatest' method invoked on an empty list" COMMA_THERE) ;
    }
  }
  if (ptr != NULL) {
    _out_0 = ptr->order ;
    _out_1 = ptr->actionobj ;
  }else{
    _out_0.drop () ;
    _out_1.drop () ;
  }
}

//---------------------------------------------------------------------------*

void GGS_action_list::
modifier_popSmallest (C_Compiler & inLexique,
                 GGS_uint & _out_0,
                 GGS_action_obj & _out_1
                 COMMA_LOCATION_ARGS) {
  cElement * ptr = NULL ;
  if (isBuilt ()) {
    ptr = firstObject () ;
    if (ptr == NULL) {
      inLexique.onTheFlyRunTimeError ("'popSmallest' modifier invoked on an empty list" COMMA_THERE) ;
    }
  }
  if (ptr != NULL) {
    _out_0 = ptr->order ;
    _out_1 = ptr->actionobj ;
    insulateList () ;
    _internalRemoveSmallest () ;
  }else{
    _out_0.drop () ;
    _out_1.drop () ;
  }
}

//---------------------------------------------------------------------------*

void GGS_action_list::
modifier_popGreatest (C_Compiler & inLexique,
                GGS_uint & _out_0,
                GGS_action_obj & _out_1
                COMMA_LOCATION_ARGS) {
  cElement * ptr = NULL ;
  if (isBuilt ()) {
    ptr = lastObject () ;
    if (ptr == NULL) {
      inLexique.onTheFlyRunTimeError ("'popGreatest' modifier invoked on an empty list" COMMA_THERE) ;
    }
  }
  if (ptr != NULL) {
    _out_0 = ptr->order ;
    _out_1 = ptr->actionobj ;
    insulateList () ;
    _internalRemoveGreatest () ;
  }else{
    _out_0.drop () ;
    _out_1.drop () ;
  }
}

//---------------------------------------------------------------------------*

/* const */ GGS_uint  & GGS_action_list::cEnumerator::_order (LOCATION_ARGS) const {
  macroValidPointerThere (mCurrentEnumeratedObject) ;
  return ((/* const */ cElement *) mCurrentEnumeratedObject)->order ;
}

//---------------------------------------------------------------------------*

/* const */ GGS_action_obj  & GGS_action_list::cEnumerator::_actionobj (LOCATION_ARGS) const {
  macroValidPointerThere (mCurrentEnumeratedObject) ;
  return ((/* const */ cElement *) mCurrentEnumeratedObject)->actionobj ;
}

//---------------------------------------------------------------------------*

GGS_object GGS_action_list::reader_object (void) const {
  GGS_object result ;
  if (isBuilt ()) {
    GGS_action_list * p = NULL ;
    macroMyNew (p, GGS_action_list (*this)) ;
    result = GGS_object (p) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_action_list GGS_action_list::castFromObject (C_Compiler & inLexique,
                                   const GGS_object & inObject,
                                   const GGS_location & inErrorLocation
                                   COMMA_LOCATION_ARGS) {
  GGS_action_list result ;
  const GGS__root * embeddedObject = inObject.embeddedObject () ;
  if (NULL != embeddedObject) {
    const GGS_action_list * p = dynamic_cast <const GGS_action_list *> (embeddedObject) ;
    if (NULL != p) {
      result = * p ;
    }else{
      castFromObjectErrorSignaling (inLexique, inErrorLocation, & kTypeDescriptor_GGS_action_list, embeddedObject COMMA_THERE) ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*

const C_galgas_type_descriptorEX * GGS_action_list::typeDescriptor (void) const {
  return & kTypeDescriptor_GGS_action_list ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                       class 'cPtr_adjustable_obj'                         *
//                                                                           *
//---------------------------------------------------------------------------*

cPtr_adjustable_obj::
cPtr_adjustable_obj (const GGS_lstring & argument_0,
                                const GGS_location & argument_1
                                COMMA_LOCATION_ARGS)
:cPtr_oil_obj (argument_0 COMMA_THERE),
location (argument_1) {
}

//---------------------------------------------------------------------------*

#ifndef DO_NOT_GENERATE_CHECKINGS
  cPtr_adjustable_obj * GGS_adjustable_obj::
  operator () (LOCATION_ARGS) const {
    macroValidObjectThere (mPointer, cPtr_adjustable_obj) ;
    return (cPtr_adjustable_obj *) mPointer ;
  }
#endif

//---------------------------------------------------------------------------*

void cPtr_adjustable_obj::
appendForDescription (C_String & ioString,
                      const PMSInt32 inIndentation) const {
  ioString << "->@adjustable_obj:"
           << desc.reader_description (inIndentation + 1)
           << location.reader_description (inIndentation + 1) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                              Class message                                *
//                                                                           *
//---------------------------------------------------------------------------*

const char * cPtr_adjustable_obj::
instanceMessage (void) const {
  return "" ;
}

//---------------------------------------------------------------------------*

const char * cPtr_adjustable_obj::
_static_message (void) {
  return "" ;
}

//---------------------------------------------------------------------------*

C_galgas_class_inspector _gInspectorFor_adjustable_obj (& typeid (cPtr_adjustable_obj), & typeid (cPtr_oil_obj), "") ;

//---------------------------------------------------------------------------*

AC_galgasClassRunTimeInformationEX * cPtr_adjustable_obj::galgasRTTI (void) const {
  return & gClassInfoFor__adjustable_obj ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                    GALGAS class 'GGS_adjustable_obj'                      *
//                                                                           *
//---------------------------------------------------------------------------*

const C_galgas_type_descriptorEX kTypeDescriptor_GGS_adjustable_obj ("adjustable_obj", true, & kTypeDescriptor_GGS_oil_obj) ;

//---------------------------------------------------------------------------*

GGS_adjustable_obj::
GGS_adjustable_obj (const cPtr__AC_galgas_class * inPointer) {
  macroAssignObject (mPointer, (cPtr__AC_galgas_class *) inPointer) ;
}

//---------------------------------------------------------------------------*

GGS_adjustable_obj::
GGS_adjustable_obj (cPtr__AC_galgas_class & inObject) {
  macroAssignObject (mPointer, & inObject) ;
}

//---------------------------------------------------------------------------*

//--- castFrom class method (implements cast expression)
GGS_adjustable_obj GGS_adjustable_obj::
castFrom (C_Compiler & inLexique,
           cPtr__AC_galgas_class * inPointer,
           const bool inUseKindOfClass,
           const GGS_location & inErrorLocation
           COMMA_LOCATION_ARGS) {
  GGS_adjustable_obj result ;
  if (inPointer != NULL) {
    macroValidPointer (inPointer) ;
    const bool ok = inUseKindOfClass
      ? (dynamic_cast <cPtr_adjustable_obj *> (inPointer) != NULL)
      : (typeid (cPtr_adjustable_obj) == typeid (*inPointer)) ;
    if (ok) {
      result = GGS_adjustable_obj (inPointer) ;
    }else{
      inErrorLocation.signalCastError (inLexique,
                                       & typeid (cPtr_adjustable_obj),
                                       inUseKindOfClass,
                                       inPointer->instanceMessage ()
                                       COMMA_THERE) ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_location  GGS_adjustable_obj::
reader_location (C_Compiler & /* inLexique */ COMMA_UNUSED_LOCATION_ARGS) const {
  GGS_location   result ;
  if (mPointer != NULL) {
    macroValidPointer (mPointer) ;
    MF_Assert (dynamic_cast <cPtr_adjustable_obj *> (mPointer) != NULL,
               "dynamic cast error", 0, 0) ;
    result = ((cPtr_adjustable_obj *) mPointer)->location ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

const char * GGS_adjustable_obj::actualTypeName (void) const {
  return "adjustable_obj" ;
}

//---------------------------------------------------------------------------*

C_galgasClassRunTimeInformationEX gClassInfoFor__adjustable_obj ("adjustable_obj", gClassInfoFor__oil_obj, & kTypeDescriptor_GGS_adjustable_obj) ;

//---------------------------------------------------------------------------*

GGS_object GGS_adjustable_obj::reader_object (void) const {
  GGS_object result ;
  if (isBuilt ()) {
    GGS_adjustable_obj * p = NULL ;
    macroMyNew (p, GGS_adjustable_obj (*this)) ;
    result = GGS_object (p) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_adjustable_obj GGS_adjustable_obj::castFromObject (C_Compiler & inLexique,
                                   const GGS_object & inObject,
                                   const GGS_location & inErrorLocation
                                   COMMA_LOCATION_ARGS) {
  GGS_adjustable_obj result ;
  const GGS__root * embeddedObject = inObject.embeddedObject () ;
  if (NULL != embeddedObject) {
    const GGS_adjustable_obj * p = dynamic_cast <const GGS_adjustable_obj *> (embeddedObject) ;
    if (NULL != p) {
      result = * p ;
    }else{
      castFromObjectErrorSignaling (inLexique, inErrorLocation, & kTypeDescriptor_GGS_adjustable_obj, embeddedObject COMMA_THERE) ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*

const C_galgas_type_descriptorEX * GGS_adjustable_obj::typeDescriptor (void) const {
  return & kTypeDescriptor_GGS_adjustable_obj ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                       class 'cPtr_adjustable_void'                        *
//                                                                           *
//---------------------------------------------------------------------------*

cPtr_adjustable_void::
cPtr_adjustable_void (const GGS_lstring & argument_0,
                                const GGS_location & argument_1
                                COMMA_LOCATION_ARGS)
:cPtr_adjustable_obj (argument_0, argument_1 COMMA_THERE) {
}

//---------------------------------------------------------------------------*

#ifndef DO_NOT_GENERATE_CHECKINGS
  cPtr_adjustable_void * GGS_adjustable_void::
  operator () (LOCATION_ARGS) const {
    macroValidObjectThere (mPointer, cPtr_adjustable_void) ;
    return (cPtr_adjustable_void *) mPointer ;
  }
#endif

//---------------------------------------------------------------------------*

bool cPtr_adjustable_void::
isEqualToObject (const cPtr__AC_galgas_class * inOperand) const {
  bool equal = typeid (this) == typeid (inOperand) ;
  if (equal) {
    const cPtr_adjustable_void * ptr = dynamic_cast <const cPtr_adjustable_void *> (inOperand) ;
    macroValidPointer (ptr) ;
    equal = desc.operator_isEqual (ptr->desc).boolValue ()
         && location.operator_isEqual (ptr->location).boolValue () ;
  }
  return equal ;
}

//---------------------------------------------------------------------------*

void cPtr_adjustable_void::
appendForDescription (C_String & ioString,
                      const PMSInt32 inIndentation) const {
  ioString << "->@adjustable_void:"
           << desc.reader_description (inIndentation + 1)
           << location.reader_description (inIndentation + 1) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                              Class message                                *
//                                                                           *
//---------------------------------------------------------------------------*

const char * cPtr_adjustable_void::
instanceMessage (void) const {
  return "" ;
}

//---------------------------------------------------------------------------*

const char * cPtr_adjustable_void::
_static_message (void) {
  return "" ;
}

//---------------------------------------------------------------------------*

C_galgas_class_inspector _gInspectorFor_adjustable_void (& typeid (cPtr_adjustable_void), & typeid (cPtr_adjustable_obj), "") ;

//---------------------------------------------------------------------------*

AC_galgasClassRunTimeInformationEX * cPtr_adjustable_void::galgasRTTI (void) const {
  return & gClassInfoFor__adjustable_void ;
}

//---------------------------------------------------------------------------*

cPtr__AC_galgas_class * cPtr_adjustable_void::makeClone (void) const {
  cPtr__AC_galgas_class * result = NULL ;
  macroMyNew (result, cPtr_adjustable_void (desc, location COMMA_HERE)) ;
  return result ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                    GALGAS class 'GGS_adjustable_void'                     *
//                                                                           *
//---------------------------------------------------------------------------*

const C_galgas_type_descriptorEX kTypeDescriptor_GGS_adjustable_void ("adjustable_void", true, & kTypeDescriptor_GGS_adjustable_obj) ;

//---------------------------------------------------------------------------*

GGS_adjustable_void::
GGS_adjustable_void (const cPtr__AC_galgas_class * inPointer) {
  macroAssignObject (mPointer, (cPtr__AC_galgas_class *) inPointer) ;
}

//---------------------------------------------------------------------------*

GGS_adjustable_void::
GGS_adjustable_void (cPtr__AC_galgas_class & inObject) {
  macroAssignObject (mPointer, & inObject) ;
}

//---------------------------------------------------------------------------*

//--- castFrom class method (implements cast expression)
GGS_adjustable_void GGS_adjustable_void::
castFrom (C_Compiler & inLexique,
           cPtr__AC_galgas_class * inPointer,
           const bool inUseKindOfClass,
           const GGS_location & inErrorLocation
           COMMA_LOCATION_ARGS) {
  GGS_adjustable_void result ;
  if (inPointer != NULL) {
    macroValidPointer (inPointer) ;
    const bool ok = inUseKindOfClass
      ? (dynamic_cast <cPtr_adjustable_void *> (inPointer) != NULL)
      : (typeid (cPtr_adjustable_void) == typeid (*inPointer)) ;
    if (ok) {
      result = GGS_adjustable_void (inPointer) ;
    }else{
      inErrorLocation.signalCastError (inLexique,
                                       & typeid (cPtr_adjustable_void),
                                       inUseKindOfClass,
                                       inPointer->instanceMessage ()
                                       COMMA_THERE) ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_adjustable_void GGS_adjustable_void::
constructor_new (C_Compiler & /* inLexique */,
                 const GGS_lstring & argument_0,
                 const GGS_location & argument_1
                                COMMA_LOCATION_ARGS) {
  GGS_adjustable_void result ;
  macroMyNew (result.mPointer, cPtr_adjustable_void (argument_0,
                                argument_1 COMMA_THERE)) ;
  macroRetainObject (result.mPointer) ;
  return result ;
}

//---------------------------------------------------------------------------*

const char * GGS_adjustable_void::actualTypeName (void) const {
  return "adjustable_void" ;
}

//---------------------------------------------------------------------------*

C_galgasClassRunTimeInformationEX gClassInfoFor__adjustable_void ("adjustable_void", gClassInfoFor__adjustable_obj, & kTypeDescriptor_GGS_adjustable_void) ;

//---------------------------------------------------------------------------*

GGS_object GGS_adjustable_void::reader_object (void) const {
  GGS_object result ;
  if (isBuilt ()) {
    GGS_adjustable_void * p = NULL ;
    macroMyNew (p, GGS_adjustable_void (*this)) ;
    result = GGS_object (p) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_adjustable_void GGS_adjustable_void::castFromObject (C_Compiler & inLexique,
                                   const GGS_object & inObject,
                                   const GGS_location & inErrorLocation
                                   COMMA_LOCATION_ARGS) {
  GGS_adjustable_void result ;
  const GGS__root * embeddedObject = inObject.embeddedObject () ;
  if (NULL != embeddedObject) {
    const GGS_adjustable_void * p = dynamic_cast <const GGS_adjustable_void *> (embeddedObject) ;
    if (NULL != p) {
      result = * p ;
    }else{
      castFromObjectErrorSignaling (inLexique, inErrorLocation, & kTypeDescriptor_GGS_adjustable_void, embeddedObject COMMA_THERE) ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*

const C_galgas_type_descriptorEX * GGS_adjustable_void::typeDescriptor (void) const {
  return & kTypeDescriptor_GGS_adjustable_void ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                      class 'cPtr_adjustable_false'                        *
//                                                                           *
//---------------------------------------------------------------------------*

cPtr_adjustable_false::
cPtr_adjustable_false (const GGS_lstring & argument_0,
                                const GGS_location & argument_1
                                COMMA_LOCATION_ARGS)
:cPtr_adjustable_obj (argument_0, argument_1 COMMA_THERE) {
}

//---------------------------------------------------------------------------*

#ifndef DO_NOT_GENERATE_CHECKINGS
  cPtr_adjustable_false * GGS_adjustable_false::
  operator () (LOCATION_ARGS) const {
    macroValidObjectThere (mPointer, cPtr_adjustable_false) ;
    return (cPtr_adjustable_false *) mPointer ;
  }
#endif

//---------------------------------------------------------------------------*

bool cPtr_adjustable_false::
isEqualToObject (const cPtr__AC_galgas_class * inOperand) const {
  bool equal = typeid (this) == typeid (inOperand) ;
  if (equal) {
    const cPtr_adjustable_false * ptr = dynamic_cast <const cPtr_adjustable_false *> (inOperand) ;
    macroValidPointer (ptr) ;
    equal = desc.operator_isEqual (ptr->desc).boolValue ()
         && location.operator_isEqual (ptr->location).boolValue () ;
  }
  return equal ;
}

//---------------------------------------------------------------------------*

void cPtr_adjustable_false::
appendForDescription (C_String & ioString,
                      const PMSInt32 inIndentation) const {
  ioString << "->@adjustable_false:"
           << desc.reader_description (inIndentation + 1)
           << location.reader_description (inIndentation + 1) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                              Class message                                *
//                                                                           *
//---------------------------------------------------------------------------*

const char * cPtr_adjustable_false::
instanceMessage (void) const {
  return "" ;
}

//---------------------------------------------------------------------------*

const char * cPtr_adjustable_false::
_static_message (void) {
  return "" ;
}

//---------------------------------------------------------------------------*

C_galgas_class_inspector _gInspectorFor_adjustable_false (& typeid (cPtr_adjustable_false), & typeid (cPtr_adjustable_obj), "") ;

//---------------------------------------------------------------------------*

AC_galgasClassRunTimeInformationEX * cPtr_adjustable_false::galgasRTTI (void) const {
  return & gClassInfoFor__adjustable_false ;
}

//---------------------------------------------------------------------------*

cPtr__AC_galgas_class * cPtr_adjustable_false::makeClone (void) const {
  cPtr__AC_galgas_class * result = NULL ;
  macroMyNew (result, cPtr_adjustable_false (desc, location COMMA_HERE)) ;
  return result ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                   GALGAS class 'GGS_adjustable_false'                     *
//                                                                           *
//---------------------------------------------------------------------------*

const C_galgas_type_descriptorEX kTypeDescriptor_GGS_adjustable_false ("adjustable_false", true, & kTypeDescriptor_GGS_adjustable_obj) ;

//---------------------------------------------------------------------------*

GGS_adjustable_false::
GGS_adjustable_false (const cPtr__AC_galgas_class * inPointer) {
  macroAssignObject (mPointer, (cPtr__AC_galgas_class *) inPointer) ;
}

//---------------------------------------------------------------------------*

GGS_adjustable_false::
GGS_adjustable_false (cPtr__AC_galgas_class & inObject) {
  macroAssignObject (mPointer, & inObject) ;
}

//---------------------------------------------------------------------------*

//--- castFrom class method (implements cast expression)
GGS_adjustable_false GGS_adjustable_false::
castFrom (C_Compiler & inLexique,
           cPtr__AC_galgas_class * inPointer,
           const bool inUseKindOfClass,
           const GGS_location & inErrorLocation
           COMMA_LOCATION_ARGS) {
  GGS_adjustable_false result ;
  if (inPointer != NULL) {
    macroValidPointer (inPointer) ;
    const bool ok = inUseKindOfClass
      ? (dynamic_cast <cPtr_adjustable_false *> (inPointer) != NULL)
      : (typeid (cPtr_adjustable_false) == typeid (*inPointer)) ;
    if (ok) {
      result = GGS_adjustable_false (inPointer) ;
    }else{
      inErrorLocation.signalCastError (inLexique,
                                       & typeid (cPtr_adjustable_false),
                                       inUseKindOfClass,
                                       inPointer->instanceMessage ()
                                       COMMA_THERE) ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_adjustable_false GGS_adjustable_false::
constructor_new (C_Compiler & /* inLexique */,
                 const GGS_lstring & argument_0,
                 const GGS_location & argument_1
                                COMMA_LOCATION_ARGS) {
  GGS_adjustable_false result ;
  macroMyNew (result.mPointer, cPtr_adjustable_false (argument_0,
                                argument_1 COMMA_THERE)) ;
  macroRetainObject (result.mPointer) ;
  return result ;
}

//---------------------------------------------------------------------------*

const char * GGS_adjustable_false::actualTypeName (void) const {
  return "adjustable_false" ;
}

//---------------------------------------------------------------------------*

C_galgasClassRunTimeInformationEX gClassInfoFor__adjustable_false ("adjustable_false", gClassInfoFor__adjustable_obj, & kTypeDescriptor_GGS_adjustable_false) ;

//---------------------------------------------------------------------------*

GGS_object GGS_adjustable_false::reader_object (void) const {
  GGS_object result ;
  if (isBuilt ()) {
    GGS_adjustable_false * p = NULL ;
    macroMyNew (p, GGS_adjustable_false (*this)) ;
    result = GGS_object (p) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_adjustable_false GGS_adjustable_false::castFromObject (C_Compiler & inLexique,
                                   const GGS_object & inObject,
                                   const GGS_location & inErrorLocation
                                   COMMA_LOCATION_ARGS) {
  GGS_adjustable_false result ;
  const GGS__root * embeddedObject = inObject.embeddedObject () ;
  if (NULL != embeddedObject) {
    const GGS_adjustable_false * p = dynamic_cast <const GGS_adjustable_false *> (embeddedObject) ;
    if (NULL != p) {
      result = * p ;
    }else{
      castFromObjectErrorSignaling (inLexique, inErrorLocation, & kTypeDescriptor_GGS_adjustable_false, embeddedObject COMMA_THERE) ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*

const C_galgas_type_descriptorEX * GGS_adjustable_false::typeDescriptor (void) const {
  return & kTypeDescriptor_GGS_adjustable_false ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                       class 'cPtr_adjustable_true'                        *
//                                                                           *
//---------------------------------------------------------------------------*

cPtr_adjustable_true::
cPtr_adjustable_true (const GGS_lstring & argument_0,
                                const GGS_location & argument_1,
                                const GGS_basic_type & argument_2,
                                const GGS_basic_type & argument_3
                                COMMA_LOCATION_ARGS)
:cPtr_adjustable_obj (argument_0, argument_1 COMMA_THERE),
max_retard (argument_2),
max_advance (argument_3) {
}

//---------------------------------------------------------------------------*

#ifndef DO_NOT_GENERATE_CHECKINGS
  cPtr_adjustable_true * GGS_adjustable_true::
  operator () (LOCATION_ARGS) const {
    macroValidObjectThere (mPointer, cPtr_adjustable_true) ;
    return (cPtr_adjustable_true *) mPointer ;
  }
#endif

//---------------------------------------------------------------------------*

bool cPtr_adjustable_true::
isEqualToObject (const cPtr__AC_galgas_class * inOperand) const {
  bool equal = typeid (this) == typeid (inOperand) ;
  if (equal) {
    const cPtr_adjustable_true * ptr = dynamic_cast <const cPtr_adjustable_true *> (inOperand) ;
    macroValidPointer (ptr) ;
    equal = desc.operator_isEqual (ptr->desc).boolValue ()
         && location.operator_isEqual (ptr->location).boolValue ()
         && max_retard.operator_isEqual (ptr->max_retard).boolValue ()
         && max_advance.operator_isEqual (ptr->max_advance).boolValue () ;
  }
  return equal ;
}

//---------------------------------------------------------------------------*

void cPtr_adjustable_true::
appendForDescription (C_String & ioString,
                      const PMSInt32 inIndentation) const {
  ioString << "->@adjustable_true:"
           << desc.reader_description (inIndentation + 1)
           << location.reader_description (inIndentation + 1)
           << max_retard.reader_description (inIndentation + 1)
           << max_advance.reader_description (inIndentation + 1) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                              Class message                                *
//                                                                           *
//---------------------------------------------------------------------------*

const char * cPtr_adjustable_true::
instanceMessage (void) const {
  return "" ;
}

//---------------------------------------------------------------------------*

const char * cPtr_adjustable_true::
_static_message (void) {
  return "" ;
}

//---------------------------------------------------------------------------*

C_galgas_class_inspector _gInspectorFor_adjustable_true (& typeid (cPtr_adjustable_true), & typeid (cPtr_adjustable_obj), "") ;

//---------------------------------------------------------------------------*

AC_galgasClassRunTimeInformationEX * cPtr_adjustable_true::galgasRTTI (void) const {
  return & gClassInfoFor__adjustable_true ;
}

//---------------------------------------------------------------------------*

cPtr__AC_galgas_class * cPtr_adjustable_true::makeClone (void) const {
  cPtr__AC_galgas_class * result = NULL ;
  macroMyNew (result, cPtr_adjustable_true (desc, location, max_retard, max_advance COMMA_HERE)) ;
  return result ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                    GALGAS class 'GGS_adjustable_true'                     *
//                                                                           *
//---------------------------------------------------------------------------*

const C_galgas_type_descriptorEX kTypeDescriptor_GGS_adjustable_true ("adjustable_true", true, & kTypeDescriptor_GGS_adjustable_obj) ;

//---------------------------------------------------------------------------*

GGS_adjustable_true::
GGS_adjustable_true (const cPtr__AC_galgas_class * inPointer) {
  macroAssignObject (mPointer, (cPtr__AC_galgas_class *) inPointer) ;
}

//---------------------------------------------------------------------------*

GGS_adjustable_true::
GGS_adjustable_true (cPtr__AC_galgas_class & inObject) {
  macroAssignObject (mPointer, & inObject) ;
}

//---------------------------------------------------------------------------*

//--- castFrom class method (implements cast expression)
GGS_adjustable_true GGS_adjustable_true::
castFrom (C_Compiler & inLexique,
           cPtr__AC_galgas_class * inPointer,
           const bool inUseKindOfClass,
           const GGS_location & inErrorLocation
           COMMA_LOCATION_ARGS) {
  GGS_adjustable_true result ;
  if (inPointer != NULL) {
    macroValidPointer (inPointer) ;
    const bool ok = inUseKindOfClass
      ? (dynamic_cast <cPtr_adjustable_true *> (inPointer) != NULL)
      : (typeid (cPtr_adjustable_true) == typeid (*inPointer)) ;
    if (ok) {
      result = GGS_adjustable_true (inPointer) ;
    }else{
      inErrorLocation.signalCastError (inLexique,
                                       & typeid (cPtr_adjustable_true),
                                       inUseKindOfClass,
                                       inPointer->instanceMessage ()
                                       COMMA_THERE) ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_adjustable_true GGS_adjustable_true::
constructor_new (C_Compiler & /* inLexique */,
                 const GGS_lstring & argument_0,
                 const GGS_location & argument_1,
                 const GGS_basic_type & argument_2,
                 const GGS_basic_type & argument_3
                                COMMA_LOCATION_ARGS) {
  GGS_adjustable_true result ;
  macroMyNew (result.mPointer, cPtr_adjustable_true (argument_0,
                                argument_1,
                                argument_2,
                                argument_3 COMMA_THERE)) ;
  macroRetainObject (result.mPointer) ;
  return result ;
}

//---------------------------------------------------------------------------*

GGS_basic_type  GGS_adjustable_true::
reader_max_retard (C_Compiler & /* inLexique */ COMMA_UNUSED_LOCATION_ARGS) const {
  GGS_basic_type   result ;
  if (mPointer != NULL) {
    macroValidPointer (mPointer) ;
    MF_Assert (dynamic_cast <cPtr_adjustable_true *> (mPointer) != NULL,
               "dynamic cast error", 0, 0) ;
    result = ((cPtr_adjustable_true *) mPointer)->max_retard ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_basic_type  GGS_adjustable_true::
reader_max_advance (C_Compiler & /* inLexique */ COMMA_UNUSED_LOCATION_ARGS) const {
  GGS_basic_type   result ;
  if (mPointer != NULL) {
    macroValidPointer (mPointer) ;
    MF_Assert (dynamic_cast <cPtr_adjustable_true *> (mPointer) != NULL,
               "dynamic cast error", 0, 0) ;
    result = ((cPtr_adjustable_true *) mPointer)->max_advance ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

const char * GGS_adjustable_true::actualTypeName (void) const {
  return "adjustable_true" ;
}

//---------------------------------------------------------------------------*

C_galgasClassRunTimeInformationEX gClassInfoFor__adjustable_true ("adjustable_true", gClassInfoFor__adjustable_obj, & kTypeDescriptor_GGS_adjustable_true) ;

//---------------------------------------------------------------------------*

GGS_object GGS_adjustable_true::reader_object (void) const {
  GGS_object result ;
  if (isBuilt ()) {
    GGS_adjustable_true * p = NULL ;
    macroMyNew (p, GGS_adjustable_true (*this)) ;
    result = GGS_object (p) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_adjustable_true GGS_adjustable_true::castFromObject (C_Compiler & inLexique,
                                   const GGS_object & inObject,
                                   const GGS_location & inErrorLocation
                                   COMMA_LOCATION_ARGS) {
  GGS_adjustable_true result ;
  const GGS__root * embeddedObject = inObject.embeddedObject () ;
  if (NULL != embeddedObject) {
    const GGS_adjustable_true * p = dynamic_cast <const GGS_adjustable_true *> (embeddedObject) ;
    if (NULL != p) {
      result = * p ;
    }else{
      castFromObjectErrorSignaling (inLexique, inErrorLocation, & kTypeDescriptor_GGS_adjustable_true, embeddedObject COMMA_THERE) ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*

const C_galgas_type_descriptorEX * GGS_adjustable_true::typeDescriptor (void) const {
  return & kTypeDescriptor_GGS_adjustable_true ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                Implementation of routine "set_adjustable"                 *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_set_adjustable (C_Compiler & inLexique,
                                GGS_adjustable_obj  & var_cas_adj,
                                GGS_adjustable_obj   var_cas_new_adj
                        COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_set_adjustable at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  { const GGS_adjustable_obj _var_2787 = var_cas_adj ; // CAST instruction
    if (_var_2787.getPtr () != NULL) {
      macroValidPointer (_var_2787.getPtr ()) ;
      if (typeid (cPtr_adjustable_void) == typeid (* (_var_2787.getPtr ()))) {
        var_cas_adj = var_cas_new_adj ;
      }else{
        var_cas_new_adj.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (104)).reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("Redefinition of ADJUSTABLE") COMMA_SOURCE_FILE_AT_LINE (105)) ;
        var_cas_adj.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (105)).reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("was defined here") COMMA_SOURCE_FILE_AT_LINE (106)) ;
      }
    }
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_set_adjustable\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//                      class 'cPtr_expiry_point_obj'                        *
//                                                                           *
//---------------------------------------------------------------------------*

cPtr_expiry_point_obj::
cPtr_expiry_point_obj (const GGS_lstring & argument_0,
                                const GGS_basic_type & argument_1,
                                const GGS_lstring & argument_2,
                                const GGS_adjustable_obj & argument_3,
                                const GGS_action_list & argument_4
                                COMMA_LOCATION_ARGS)
:cPtr_oil_obj (argument_0 COMMA_THERE),
offset (argument_1),
name (argument_2),
adjust (argument_3),
actions (argument_4) {
}

//---------------------------------------------------------------------------*

#ifndef DO_NOT_GENERATE_CHECKINGS
  cPtr_expiry_point_obj * GGS_expiry_point_obj::
  operator () (LOCATION_ARGS) const {
    macroValidObjectThere (mPointer, cPtr_expiry_point_obj) ;
    return (cPtr_expiry_point_obj *) mPointer ;
  }
#endif

//---------------------------------------------------------------------------*

bool cPtr_expiry_point_obj::
isEqualToObject (const cPtr__AC_galgas_class * inOperand) const {
  bool equal = typeid (this) == typeid (inOperand) ;
  if (equal) {
    const cPtr_expiry_point_obj * ptr = dynamic_cast <const cPtr_expiry_point_obj *> (inOperand) ;
    macroValidPointer (ptr) ;
    equal = desc.operator_isEqual (ptr->desc).boolValue ()
         && offset.operator_isEqual (ptr->offset).boolValue ()
         && name.operator_isEqual (ptr->name).boolValue ()
         && adjust.operator_isEqual (ptr->adjust).boolValue ()
         && actions.operator_isEqual (ptr->actions).boolValue () ;
  }
  return equal ;
}

//---------------------------------------------------------------------------*

void cPtr_expiry_point_obj::
appendForDescription (C_String & ioString,
                      const PMSInt32 inIndentation) const {
  ioString << "->@expiry_point_obj:"
           << desc.reader_description (inIndentation + 1)
           << offset.reader_description (inIndentation + 1)
           << name.reader_description (inIndentation + 1)
           << adjust.reader_description (inIndentation + 1)
           << actions.reader_description (inIndentation + 1) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                              Class message                                *
//                                                                           *
//---------------------------------------------------------------------------*

const char * cPtr_expiry_point_obj::
instanceMessage (void) const {
  return "" ;
}

//---------------------------------------------------------------------------*

const char * cPtr_expiry_point_obj::
_static_message (void) {
  return "" ;
}

//---------------------------------------------------------------------------*

C_galgas_class_inspector _gInspectorFor_expiry_point_obj (& typeid (cPtr_expiry_point_obj), & typeid (cPtr_oil_obj), "") ;

//---------------------------------------------------------------------------*

AC_galgasClassRunTimeInformationEX * cPtr_expiry_point_obj::galgasRTTI (void) const {
  return & gClassInfoFor__expiry_point_obj ;
}

//---------------------------------------------------------------------------*

cPtr__AC_galgas_class * cPtr_expiry_point_obj::makeClone (void) const {
  cPtr__AC_galgas_class * result = NULL ;
  macroMyNew (result, cPtr_expiry_point_obj (desc, offset, name, adjust, actions COMMA_HERE)) ;
  return result ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                   GALGAS class 'GGS_expiry_point_obj'                     *
//                                                                           *
//---------------------------------------------------------------------------*

const C_galgas_type_descriptorEX kTypeDescriptor_GGS_expiry_point_obj ("expiry_point_obj", true, & kTypeDescriptor_GGS_oil_obj) ;

//---------------------------------------------------------------------------*

GGS_expiry_point_obj::
GGS_expiry_point_obj (const cPtr__AC_galgas_class * inPointer) {
  macroAssignObject (mPointer, (cPtr__AC_galgas_class *) inPointer) ;
}

//---------------------------------------------------------------------------*

GGS_expiry_point_obj::
GGS_expiry_point_obj (cPtr__AC_galgas_class & inObject) {
  macroAssignObject (mPointer, & inObject) ;
}

//---------------------------------------------------------------------------*

//--- castFrom class method (implements cast expression)
GGS_expiry_point_obj GGS_expiry_point_obj::
castFrom (C_Compiler & inLexique,
           cPtr__AC_galgas_class * inPointer,
           const bool inUseKindOfClass,
           const GGS_location & inErrorLocation
           COMMA_LOCATION_ARGS) {
  GGS_expiry_point_obj result ;
  if (inPointer != NULL) {
    macroValidPointer (inPointer) ;
    const bool ok = inUseKindOfClass
      ? (dynamic_cast <cPtr_expiry_point_obj *> (inPointer) != NULL)
      : (typeid (cPtr_expiry_point_obj) == typeid (*inPointer)) ;
    if (ok) {
      result = GGS_expiry_point_obj (inPointer) ;
    }else{
      inErrorLocation.signalCastError (inLexique,
                                       & typeid (cPtr_expiry_point_obj),
                                       inUseKindOfClass,
                                       inPointer->instanceMessage ()
                                       COMMA_THERE) ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_expiry_point_obj GGS_expiry_point_obj::
constructor_new (C_Compiler & /* inLexique */,
                 const GGS_lstring & argument_0,
                 const GGS_basic_type & argument_1,
                 const GGS_lstring & argument_2,
                 const GGS_adjustable_obj & argument_3,
                 const GGS_action_list & argument_4
                                COMMA_LOCATION_ARGS) {
  GGS_expiry_point_obj result ;
  macroMyNew (result.mPointer, cPtr_expiry_point_obj (argument_0,
                                argument_1,
                                argument_2,
                                argument_3,
                                argument_4 COMMA_THERE)) ;
  macroRetainObject (result.mPointer) ;
  return result ;
}

//---------------------------------------------------------------------------*

GGS_basic_type  GGS_expiry_point_obj::
reader_offset (C_Compiler & /* inLexique */ COMMA_UNUSED_LOCATION_ARGS) const {
  GGS_basic_type   result ;
  if (mPointer != NULL) {
    macroValidPointer (mPointer) ;
    MF_Assert (dynamic_cast <cPtr_expiry_point_obj *> (mPointer) != NULL,
               "dynamic cast error", 0, 0) ;
    result = ((cPtr_expiry_point_obj *) mPointer)->offset ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_lstring  GGS_expiry_point_obj::
reader_name (C_Compiler & /* inLexique */ COMMA_UNUSED_LOCATION_ARGS) const {
  GGS_lstring   result ;
  if (mPointer != NULL) {
    macroValidPointer (mPointer) ;
    MF_Assert (dynamic_cast <cPtr_expiry_point_obj *> (mPointer) != NULL,
               "dynamic cast error", 0, 0) ;
    result = ((cPtr_expiry_point_obj *) mPointer)->name ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_adjustable_obj  GGS_expiry_point_obj::
reader_adjust (C_Compiler & /* inLexique */ COMMA_UNUSED_LOCATION_ARGS) const {
  GGS_adjustable_obj   result ;
  if (mPointer != NULL) {
    macroValidPointer (mPointer) ;
    MF_Assert (dynamic_cast <cPtr_expiry_point_obj *> (mPointer) != NULL,
               "dynamic cast error", 0, 0) ;
    result = ((cPtr_expiry_point_obj *) mPointer)->adjust ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_action_list  GGS_expiry_point_obj::
reader_actions (C_Compiler & /* inLexique */ COMMA_UNUSED_LOCATION_ARGS) const {
  GGS_action_list   result ;
  if (mPointer != NULL) {
    macroValidPointer (mPointer) ;
    MF_Assert (dynamic_cast <cPtr_expiry_point_obj *> (mPointer) != NULL,
               "dynamic cast error", 0, 0) ;
    result = ((cPtr_expiry_point_obj *) mPointer)->actions ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

void GGS_expiry_point_obj::
modifier_setActions (C_Compiler & /* inLexique */, const GGS_action_list & inValue COMMA_UNUSED_LOCATION_ARGS) {
  if ((mPointer != NULL) && inValue.isBuilt ()) {
    macroValidPointer (mPointer) ;
    if (mPointer->retainCount () > 1) {
      cPtr_expiry_point_obj * clone = dynamic_cast <cPtr_expiry_point_obj *> (mPointer->makeClone ()) ;
      macroValidPointer (clone) ;
      macroAssignObject (mPointer, clone) ;
    }
    ((cPtr_expiry_point_obj *) mPointer)->actions = inValue ;
  }
}

//---------------------------------------------------------------------------*

const char * GGS_expiry_point_obj::actualTypeName (void) const {
  return "expiry_point_obj" ;
}

//---------------------------------------------------------------------------*

C_galgasClassRunTimeInformationEX gClassInfoFor__expiry_point_obj ("expiry_point_obj", gClassInfoFor__oil_obj, & kTypeDescriptor_GGS_expiry_point_obj) ;

//---------------------------------------------------------------------------*

GGS_object GGS_expiry_point_obj::reader_object (void) const {
  GGS_object result ;
  if (isBuilt ()) {
    GGS_expiry_point_obj * p = NULL ;
    macroMyNew (p, GGS_expiry_point_obj (*this)) ;
    result = GGS_object (p) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_expiry_point_obj GGS_expiry_point_obj::castFromObject (C_Compiler & inLexique,
                                   const GGS_object & inObject,
                                   const GGS_location & inErrorLocation
                                   COMMA_LOCATION_ARGS) {
  GGS_expiry_point_obj result ;
  const GGS__root * embeddedObject = inObject.embeddedObject () ;
  if (NULL != embeddedObject) {
    const GGS_expiry_point_obj * p = dynamic_cast <const GGS_expiry_point_obj *> (embeddedObject) ;
    if (NULL != p) {
      result = * p ;
    }else{
      castFromObjectErrorSignaling (inLexique, inErrorLocation, & kTypeDescriptor_GGS_expiry_point_obj, embeddedObject COMMA_THERE) ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*

const C_galgas_type_descriptorEX * GGS_expiry_point_obj::typeDescriptor (void) const {
  return & kTypeDescriptor_GGS_expiry_point_obj ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                   Element of list '@expiry_point_list'                    *
//                                                                           *
//---------------------------------------------------------------------------*

elementOf_GGS_expiry_point_list::
elementOf_GGS_expiry_point_list (const GGS_uint64 & argument_0,
                                const GGS_expiry_point_obj & argument_1):
off (argument_0),
point (argument_1) {
}

//---------------------------------------------------------------------------*

bool elementOf_GGS_expiry_point_list::
isEqualToObject (const cSortedListElement * inOperand) const {
  bool equal = inOperand == this ;
  if (! equal) {
    const elementOf_GGS_expiry_point_list * ptr = dynamic_cast <const elementOf_GGS_expiry_point_list *> (inOperand) ;
    macroValidPointer (ptr) ;
    equal = off.operator_isEqual (ptr->off).boolValue ()
         && point.operator_isEqual (ptr->point).boolValue () ;
  }
  return equal ;
}

//---------------------------------------------------------------------------*

PMSInt32 elementOf_GGS_expiry_point_list::
compareForSorting (const cSortedListElement * inOperand) const {
  const elementOf_GGS_expiry_point_list * operand = (const elementOf_GGS_expiry_point_list *) inOperand ;
  PMSInt32 result = off.genericObjectCompare (operand->off) ;
  return result ;
}

//---------------------------------------------------------------------------*

void elementOf_GGS_expiry_point_list::
appendForDescription (C_String & ioString,
                      const PMSInt32 inIndentation) const {
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "|-" ;
  ioString << off.reader_description (inIndentation) ;
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "|-" ;
  ioString << point.reader_description (inIndentation) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                     Sorted list '@expiry_point_list'                      *
//                                                                           *
//---------------------------------------------------------------------------*

const C_galgas_type_descriptorEX kTypeDescriptor_GGS_expiry_point_list ("expiry_point_list", false, NULL) ;

//---------------------------------------------------------------------------*

GGS_expiry_point_list::GGS_expiry_point_list (void): AC_GGS_sortedlist () { // Default Constructor
}

//---------------------------------------------------------------------------*

GGS_expiry_point_list::
GGS_expiry_point_list (const GGS_expiry_point_list & inSource): AC_GGS_sortedlist (inSource) {
}

//---------------------------------------------------------------------------*

GGS_bool GGS_expiry_point_list::
operator_isEqual (const GGS_expiry_point_list & inOperand) const {
  return GGS_bool (isBuilt () && inOperand.isBuilt (), isEqualToList (inOperand)) ;
}

//---------------------------------------------------------------------------*

GGS_bool GGS_expiry_point_list::
operator_isNotEqual (const GGS_expiry_point_list & inOperand) const {
  return GGS_bool (isBuilt () && inOperand.isBuilt (), ! isEqualToList (inOperand)) ;
}

//---------------------------------------------------------------------------*

void GGS_expiry_point_list::
internalAppendValues (const GGS_uint64 & argument_0,
                    const GGS_expiry_point_obj & argument_1) {
  cElement * newElement = (cElement *) NULL ;
  macroMyNew (newElement, cElement (argument_0,
                                argument_1)) ;
  internalAppendItem (newElement) ;
}

//---------------------------------------------------------------------------*

void GGS_expiry_point_list::
addAssign_operation (const GGS_uint64 & argument_0,
                                const GGS_expiry_point_obj & argument_1) {
  if (isBuilt ()) {
    insulateList () ;
    internalAppendValues (argument_0,
                                argument_1) ;
  }
}

//---------------------------------------------------------------------------*

GGS_expiry_point_list GGS_expiry_point_list::
operator_concat (const GGS_expiry_point_list & inOperand) const {
  GGS_expiry_point_list result = * this ;
  result.dotAssign_operation (inOperand) ;
  return result ;
}

//---------------------------------------------------------------------------*

void GGS_expiry_point_list::
dotAssign_operation (const GGS_expiry_point_list inOperand) {
  if (isBuilt () && inOperand.isBuilt ()) {
    if (count () == 0) {
      *this = inOperand ;
    }else{
      if (inOperand.count () > 0) {
        insulateList () ;
        elementOf_GGS_expiry_point_list * p = inOperand.firstObject () ;
        while (p != NULL) {
          macroValidPointer (p) ;
          GGS_uint64  p_0 = p->off ;
          GGS_expiry_point_obj  p_1 = p->point ;
          internalAppendValues (p_0, p_1) ;
          p = p->nextObject () ;
        }
      }
    }
  }
}

//---------------------------------------------------------------------------*

void GGS_expiry_point_list::
insulateList (void) {
  if (isShared ()) {
    cElement * ptr = firstObject () ;
    alloc () ;
    while (ptr != NULL) {
      macroValidPointer (ptr) ;
      internalAppendValues (ptr->off,
                                ptr->point) ;
      ptr = ptr->nextObject () ;
    }
  }
}

//---------------------------------------------------------------------------*

GGS_expiry_point_list  GGS_expiry_point_list::
constructor_emptySortedList (void) {
  GGS_expiry_point_list result ;
  result.alloc () ;
  return result ;
}

//---------------------------------------------------------------------------*

GGS_expiry_point_list  GGS_expiry_point_list::
constructor_sortedListWithValue (const GGS_uint64 & argument_0,
                           const GGS_expiry_point_obj & argument_1) {
  GGS_expiry_point_list result ;
  result.alloc () ;
  result.addAssign_operation (argument_0, argument_1) ;
  return result ;
}

//---------------------------------------------------------------------------*

GGS_string GGS_expiry_point_list::
reader_description (const PMSInt32 inIndentation) const {
  return performDescription ("@expiry_point_list", inIndentation) ;
}

//---------------------------------------------------------------------------*

void GGS_expiry_point_list::
method_smallest (C_Compiler & inLexique,
                 GGS_uint64 & _out_0,
                 GGS_expiry_point_obj & _out_1
                 COMMA_LOCATION_ARGS) const {
  cElement * ptr = NULL ;
  if (isBuilt ()) {
    ptr = firstObject () ;
    if (ptr == NULL) {
      inLexique.onTheFlyRunTimeError ("'first' method invoked on an empty list" COMMA_THERE) ;
    }
  }
  if (ptr != NULL) {
    _out_0 = ptr->off ;
    _out_1 = ptr->point ;
  }else{
    _out_0.drop () ;
    _out_1.drop () ;
  }
}

//---------------------------------------------------------------------------*

void GGS_expiry_point_list::
method_greatest (C_Compiler & inLexique,
             GGS_uint64 & _out_0,
             GGS_expiry_point_obj & _out_1
             COMMA_LOCATION_ARGS) const {
  cElement * ptr = NULL ;
  if (isBuilt ()) {
    ptr = lastObject () ;
    if (ptr == NULL) {
      inLexique.onTheFlyRunTimeError ("'greatest' method invoked on an empty list" COMMA_THERE) ;
    }
  }
  if (ptr != NULL) {
    _out_0 = ptr->off ;
    _out_1 = ptr->point ;
  }else{
    _out_0.drop () ;
    _out_1.drop () ;
  }
}

//---------------------------------------------------------------------------*

void GGS_expiry_point_list::
modifier_popSmallest (C_Compiler & inLexique,
                 GGS_uint64 & _out_0,
                 GGS_expiry_point_obj & _out_1
                 COMMA_LOCATION_ARGS) {
  cElement * ptr = NULL ;
  if (isBuilt ()) {
    ptr = firstObject () ;
    if (ptr == NULL) {
      inLexique.onTheFlyRunTimeError ("'popSmallest' modifier invoked on an empty list" COMMA_THERE) ;
    }
  }
  if (ptr != NULL) {
    _out_0 = ptr->off ;
    _out_1 = ptr->point ;
    insulateList () ;
    _internalRemoveSmallest () ;
  }else{
    _out_0.drop () ;
    _out_1.drop () ;
  }
}

//---------------------------------------------------------------------------*

void GGS_expiry_point_list::
modifier_popGreatest (C_Compiler & inLexique,
                GGS_uint64 & _out_0,
                GGS_expiry_point_obj & _out_1
                COMMA_LOCATION_ARGS) {
  cElement * ptr = NULL ;
  if (isBuilt ()) {
    ptr = lastObject () ;
    if (ptr == NULL) {
      inLexique.onTheFlyRunTimeError ("'popGreatest' modifier invoked on an empty list" COMMA_THERE) ;
    }
  }
  if (ptr != NULL) {
    _out_0 = ptr->off ;
    _out_1 = ptr->point ;
    insulateList () ;
    _internalRemoveGreatest () ;
  }else{
    _out_0.drop () ;
    _out_1.drop () ;
  }
}

//---------------------------------------------------------------------------*

/* const */ GGS_uint64  & GGS_expiry_point_list::cEnumerator::_off (LOCATION_ARGS) const {
  macroValidPointerThere (mCurrentEnumeratedObject) ;
  return ((/* const */ cElement *) mCurrentEnumeratedObject)->off ;
}

//---------------------------------------------------------------------------*

/* const */ GGS_expiry_point_obj  & GGS_expiry_point_list::cEnumerator::_point (LOCATION_ARGS) const {
  macroValidPointerThere (mCurrentEnumeratedObject) ;
  return ((/* const */ cElement *) mCurrentEnumeratedObject)->point ;
}

//---------------------------------------------------------------------------*

GGS_object GGS_expiry_point_list::reader_object (void) const {
  GGS_object result ;
  if (isBuilt ()) {
    GGS_expiry_point_list * p = NULL ;
    macroMyNew (p, GGS_expiry_point_list (*this)) ;
    result = GGS_object (p) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_expiry_point_list GGS_expiry_point_list::castFromObject (C_Compiler & inLexique,
                                   const GGS_object & inObject,
                                   const GGS_location & inErrorLocation
                                   COMMA_LOCATION_ARGS) {
  GGS_expiry_point_list result ;
  const GGS__root * embeddedObject = inObject.embeddedObject () ;
  if (NULL != embeddedObject) {
    const GGS_expiry_point_list * p = dynamic_cast <const GGS_expiry_point_list *> (embeddedObject) ;
    if (NULL != p) {
      result = * p ;
    }else{
      castFromObjectErrorSignaling (inLexique, inErrorLocation, & kTypeDescriptor_GGS_expiry_point_list, embeddedObject COMMA_THERE) ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*

const C_galgas_type_descriptorEX * GGS_expiry_point_list::typeDescriptor (void) const {
  return & kTypeDescriptor_GGS_expiry_point_list ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                      class 'cPtr_scheduletable_obj'                       *
//                                                                           *
//---------------------------------------------------------------------------*

cPtr_scheduletable_obj::
cPtr_scheduletable_obj (const GGS_lstring & argument_0,
                                const GGS_lstring & argument_1,
                                const GGS_autostart_obj & argument_2,
                                const GGS_ltgt_sync_obj & argument_3,
                                const GGS_basic_type & argument_4,
                                const GGS_basic_type & argument_5,
                                const GGS_expiry_point_list & argument_6,
                                const GGS_lstringlist & argument_7
                                COMMA_LOCATION_ARGS)
:cPtr_oil_obj (argument_0 COMMA_THERE),
counter (argument_1),
autostart (argument_2),
ltgt_sync (argument_3),
periodic (argument_4),
length (argument_5),
exp_points (argument_6),
acc_apps (argument_7) {
}

//---------------------------------------------------------------------------*

#ifndef DO_NOT_GENERATE_CHECKINGS
  cPtr_scheduletable_obj * GGS_scheduletable_obj::
  operator () (LOCATION_ARGS) const {
    macroValidObjectThere (mPointer, cPtr_scheduletable_obj) ;
    return (cPtr_scheduletable_obj *) mPointer ;
  }
#endif

//---------------------------------------------------------------------------*

bool cPtr_scheduletable_obj::
isEqualToObject (const cPtr__AC_galgas_class * inOperand) const {
  bool equal = typeid (this) == typeid (inOperand) ;
  if (equal) {
    const cPtr_scheduletable_obj * ptr = dynamic_cast <const cPtr_scheduletable_obj *> (inOperand) ;
    macroValidPointer (ptr) ;
    equal = desc.operator_isEqual (ptr->desc).boolValue ()
         && counter.operator_isEqual (ptr->counter).boolValue ()
         && autostart.operator_isEqual (ptr->autostart).boolValue ()
         && ltgt_sync.operator_isEqual (ptr->ltgt_sync).boolValue ()
         && periodic.operator_isEqual (ptr->periodic).boolValue ()
         && length.operator_isEqual (ptr->length).boolValue ()
         && exp_points.operator_isEqual (ptr->exp_points).boolValue ()
         && acc_apps.operator_isEqual (ptr->acc_apps).boolValue () ;
  }
  return equal ;
}

//---------------------------------------------------------------------------*

void cPtr_scheduletable_obj::
appendForDescription (C_String & ioString,
                      const PMSInt32 inIndentation) const {
  ioString << "->@scheduletable_obj:"
           << desc.reader_description (inIndentation + 1)
           << counter.reader_description (inIndentation + 1)
           << autostart.reader_description (inIndentation + 1)
           << ltgt_sync.reader_description (inIndentation + 1)
           << periodic.reader_description (inIndentation + 1)
           << length.reader_description (inIndentation + 1)
           << exp_points.reader_description (inIndentation + 1)
           << acc_apps.reader_description (inIndentation + 1) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                              Class message                                *
//                                                                           *
//---------------------------------------------------------------------------*

const char * cPtr_scheduletable_obj::
instanceMessage (void) const {
  return "" ;
}

//---------------------------------------------------------------------------*

const char * cPtr_scheduletable_obj::
_static_message (void) {
  return "" ;
}

//---------------------------------------------------------------------------*

C_galgas_class_inspector _gInspectorFor_scheduletable_obj (& typeid (cPtr_scheduletable_obj), & typeid (cPtr_oil_obj), "") ;

//---------------------------------------------------------------------------*

AC_galgasClassRunTimeInformationEX * cPtr_scheduletable_obj::galgasRTTI (void) const {
  return & gClassInfoFor__scheduletable_obj ;
}

//---------------------------------------------------------------------------*

cPtr__AC_galgas_class * cPtr_scheduletable_obj::makeClone (void) const {
  cPtr__AC_galgas_class * result = NULL ;
  macroMyNew (result, cPtr_scheduletable_obj (desc, counter, autostart, ltgt_sync, periodic, length, exp_points, acc_apps COMMA_HERE)) ;
  return result ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                   GALGAS class 'GGS_scheduletable_obj'                    *
//                                                                           *
//---------------------------------------------------------------------------*

const C_galgas_type_descriptorEX kTypeDescriptor_GGS_scheduletable_obj ("scheduletable_obj", true, & kTypeDescriptor_GGS_oil_obj) ;

//---------------------------------------------------------------------------*

GGS_scheduletable_obj::
GGS_scheduletable_obj (const cPtr__AC_galgas_class * inPointer) {
  macroAssignObject (mPointer, (cPtr__AC_galgas_class *) inPointer) ;
}

//---------------------------------------------------------------------------*

GGS_scheduletable_obj::
GGS_scheduletable_obj (cPtr__AC_galgas_class & inObject) {
  macroAssignObject (mPointer, & inObject) ;
}

//---------------------------------------------------------------------------*

//--- castFrom class method (implements cast expression)
GGS_scheduletable_obj GGS_scheduletable_obj::
castFrom (C_Compiler & inLexique,
           cPtr__AC_galgas_class * inPointer,
           const bool inUseKindOfClass,
           const GGS_location & inErrorLocation
           COMMA_LOCATION_ARGS) {
  GGS_scheduletable_obj result ;
  if (inPointer != NULL) {
    macroValidPointer (inPointer) ;
    const bool ok = inUseKindOfClass
      ? (dynamic_cast <cPtr_scheduletable_obj *> (inPointer) != NULL)
      : (typeid (cPtr_scheduletable_obj) == typeid (*inPointer)) ;
    if (ok) {
      result = GGS_scheduletable_obj (inPointer) ;
    }else{
      inErrorLocation.signalCastError (inLexique,
                                       & typeid (cPtr_scheduletable_obj),
                                       inUseKindOfClass,
                                       inPointer->instanceMessage ()
                                       COMMA_THERE) ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_scheduletable_obj GGS_scheduletable_obj::
constructor_new (C_Compiler & /* inLexique */,
                 const GGS_lstring & argument_0,
                 const GGS_lstring & argument_1,
                 const GGS_autostart_obj & argument_2,
                 const GGS_ltgt_sync_obj & argument_3,
                 const GGS_basic_type & argument_4,
                 const GGS_basic_type & argument_5,
                 const GGS_expiry_point_list & argument_6,
                 const GGS_lstringlist & argument_7
                                COMMA_LOCATION_ARGS) {
  GGS_scheduletable_obj result ;
  macroMyNew (result.mPointer, cPtr_scheduletable_obj (argument_0,
                                argument_1,
                                argument_2,
                                argument_3,
                                argument_4,
                                argument_5,
                                argument_6,
                                argument_7 COMMA_THERE)) ;
  macroRetainObject (result.mPointer) ;
  return result ;
}

//---------------------------------------------------------------------------*

GGS_lstring  GGS_scheduletable_obj::
reader_counter (C_Compiler & /* inLexique */ COMMA_UNUSED_LOCATION_ARGS) const {
  GGS_lstring   result ;
  if (mPointer != NULL) {
    macroValidPointer (mPointer) ;
    MF_Assert (dynamic_cast <cPtr_scheduletable_obj *> (mPointer) != NULL,
               "dynamic cast error", 0, 0) ;
    result = ((cPtr_scheduletable_obj *) mPointer)->counter ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_autostart_obj  GGS_scheduletable_obj::
reader_autostart (C_Compiler & /* inLexique */ COMMA_UNUSED_LOCATION_ARGS) const {
  GGS_autostart_obj   result ;
  if (mPointer != NULL) {
    macroValidPointer (mPointer) ;
    MF_Assert (dynamic_cast <cPtr_scheduletable_obj *> (mPointer) != NULL,
               "dynamic cast error", 0, 0) ;
    result = ((cPtr_scheduletable_obj *) mPointer)->autostart ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_ltgt_sync_obj  GGS_scheduletable_obj::
reader_ltgt_sync (C_Compiler & /* inLexique */ COMMA_UNUSED_LOCATION_ARGS) const {
  GGS_ltgt_sync_obj   result ;
  if (mPointer != NULL) {
    macroValidPointer (mPointer) ;
    MF_Assert (dynamic_cast <cPtr_scheduletable_obj *> (mPointer) != NULL,
               "dynamic cast error", 0, 0) ;
    result = ((cPtr_scheduletable_obj *) mPointer)->ltgt_sync ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_basic_type  GGS_scheduletable_obj::
reader_periodic (C_Compiler & /* inLexique */ COMMA_UNUSED_LOCATION_ARGS) const {
  GGS_basic_type   result ;
  if (mPointer != NULL) {
    macroValidPointer (mPointer) ;
    MF_Assert (dynamic_cast <cPtr_scheduletable_obj *> (mPointer) != NULL,
               "dynamic cast error", 0, 0) ;
    result = ((cPtr_scheduletable_obj *) mPointer)->periodic ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_basic_type  GGS_scheduletable_obj::
reader_length (C_Compiler & /* inLexique */ COMMA_UNUSED_LOCATION_ARGS) const {
  GGS_basic_type   result ;
  if (mPointer != NULL) {
    macroValidPointer (mPointer) ;
    MF_Assert (dynamic_cast <cPtr_scheduletable_obj *> (mPointer) != NULL,
               "dynamic cast error", 0, 0) ;
    result = ((cPtr_scheduletable_obj *) mPointer)->length ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_expiry_point_list  GGS_scheduletable_obj::
reader_exp_points (C_Compiler & /* inLexique */ COMMA_UNUSED_LOCATION_ARGS) const {
  GGS_expiry_point_list   result ;
  if (mPointer != NULL) {
    macroValidPointer (mPointer) ;
    MF_Assert (dynamic_cast <cPtr_scheduletable_obj *> (mPointer) != NULL,
               "dynamic cast error", 0, 0) ;
    result = ((cPtr_scheduletable_obj *) mPointer)->exp_points ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_lstringlist  GGS_scheduletable_obj::
reader_acc_apps (C_Compiler & /* inLexique */ COMMA_UNUSED_LOCATION_ARGS) const {
  GGS_lstringlist   result ;
  if (mPointer != NULL) {
    macroValidPointer (mPointer) ;
    MF_Assert (dynamic_cast <cPtr_scheduletable_obj *> (mPointer) != NULL,
               "dynamic cast error", 0, 0) ;
    result = ((cPtr_scheduletable_obj *) mPointer)->acc_apps ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

void GGS_scheduletable_obj::
modifier_setCounter (C_Compiler & /* inLexique */, const GGS_lstring & inValue COMMA_UNUSED_LOCATION_ARGS) {
  if ((mPointer != NULL) && inValue.isBuilt ()) {
    macroValidPointer (mPointer) ;
    if (mPointer->retainCount () > 1) {
      cPtr_scheduletable_obj * clone = dynamic_cast <cPtr_scheduletable_obj *> (mPointer->makeClone ()) ;
      macroValidPointer (clone) ;
      macroAssignObject (mPointer, clone) ;
    }
    ((cPtr_scheduletable_obj *) mPointer)->counter = inValue ;
  }
}

//---------------------------------------------------------------------------*

void GGS_scheduletable_obj::
modifier_setAutostart (C_Compiler & /* inLexique */, const GGS_autostart_obj & inValue COMMA_UNUSED_LOCATION_ARGS) {
  if ((mPointer != NULL) && inValue.isBuilt ()) {
    macroValidPointer (mPointer) ;
    if (mPointer->retainCount () > 1) {
      cPtr_scheduletable_obj * clone = dynamic_cast <cPtr_scheduletable_obj *> (mPointer->makeClone ()) ;
      macroValidPointer (clone) ;
      macroAssignObject (mPointer, clone) ;
    }
    ((cPtr_scheduletable_obj *) mPointer)->autostart = inValue ;
  }
}

//---------------------------------------------------------------------------*

void GGS_scheduletable_obj::
modifier_setLtgt_sync (C_Compiler & /* inLexique */, const GGS_ltgt_sync_obj & inValue COMMA_UNUSED_LOCATION_ARGS) {
  if ((mPointer != NULL) && inValue.isBuilt ()) {
    macroValidPointer (mPointer) ;
    if (mPointer->retainCount () > 1) {
      cPtr_scheduletable_obj * clone = dynamic_cast <cPtr_scheduletable_obj *> (mPointer->makeClone ()) ;
      macroValidPointer (clone) ;
      macroAssignObject (mPointer, clone) ;
    }
    ((cPtr_scheduletable_obj *) mPointer)->ltgt_sync = inValue ;
  }
}

//---------------------------------------------------------------------------*

void GGS_scheduletable_obj::
modifier_setPeriodic (C_Compiler & /* inLexique */, const GGS_basic_type & inValue COMMA_UNUSED_LOCATION_ARGS) {
  if ((mPointer != NULL) && inValue.isBuilt ()) {
    macroValidPointer (mPointer) ;
    if (mPointer->retainCount () > 1) {
      cPtr_scheduletable_obj * clone = dynamic_cast <cPtr_scheduletable_obj *> (mPointer->makeClone ()) ;
      macroValidPointer (clone) ;
      macroAssignObject (mPointer, clone) ;
    }
    ((cPtr_scheduletable_obj *) mPointer)->periodic = inValue ;
  }
}

//---------------------------------------------------------------------------*

void GGS_scheduletable_obj::
modifier_setLength (C_Compiler & /* inLexique */, const GGS_basic_type & inValue COMMA_UNUSED_LOCATION_ARGS) {
  if ((mPointer != NULL) && inValue.isBuilt ()) {
    macroValidPointer (mPointer) ;
    if (mPointer->retainCount () > 1) {
      cPtr_scheduletable_obj * clone = dynamic_cast <cPtr_scheduletable_obj *> (mPointer->makeClone ()) ;
      macroValidPointer (clone) ;
      macroAssignObject (mPointer, clone) ;
    }
    ((cPtr_scheduletable_obj *) mPointer)->length = inValue ;
  }
}

//---------------------------------------------------------------------------*

void GGS_scheduletable_obj::
modifier_setExp_points (C_Compiler & /* inLexique */, const GGS_expiry_point_list & inValue COMMA_UNUSED_LOCATION_ARGS) {
  if ((mPointer != NULL) && inValue.isBuilt ()) {
    macroValidPointer (mPointer) ;
    if (mPointer->retainCount () > 1) {
      cPtr_scheduletable_obj * clone = dynamic_cast <cPtr_scheduletable_obj *> (mPointer->makeClone ()) ;
      macroValidPointer (clone) ;
      macroAssignObject (mPointer, clone) ;
    }
    ((cPtr_scheduletable_obj *) mPointer)->exp_points = inValue ;
  }
}

//---------------------------------------------------------------------------*

void GGS_scheduletable_obj::
modifier_setAcc_apps (C_Compiler & /* inLexique */, const GGS_lstringlist & inValue COMMA_UNUSED_LOCATION_ARGS) {
  if ((mPointer != NULL) && inValue.isBuilt ()) {
    macroValidPointer (mPointer) ;
    if (mPointer->retainCount () > 1) {
      cPtr_scheduletable_obj * clone = dynamic_cast <cPtr_scheduletable_obj *> (mPointer->makeClone ()) ;
      macroValidPointer (clone) ;
      macroAssignObject (mPointer, clone) ;
    }
    ((cPtr_scheduletable_obj *) mPointer)->acc_apps = inValue ;
  }
}

//---------------------------------------------------------------------------*

const char * GGS_scheduletable_obj::actualTypeName (void) const {
  return "scheduletable_obj" ;
}

//---------------------------------------------------------------------------*

C_galgasClassRunTimeInformationEX gClassInfoFor__scheduletable_obj ("scheduletable_obj", gClassInfoFor__oil_obj, & kTypeDescriptor_GGS_scheduletable_obj) ;

//---------------------------------------------------------------------------*

GGS_object GGS_scheduletable_obj::reader_object (void) const {
  GGS_object result ;
  if (isBuilt ()) {
    GGS_scheduletable_obj * p = NULL ;
    macroMyNew (p, GGS_scheduletable_obj (*this)) ;
    result = GGS_object (p) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_scheduletable_obj GGS_scheduletable_obj::castFromObject (C_Compiler & inLexique,
                                   const GGS_object & inObject,
                                   const GGS_location & inErrorLocation
                                   COMMA_LOCATION_ARGS) {
  GGS_scheduletable_obj result ;
  const GGS__root * embeddedObject = inObject.embeddedObject () ;
  if (NULL != embeddedObject) {
    const GGS_scheduletable_obj * p = dynamic_cast <const GGS_scheduletable_obj *> (embeddedObject) ;
    if (NULL != p) {
      result = * p ;
    }else{
      castFromObjectErrorSignaling (inLexique, inErrorLocation, & kTypeDescriptor_GGS_scheduletable_obj, embeddedObject COMMA_THERE) ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*

const C_galgas_type_descriptorEX * GGS_scheduletable_obj::typeDescriptor (void) const {
  return & kTypeDescriptor_GGS_scheduletable_obj ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                       class 'e_scheduletable_map'                         *
//                                                                           *
//---------------------------------------------------------------------------*

e_scheduletable_map::e_scheduletable_map (void) :
scheduletable () {
}

//---------------------------------------------------------------------------*
//                                                                           *
//                      class map '@scheduletable_map'                       *
//                                                                           *
//---------------------------------------------------------------------------*

const C_galgas_type_descriptorEX kTypeDescriptor_GGS_scheduletable_map ("scheduletable_map", false, NULL) ;

//---------------------------------------------------------------------------*

elementOf_GGS_scheduletable_map::
elementOf_GGS_scheduletable_map (const GGS_lstring & inKey,
              const PMSInt32 inIndex,
              const e_scheduletable_map & inInfo,
              const PMUInt32 inInitialState) :
AC_galgas_map_element (inKey, inIndex, inInitialState),
mInfo (inInfo) {
}

//---------------------------------------------------------------------------*

void elementOf_GGS_scheduletable_map::
appendForMapDescription (const PMSInt32 inElementIndex,
                         C_String & ioString,
                         const PMSInt32 inIndentation) const {
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "|-key " ;
  ioString.appendSigned (inElementIndex) ;
  ioString << ":" << mKey.reader_description (inIndentation + 1) ;
  ioString << (mIsDefined ? "" : "(not solved)") ;
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "|-value " ;
  ioString.appendSigned (inElementIndex) ;
  ioString << ":" << mInfo.scheduletable.reader_description (inIndentation + 1) ;
}

//---------------------------------------------------------------------------*

bool elementOf_GGS_scheduletable_map::
isEqualToMapElement (const AC_galgas_map_element * inOperand) const {
  const elementOf_GGS_scheduletable_map * ptr = dynamic_cast <const elementOf_GGS_scheduletable_map *> (inOperand) ;
  macroValidPointer (ptr) ;
  return (mInfo.scheduletable.operator_isEqual (ptr->mInfo.scheduletable)).boolValue () ;
}

//---------------------------------------------------------------------------*

AC_galgas_map_element * GGS_scheduletable_map::
new_element (const GGS_lstring & inKey, void * inInfo, const PMUInt32 inInitialState) {
  MF_Assert (reinterpret_cast <e_scheduletable_map *> (inInfo) != NULL, "Dynamic cast error", 0, 0) ;
  AC_galgas_map_element * p = NULL ;
  e_scheduletable_map * info = (e_scheduletable_map *) inInfo ;
  macroMyNew (p, cElement (inKey, nextIndex (), * info, inInitialState)) ;
  return p ;
}

//---------------------------------------------------------------------------*

void GGS_scheduletable_map::
assignInfo (AC_galgas_map_element * inPtr, void * inInfo) {
  MF_Assert (reinterpret_cast <cElement *> (inPtr) != NULL, "Dynamic cast error", 0, 0) ;
  MF_Assert (reinterpret_cast <e_scheduletable_map *> (inInfo) != NULL, "Dynamic cast error", 0, 0) ;
  cElement * p = (cElement *) inPtr ;
  e_scheduletable_map * info = (e_scheduletable_map *) inInfo ;
  p->mInfo = * info ;
}

//---------------------------------------------------------------------------*

GGS_scheduletable_map GGS_scheduletable_map::
constructor_emptyMap (C_Compiler & /* inLexique */ COMMA_UNUSED_LOCATION_ARGS) {
  GGS_scheduletable_map result ;
  macroMyNew (result.mSharedMapRoot, cMapRoot) ;
  return result ;
}

//---------------------------------------------------------------------------*

void GGS_scheduletable_map::
enterIndex (const GGS_string & inKey,
            AC_galgas_index_core & outIndex) {
  e_scheduletable_map info  ;
  internalEnterIndex (inKey,
                      (void *) & info,
                      outIndex) ;
}

//---------------------------------------------------------------------------*

GGS_bool GGS_scheduletable_map::
operator_isEqual (const GGS_scheduletable_map & inOperand) const {
  return GGS_bool (isBuilt () && inOperand.isBuilt (), isEqualToMap (inOperand)) ;
}

//---------------------------------------------------------------------------*

GGS_bool GGS_scheduletable_map::
operator_isNotEqual (const GGS_scheduletable_map & inOperand) const {
  return GGS_bool (isBuilt () && inOperand.isBuilt (), ! isEqualToMap (inOperand)) ;
}

//---------------------------------------------------------------------------*

void GGS_scheduletable_map::
internalInsertForDuplication (AC_galgas_map_element * inPtr) {
  MF_Assert (reinterpret_cast <cElement *> (inPtr) != NULL, "Dynamic cast error", 0, 0) ;
  cElement * p = (cElement *) inPtr ;
  PMSInt32 attributeIndex = -1 ; // Unused here
  GGS_location existingKeyLocation ; // Unused here
  internalInsert (p->mKey, (void *) & p->mInfo, attributeIndex, existingKeyLocation, p->mIsDefined, p->mCurrentState) ;
}

//---------------------------------------------------------------------------*

void GGS_scheduletable_map::
removeElement (C_Compiler & inLexique,
                const utf32 * inErrorMessage,
                const GGS_lstring & inKey,
                GGS_scheduletable_obj & outParameter0,
                GGS_luint * outIndex
                COMMA_LOCATION_ARGS) {
  AC_galgas_map_element * removedElement = NULL ;
  PMSInt32 elementID = - 1 ;
  if (isBuilt () && inKey.isBuilt ()) {
    removedElement = internalRemove (inKey) ;
    if (removedElement == NULL) {
      inLexique.semanticErrorUsingPerCentK (inKey.string (), inKey, inErrorMessage COMMA_THERE) ;
      outParameter0.drop () ;
    }else{
      cElement * ptr = (cElement *) removedElement ;
      elementID = ptr->mID ;
      outParameter0 = ptr->mInfo.scheduletable ;
    }
  }
  if (outIndex != NULL) {
    * outIndex = GGS_luint (GGS_uint (elementID >= 0, (PMUInt32) elementID), inKey) ;
  }
  macroMyDelete (removedElement) ;
}

//---------------------------------------------------------------------------*

void GGS_scheduletable_map::
insertElement (C_Compiler & inLexique,
               const PMUInt32 inInitialState,
               const utf32 * inErrorMessage,
               const GGS_lstring & inKey,
               const GGS_scheduletable_obj & inParameter0,
               GGS_luint * outIndex
               COMMA_LOCATION_ARGS) {
  PMSInt32 elementID = - 1 ;
  if (isBuilt ()
   && inParameter0.isBuilt ()
   && inKey.isBuilt ()) {
    insulateMap (THERE) ;
    e_scheduletable_map info  ;
    info.scheduletable = inParameter0 ;
    GGS_location existingKeyLocation ;
    internalInsert (inKey, (void *) & info, elementID, existingKeyLocation, true, inInitialState) ;
    if (elementID < 0) {
      emitInsertMapSemanticErrorMessage (inLexique, inKey, inErrorMessage, existingKeyLocation COMMA_THERE) ;
    }
  }
  if (outIndex != NULL) {
    * outIndex = GGS_luint (GGS_uint (elementID >= 0, (PMUInt32) elementID), inKey) ;
  }
}

//---------------------------------------------------------------------------*

void GGS_scheduletable_map::
searchElement (C_Compiler & inLexique,
               const PMUInt32 /* inActionIndex */,
               const utf32 * inErrorMessage,
               const GGS_lstring & inKey,
               GGS_scheduletable_obj   & outParameter0,
               GGS_luint * outIndex
               COMMA_LOCATION_ARGS) const {
  cElement * node = NULL  ;
  if (isBuilt () && inKey.isBuilt ()) {
    AC_galgas_map_element * p = internal_search (inKey.string ()) ;
    MF_Assert ((p == NULL) || (reinterpret_cast <cElement *> (p) != NULL), "Dynamic cast error", 0, 0) ;
    node = (cElement *) p ;
    if (node == NULL) {
      inLexique.semanticErrorUsingPerCentK (inKey.string (), inKey, inErrorMessage COMMA_THERE) ;
    }
  }
  if (node == NULL) {
    outParameter0.drop () ;
    if (outIndex != NULL) {
      outIndex->drop () ;
    }
  }else{
    outParameter0 = node->mInfo.scheduletable ;
    if (outIndex != NULL) {
      * outIndex = GGS_luint (GGS_uint (true, (PMUInt32) node->mID), inKey) ;
    }
  }
}

//---------------------------------------------------------------------------*

const utf32 GGS_scheduletable_map::kSearchMessage_get [] = {
  TO_UNICODE ('S'),
  TO_UNICODE ('c'),
  TO_UNICODE ('h'),
  TO_UNICODE ('e'),
  TO_UNICODE ('d'),
  TO_UNICODE ('u'),
  TO_UNICODE ('l'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('t'),
  TO_UNICODE ('a'),
  TO_UNICODE ('b'),
  TO_UNICODE ('l'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('%'),
  TO_UNICODE ('K'),
  TO_UNICODE (' '),
  TO_UNICODE ('i'),
  TO_UNICODE ('s'),
  TO_UNICODE (' '),
  TO_UNICODE ('u'),
  TO_UNICODE ('n'),
  TO_UNICODE ('k'),
  TO_UNICODE ('o'),
  TO_UNICODE ('w'),
  TO_UNICODE ('n'),
  TO_UNICODE (0)
} ;

//---------------------------------------------------------------------------*

void GGS_scheduletable_map::
method_get (C_Compiler & inLexique,
                                const GGS_lstring & inKey,
                                GGS_scheduletable_obj   & outParameter0 COMMA_LOCATION_ARGS) const {
  searchElement (inLexique,
                 0,
                 kSearchMessage_get,
                 inKey,
                 outParameter0,
                 NULL
                 COMMA_THERE) ;
}

//---------------------------------------------------------------------------*

const utf32 GGS_scheduletable_map::kRemoveMessage_del [] = {
  TO_UNICODE ('S'),
  TO_UNICODE ('c'),
  TO_UNICODE ('h'),
  TO_UNICODE ('e'),
  TO_UNICODE ('d'),
  TO_UNICODE ('u'),
  TO_UNICODE ('l'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('t'),
  TO_UNICODE ('a'),
  TO_UNICODE ('b'),
  TO_UNICODE ('l'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('%'),
  TO_UNICODE ('K'),
  TO_UNICODE (' '),
  TO_UNICODE ('i'),
  TO_UNICODE ('s'),
  TO_UNICODE (' '),
  TO_UNICODE ('u'),
  TO_UNICODE ('n'),
  TO_UNICODE ('k'),
  TO_UNICODE ('o'),
  TO_UNICODE ('w'),
  TO_UNICODE ('n'),
  TO_UNICODE (0)
} ;

//---------------------------------------------------------------------------*

void GGS_scheduletable_map::
modifier_del (C_Compiler & inLexique,
                                const GGS_lstring & inKey,
                                GGS_scheduletable_obj & outParameter0 COMMA_LOCATION_ARGS) {
  removeElement (inLexique,
                  kRemoveMessage_del,
                  inKey,
                  outParameter0,
                  NULL
                  COMMA_THERE) ;
}

//---------------------------------------------------------------------------*

const utf32 GGS_scheduletable_map::kInsertMessage_put [] = {
  TO_UNICODE ('S'),
  TO_UNICODE ('c'),
  TO_UNICODE ('h'),
  TO_UNICODE ('e'),
  TO_UNICODE ('d'),
  TO_UNICODE ('u'),
  TO_UNICODE ('l'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('t'),
  TO_UNICODE ('a'),
  TO_UNICODE ('b'),
  TO_UNICODE ('l'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('%'),
  TO_UNICODE ('K'),
  TO_UNICODE (' '),
  TO_UNICODE ('i'),
  TO_UNICODE ('s'),
  TO_UNICODE (' '),
  TO_UNICODE ('a'),
  TO_UNICODE ('l'),
  TO_UNICODE ('r'),
  TO_UNICODE ('e'),
  TO_UNICODE ('a'),
  TO_UNICODE ('d'),
  TO_UNICODE ('y'),
  TO_UNICODE (' '),
  TO_UNICODE ('d'),
  TO_UNICODE ('e'),
  TO_UNICODE ('f'),
  TO_UNICODE ('i'),
  TO_UNICODE ('n'),
  TO_UNICODE ('e'),
  TO_UNICODE ('d'),
  TO_UNICODE (' '),
  TO_UNICODE ('i'),
  TO_UNICODE ('n'),
  TO_UNICODE (' '),
  TO_UNICODE ('%'),
  TO_UNICODE ('L'),
  TO_UNICODE (0)
} ;

//---------------------------------------------------------------------------*

void GGS_scheduletable_map::
modifier_put (C_Compiler & inLexique,
                                const GGS_lstring & inKey,
                                const GGS_scheduletable_obj & inParameter0 COMMA_LOCATION_ARGS) {
  insertElement (inLexique,
                 0,
                 kInsertMessage_put,
                 inKey,
                 inParameter0,
                NULL
                COMMA_THERE) ;
}

//---------------------------------------------------------------------------*

GGS_scheduletable_map GGS_scheduletable_map::
constructor_mapWithMapToOverride (C_Compiler & /* inLexique */,
                                  const GGS_scheduletable_map & inMapToOverride
                                  COMMA_UNUSED_LOCATION_ARGS) {
  GGS_scheduletable_map result ; // Not Built
  if (inMapToOverride.mSharedMapRoot != NULL) {
    macroValidPointer (inMapToOverride.mSharedMapRoot) ;
    macroMyNew (result.mSharedMapRoot, cMapRoot) ;
    result.mSharedMapRoot->mNextMap = inMapToOverride.mSharedMapRoot ;
    inMapToOverride.mSharedMapRoot->mReferenceCount ++ ;
    result.mSharedMapRoot->mSequenceNumber = inMapToOverride.mSharedMapRoot->mSequenceNumber ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_scheduletable_map GGS_scheduletable_map::
reader_overriddenMap (C_Compiler & /* inLexique */
                      COMMA_UNUSED_LOCATION_ARGS) const {
  GGS_scheduletable_map result ; // Not Built
  if (mSharedMapRoot != NULL) {
    macroValidPointer (mSharedMapRoot) ;
    result.mSharedMapRoot = mSharedMapRoot->mNextMap ;
    if (result.mSharedMapRoot != NULL) {
      macroValidPointer (result.mSharedMapRoot) ;
      result.mSharedMapRoot->mReferenceCount ++ ;
    }else{
      macroMyNew (result.mSharedMapRoot, cMapRoot) ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_string GGS_scheduletable_map::
reader_description (const PMSInt32 inIndentation) const {
  C_String s ;
  s << "<map @scheduletable_map " ;
  if (isBuilt ()) {
    s.appendSigned (count ()) ;
    s << " object" << ((count () > 1) ? "s " : " ") ;
    cMapRoot * mapRoot = mSharedMapRoot ;
    PMSInt32 level = 0 ;
    while (mapRoot != NULL) {
      if (level > 0) {
        s << "\n" ;
        s.writeStringMultiple ("| ", inIndentation) ;
        s << "------- level " << cStringWithSigned (level) ;
      }
      macroValidPointer (mapRoot) ;
      cElement * p = (cElement *) mapRoot->mFirstItem ;
      PMSInt32 elementID = 0 ;
      while (p != NULL) {
        macroValidPointer (p) ;
        p->appendForMapDescription (elementID, s, inIndentation) ;
        p = p->nextObject () ;
        elementID ++ ;
      }
      mapRoot = mapRoot->mNextMap ;
      level ++ ;
    }
  }else{
    s << "not built" ;
  }
  s << "\n" ;
  s.writeStringMultiple ("| ", inIndentation) ;
  s << ">" ;
  return GGS_string (true, s) ;
}

//---------------------------------------------------------------------------*

/* const */ GGS_scheduletable_obj  & GGS_scheduletable_map::cEnumerator::_scheduletable (LOCATION_ARGS) const {
  return ((cElement *) mObjectArray (mCurrentIndex COMMA_THERE))->mInfo.scheduletable ;
}

//---------------------------------------------------------------------------*

GGS_object GGS_scheduletable_map::reader_object (void) const {
  GGS_object result ;
  if (isBuilt ()) {
    GGS_scheduletable_map * p = NULL ;
    macroMyNew (p, GGS_scheduletable_map (*this)) ;
    result = GGS_object (p) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_scheduletable_map GGS_scheduletable_map::castFromObject (C_Compiler & inLexique,
                                   const GGS_object & inObject,
                                   const GGS_location & inErrorLocation
                                   COMMA_LOCATION_ARGS) {
  GGS_scheduletable_map result ;
  const GGS__root * embeddedObject = inObject.embeddedObject () ;
  if (NULL != embeddedObject) {
    const GGS_scheduletable_map * p = dynamic_cast <const GGS_scheduletable_map *> (embeddedObject) ;
    if (NULL != p) {
      result = * p ;
    }else{
      castFromObjectErrorSignaling (inLexique, inErrorLocation, & kTypeDescriptor_GGS_scheduletable_map, embeddedObject COMMA_THERE) ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*

const C_galgas_type_descriptorEX * GGS_scheduletable_map::typeDescriptor (void) const {
  return & kTypeDescriptor_GGS_scheduletable_map ;
}

//---------------------------------------------------------------------------*

GGS_scheduletable_map GGS_scheduletable_map::constructor_mapWithKeyAndValue (C_Compiler & inLexique,
                                             const GGS_lstring & inKey,
                                             const GGS_scheduletable_obj & inValue0
                                             COMMA_LOCATION_ARGS) {
  GGS_scheduletable_map result = constructor_emptyMap (inLexique COMMA_THERE) ;
  result.insertElement (inLexique,
                        0,
                        NULL,
                        inKey,
                        inValue0,
                        NULL
                        COMMA_THERE) ;
  return result ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//          Implementation of function "default_scheduletable_obj"           *
//                                                                           *
//---------------------------------------------------------------------------*

GGS_scheduletable_obj  function_default_scheduletable_obj (C_Compiler & inLexique COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER function_default_scheduletable_obj at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  GGS_scheduletable_obj  var_cas_st ;
  var_cas_st = GGS_scheduletable_obj ::constructor_new (inLexique, function_empty_lstring (inLexique COMMA_SOURCE_FILE_AT_LINE (316)), function_empty_lstring (inLexique COMMA_SOURCE_FILE_AT_LINE (317)), GGS_autostart_void ::constructor_new (inLexique, GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (318)), GGS_ltgt_sync_void ::constructor_new (inLexique, GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (319)), GGS_void ::constructor_new (inLexique, GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (320)), GGS_void ::constructor_new (inLexique, GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (321)), GGS_expiry_point_list ::constructor_emptySortedList (), GGS_lstringlist ::constructor_emptyList () COMMA_SOURCE_FILE_AT_LINE (315)) ;
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE function_default_scheduletable_obj\n") ;
  #endif
  return var_cas_st ;
}

//---------------------------------------------------------------------------*

static GGS_object functionForGenericCall_default_scheduletable_obj (C_Compiler & inLexique,
                           const GGS_objectlist & /* inEffectiveParameterArray */,
                           const GGS_location & /* inErrorLocation */
                           COMMA_LOCATION_ARGS) {
  const GGS_scheduletable_obj  result = function_default_scheduletable_obj (inLexique
                            COMMA_THERE) ;
  return result.reader_object () ;
}

//---------------------------------------------------------------------------*

const C_galgas_function_descriptorEX kFunction_descriptor_default_scheduletable_obj ("default_scheduletable_obj",
                              functionForGenericCall_default_scheduletable_obj,
                              & kTypeDescriptor_GGS_scheduletable_obj ,
                              0,
                              NULL) ;

//---------------------------------------------------------------------------*

