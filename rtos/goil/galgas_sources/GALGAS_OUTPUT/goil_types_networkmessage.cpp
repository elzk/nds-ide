//---------------------------------------------------------------------------*
//                                                                           *
//                   File 'goil_types_networkmessage.cpp'                    *
//                        Generated by version 2.0.0                         *
//                       july 7th, 2010, at 17h16'16"                        *
//                                                                           *
//---------------------------------------------------------------------------*

//--- START OF USER ZONE 1


//--- END OF USER ZONE 1

//---------------------------------------------------------------------------*

#include "version_libpm.h"
#if CURRENT_LIBPM_VERSION != 820
  #error "This file has been compiled with a version of GALGAS that uses libpm version 820, different than the current version (CURRENT_LIBPM_VERSION) of libpm"
#endif

//---------------------------------------------------------------------------*

#include <typeinfo>
#include "utilities/MF_MemoryControl.h"
#include "files/C_TextFileWrite.h"
#include "galgas/C_galgas_CLI_Options.h"
#include "goil_types_networkmessage.h"

//---------------------------------------------------------------------------*

#ifndef DO_NOT_GENERATE_CHECKINGS
  #define SOURCE_FILE_AT_LINE(line) "goil_types_networkmessage.gSemantics", line
  #define COMMA_SOURCE_FILE_AT_LINE(line) , SOURCE_FILE_AT_LINE(line)
#else
  #define SOURCE_FILE_AT_LINE(line) 
  #define COMMA_SOURCE_FILE_AT_LINE(line) 
#endif


//--- START OF USER ZONE 2


//--- END OF USER ZONE 2

//---------------------------------------------------------------------------*
//                                                                           *
//                        class 'cPtr_base_netprop'                          *
//                                                                           *
//---------------------------------------------------------------------------*

cPtr_base_netprop::
cPtr_base_netprop (const GGS_location & argument_0
                                COMMA_LOCATION_ARGS)
:cPtr__AC_galgas_class (THERE),
loc (argument_0) {
}

//---------------------------------------------------------------------------*

#ifndef DO_NOT_GENERATE_CHECKINGS
  cPtr_base_netprop * GGS_base_netprop::
  operator () (LOCATION_ARGS) const {
    macroValidObjectThere (mPointer, cPtr_base_netprop) ;
    return (cPtr_base_netprop *) mPointer ;
  }
#endif

//---------------------------------------------------------------------------*

void cPtr_base_netprop::
appendForDescription (C_String & ioString,
                      const PMSInt32 inIndentation) const {
  ioString << "->@base_netprop:"
           << loc.reader_description (inIndentation + 1) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                              Class message                                *
//                                                                           *
//---------------------------------------------------------------------------*

const char * cPtr_base_netprop::
instanceMessage (void) const {
  return "" ;
}

//---------------------------------------------------------------------------*

const char * cPtr_base_netprop::
_static_message (void) {
  return "" ;
}

//---------------------------------------------------------------------------*

C_galgas_class_inspector _gInspectorFor_base_netprop (& typeid (cPtr_base_netprop), NULL, "") ;

//---------------------------------------------------------------------------*

AC_galgasClassRunTimeInformationEX * cPtr_base_netprop::galgasRTTI (void) const {
  return & gClassInfoFor__base_netprop ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                     GALGAS class 'GGS_base_netprop'                       *
//                                                                           *
//---------------------------------------------------------------------------*

const C_galgas_type_descriptorEX kTypeDescriptor_GGS_base_netprop ("base_netprop", true, NULL) ;

//---------------------------------------------------------------------------*

GGS_base_netprop::
GGS_base_netprop (const cPtr__AC_galgas_class * inPointer) {
  macroAssignObject (mPointer, (cPtr__AC_galgas_class *) inPointer) ;
}

//---------------------------------------------------------------------------*

GGS_base_netprop::
GGS_base_netprop (cPtr__AC_galgas_class & inObject) {
  macroAssignObject (mPointer, & inObject) ;
}

//---------------------------------------------------------------------------*

//--- castFrom class method (implements cast expression)
GGS_base_netprop GGS_base_netprop::
castFrom (C_Compiler & inLexique,
           cPtr__AC_galgas_class * inPointer,
           const bool inUseKindOfClass,
           const GGS_location & inErrorLocation
           COMMA_LOCATION_ARGS) {
  GGS_base_netprop result ;
  if (inPointer != NULL) {
    macroValidPointer (inPointer) ;
    const bool ok = inUseKindOfClass
      ? (dynamic_cast <cPtr_base_netprop *> (inPointer) != NULL)
      : (typeid (cPtr_base_netprop) == typeid (*inPointer)) ;
    if (ok) {
      result = GGS_base_netprop (inPointer) ;
    }else{
      inErrorLocation.signalCastError (inLexique,
                                       & typeid (cPtr_base_netprop),
                                       inUseKindOfClass,
                                       inPointer->instanceMessage ()
                                       COMMA_THERE) ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_location  GGS_base_netprop::
reader_loc (C_Compiler & /* inLexique */ COMMA_UNUSED_LOCATION_ARGS) const {
  GGS_location   result ;
  if (mPointer != NULL) {
    macroValidPointer (mPointer) ;
    MF_Assert (dynamic_cast <cPtr_base_netprop *> (mPointer) != NULL,
               "dynamic cast error", 0, 0) ;
    result = ((cPtr_base_netprop *) mPointer)->loc ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

const char * GGS_base_netprop::actualTypeName (void) const {
  return "base_netprop" ;
}

//---------------------------------------------------------------------------*

AC_galgasClassRunTimeInformationEX * GGS_base_netprop::galgasObjectRunTimeInfo (void) const {
  AC_galgasClassRunTimeInformationEX * result = NULL ;
  if (mPointer != NULL) {
    result = mPointer->galgasRTTI () ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

C_galgasRootClassRunTimeInformationEX gClassInfoFor__base_netprop ("base_netprop", & kTypeDescriptor_GGS_base_netprop) ;

//---------------------------------------------------------------------------*

GGS_object GGS_base_netprop::reader_object (void) const {
  GGS_object result ;
  if (isBuilt ()) {
    GGS_base_netprop * p = NULL ;
    macroMyNew (p, GGS_base_netprop (*this)) ;
    result = GGS_object (p) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_base_netprop GGS_base_netprop::castFromObject (C_Compiler & inLexique,
                                   const GGS_object & inObject,
                                   const GGS_location & inErrorLocation
                                   COMMA_LOCATION_ARGS) {
  GGS_base_netprop result ;
  const GGS__root * embeddedObject = inObject.embeddedObject () ;
  if (NULL != embeddedObject) {
    const GGS_base_netprop * p = dynamic_cast <const GGS_base_netprop *> (embeddedObject) ;
    if (NULL != p) {
      result = * p ;
    }else{
      castFromObjectErrorSignaling (inLexique, inErrorLocation, & kTypeDescriptor_GGS_base_netprop, embeddedObject COMMA_THERE) ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*

const C_galgas_type_descriptorEX * GGS_base_netprop::typeDescriptor (void) const {
  return & kTypeDescriptor_GGS_base_netprop ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                        class 'cPtr_void_netprop'                          *
//                                                                           *
//---------------------------------------------------------------------------*

cPtr_void_netprop::
cPtr_void_netprop (const GGS_location & argument_0
                                COMMA_LOCATION_ARGS)
:cPtr_base_netprop (argument_0 COMMA_THERE) {
}

//---------------------------------------------------------------------------*

#ifndef DO_NOT_GENERATE_CHECKINGS
  cPtr_void_netprop * GGS_void_netprop::
  operator () (LOCATION_ARGS) const {
    macroValidObjectThere (mPointer, cPtr_void_netprop) ;
    return (cPtr_void_netprop *) mPointer ;
  }
#endif

//---------------------------------------------------------------------------*

bool cPtr_void_netprop::
isEqualToObject (const cPtr__AC_galgas_class * inOperand) const {
  bool equal = typeid (this) == typeid (inOperand) ;
  if (equal) {
    const cPtr_void_netprop * ptr = dynamic_cast <const cPtr_void_netprop *> (inOperand) ;
    macroValidPointer (ptr) ;
    equal = loc.operator_isEqual (ptr->loc).boolValue () ;
  }
  return equal ;
}

//---------------------------------------------------------------------------*

void cPtr_void_netprop::
appendForDescription (C_String & ioString,
                      const PMSInt32 inIndentation) const {
  ioString << "->@void_netprop:"
           << loc.reader_description (inIndentation + 1) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                              Class message                                *
//                                                                           *
//---------------------------------------------------------------------------*

const char * cPtr_void_netprop::
instanceMessage (void) const {
  return "" ;
}

//---------------------------------------------------------------------------*

const char * cPtr_void_netprop::
_static_message (void) {
  return "" ;
}

//---------------------------------------------------------------------------*

C_galgas_class_inspector _gInspectorFor_void_netprop (& typeid (cPtr_void_netprop), & typeid (cPtr_base_netprop), "") ;

//---------------------------------------------------------------------------*

AC_galgasClassRunTimeInformationEX * cPtr_void_netprop::galgasRTTI (void) const {
  return & gClassInfoFor__void_netprop ;
}

//---------------------------------------------------------------------------*

cPtr__AC_galgas_class * cPtr_void_netprop::makeClone (void) const {
  cPtr__AC_galgas_class * result = NULL ;
  macroMyNew (result, cPtr_void_netprop (loc COMMA_HERE)) ;
  return result ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                     GALGAS class 'GGS_void_netprop'                       *
//                                                                           *
//---------------------------------------------------------------------------*

const C_galgas_type_descriptorEX kTypeDescriptor_GGS_void_netprop ("void_netprop", true, & kTypeDescriptor_GGS_base_netprop) ;

//---------------------------------------------------------------------------*

GGS_void_netprop::
GGS_void_netprop (const cPtr__AC_galgas_class * inPointer) {
  macroAssignObject (mPointer, (cPtr__AC_galgas_class *) inPointer) ;
}

//---------------------------------------------------------------------------*

GGS_void_netprop::
GGS_void_netprop (cPtr__AC_galgas_class & inObject) {
  macroAssignObject (mPointer, & inObject) ;
}

//---------------------------------------------------------------------------*

//--- castFrom class method (implements cast expression)
GGS_void_netprop GGS_void_netprop::
castFrom (C_Compiler & inLexique,
           cPtr__AC_galgas_class * inPointer,
           const bool inUseKindOfClass,
           const GGS_location & inErrorLocation
           COMMA_LOCATION_ARGS) {
  GGS_void_netprop result ;
  if (inPointer != NULL) {
    macroValidPointer (inPointer) ;
    const bool ok = inUseKindOfClass
      ? (dynamic_cast <cPtr_void_netprop *> (inPointer) != NULL)
      : (typeid (cPtr_void_netprop) == typeid (*inPointer)) ;
    if (ok) {
      result = GGS_void_netprop (inPointer) ;
    }else{
      inErrorLocation.signalCastError (inLexique,
                                       & typeid (cPtr_void_netprop),
                                       inUseKindOfClass,
                                       inPointer->instanceMessage ()
                                       COMMA_THERE) ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_void_netprop GGS_void_netprop::
constructor_new (C_Compiler & /* inLexique */,
                 const GGS_location & argument_0
                                COMMA_LOCATION_ARGS) {
  GGS_void_netprop result ;
  macroMyNew (result.mPointer, cPtr_void_netprop (argument_0 COMMA_THERE)) ;
  macroRetainObject (result.mPointer) ;
  return result ;
}

//---------------------------------------------------------------------------*

const char * GGS_void_netprop::actualTypeName (void) const {
  return "void_netprop" ;
}

//---------------------------------------------------------------------------*

C_galgasClassRunTimeInformationEX gClassInfoFor__void_netprop ("void_netprop", gClassInfoFor__base_netprop, & kTypeDescriptor_GGS_void_netprop) ;

//---------------------------------------------------------------------------*

GGS_object GGS_void_netprop::reader_object (void) const {
  GGS_object result ;
  if (isBuilt ()) {
    GGS_void_netprop * p = NULL ;
    macroMyNew (p, GGS_void_netprop (*this)) ;
    result = GGS_object (p) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_void_netprop GGS_void_netprop::castFromObject (C_Compiler & inLexique,
                                   const GGS_object & inObject,
                                   const GGS_location & inErrorLocation
                                   COMMA_LOCATION_ARGS) {
  GGS_void_netprop result ;
  const GGS__root * embeddedObject = inObject.embeddedObject () ;
  if (NULL != embeddedObject) {
    const GGS_void_netprop * p = dynamic_cast <const GGS_void_netprop *> (embeddedObject) ;
    if (NULL != p) {
      result = * p ;
    }else{
      castFromObjectErrorSignaling (inLexique, inErrorLocation, & kTypeDescriptor_GGS_void_netprop, embeddedObject COMMA_THERE) ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*

const C_galgas_type_descriptorEX * GGS_void_netprop::typeDescriptor (void) const {
  return & kTypeDescriptor_GGS_void_netprop ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                       class 'cPtr_static_netprop'                         *
//                                                                           *
//---------------------------------------------------------------------------*

cPtr_static_netprop::
cPtr_static_netprop (const GGS_location & argument_0,
                                const GGS_lsint & argument_1,
                                const GGS_lstring & argument_2,
                                const GGS_lsint & argument_3,
                                const GGS_lstring & argument_4,
                                const GGS_luint64 & argument_5,
                                const GGS_lstring & argument_6
                                COMMA_LOCATION_ARGS)
:cPtr_base_netprop (argument_0 COMMA_THERE),
size_in_bits (argument_1),
bit_ordering (argument_2),
bit_position (argument_3),
data_interpretation (argument_4),
initial_value (argument_5),
direction (argument_6) {
}

//---------------------------------------------------------------------------*

#ifndef DO_NOT_GENERATE_CHECKINGS
  cPtr_static_netprop * GGS_static_netprop::
  operator () (LOCATION_ARGS) const {
    macroValidObjectThere (mPointer, cPtr_static_netprop) ;
    return (cPtr_static_netprop *) mPointer ;
  }
#endif

//---------------------------------------------------------------------------*

bool cPtr_static_netprop::
isEqualToObject (const cPtr__AC_galgas_class * inOperand) const {
  bool equal = typeid (this) == typeid (inOperand) ;
  if (equal) {
    const cPtr_static_netprop * ptr = dynamic_cast <const cPtr_static_netprop *> (inOperand) ;
    macroValidPointer (ptr) ;
    equal = loc.operator_isEqual (ptr->loc).boolValue ()
         && size_in_bits.operator_isEqual (ptr->size_in_bits).boolValue ()
         && bit_ordering.operator_isEqual (ptr->bit_ordering).boolValue ()
         && bit_position.operator_isEqual (ptr->bit_position).boolValue ()
         && data_interpretation.operator_isEqual (ptr->data_interpretation).boolValue ()
         && initial_value.operator_isEqual (ptr->initial_value).boolValue ()
         && direction.operator_isEqual (ptr->direction).boolValue () ;
  }
  return equal ;
}

//---------------------------------------------------------------------------*

void cPtr_static_netprop::
appendForDescription (C_String & ioString,
                      const PMSInt32 inIndentation) const {
  ioString << "->@static_netprop:"
           << loc.reader_description (inIndentation + 1)
           << size_in_bits.reader_description (inIndentation + 1)
           << bit_ordering.reader_description (inIndentation + 1)
           << bit_position.reader_description (inIndentation + 1)
           << data_interpretation.reader_description (inIndentation + 1)
           << initial_value.reader_description (inIndentation + 1)
           << direction.reader_description (inIndentation + 1) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                              Class message                                *
//                                                                           *
//---------------------------------------------------------------------------*

const char * cPtr_static_netprop::
instanceMessage (void) const {
  return "" ;
}

//---------------------------------------------------------------------------*

const char * cPtr_static_netprop::
_static_message (void) {
  return "" ;
}

//---------------------------------------------------------------------------*

C_galgas_class_inspector _gInspectorFor_static_netprop (& typeid (cPtr_static_netprop), & typeid (cPtr_base_netprop), "") ;

//---------------------------------------------------------------------------*

AC_galgasClassRunTimeInformationEX * cPtr_static_netprop::galgasRTTI (void) const {
  return & gClassInfoFor__static_netprop ;
}

//---------------------------------------------------------------------------*

cPtr__AC_galgas_class * cPtr_static_netprop::makeClone (void) const {
  cPtr__AC_galgas_class * result = NULL ;
  macroMyNew (result, cPtr_static_netprop (loc, size_in_bits, bit_ordering, bit_position, data_interpretation, initial_value, direction COMMA_HERE)) ;
  return result ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                    GALGAS class 'GGS_static_netprop'                      *
//                                                                           *
//---------------------------------------------------------------------------*

const C_galgas_type_descriptorEX kTypeDescriptor_GGS_static_netprop ("static_netprop", true, & kTypeDescriptor_GGS_base_netprop) ;

//---------------------------------------------------------------------------*

GGS_static_netprop::
GGS_static_netprop (const cPtr__AC_galgas_class * inPointer) {
  macroAssignObject (mPointer, (cPtr__AC_galgas_class *) inPointer) ;
}

//---------------------------------------------------------------------------*

GGS_static_netprop::
GGS_static_netprop (cPtr__AC_galgas_class & inObject) {
  macroAssignObject (mPointer, & inObject) ;
}

//---------------------------------------------------------------------------*

//--- castFrom class method (implements cast expression)
GGS_static_netprop GGS_static_netprop::
castFrom (C_Compiler & inLexique,
           cPtr__AC_galgas_class * inPointer,
           const bool inUseKindOfClass,
           const GGS_location & inErrorLocation
           COMMA_LOCATION_ARGS) {
  GGS_static_netprop result ;
  if (inPointer != NULL) {
    macroValidPointer (inPointer) ;
    const bool ok = inUseKindOfClass
      ? (dynamic_cast <cPtr_static_netprop *> (inPointer) != NULL)
      : (typeid (cPtr_static_netprop) == typeid (*inPointer)) ;
    if (ok) {
      result = GGS_static_netprop (inPointer) ;
    }else{
      inErrorLocation.signalCastError (inLexique,
                                       & typeid (cPtr_static_netprop),
                                       inUseKindOfClass,
                                       inPointer->instanceMessage ()
                                       COMMA_THERE) ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_static_netprop GGS_static_netprop::
constructor_new (C_Compiler & /* inLexique */,
                 const GGS_location & argument_0,
                 const GGS_lsint & argument_1,
                 const GGS_lstring & argument_2,
                 const GGS_lsint & argument_3,
                 const GGS_lstring & argument_4,
                 const GGS_luint64 & argument_5,
                 const GGS_lstring & argument_6
                                COMMA_LOCATION_ARGS) {
  GGS_static_netprop result ;
  macroMyNew (result.mPointer, cPtr_static_netprop (argument_0,
                                argument_1,
                                argument_2,
                                argument_3,
                                argument_4,
                                argument_5,
                                argument_6 COMMA_THERE)) ;
  macroRetainObject (result.mPointer) ;
  return result ;
}

//---------------------------------------------------------------------------*

GGS_lsint  GGS_static_netprop::
reader_size_in_bits (C_Compiler & /* inLexique */ COMMA_UNUSED_LOCATION_ARGS) const {
  GGS_lsint   result ;
  if (mPointer != NULL) {
    macroValidPointer (mPointer) ;
    MF_Assert (dynamic_cast <cPtr_static_netprop *> (mPointer) != NULL,
               "dynamic cast error", 0, 0) ;
    result = ((cPtr_static_netprop *) mPointer)->size_in_bits ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_lstring  GGS_static_netprop::
reader_bit_ordering (C_Compiler & /* inLexique */ COMMA_UNUSED_LOCATION_ARGS) const {
  GGS_lstring   result ;
  if (mPointer != NULL) {
    macroValidPointer (mPointer) ;
    MF_Assert (dynamic_cast <cPtr_static_netprop *> (mPointer) != NULL,
               "dynamic cast error", 0, 0) ;
    result = ((cPtr_static_netprop *) mPointer)->bit_ordering ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_lsint  GGS_static_netprop::
reader_bit_position (C_Compiler & /* inLexique */ COMMA_UNUSED_LOCATION_ARGS) const {
  GGS_lsint   result ;
  if (mPointer != NULL) {
    macroValidPointer (mPointer) ;
    MF_Assert (dynamic_cast <cPtr_static_netprop *> (mPointer) != NULL,
               "dynamic cast error", 0, 0) ;
    result = ((cPtr_static_netprop *) mPointer)->bit_position ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_lstring  GGS_static_netprop::
reader_data_interpretation (C_Compiler & /* inLexique */ COMMA_UNUSED_LOCATION_ARGS) const {
  GGS_lstring   result ;
  if (mPointer != NULL) {
    macroValidPointer (mPointer) ;
    MF_Assert (dynamic_cast <cPtr_static_netprop *> (mPointer) != NULL,
               "dynamic cast error", 0, 0) ;
    result = ((cPtr_static_netprop *) mPointer)->data_interpretation ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_luint64  GGS_static_netprop::
reader_initial_value (C_Compiler & /* inLexique */ COMMA_UNUSED_LOCATION_ARGS) const {
  GGS_luint64   result ;
  if (mPointer != NULL) {
    macroValidPointer (mPointer) ;
    MF_Assert (dynamic_cast <cPtr_static_netprop *> (mPointer) != NULL,
               "dynamic cast error", 0, 0) ;
    result = ((cPtr_static_netprop *) mPointer)->initial_value ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_lstring  GGS_static_netprop::
reader_direction (C_Compiler & /* inLexique */ COMMA_UNUSED_LOCATION_ARGS) const {
  GGS_lstring   result ;
  if (mPointer != NULL) {
    macroValidPointer (mPointer) ;
    MF_Assert (dynamic_cast <cPtr_static_netprop *> (mPointer) != NULL,
               "dynamic cast error", 0, 0) ;
    result = ((cPtr_static_netprop *) mPointer)->direction ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

const char * GGS_static_netprop::actualTypeName (void) const {
  return "static_netprop" ;
}

//---------------------------------------------------------------------------*

C_galgasClassRunTimeInformationEX gClassInfoFor__static_netprop ("static_netprop", gClassInfoFor__base_netprop, & kTypeDescriptor_GGS_static_netprop) ;

//---------------------------------------------------------------------------*

GGS_object GGS_static_netprop::reader_object (void) const {
  GGS_object result ;
  if (isBuilt ()) {
    GGS_static_netprop * p = NULL ;
    macroMyNew (p, GGS_static_netprop (*this)) ;
    result = GGS_object (p) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_static_netprop GGS_static_netprop::castFromObject (C_Compiler & inLexique,
                                   const GGS_object & inObject,
                                   const GGS_location & inErrorLocation
                                   COMMA_LOCATION_ARGS) {
  GGS_static_netprop result ;
  const GGS__root * embeddedObject = inObject.embeddedObject () ;
  if (NULL != embeddedObject) {
    const GGS_static_netprop * p = dynamic_cast <const GGS_static_netprop *> (embeddedObject) ;
    if (NULL != p) {
      result = * p ;
    }else{
      castFromObjectErrorSignaling (inLexique, inErrorLocation, & kTypeDescriptor_GGS_static_netprop, embeddedObject COMMA_THERE) ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*

const C_galgas_type_descriptorEX * GGS_static_netprop::typeDescriptor (void) const {
  return & kTypeDescriptor_GGS_static_netprop ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                       class 'cPtr_dynamic_netprop'                        *
//                                                                           *
//---------------------------------------------------------------------------*

cPtr_dynamic_netprop::
cPtr_dynamic_netprop (const GGS_location & argument_0,
                                const GGS_lsint & argument_1,
                                const GGS_lstring & argument_2,
                                const GGS_lsint & argument_3,
                                const GGS_luint64 & argument_4,
                                const GGS_lstring & argument_5
                                COMMA_LOCATION_ARGS)
:cPtr_base_netprop (argument_0 COMMA_THERE),
max_size_in_bits (argument_1),
bit_ordering (argument_2),
bit_position (argument_3),
initial_value (argument_4),
direction (argument_5) {
}

//---------------------------------------------------------------------------*

#ifndef DO_NOT_GENERATE_CHECKINGS
  cPtr_dynamic_netprop * GGS_dynamic_netprop::
  operator () (LOCATION_ARGS) const {
    macroValidObjectThere (mPointer, cPtr_dynamic_netprop) ;
    return (cPtr_dynamic_netprop *) mPointer ;
  }
#endif

//---------------------------------------------------------------------------*

bool cPtr_dynamic_netprop::
isEqualToObject (const cPtr__AC_galgas_class * inOperand) const {
  bool equal = typeid (this) == typeid (inOperand) ;
  if (equal) {
    const cPtr_dynamic_netprop * ptr = dynamic_cast <const cPtr_dynamic_netprop *> (inOperand) ;
    macroValidPointer (ptr) ;
    equal = loc.operator_isEqual (ptr->loc).boolValue ()
         && max_size_in_bits.operator_isEqual (ptr->max_size_in_bits).boolValue ()
         && bit_ordering.operator_isEqual (ptr->bit_ordering).boolValue ()
         && bit_position.operator_isEqual (ptr->bit_position).boolValue ()
         && initial_value.operator_isEqual (ptr->initial_value).boolValue ()
         && direction.operator_isEqual (ptr->direction).boolValue () ;
  }
  return equal ;
}

//---------------------------------------------------------------------------*

void cPtr_dynamic_netprop::
appendForDescription (C_String & ioString,
                      const PMSInt32 inIndentation) const {
  ioString << "->@dynamic_netprop:"
           << loc.reader_description (inIndentation + 1)
           << max_size_in_bits.reader_description (inIndentation + 1)
           << bit_ordering.reader_description (inIndentation + 1)
           << bit_position.reader_description (inIndentation + 1)
           << initial_value.reader_description (inIndentation + 1)
           << direction.reader_description (inIndentation + 1) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                              Class message                                *
//                                                                           *
//---------------------------------------------------------------------------*

const char * cPtr_dynamic_netprop::
instanceMessage (void) const {
  return "" ;
}

//---------------------------------------------------------------------------*

const char * cPtr_dynamic_netprop::
_static_message (void) {
  return "" ;
}

//---------------------------------------------------------------------------*

C_galgas_class_inspector _gInspectorFor_dynamic_netprop (& typeid (cPtr_dynamic_netprop), & typeid (cPtr_base_netprop), "") ;

//---------------------------------------------------------------------------*

AC_galgasClassRunTimeInformationEX * cPtr_dynamic_netprop::galgasRTTI (void) const {
  return & gClassInfoFor__dynamic_netprop ;
}

//---------------------------------------------------------------------------*

cPtr__AC_galgas_class * cPtr_dynamic_netprop::makeClone (void) const {
  cPtr__AC_galgas_class * result = NULL ;
  macroMyNew (result, cPtr_dynamic_netprop (loc, max_size_in_bits, bit_ordering, bit_position, initial_value, direction COMMA_HERE)) ;
  return result ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                    GALGAS class 'GGS_dynamic_netprop'                     *
//                                                                           *
//---------------------------------------------------------------------------*

const C_galgas_type_descriptorEX kTypeDescriptor_GGS_dynamic_netprop ("dynamic_netprop", true, & kTypeDescriptor_GGS_base_netprop) ;

//---------------------------------------------------------------------------*

GGS_dynamic_netprop::
GGS_dynamic_netprop (const cPtr__AC_galgas_class * inPointer) {
  macroAssignObject (mPointer, (cPtr__AC_galgas_class *) inPointer) ;
}

//---------------------------------------------------------------------------*

GGS_dynamic_netprop::
GGS_dynamic_netprop (cPtr__AC_galgas_class & inObject) {
  macroAssignObject (mPointer, & inObject) ;
}

//---------------------------------------------------------------------------*

//--- castFrom class method (implements cast expression)
GGS_dynamic_netprop GGS_dynamic_netprop::
castFrom (C_Compiler & inLexique,
           cPtr__AC_galgas_class * inPointer,
           const bool inUseKindOfClass,
           const GGS_location & inErrorLocation
           COMMA_LOCATION_ARGS) {
  GGS_dynamic_netprop result ;
  if (inPointer != NULL) {
    macroValidPointer (inPointer) ;
    const bool ok = inUseKindOfClass
      ? (dynamic_cast <cPtr_dynamic_netprop *> (inPointer) != NULL)
      : (typeid (cPtr_dynamic_netprop) == typeid (*inPointer)) ;
    if (ok) {
      result = GGS_dynamic_netprop (inPointer) ;
    }else{
      inErrorLocation.signalCastError (inLexique,
                                       & typeid (cPtr_dynamic_netprop),
                                       inUseKindOfClass,
                                       inPointer->instanceMessage ()
                                       COMMA_THERE) ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_dynamic_netprop GGS_dynamic_netprop::
constructor_new (C_Compiler & /* inLexique */,
                 const GGS_location & argument_0,
                 const GGS_lsint & argument_1,
                 const GGS_lstring & argument_2,
                 const GGS_lsint & argument_3,
                 const GGS_luint64 & argument_4,
                 const GGS_lstring & argument_5
                                COMMA_LOCATION_ARGS) {
  GGS_dynamic_netprop result ;
  macroMyNew (result.mPointer, cPtr_dynamic_netprop (argument_0,
                                argument_1,
                                argument_2,
                                argument_3,
                                argument_4,
                                argument_5 COMMA_THERE)) ;
  macroRetainObject (result.mPointer) ;
  return result ;
}

//---------------------------------------------------------------------------*

GGS_lsint  GGS_dynamic_netprop::
reader_max_size_in_bits (C_Compiler & /* inLexique */ COMMA_UNUSED_LOCATION_ARGS) const {
  GGS_lsint   result ;
  if (mPointer != NULL) {
    macroValidPointer (mPointer) ;
    MF_Assert (dynamic_cast <cPtr_dynamic_netprop *> (mPointer) != NULL,
               "dynamic cast error", 0, 0) ;
    result = ((cPtr_dynamic_netprop *) mPointer)->max_size_in_bits ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_lstring  GGS_dynamic_netprop::
reader_bit_ordering (C_Compiler & /* inLexique */ COMMA_UNUSED_LOCATION_ARGS) const {
  GGS_lstring   result ;
  if (mPointer != NULL) {
    macroValidPointer (mPointer) ;
    MF_Assert (dynamic_cast <cPtr_dynamic_netprop *> (mPointer) != NULL,
               "dynamic cast error", 0, 0) ;
    result = ((cPtr_dynamic_netprop *) mPointer)->bit_ordering ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_lsint  GGS_dynamic_netprop::
reader_bit_position (C_Compiler & /* inLexique */ COMMA_UNUSED_LOCATION_ARGS) const {
  GGS_lsint   result ;
  if (mPointer != NULL) {
    macroValidPointer (mPointer) ;
    MF_Assert (dynamic_cast <cPtr_dynamic_netprop *> (mPointer) != NULL,
               "dynamic cast error", 0, 0) ;
    result = ((cPtr_dynamic_netprop *) mPointer)->bit_position ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_luint64  GGS_dynamic_netprop::
reader_initial_value (C_Compiler & /* inLexique */ COMMA_UNUSED_LOCATION_ARGS) const {
  GGS_luint64   result ;
  if (mPointer != NULL) {
    macroValidPointer (mPointer) ;
    MF_Assert (dynamic_cast <cPtr_dynamic_netprop *> (mPointer) != NULL,
               "dynamic cast error", 0, 0) ;
    result = ((cPtr_dynamic_netprop *) mPointer)->initial_value ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_lstring  GGS_dynamic_netprop::
reader_direction (C_Compiler & /* inLexique */ COMMA_UNUSED_LOCATION_ARGS) const {
  GGS_lstring   result ;
  if (mPointer != NULL) {
    macroValidPointer (mPointer) ;
    MF_Assert (dynamic_cast <cPtr_dynamic_netprop *> (mPointer) != NULL,
               "dynamic cast error", 0, 0) ;
    result = ((cPtr_dynamic_netprop *) mPointer)->direction ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

const char * GGS_dynamic_netprop::actualTypeName (void) const {
  return "dynamic_netprop" ;
}

//---------------------------------------------------------------------------*

C_galgasClassRunTimeInformationEX gClassInfoFor__dynamic_netprop ("dynamic_netprop", gClassInfoFor__base_netprop, & kTypeDescriptor_GGS_dynamic_netprop) ;

//---------------------------------------------------------------------------*

GGS_object GGS_dynamic_netprop::reader_object (void) const {
  GGS_object result ;
  if (isBuilt ()) {
    GGS_dynamic_netprop * p = NULL ;
    macroMyNew (p, GGS_dynamic_netprop (*this)) ;
    result = GGS_object (p) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_dynamic_netprop GGS_dynamic_netprop::castFromObject (C_Compiler & inLexique,
                                   const GGS_object & inObject,
                                   const GGS_location & inErrorLocation
                                   COMMA_LOCATION_ARGS) {
  GGS_dynamic_netprop result ;
  const GGS__root * embeddedObject = inObject.embeddedObject () ;
  if (NULL != embeddedObject) {
    const GGS_dynamic_netprop * p = dynamic_cast <const GGS_dynamic_netprop *> (embeddedObject) ;
    if (NULL != p) {
      result = * p ;
    }else{
      castFromObjectErrorSignaling (inLexique, inErrorLocation, & kTypeDescriptor_GGS_dynamic_netprop, embeddedObject COMMA_THERE) ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*

const C_galgas_type_descriptorEX * GGS_dynamic_netprop::typeDescriptor (void) const {
  return & kTypeDescriptor_GGS_dynamic_netprop ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                        class 'cPtr_zero_netprop'                          *
//                                                                           *
//---------------------------------------------------------------------------*

cPtr_zero_netprop::
cPtr_zero_netprop (const GGS_location & argument_0,
                                const GGS_lstring & argument_1
                                COMMA_LOCATION_ARGS)
:cPtr_base_netprop (argument_0 COMMA_THERE),
direction (argument_1) {
}

//---------------------------------------------------------------------------*

#ifndef DO_NOT_GENERATE_CHECKINGS
  cPtr_zero_netprop * GGS_zero_netprop::
  operator () (LOCATION_ARGS) const {
    macroValidObjectThere (mPointer, cPtr_zero_netprop) ;
    return (cPtr_zero_netprop *) mPointer ;
  }
#endif

//---------------------------------------------------------------------------*

bool cPtr_zero_netprop::
isEqualToObject (const cPtr__AC_galgas_class * inOperand) const {
  bool equal = typeid (this) == typeid (inOperand) ;
  if (equal) {
    const cPtr_zero_netprop * ptr = dynamic_cast <const cPtr_zero_netprop *> (inOperand) ;
    macroValidPointer (ptr) ;
    equal = loc.operator_isEqual (ptr->loc).boolValue ()
         && direction.operator_isEqual (ptr->direction).boolValue () ;
  }
  return equal ;
}

//---------------------------------------------------------------------------*

void cPtr_zero_netprop::
appendForDescription (C_String & ioString,
                      const PMSInt32 inIndentation) const {
  ioString << "->@zero_netprop:"
           << loc.reader_description (inIndentation + 1)
           << direction.reader_description (inIndentation + 1) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                              Class message                                *
//                                                                           *
//---------------------------------------------------------------------------*

const char * cPtr_zero_netprop::
instanceMessage (void) const {
  return "" ;
}

//---------------------------------------------------------------------------*

const char * cPtr_zero_netprop::
_static_message (void) {
  return "" ;
}

//---------------------------------------------------------------------------*

C_galgas_class_inspector _gInspectorFor_zero_netprop (& typeid (cPtr_zero_netprop), & typeid (cPtr_base_netprop), "") ;

//---------------------------------------------------------------------------*

AC_galgasClassRunTimeInformationEX * cPtr_zero_netprop::galgasRTTI (void) const {
  return & gClassInfoFor__zero_netprop ;
}

//---------------------------------------------------------------------------*

cPtr__AC_galgas_class * cPtr_zero_netprop::makeClone (void) const {
  cPtr__AC_galgas_class * result = NULL ;
  macroMyNew (result, cPtr_zero_netprop (loc, direction COMMA_HERE)) ;
  return result ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                     GALGAS class 'GGS_zero_netprop'                       *
//                                                                           *
//---------------------------------------------------------------------------*

const C_galgas_type_descriptorEX kTypeDescriptor_GGS_zero_netprop ("zero_netprop", true, & kTypeDescriptor_GGS_base_netprop) ;

//---------------------------------------------------------------------------*

GGS_zero_netprop::
GGS_zero_netprop (const cPtr__AC_galgas_class * inPointer) {
  macroAssignObject (mPointer, (cPtr__AC_galgas_class *) inPointer) ;
}

//---------------------------------------------------------------------------*

GGS_zero_netprop::
GGS_zero_netprop (cPtr__AC_galgas_class & inObject) {
  macroAssignObject (mPointer, & inObject) ;
}

//---------------------------------------------------------------------------*

//--- castFrom class method (implements cast expression)
GGS_zero_netprop GGS_zero_netprop::
castFrom (C_Compiler & inLexique,
           cPtr__AC_galgas_class * inPointer,
           const bool inUseKindOfClass,
           const GGS_location & inErrorLocation
           COMMA_LOCATION_ARGS) {
  GGS_zero_netprop result ;
  if (inPointer != NULL) {
    macroValidPointer (inPointer) ;
    const bool ok = inUseKindOfClass
      ? (dynamic_cast <cPtr_zero_netprop *> (inPointer) != NULL)
      : (typeid (cPtr_zero_netprop) == typeid (*inPointer)) ;
    if (ok) {
      result = GGS_zero_netprop (inPointer) ;
    }else{
      inErrorLocation.signalCastError (inLexique,
                                       & typeid (cPtr_zero_netprop),
                                       inUseKindOfClass,
                                       inPointer->instanceMessage ()
                                       COMMA_THERE) ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_zero_netprop GGS_zero_netprop::
constructor_new (C_Compiler & /* inLexique */,
                 const GGS_location & argument_0,
                 const GGS_lstring & argument_1
                                COMMA_LOCATION_ARGS) {
  GGS_zero_netprop result ;
  macroMyNew (result.mPointer, cPtr_zero_netprop (argument_0,
                                argument_1 COMMA_THERE)) ;
  macroRetainObject (result.mPointer) ;
  return result ;
}

//---------------------------------------------------------------------------*

GGS_lstring  GGS_zero_netprop::
reader_direction (C_Compiler & /* inLexique */ COMMA_UNUSED_LOCATION_ARGS) const {
  GGS_lstring   result ;
  if (mPointer != NULL) {
    macroValidPointer (mPointer) ;
    MF_Assert (dynamic_cast <cPtr_zero_netprop *> (mPointer) != NULL,
               "dynamic cast error", 0, 0) ;
    result = ((cPtr_zero_netprop *) mPointer)->direction ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

const char * GGS_zero_netprop::actualTypeName (void) const {
  return "zero_netprop" ;
}

//---------------------------------------------------------------------------*

C_galgasClassRunTimeInformationEX gClassInfoFor__zero_netprop ("zero_netprop", gClassInfoFor__base_netprop, & kTypeDescriptor_GGS_zero_netprop) ;

//---------------------------------------------------------------------------*

GGS_object GGS_zero_netprop::reader_object (void) const {
  GGS_object result ;
  if (isBuilt ()) {
    GGS_zero_netprop * p = NULL ;
    macroMyNew (p, GGS_zero_netprop (*this)) ;
    result = GGS_object (p) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_zero_netprop GGS_zero_netprop::castFromObject (C_Compiler & inLexique,
                                   const GGS_object & inObject,
                                   const GGS_location & inErrorLocation
                                   COMMA_LOCATION_ARGS) {
  GGS_zero_netprop result ;
  const GGS__root * embeddedObject = inObject.embeddedObject () ;
  if (NULL != embeddedObject) {
    const GGS_zero_netprop * p = dynamic_cast <const GGS_zero_netprop *> (embeddedObject) ;
    if (NULL != p) {
      result = * p ;
    }else{
      castFromObjectErrorSignaling (inLexique, inErrorLocation, & kTypeDescriptor_GGS_zero_netprop, embeddedObject COMMA_THERE) ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*

const C_galgas_type_descriptorEX * GGS_zero_netprop::typeDescriptor (void) const {
  return & kTypeDescriptor_GGS_zero_netprop ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                         class 'cPtr_netmess_obj'                          *
//                                                                           *
//---------------------------------------------------------------------------*

cPtr_netmess_obj::
cPtr_netmess_obj (const GGS_lstring & argument_0,
                                const GGS_lstring & argument_1,
                                const GGS_base_netprop & argument_2
                                COMMA_LOCATION_ARGS)
:cPtr_oil_obj (argument_0 COMMA_THERE),
ipdu (argument_1),
netprop (argument_2) {
}

//---------------------------------------------------------------------------*

#ifndef DO_NOT_GENERATE_CHECKINGS
  cPtr_netmess_obj * GGS_netmess_obj::
  operator () (LOCATION_ARGS) const {
    macroValidObjectThere (mPointer, cPtr_netmess_obj) ;
    return (cPtr_netmess_obj *) mPointer ;
  }
#endif

//---------------------------------------------------------------------------*

bool cPtr_netmess_obj::
isEqualToObject (const cPtr__AC_galgas_class * inOperand) const {
  bool equal = typeid (this) == typeid (inOperand) ;
  if (equal) {
    const cPtr_netmess_obj * ptr = dynamic_cast <const cPtr_netmess_obj *> (inOperand) ;
    macroValidPointer (ptr) ;
    equal = desc.operator_isEqual (ptr->desc).boolValue ()
         && ipdu.operator_isEqual (ptr->ipdu).boolValue ()
         && netprop.operator_isEqual (ptr->netprop).boolValue () ;
  }
  return equal ;
}

//---------------------------------------------------------------------------*

void cPtr_netmess_obj::
appendForDescription (C_String & ioString,
                      const PMSInt32 inIndentation) const {
  ioString << "->@netmess_obj:"
           << desc.reader_description (inIndentation + 1)
           << ipdu.reader_description (inIndentation + 1)
           << netprop.reader_description (inIndentation + 1) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                              Class message                                *
//                                                                           *
//---------------------------------------------------------------------------*

const char * cPtr_netmess_obj::
instanceMessage (void) const {
  return "" ;
}

//---------------------------------------------------------------------------*

const char * cPtr_netmess_obj::
_static_message (void) {
  return "" ;
}

//---------------------------------------------------------------------------*

C_galgas_class_inspector _gInspectorFor_netmess_obj (& typeid (cPtr_netmess_obj), & typeid (cPtr_oil_obj), "") ;

//---------------------------------------------------------------------------*

AC_galgasClassRunTimeInformationEX * cPtr_netmess_obj::galgasRTTI (void) const {
  return & gClassInfoFor__netmess_obj ;
}

//---------------------------------------------------------------------------*

cPtr__AC_galgas_class * cPtr_netmess_obj::makeClone (void) const {
  cPtr__AC_galgas_class * result = NULL ;
  macroMyNew (result, cPtr_netmess_obj (desc, ipdu, netprop COMMA_HERE)) ;
  return result ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                      GALGAS class 'GGS_netmess_obj'                       *
//                                                                           *
//---------------------------------------------------------------------------*

const C_galgas_type_descriptorEX kTypeDescriptor_GGS_netmess_obj ("netmess_obj", true, & kTypeDescriptor_GGS_oil_obj) ;

//---------------------------------------------------------------------------*

GGS_netmess_obj::
GGS_netmess_obj (const cPtr__AC_galgas_class * inPointer) {
  macroAssignObject (mPointer, (cPtr__AC_galgas_class *) inPointer) ;
}

//---------------------------------------------------------------------------*

GGS_netmess_obj::
GGS_netmess_obj (cPtr__AC_galgas_class & inObject) {
  macroAssignObject (mPointer, & inObject) ;
}

//---------------------------------------------------------------------------*

//--- castFrom class method (implements cast expression)
GGS_netmess_obj GGS_netmess_obj::
castFrom (C_Compiler & inLexique,
           cPtr__AC_galgas_class * inPointer,
           const bool inUseKindOfClass,
           const GGS_location & inErrorLocation
           COMMA_LOCATION_ARGS) {
  GGS_netmess_obj result ;
  if (inPointer != NULL) {
    macroValidPointer (inPointer) ;
    const bool ok = inUseKindOfClass
      ? (dynamic_cast <cPtr_netmess_obj *> (inPointer) != NULL)
      : (typeid (cPtr_netmess_obj) == typeid (*inPointer)) ;
    if (ok) {
      result = GGS_netmess_obj (inPointer) ;
    }else{
      inErrorLocation.signalCastError (inLexique,
                                       & typeid (cPtr_netmess_obj),
                                       inUseKindOfClass,
                                       inPointer->instanceMessage ()
                                       COMMA_THERE) ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_netmess_obj GGS_netmess_obj::
constructor_new (C_Compiler & /* inLexique */,
                 const GGS_lstring & argument_0,
                 const GGS_lstring & argument_1,
                 const GGS_base_netprop & argument_2
                                COMMA_LOCATION_ARGS) {
  GGS_netmess_obj result ;
  macroMyNew (result.mPointer, cPtr_netmess_obj (argument_0,
                                argument_1,
                                argument_2 COMMA_THERE)) ;
  macroRetainObject (result.mPointer) ;
  return result ;
}

//---------------------------------------------------------------------------*

GGS_lstring  GGS_netmess_obj::
reader_ipdu (C_Compiler & /* inLexique */ COMMA_UNUSED_LOCATION_ARGS) const {
  GGS_lstring   result ;
  if (mPointer != NULL) {
    macroValidPointer (mPointer) ;
    MF_Assert (dynamic_cast <cPtr_netmess_obj *> (mPointer) != NULL,
               "dynamic cast error", 0, 0) ;
    result = ((cPtr_netmess_obj *) mPointer)->ipdu ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_base_netprop  GGS_netmess_obj::
reader_netprop (C_Compiler & /* inLexique */ COMMA_UNUSED_LOCATION_ARGS) const {
  GGS_base_netprop   result ;
  if (mPointer != NULL) {
    macroValidPointer (mPointer) ;
    MF_Assert (dynamic_cast <cPtr_netmess_obj *> (mPointer) != NULL,
               "dynamic cast error", 0, 0) ;
    result = ((cPtr_netmess_obj *) mPointer)->netprop ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

const char * GGS_netmess_obj::actualTypeName (void) const {
  return "netmess_obj" ;
}

//---------------------------------------------------------------------------*

C_galgasClassRunTimeInformationEX gClassInfoFor__netmess_obj ("netmess_obj", gClassInfoFor__oil_obj, & kTypeDescriptor_GGS_netmess_obj) ;

//---------------------------------------------------------------------------*

GGS_object GGS_netmess_obj::reader_object (void) const {
  GGS_object result ;
  if (isBuilt ()) {
    GGS_netmess_obj * p = NULL ;
    macroMyNew (p, GGS_netmess_obj (*this)) ;
    result = GGS_object (p) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_netmess_obj GGS_netmess_obj::castFromObject (C_Compiler & inLexique,
                                   const GGS_object & inObject,
                                   const GGS_location & inErrorLocation
                                   COMMA_LOCATION_ARGS) {
  GGS_netmess_obj result ;
  const GGS__root * embeddedObject = inObject.embeddedObject () ;
  if (NULL != embeddedObject) {
    const GGS_netmess_obj * p = dynamic_cast <const GGS_netmess_obj *> (embeddedObject) ;
    if (NULL != p) {
      result = * p ;
    }else{
      castFromObjectErrorSignaling (inLexique, inErrorLocation, & kTypeDescriptor_GGS_netmess_obj, embeddedObject COMMA_THERE) ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*

const C_galgas_type_descriptorEX * GGS_netmess_obj::typeDescriptor (void) const {
  return & kTypeDescriptor_GGS_netmess_obj ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                          class 'e_netmess_map'                            *
//                                                                           *
//---------------------------------------------------------------------------*

e_netmess_map::e_netmess_map (void) :
netmess () {
}

//---------------------------------------------------------------------------*
//                                                                           *
//                         class map '@netmess_map'                          *
//                                                                           *
//---------------------------------------------------------------------------*

const C_galgas_type_descriptorEX kTypeDescriptor_GGS_netmess_map ("netmess_map", false, NULL) ;

//---------------------------------------------------------------------------*

elementOf_GGS_netmess_map::
elementOf_GGS_netmess_map (const GGS_lstring & inKey,
              const PMSInt32 inIndex,
              const e_netmess_map & inInfo,
              const PMUInt32 inInitialState) :
AC_galgas_map_element (inKey, inIndex, inInitialState),
mInfo (inInfo) {
}

//---------------------------------------------------------------------------*

void elementOf_GGS_netmess_map::
appendForMapDescription (const PMSInt32 inElementIndex,
                         C_String & ioString,
                         const PMSInt32 inIndentation) const {
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "|-key " ;
  ioString.appendSigned (inElementIndex) ;
  ioString << ":" << mKey.reader_description (inIndentation + 1) ;
  ioString << (mIsDefined ? "" : "(not solved)") ;
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "|-value " ;
  ioString.appendSigned (inElementIndex) ;
  ioString << ":" << mInfo.netmess.reader_description (inIndentation + 1) ;
}

//---------------------------------------------------------------------------*

bool elementOf_GGS_netmess_map::
isEqualToMapElement (const AC_galgas_map_element * inOperand) const {
  const elementOf_GGS_netmess_map * ptr = dynamic_cast <const elementOf_GGS_netmess_map *> (inOperand) ;
  macroValidPointer (ptr) ;
  return (mInfo.netmess.operator_isEqual (ptr->mInfo.netmess)).boolValue () ;
}

//---------------------------------------------------------------------------*

AC_galgas_map_element * GGS_netmess_map::
new_element (const GGS_lstring & inKey, void * inInfo, const PMUInt32 inInitialState) {
  MF_Assert (reinterpret_cast <e_netmess_map *> (inInfo) != NULL, "Dynamic cast error", 0, 0) ;
  AC_galgas_map_element * p = NULL ;
  e_netmess_map * info = (e_netmess_map *) inInfo ;
  macroMyNew (p, cElement (inKey, nextIndex (), * info, inInitialState)) ;
  return p ;
}

//---------------------------------------------------------------------------*

void GGS_netmess_map::
assignInfo (AC_galgas_map_element * inPtr, void * inInfo) {
  MF_Assert (reinterpret_cast <cElement *> (inPtr) != NULL, "Dynamic cast error", 0, 0) ;
  MF_Assert (reinterpret_cast <e_netmess_map *> (inInfo) != NULL, "Dynamic cast error", 0, 0) ;
  cElement * p = (cElement *) inPtr ;
  e_netmess_map * info = (e_netmess_map *) inInfo ;
  p->mInfo = * info ;
}

//---------------------------------------------------------------------------*

GGS_netmess_map GGS_netmess_map::
constructor_emptyMap (C_Compiler & /* inLexique */ COMMA_UNUSED_LOCATION_ARGS) {
  GGS_netmess_map result ;
  macroMyNew (result.mSharedMapRoot, cMapRoot) ;
  return result ;
}

//---------------------------------------------------------------------------*

void GGS_netmess_map::
enterIndex (const GGS_string & inKey,
            AC_galgas_index_core & outIndex) {
  e_netmess_map info  ;
  internalEnterIndex (inKey,
                      (void *) & info,
                      outIndex) ;
}

//---------------------------------------------------------------------------*

GGS_bool GGS_netmess_map::
operator_isEqual (const GGS_netmess_map & inOperand) const {
  return GGS_bool (isBuilt () && inOperand.isBuilt (), isEqualToMap (inOperand)) ;
}

//---------------------------------------------------------------------------*

GGS_bool GGS_netmess_map::
operator_isNotEqual (const GGS_netmess_map & inOperand) const {
  return GGS_bool (isBuilt () && inOperand.isBuilt (), ! isEqualToMap (inOperand)) ;
}

//---------------------------------------------------------------------------*

void GGS_netmess_map::
internalInsertForDuplication (AC_galgas_map_element * inPtr) {
  MF_Assert (reinterpret_cast <cElement *> (inPtr) != NULL, "Dynamic cast error", 0, 0) ;
  cElement * p = (cElement *) inPtr ;
  PMSInt32 attributeIndex = -1 ; // Unused here
  GGS_location existingKeyLocation ; // Unused here
  internalInsert (p->mKey, (void *) & p->mInfo, attributeIndex, existingKeyLocation, p->mIsDefined, p->mCurrentState) ;
}

//---------------------------------------------------------------------------*

void GGS_netmess_map::
removeElement (C_Compiler & inLexique,
                const utf32 * inErrorMessage,
                const GGS_lstring & inKey,
                GGS_netmess_obj & outParameter0,
                GGS_luint * outIndex
                COMMA_LOCATION_ARGS) {
  AC_galgas_map_element * removedElement = NULL ;
  PMSInt32 elementID = - 1 ;
  if (isBuilt () && inKey.isBuilt ()) {
    removedElement = internalRemove (inKey) ;
    if (removedElement == NULL) {
      inLexique.semanticErrorUsingPerCentK (inKey.string (), inKey, inErrorMessage COMMA_THERE) ;
      outParameter0.drop () ;
    }else{
      cElement * ptr = (cElement *) removedElement ;
      elementID = ptr->mID ;
      outParameter0 = ptr->mInfo.netmess ;
    }
  }
  if (outIndex != NULL) {
    * outIndex = GGS_luint (GGS_uint (elementID >= 0, (PMUInt32) elementID), inKey) ;
  }
  macroMyDelete (removedElement) ;
}

//---------------------------------------------------------------------------*

void GGS_netmess_map::
insertElement (C_Compiler & inLexique,
               const PMUInt32 inInitialState,
               const utf32 * inErrorMessage,
               const GGS_lstring & inKey,
               const GGS_netmess_obj & inParameter0,
               GGS_luint * outIndex
               COMMA_LOCATION_ARGS) {
  PMSInt32 elementID = - 1 ;
  if (isBuilt ()
   && inParameter0.isBuilt ()
   && inKey.isBuilt ()) {
    insulateMap (THERE) ;
    e_netmess_map info  ;
    info.netmess = inParameter0 ;
    GGS_location existingKeyLocation ;
    internalInsert (inKey, (void *) & info, elementID, existingKeyLocation, true, inInitialState) ;
    if (elementID < 0) {
      emitInsertMapSemanticErrorMessage (inLexique, inKey, inErrorMessage, existingKeyLocation COMMA_THERE) ;
    }
  }
  if (outIndex != NULL) {
    * outIndex = GGS_luint (GGS_uint (elementID >= 0, (PMUInt32) elementID), inKey) ;
  }
}

//---------------------------------------------------------------------------*

void GGS_netmess_map::
searchElement (C_Compiler & inLexique,
               const PMUInt32 /* inActionIndex */,
               const utf32 * inErrorMessage,
               const GGS_lstring & inKey,
               GGS_netmess_obj   & outParameter0,
               GGS_luint * outIndex
               COMMA_LOCATION_ARGS) const {
  cElement * node = NULL  ;
  if (isBuilt () && inKey.isBuilt ()) {
    AC_galgas_map_element * p = internal_search (inKey.string ()) ;
    MF_Assert ((p == NULL) || (reinterpret_cast <cElement *> (p) != NULL), "Dynamic cast error", 0, 0) ;
    node = (cElement *) p ;
    if (node == NULL) {
      inLexique.semanticErrorUsingPerCentK (inKey.string (), inKey, inErrorMessage COMMA_THERE) ;
    }
  }
  if (node == NULL) {
    outParameter0.drop () ;
    if (outIndex != NULL) {
      outIndex->drop () ;
    }
  }else{
    outParameter0 = node->mInfo.netmess ;
    if (outIndex != NULL) {
      * outIndex = GGS_luint (GGS_uint (true, (PMUInt32) node->mID), inKey) ;
    }
  }
}

//---------------------------------------------------------------------------*

const utf32 GGS_netmess_map::kSearchMessage_get [] = {
  TO_UNICODE ('N'),
  TO_UNICODE ('e'),
  TO_UNICODE ('t'),
  TO_UNICODE ('w'),
  TO_UNICODE ('o'),
  TO_UNICODE ('r'),
  TO_UNICODE ('k'),
  TO_UNICODE (' '),
  TO_UNICODE ('m'),
  TO_UNICODE ('e'),
  TO_UNICODE ('s'),
  TO_UNICODE ('s'),
  TO_UNICODE ('a'),
  TO_UNICODE ('g'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('%'),
  TO_UNICODE ('K'),
  TO_UNICODE (' '),
  TO_UNICODE ('i'),
  TO_UNICODE ('s'),
  TO_UNICODE (' '),
  TO_UNICODE ('u'),
  TO_UNICODE ('n'),
  TO_UNICODE ('k'),
  TO_UNICODE ('o'),
  TO_UNICODE ('w'),
  TO_UNICODE ('n'),
  TO_UNICODE (0)
} ;

//---------------------------------------------------------------------------*

void GGS_netmess_map::
method_get (C_Compiler & inLexique,
                                const GGS_lstring & inKey,
                                GGS_netmess_obj   & outParameter0 COMMA_LOCATION_ARGS) const {
  searchElement (inLexique,
                 0,
                 kSearchMessage_get,
                 inKey,
                 outParameter0,
                 NULL
                 COMMA_THERE) ;
}

//---------------------------------------------------------------------------*

const utf32 GGS_netmess_map::kRemoveMessage_del [] = {
  TO_UNICODE ('N'),
  TO_UNICODE ('e'),
  TO_UNICODE ('t'),
  TO_UNICODE ('m'),
  TO_UNICODE ('o'),
  TO_UNICODE ('r'),
  TO_UNICODE ('k'),
  TO_UNICODE (' '),
  TO_UNICODE ('m'),
  TO_UNICODE ('e'),
  TO_UNICODE ('s'),
  TO_UNICODE ('s'),
  TO_UNICODE ('a'),
  TO_UNICODE ('g'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('%'),
  TO_UNICODE ('K'),
  TO_UNICODE (' '),
  TO_UNICODE ('i'),
  TO_UNICODE ('s'),
  TO_UNICODE (' '),
  TO_UNICODE ('u'),
  TO_UNICODE ('n'),
  TO_UNICODE ('k'),
  TO_UNICODE ('o'),
  TO_UNICODE ('w'),
  TO_UNICODE ('n'),
  TO_UNICODE (0)
} ;

//---------------------------------------------------------------------------*

void GGS_netmess_map::
modifier_del (C_Compiler & inLexique,
                                const GGS_lstring & inKey,
                                GGS_netmess_obj & outParameter0 COMMA_LOCATION_ARGS) {
  removeElement (inLexique,
                  kRemoveMessage_del,
                  inKey,
                  outParameter0,
                  NULL
                  COMMA_THERE) ;
}

//---------------------------------------------------------------------------*

const utf32 GGS_netmess_map::kInsertMessage_put [] = {
  TO_UNICODE ('N'),
  TO_UNICODE ('e'),
  TO_UNICODE ('t'),
  TO_UNICODE ('w'),
  TO_UNICODE ('o'),
  TO_UNICODE ('r'),
  TO_UNICODE ('k'),
  TO_UNICODE (' '),
  TO_UNICODE ('m'),
  TO_UNICODE ('e'),
  TO_UNICODE ('s'),
  TO_UNICODE ('s'),
  TO_UNICODE ('a'),
  TO_UNICODE ('g'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('%'),
  TO_UNICODE ('K'),
  TO_UNICODE (' '),
  TO_UNICODE ('i'),
  TO_UNICODE ('s'),
  TO_UNICODE (' '),
  TO_UNICODE ('a'),
  TO_UNICODE ('l'),
  TO_UNICODE ('r'),
  TO_UNICODE ('e'),
  TO_UNICODE ('a'),
  TO_UNICODE ('d'),
  TO_UNICODE ('y'),
  TO_UNICODE (' '),
  TO_UNICODE ('d'),
  TO_UNICODE ('e'),
  TO_UNICODE ('f'),
  TO_UNICODE ('i'),
  TO_UNICODE ('n'),
  TO_UNICODE ('e'),
  TO_UNICODE ('d'),
  TO_UNICODE (' '),
  TO_UNICODE ('i'),
  TO_UNICODE ('n'),
  TO_UNICODE (' '),
  TO_UNICODE ('%'),
  TO_UNICODE ('L'),
  TO_UNICODE (0)
} ;

//---------------------------------------------------------------------------*

void GGS_netmess_map::
modifier_put (C_Compiler & inLexique,
                                const GGS_lstring & inKey,
                                const GGS_netmess_obj & inParameter0 COMMA_LOCATION_ARGS) {
  insertElement (inLexique,
                 0,
                 kInsertMessage_put,
                 inKey,
                 inParameter0,
                NULL
                COMMA_THERE) ;
}

//---------------------------------------------------------------------------*

GGS_netmess_map GGS_netmess_map::
constructor_mapWithMapToOverride (C_Compiler & /* inLexique */,
                                  const GGS_netmess_map & inMapToOverride
                                  COMMA_UNUSED_LOCATION_ARGS) {
  GGS_netmess_map result ; // Not Built
  if (inMapToOverride.mSharedMapRoot != NULL) {
    macroValidPointer (inMapToOverride.mSharedMapRoot) ;
    macroMyNew (result.mSharedMapRoot, cMapRoot) ;
    result.mSharedMapRoot->mNextMap = inMapToOverride.mSharedMapRoot ;
    inMapToOverride.mSharedMapRoot->mReferenceCount ++ ;
    result.mSharedMapRoot->mSequenceNumber = inMapToOverride.mSharedMapRoot->mSequenceNumber ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_netmess_map GGS_netmess_map::
reader_overriddenMap (C_Compiler & /* inLexique */
                      COMMA_UNUSED_LOCATION_ARGS) const {
  GGS_netmess_map result ; // Not Built
  if (mSharedMapRoot != NULL) {
    macroValidPointer (mSharedMapRoot) ;
    result.mSharedMapRoot = mSharedMapRoot->mNextMap ;
    if (result.mSharedMapRoot != NULL) {
      macroValidPointer (result.mSharedMapRoot) ;
      result.mSharedMapRoot->mReferenceCount ++ ;
    }else{
      macroMyNew (result.mSharedMapRoot, cMapRoot) ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_string GGS_netmess_map::
reader_description (const PMSInt32 inIndentation) const {
  C_String s ;
  s << "<map @netmess_map " ;
  if (isBuilt ()) {
    s.appendSigned (count ()) ;
    s << " object" << ((count () > 1) ? "s " : " ") ;
    cMapRoot * mapRoot = mSharedMapRoot ;
    PMSInt32 level = 0 ;
    while (mapRoot != NULL) {
      if (level > 0) {
        s << "\n" ;
        s.writeStringMultiple ("| ", inIndentation) ;
        s << "------- level " << cStringWithSigned (level) ;
      }
      macroValidPointer (mapRoot) ;
      cElement * p = (cElement *) mapRoot->mFirstItem ;
      PMSInt32 elementID = 0 ;
      while (p != NULL) {
        macroValidPointer (p) ;
        p->appendForMapDescription (elementID, s, inIndentation) ;
        p = p->nextObject () ;
        elementID ++ ;
      }
      mapRoot = mapRoot->mNextMap ;
      level ++ ;
    }
  }else{
    s << "not built" ;
  }
  s << "\n" ;
  s.writeStringMultiple ("| ", inIndentation) ;
  s << ">" ;
  return GGS_string (true, s) ;
}

//---------------------------------------------------------------------------*

/* const */ GGS_netmess_obj  & GGS_netmess_map::cEnumerator::_netmess (LOCATION_ARGS) const {
  return ((cElement *) mObjectArray (mCurrentIndex COMMA_THERE))->mInfo.netmess ;
}

//---------------------------------------------------------------------------*

GGS_object GGS_netmess_map::reader_object (void) const {
  GGS_object result ;
  if (isBuilt ()) {
    GGS_netmess_map * p = NULL ;
    macroMyNew (p, GGS_netmess_map (*this)) ;
    result = GGS_object (p) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_netmess_map GGS_netmess_map::castFromObject (C_Compiler & inLexique,
                                   const GGS_object & inObject,
                                   const GGS_location & inErrorLocation
                                   COMMA_LOCATION_ARGS) {
  GGS_netmess_map result ;
  const GGS__root * embeddedObject = inObject.embeddedObject () ;
  if (NULL != embeddedObject) {
    const GGS_netmess_map * p = dynamic_cast <const GGS_netmess_map *> (embeddedObject) ;
    if (NULL != p) {
      result = * p ;
    }else{
      castFromObjectErrorSignaling (inLexique, inErrorLocation, & kTypeDescriptor_GGS_netmess_map, embeddedObject COMMA_THERE) ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*

const C_galgas_type_descriptorEX * GGS_netmess_map::typeDescriptor (void) const {
  return & kTypeDescriptor_GGS_netmess_map ;
}

//---------------------------------------------------------------------------*

GGS_netmess_map GGS_netmess_map::constructor_mapWithKeyAndValue (C_Compiler & inLexique,
                                             const GGS_lstring & inKey,
                                             const GGS_netmess_obj & inValue0
                                             COMMA_LOCATION_ARGS) {
  GGS_netmess_map result = constructor_emptyMap (inLexique COMMA_THERE) ;
  result.insertElement (inLexique,
                        0,
                        NULL,
                        inKey,
                        inValue0,
                        NULL
                        COMMA_THERE) ;
  return result ;
}

//---------------------------------------------------------------------------*

