//---------------------------------------------------------------------------*
//                                                                           *
//                     File 'goil_template_parser.cpp'                       *
//                        Generated by version 1.9.9                         *
//                     january 28th, 2010, at 15h58'31"                      *
//                                                                           *
//---------------------------------------------------------------------------*

//--- START OF USER ZONE 1


//--- END OF USER ZONE 1

//---------------------------------------------------------------------------*

#include "version_libpm.h"
#if LIBPM_VERSION != 647
  #error "This file has been compiled with a version of GALGAS different than the version of libpm"
#endif

//---------------------------------------------------------------------------*

#include <typeinfo>
#include "utilities/MF_MemoryControl.h"
#include "files/C_TextFileWrite.h"
#include "galgas/C_galgas_CLI_Options.h"
#include "goil_template_parser.h"

//---------------------------------------------------------------------------*

#ifndef DO_NOT_GENERATE_CHECKINGS
  #define SOURCE_FILE_AT_LINE(line) "goil_template_parser.ggs", line
  #define COMMA_SOURCE_FILE_AT_LINE(line) , SOURCE_FILE_AT_LINE(line)
#else
  #define SOURCE_FILE_AT_LINE(line) 
  #define COMMA_SOURCE_FILE_AT_LINE(line) 
#endif


//--- START OF USER ZONE 2


//--- END OF USER ZONE 2

//---------------------------------------------------------------------------*
//                                                                           *
//         Implementation of production rule 'template_instruction'          *
//                                                                           *
//---------------------------------------------------------------------------*

void goil_template_parser::
pr_template_instruction_goil_template_parser_72_27_ (goil_template_scanner & inLexique,
                                const GGS_string var_cas_inPrefix,
                                const GGS_string var_cas_inPath,
                                const GGS_string var_cas_inTemplateDirectory,
                                GGS_goilTemplateVariableMap  &var_cas_ioTemplateVariableMap,
                                GGS_string &var_cas_ioResultingString) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_template_scanner::goil_template_scanner_1__21_) COMMA_HERE) ;
  GGS_goilTemplateValue var_cas_expression ;
  GGS_goilTemplateType var_cas_resultType ;
  nt_expression_ (inLexique, var_cas_inPrefix, var_cas_inPath, var_cas_inTemplateDirectory, var_cas_ioTemplateVariableMap, var_cas_expression, var_cas_resultType) ;
  switch (var_cas_resultType.enumValue ()) {
  case GGS_goilTemplateType::enum_stringType:
    {
    var_cas_ioResultingString.dotAssign_operation (var_cas_expression.reader_mStringValue (inLexique COMMA_SOURCE_FILE_AT_LINE (92))) ;
    }
    break ;
  case GGS_goilTemplateType::enum_unsignedType:
    {
    var_cas_ioResultingString.dotAssign_operation (var_cas_expression.reader_mUnsigned64Value (inLexique COMMA_SOURCE_FILE_AT_LINE (94)).reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (94))) ;
    }
    break ;
  case GGS_goilTemplateType::enum_boolType:
    {
    const GGS_bool cond_3372 = (var_cas_expression.reader_mUnsigned64Value (inLexique COMMA_SOURCE_FILE_AT_LINE (96))).operator_isEqual (GGS_uint64 (0ULL)) ;
    if (cond_3372.isBuiltAndTrue ()) {
      var_cas_ioResultingString.appendCString ("false") ;
    }else if (cond_3372.isBuiltAndFalse ()) {
      var_cas_ioResultingString.appendCString ("true") ;
    }
    }
    break ;
  case GGS_goilTemplateType::enum_listType:
    {
    GGS_location (inLexique).reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("a list expression cannot be emitted") COMMA_SOURCE_FILE_AT_LINE (103)) ;
    }
    break ;
  case GGS_goilTemplateType::kNotBuilt:
    break ;
  }
}

//---------------------------------------------------------------------------*

void goil_template_parser::
pr_template_instruction_goil_template_parser_72_27_parse (goil_template_scanner & inLexique) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_template_scanner::goil_template_scanner_1__21_) COMMA_HERE) ;
  nt_expression_parse (inLexique) ;
  GGS_lstring::constructor_retrieveAndResetTemplateString (inLexique COMMA_HERE) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//         Implementation of production rule 'template_instruction'          *
//                                                                           *
//---------------------------------------------------------------------------*

void goil_template_parser::
pr_template_instruction_goil_template_parser_108_27_ (goil_template_scanner & inLexique,
                                const GGS_string var_cas_inPrefix,
                                const GGS_string var_cas_inPath,
                                const GGS_string var_cas_inTemplateDirectory,
                                GGS_goilTemplateVariableMap  &var_cas_ioTemplateVariableMap,
                                GGS_string &/* var_cas_ioResultingString */) {
  GGS_bool var_cas_fileNameOk = GGS_bool (true) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_template_scanner::goil_template_scanner_1_write) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_template_scanner::goil_template_scanner_1_to) COMMA_HERE) ;
  GGS_goilTemplateValue var_cas_expression ;
  GGS_goilTemplateType var_cas_expressionType ;
  GGS_goilTemplateVariableMap  var_cas_templateVariableMap = var_cas_ioTemplateVariableMap ;
  nt_expression_ (inLexique, var_cas_inPrefix, var_cas_inPath, var_cas_inTemplateDirectory, var_cas_ioTemplateVariableMap, var_cas_expression, var_cas_expressionType) ;
  const GGS_bool cond_4239 = var_cas_templateVariableMap.reader_hasKey (GGS_string ("FILENAME")) ;
  if (cond_4239.isBuiltAndTrue ()) {
    GGS_goilTemplateType automatic_var_4232_0 ;
    GGS_goilTemplateValue automatic_var_4232_1 ;
    var_cas_templateVariableMap.modifier_removeKey (inLexique, function_lstringWith (inLexique, GGS_string ("FILENAME") COMMA_SOURCE_FILE_AT_LINE (129)), automatic_var_4232_0, automatic_var_4232_1 COMMA_SOURCE_FILE_AT_LINE (129)) ;
  }
  GGS_goilTemplateValue var_cas_fileName = GGS_goilTemplateValue::constructor_new (GGS_uint64 (0ULL), var_cas_expression.reader_mStringValue (inLexique COMMA_SOURCE_FILE_AT_LINE (131)).reader_lastPathComponent (), GGS_goilTemplateFieldMapList ::constructor_emptyList ()) ;
  var_cas_templateVariableMap.modifier_insertKey (inLexique, function_lstringWith (inLexique, GGS_string ("FILENAME") COMMA_SOURCE_FILE_AT_LINE (132)), var_cas_expressionType, var_cas_fileName COMMA_SOURCE_FILE_AT_LINE (132)) ;
  var_cas_templateVariableMap.modifier_insertKey (inLexique, function_lstringWith (inLexique, GGS_string ("FILEPATH") COMMA_SOURCE_FILE_AT_LINE (133)), var_cas_expressionType, var_cas_expression COMMA_SOURCE_FILE_AT_LINE (133)) ;
  GGS_location  var_cas_fileNameLocation = GGS_location (inLexique) ;
  const GGS_bool cond_4760 = (var_cas_expressionType).operator_isNotEqual (GGS_goilTemplateType::constructor_stringType (inLexique COMMA_HERE)) ;
  if (cond_4760.isBuiltAndTrue ()) {
    GGS_location (inLexique).reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("a file name should be of type string") COMMA_SOURCE_FILE_AT_LINE (137)) ;
    var_cas_fileNameOk = GGS_bool (false) ;
  }
  inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_template_scanner::goil_template_scanner_1__3A_) COMMA_HERE) ;
  GGS_string var_cas_writeBlockResult = GGS_string ("") ;
  nt_template_instruction_list_ (inLexique, var_cas_inPrefix, var_cas_inPath, var_cas_inTemplateDirectory, var_cas_templateVariableMap, var_cas_writeBlockResult) ;
  const GGS_bool cond_5071 = (var_cas_fileNameOk).operator_and ((GGS_uint ::constructor_errorCount (inLexique COMMA_HERE)).operator_isEqual (GGS_uint (0U))) ;
  if (cond_5071.isBuiltAndTrue ()) {
    const GGS_string temp_5036 = var_cas_writeBlockResult ;
    if (temp_5036.isBuilt ()) {
      temp_5036 (HERE)->method_makeDirectoryAndWriteToFile (inLexique, var_cas_expression.reader_mStringValue (inLexique COMMA_SOURCE_FILE_AT_LINE (149)) COMMA_SOURCE_FILE_AT_LINE (149)) ;
    }
  }
  inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_template_scanner::goil_template_scanner_1_end) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_template_scanner::goil_template_scanner_1_write) COMMA_HERE) ;
}

//---------------------------------------------------------------------------*

void goil_template_parser::
pr_template_instruction_goil_template_parser_108_27_parse (goil_template_scanner & inLexique) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_template_scanner::goil_template_scanner_1_write) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_template_scanner::goil_template_scanner_1_to) COMMA_HERE) ;
  nt_expression_parse (inLexique) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_template_scanner::goil_template_scanner_1__3A_) COMMA_HERE) ;
  nt_template_instruction_list_parse (inLexique) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_template_scanner::goil_template_scanner_1_end) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_template_scanner::goil_template_scanner_1_write) COMMA_HERE) ;
  GGS_lstring::constructor_retrieveAndResetTemplateString (inLexique COMMA_HERE) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//         Implementation of production rule 'template_instruction'          *
//                                                                           *
//---------------------------------------------------------------------------*

void goil_template_parser::
pr_template_instruction_goil_template_parser_156_27_ (goil_template_scanner & inLexique,
                                const GGS_string var_cas_inPrefix,
                                const GGS_string var_cas_inPath,
                                const GGS_string var_cas_inTemplateDirectory,
                                GGS_goilTemplateVariableMap  &var_cas_ioTemplateVariableMap,
                                GGS_string &var_cas_ioResultingString) {
  GGS_string var_cas_nextPrefix = var_cas_inPrefix ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_template_scanner::goil_template_scanner_1_template) COMMA_HERE) ;
  switch (select_goil_template_parser_0 (inLexique)) {
    case 1 : {
      inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_template_scanner::goil_template_scanner_1_if) COMMA_HERE) ;
      inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_template_scanner::goil_template_scanner_1_exists) COMMA_HERE) ;
      GGS_lstring  var_cas_templateName ;
      inLexique.assignFromAttribute_tokenString (var_cas_templateName) ;
      inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_template_scanner::goil_template_scanner_1_identifier) COMMA_HERE) ;
      GGS_bool var_cas_found ;
      switch (select_goil_template_parser_1 (inLexique)) {
        case 1 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_template_scanner::goil_template_scanner_1_in) COMMA_HERE) ;
          GGS_lstring  var_cas_prefix ;
          inLexique.assignFromAttribute_tokenString (var_cas_prefix) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_template_scanner::goil_template_scanner_1_identifier) COMMA_HERE) ;
          var_cas_nextPrefix = function_fullPrefix (inLexique, var_cas_ioTemplateVariableMap, var_cas_prefix COMMA_SOURCE_FILE_AT_LINE (171)) ;
          } break ;
        case 2 : {
          } break ;
        default :
          break ;
      }
      ::routine_goilTemplateInvocation (inLexique,  var_cas_templateName,  var_cas_nextPrefix,  var_cas_inPath,  var_cas_inTemplateDirectory,  GGS_bool (false),  var_cas_ioTemplateVariableMap,  var_cas_ioResultingString,  var_cas_found COMMA_SOURCE_FILE_AT_LINE (174)) ;
      switch (select_goil_template_parser_2 (inLexique)) {
        case 1 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_template_scanner::goil_template_scanner_1_or) COMMA_HERE) ;
          if (((var_cas_found).operator_not ()).isBuiltAndTrue ()) {
            GGS_goilTemplateVariableMap  var_cas_templateVariableMap = GGS_goilTemplateVariableMap ::constructor_mapWithMapToOverride (inLexique, var_cas_ioTemplateVariableMap COMMA_HERE) ;
            nt_template_instruction_list_ (inLexique, var_cas_nextPrefix, var_cas_inPath, var_cas_inTemplateDirectory, var_cas_templateVariableMap, var_cas_ioResultingString) ;
            var_cas_ioTemplateVariableMap = var_cas_templateVariableMap.reader_overriddenMap (inLexique COMMA_SOURCE_FILE_AT_LINE (196)) ;
          }else{
            nt_template_instruction_list_parseAndResetTemplateString (inLexique) ;
          }
          inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_template_scanner::goil_template_scanner_1_end) COMMA_HERE) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_template_scanner::goil_template_scanner_1_template) COMMA_HERE) ;
          } break ;
        case 2 : {
          } break ;
        default :
          break ;
      }
      } break ;
    case 2 : {
      GGS_lstring  var_cas_templateName ;
      inLexique.assignFromAttribute_tokenString (var_cas_templateName) ;
      inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_template_scanner::goil_template_scanner_1_identifier) COMMA_HERE) ;
      switch (select_goil_template_parser_3 (inLexique)) {
        case 1 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_template_scanner::goil_template_scanner_1_in) COMMA_HERE) ;
          GGS_lstring  var_cas_prefix ;
          inLexique.assignFromAttribute_tokenString (var_cas_prefix) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_template_scanner::goil_template_scanner_1_identifier) COMMA_HERE) ;
          var_cas_nextPrefix = function_fullPrefix (inLexique, var_cas_ioTemplateVariableMap, var_cas_prefix COMMA_SOURCE_FILE_AT_LINE (207)) ;
          } break ;
        case 2 : {
          } break ;
        default :
          break ;
      }
      GGS_bool automatic_var_6772_0 ;
      ::routine_goilTemplateInvocation (inLexique,  var_cas_templateName,  var_cas_nextPrefix,  var_cas_inPath,  var_cas_inTemplateDirectory,  GGS_bool (true),  var_cas_ioTemplateVariableMap,  var_cas_ioResultingString,  automatic_var_6772_0 COMMA_SOURCE_FILE_AT_LINE (210)) ;
      } break ;
    default :
      break ;
  }
}

//---------------------------------------------------------------------------*

void goil_template_parser::
pr_template_instruction_goil_template_parser_156_27_parse (goil_template_scanner & inLexique) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_template_scanner::goil_template_scanner_1_template) COMMA_HERE) ;
  switch (select_goil_template_parser_0 (inLexique)) {
    case 1 : {
      inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_template_scanner::goil_template_scanner_1_if) COMMA_HERE) ;
      inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_template_scanner::goil_template_scanner_1_exists) COMMA_HERE) ;
      inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_template_scanner::goil_template_scanner_1_identifier) COMMA_HERE) ;
      switch (select_goil_template_parser_1 (inLexique)) {
        case 1 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_template_scanner::goil_template_scanner_1_in) COMMA_HERE) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_template_scanner::goil_template_scanner_1_identifier) COMMA_HERE) ;
          } break ;
        case 2 : {
          } break ;
        default :
          break ;
      }
      switch (select_goil_template_parser_2 (inLexique)) {
        case 1 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_template_scanner::goil_template_scanner_1_or) COMMA_HERE) ;
            nt_template_instruction_list_parse (inLexique) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_template_scanner::goil_template_scanner_1_end) COMMA_HERE) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_template_scanner::goil_template_scanner_1_template) COMMA_HERE) ;
          } break ;
        case 2 : {
          } break ;
        default :
          break ;
      }
      } break ;
    case 2 : {
      inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_template_scanner::goil_template_scanner_1_identifier) COMMA_HERE) ;
      switch (select_goil_template_parser_3 (inLexique)) {
        case 1 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_template_scanner::goil_template_scanner_1_in) COMMA_HERE) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_template_scanner::goil_template_scanner_1_identifier) COMMA_HERE) ;
          } break ;
        case 2 : {
          } break ;
        default :
          break ;
      }
      } break ;
    default :
      break ;
  }
  GGS_lstring::constructor_retrieveAndResetTemplateString (inLexique COMMA_HERE) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//         Implementation of production rule 'template_instruction'          *
//                                                                           *
//---------------------------------------------------------------------------*

void goil_template_parser::
pr_template_instruction_goil_template_parser_225_27_ (goil_template_scanner & inLexique,
                                const GGS_string /* var_cas_inPrefix */,
                                const GGS_string /* var_cas_inPath */,
                                const GGS_string /* var_cas_inTemplateDirectory */,
                                GGS_goilTemplateVariableMap  &var_cas_ioTemplateVariableMap,
                                GGS_string &var_cas_ioResultingString) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_template_scanner::goil_template_scanner_1__3F_) COMMA_HERE) ;
  GGS_lstring  var_cas_columnConstantName ;
  inLexique.assignFromAttribute_tokenString (var_cas_columnConstantName) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_template_scanner::goil_template_scanner_1_identifier) COMMA_HERE) ;
  GGS_string var_cas_value = GGS_string ("") ;
  GGS_bool var_cas_searchEndOfLine = GGS_bool (true) ;
  GGS_uint  var_cas_idx = var_cas_ioResultingString.reader_length () ;
  GGS_uint _variant_7465 = var_cas_ioResultingString.reader_length () ;
  GGS_bool _condition_7465 (_variant_7465.isBuilt (), true) ;
  while (_condition_7465.isBuiltAndTrue ()) {
    _condition_7465 = ((var_cas_idx).operator_strictSup (GGS_uint (0U))).operator_and (var_cas_searchEndOfLine) ;
    if (_condition_7465.isBuiltAndTrue ()) {
      if (_variant_7465.uintValue () == 0) {
        inLexique.onTheFlyRunTimeError ("loop variant error" COMMA_SOURCE_FILE_AT_LINE (245)) ;
        _condition_7465 = GGS_bool (false) ;
      }else{
        _variant_7465.decrement_operation (inLexique COMMA_HERE) ;
        var_cas_searchEndOfLine = (var_cas_ioResultingString.reader_characterAtIndex (inLexique, var_cas_idx.substract_operation (inLexique, GGS_uint (1U) COMMA_SOURCE_FILE_AT_LINE (240)) COMMA_SOURCE_FILE_AT_LINE (240))).operator_isNotEqual (GGS_char (TO_UNICODE ('\n'))) ;
        var_cas_idx.decrement_operation (inLexique COMMA_SOURCE_FILE_AT_LINE (241)) ;
        const GGS_bool cond_7455 = var_cas_searchEndOfLine ;
        if (cond_7455.isBuiltAndTrue ()) {
          var_cas_value.appendCString (" ") ;
        }
      }
    }
  }
  var_cas_ioTemplateVariableMap.modifier_insertKey (inLexique, var_cas_columnConstantName, GGS_goilTemplateType::constructor_stringType (inLexique COMMA_HERE), GGS_goilTemplateValue::constructor_new (GGS_uint64 (0ULL), var_cas_value, GGS_goilTemplateFieldMapList ::constructor_emptyList ()) COMMA_SOURCE_FILE_AT_LINE (246)) ;
}

//---------------------------------------------------------------------------*

void goil_template_parser::
pr_template_instruction_goil_template_parser_225_27_parse (goil_template_scanner & inLexique) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_template_scanner::goil_template_scanner_1__3F_) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_template_scanner::goil_template_scanner_1_identifier) COMMA_HERE) ;
  GGS_lstring::constructor_retrieveAndResetTemplateString (inLexique COMMA_HERE) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//         Implementation of production rule 'template_instruction'          *
//                                                                           *
//---------------------------------------------------------------------------*

void goil_template_parser::
pr_template_instruction_goil_template_parser_301_27_ (goil_template_scanner & inLexique,
                                const GGS_string var_cas_inPrefix,
                                const GGS_string var_cas_inPath,
                                const GGS_string var_cas_inTemplateDirectory,
                                GGS_goilTemplateVariableMap  &var_cas_ioTemplateVariableMap,
                                GGS_string &var_cas_ioResultingString) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_template_scanner::goil_template_scanner_1_if) COMMA_HERE) ;
  GGS_bool var_cas_currentCondition = GGS_bool (false) ;
  { bool syntaxRepeat_4 = true ;
    while (syntaxRepeat_4) {
        if (((var_cas_currentCondition).operator_not ()).isBuiltAndTrue ()) {
          GGS_goilTemplateValue var_cas_expression ;
          GGS_goilTemplateType var_cas_expressionType ;
          nt_expression_ (inLexique, var_cas_inPrefix, var_cas_inPath, var_cas_inTemplateDirectory, var_cas_ioTemplateVariableMap, var_cas_expression, var_cas_expressionType) ;
          const GGS_bool cond_9707 = (var_cas_expressionType).operator_isNotEqual (GGS_goilTemplateType::constructor_boolType (inLexique COMMA_HERE)) ;
          if (cond_9707.isBuiltAndTrue ()) {
            GGS_location (inLexique).reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("the operand of the 'not' operator should be boolean") COMMA_SOURCE_FILE_AT_LINE (325)) ;
          }
          var_cas_currentCondition = (var_cas_expression.reader_mUnsigned64Value (inLexique COMMA_SOURCE_FILE_AT_LINE (326))).operator_isEqual (GGS_uint64 (1ULL)) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_template_scanner::goil_template_scanner_1_then) COMMA_HERE) ;
          if ((var_cas_currentCondition).isBuiltAndTrue ()) {
            GGS_goilTemplateVariableMap  var_cas_templateVariableMap = GGS_goilTemplateVariableMap ::constructor_mapWithMapToOverride (inLexique, var_cas_ioTemplateVariableMap COMMA_HERE) ;
            nt_template_instruction_list_ (inLexique, var_cas_inPrefix, var_cas_inPath, var_cas_inTemplateDirectory, var_cas_templateVariableMap, var_cas_ioResultingString) ;
            var_cas_ioTemplateVariableMap = var_cas_templateVariableMap.reader_overriddenMap (inLexique COMMA_SOURCE_FILE_AT_LINE (338)) ;
          }else{
            nt_template_instruction_list_parseAndResetTemplateString (inLexique) ;
          }
        }else{
          nt_expression_parse (inLexique) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_template_scanner::goil_template_scanner_1_then) COMMA_HERE) ;
          nt_template_instruction_list_parseAndResetTemplateString (inLexique) ;
        }
      switch (select_goil_template_parser_4 (inLexique)) {
        case 2 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_template_scanner::goil_template_scanner_1_elsif) COMMA_HERE) ;
          } break ;
        default :
          syntaxRepeat_4 = false ;
          break ;
      }
    }
  }
  switch (select_goil_template_parser_5 (inLexique)) {
    case 1 : {
      } break ;
    case 2 : {
      inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_template_scanner::goil_template_scanner_1_else) COMMA_HERE) ;
      if (((var_cas_currentCondition).operator_not ()).isBuiltAndTrue ()) {
        GGS_goilTemplateVariableMap  var_cas_templateVariableMap = GGS_goilTemplateVariableMap ::constructor_mapWithMapToOverride (inLexique, var_cas_ioTemplateVariableMap COMMA_HERE) ;
        nt_template_instruction_list_ (inLexique, var_cas_inPrefix, var_cas_inPath, var_cas_inTemplateDirectory, var_cas_templateVariableMap, var_cas_ioResultingString) ;
        var_cas_ioTemplateVariableMap = var_cas_templateVariableMap.reader_overriddenMap (inLexique COMMA_SOURCE_FILE_AT_LINE (364)) ;
      }else{
        nt_template_instruction_list_parseAndResetTemplateString (inLexique) ;
      }
      } break ;
    default :
      break ;
  }
  inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_template_scanner::goil_template_scanner_1_end) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_template_scanner::goil_template_scanner_1_if) COMMA_HERE) ;
}

//---------------------------------------------------------------------------*

void goil_template_parser::
pr_template_instruction_goil_template_parser_301_27_parse (goil_template_scanner & inLexique) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_template_scanner::goil_template_scanner_1_if) COMMA_HERE) ;
  { bool syntaxRepeat_4 = true ;
    while (syntaxRepeat_4) {
          nt_expression_parse (inLexique) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_template_scanner::goil_template_scanner_1_then) COMMA_HERE) ;
          nt_template_instruction_list_parse (inLexique) ;
      switch (select_goil_template_parser_4 (inLexique)) {
        case 2 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_template_scanner::goil_template_scanner_1_elsif) COMMA_HERE) ;
          } break ;
        default :
          syntaxRepeat_4 = false ;
          break ;
      }
    }
  }
  switch (select_goil_template_parser_5 (inLexique)) {
    case 1 : {
      } break ;
    case 2 : {
      inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_template_scanner::goil_template_scanner_1_else) COMMA_HERE) ;
        nt_template_instruction_list_parse (inLexique) ;
      } break ;
    default :
      break ;
  }
  inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_template_scanner::goil_template_scanner_1_end) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_template_scanner::goil_template_scanner_1_if) COMMA_HERE) ;
  GGS_lstring::constructor_retrieveAndResetTemplateString (inLexique COMMA_HERE) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//      Implementation of production rule 'template_instruction_list'        *
//                                                                           *
//---------------------------------------------------------------------------*

void goil_template_parser::
pr_template_instruction_list_goil_template_parser_376_33_ (goil_template_scanner & inLexique,
                                const GGS_string var_cas_inPrefix,
                                const GGS_string var_cas_inPath,
                                const GGS_string var_cas_inTemplateDirectory,
                                GGS_goilTemplateVariableMap  &var_cas_ioTemplateVariableMap,
                                GGS_string &var_cas_ioResultingString) {
  var_cas_ioResultingString.dotAssign_operation (GGS_lstring ::constructor_retrieveAndResetTemplateString (inLexique COMMA_HERE).ggs_string ()) ;
  { bool syntaxRepeat_6 = true ;
    while (syntaxRepeat_6) {
      switch (select_goil_template_parser_6 (inLexique)) {
        case 2 : {
          nt_template_instruction_ (inLexique, var_cas_inPrefix, var_cas_inPath, var_cas_inTemplateDirectory, var_cas_ioTemplateVariableMap, var_cas_ioResultingString) ;
          var_cas_ioResultingString.dotAssign_operation (GGS_lstring ::constructor_retrieveAndResetTemplateString (inLexique COMMA_HERE).ggs_string ()) ;
          } break ;
        default :
          syntaxRepeat_6 = false ;
          break ;
      }
    }
  }
}

//---------------------------------------------------------------------------*

void goil_template_parser::
pr_template_instruction_list_goil_template_parser_376_33_parseAndResetTemplateString (goil_template_scanner & inLexique) {
  { bool syntaxRepeat_6 = true ;
    while (syntaxRepeat_6) {
      switch (select_goil_template_parser_6 (inLexique)) {
        case 2 : {
          nt_template_instruction_parse (inLexique) ;
          } break ;
        default :
          syntaxRepeat_6 = false ;
          break ;
      }
    }
  }
  GGS_lstring  var_cas_s = GGS_lstring ::constructor_retrieveAndResetTemplateString (inLexique COMMA_HERE) ;
}

//---------------------------------------------------------------------------*

void goil_template_parser::
pr_template_instruction_list_goil_template_parser_376_33_parse (goil_template_scanner & inLexique) {
  { bool syntaxRepeat_6 = true ;
    while (syntaxRepeat_6) {
      switch (select_goil_template_parser_6 (inLexique)) {
        case 2 : {
          nt_template_instruction_parse (inLexique) ;
          } break ;
        default :
          syntaxRepeat_6 = false ;
          break ;
      }
    }
  }
  GGS_lstring::constructor_retrieveAndResetTemplateString (inLexique COMMA_HERE) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//      Implementation of production rule 'goil_template_start_symbol'       *
//                                                                           *
//---------------------------------------------------------------------------*

void goil_template_parser::
pr_goil_template_start_symbol_goil_template_parser_406_34_ (goil_template_scanner & inLexique,
                                const GGS_string var_cas_inPrefix,
                                const GGS_string var_cas_inPath,
                                const GGS_string var_cas_inTemplateDirectory,
                                GGS_goilTemplateVariableMap  var_cas_inTemplateVariableMap,
                                GGS_string &var_cas_ioResultingString) {
  nt_template_instruction_list_ (inLexique, var_cas_inPrefix, var_cas_inPath, var_cas_inTemplateDirectory, var_cas_inTemplateVariableMap, var_cas_ioResultingString) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//         Implementation of production rule 'template_instruction'          *
//                                                                           *
//---------------------------------------------------------------------------*

void goil_template_parser::
pr_template_instruction_goil_template_parser_424_27_ (goil_template_scanner & inLexique,
                                const GGS_string var_cas_inPrefix,
                                const GGS_string var_cas_inPath,
                                const GGS_string var_cas_inTemplateDirectory,
                                GGS_goilTemplateVariableMap  &var_cas_ioTemplateVariableMap,
                                GGS_string &var_cas_ioResultingString) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_template_scanner::goil_template_scanner_1_foreach) COMMA_HERE) ;
  GGS_uint  var_cas_shortestListLentgh = GGS_uint ::constructor_max (inLexique COMMA_HERE) ;
  GGS_goilTemplateEnumationList  var_cas_enumerationList = GGS_goilTemplateEnumationList ::constructor_emptyList () ;
  { bool syntaxRepeat_7 = true ;
    while (syntaxRepeat_7) {
        GGS_goilTemplateValue var_cas_enumeratedValue ;
        GGS_goilTemplateType var_cas_expressionType ;
        nt_expression_ (inLexique, var_cas_inPrefix, var_cas_inPath, var_cas_inTemplateDirectory, var_cas_ioTemplateVariableMap, var_cas_enumeratedValue, var_cas_expressionType) ;
        const GGS_bool cond_12914 = (var_cas_expressionType).operator_isNotEqual (GGS_goilTemplateType::constructor_listType (inLexique COMMA_HERE)) ;
        if (cond_12914.isBuiltAndTrue ()) {
          GGS_location (inLexique).reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("only a list can be enumerated") COMMA_SOURCE_FILE_AT_LINE (449)) ;
        }else if (cond_12914.isBuiltAndFalse ()) {
          const GGS_bool cond_13060 = (var_cas_shortestListLentgh).operator_strictSup (var_cas_enumeratedValue.reader_mMapListValue (inLexique COMMA_SOURCE_FILE_AT_LINE (449)).reader_length ()) ;
          if (cond_13060.isBuiltAndTrue ()) {
            var_cas_shortestListLentgh = var_cas_enumeratedValue.reader_mMapListValue (inLexique COMMA_SOURCE_FILE_AT_LINE (450)).reader_length () ;
          }
        }
        GGS_string var_cas_foreachPrefix ;
        switch (select_goil_template_parser_8 (inLexique)) {
          case 1 : {
            var_cas_foreachPrefix = GGS_string ("") ;
            } break ;
          case 2 : {
            inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_template_scanner::goil_template_scanner_1_prefixedby) COMMA_HERE) ;
            GGS_lstring  var_cas_prefixString ;
            inLexique.assignFromAttribute_tokenString (var_cas_prefixString) ;
            inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_template_scanner::goil_template_scanner_1_identifier) COMMA_HERE) ;
            var_cas_foreachPrefix = var_cas_prefixString.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (458)) ;
            } break ;
          default :
            break ;
        }
        var_cas_enumerationList.addAssign_operation (var_cas_enumeratedValue, var_cas_foreachPrefix) ;
      switch (select_goil_template_parser_7 (inLexique)) {
        case 2 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_template_scanner::goil_template_scanner_1__2C_) COMMA_HERE) ;
          } break ;
        default :
          syntaxRepeat_7 = false ;
          break ;
      }
    }
  }
  switch (select_goil_template_parser_9 (inLexique)) {
    case 1 : {
      } break ;
    case 2 : {
      inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_template_scanner::goil_template_scanner_1_before) COMMA_HERE) ;
      if (((var_cas_shortestListLentgh).operator_strictSup (GGS_uint (0U))).isBuiltAndTrue ()) {
        nt_template_instruction_list_ (inLexique, var_cas_inPrefix, var_cas_inPath, var_cas_inTemplateDirectory, var_cas_ioTemplateVariableMap, var_cas_ioResultingString) ;
      }else{
        nt_template_instruction_list_parseAndResetTemplateString (inLexique) ;
      }
      } break ;
    default :
      break ;
  }
  inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_template_scanner::goil_template_scanner_1_do) COMMA_HERE) ;
  GGS_uint  var_cas_idx = GGS_uint (0U) ;
  GGS_uint _variant_15381 = var_cas_shortestListLentgh ;
  const C_parsingContext context_15381 = inLexique.parsingContext () ;
  nt_template_instruction_list_parse (inLexique) ;
  switch (select_goil_template_parser_10 (inLexique)) {
    case 1 : {
      } break ;
    case 2 : {
      inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_template_scanner::goil_template_scanner_1_between) COMMA_HERE) ;
        nt_template_instruction_list_parse (inLexique) ;
      } break ;
    default :
      break ;
  }
  GGS_bool _condition_15381 ;
  if (_variant_15381.isBuilt ()) {
    _condition_15381 = (var_cas_idx).operator_strictInf (var_cas_shortestListLentgh) ;
  }
  while (_condition_15381.isBuiltAndTrue ()) {
    inLexique.setParsingContext (context_15381) ;
    if (_variant_15381.uintValue () == 0) {
      inLexique.onTheFlyRunTimeError ("loop variant error" COMMA_SOURCE_FILE_AT_LINE (532)) ;
      _condition_15381 = GGS_bool (false) ;
    }else{
      _variant_15381.decrement_operation (inLexique COMMA_HERE) ;
      GGS_goilTemplateVariableMap  var_cas_templateVariableMap = GGS_goilTemplateVariableMap ::constructor_mapWithMapToOverride (inLexique, var_cas_ioTemplateVariableMap COMMA_HERE) ;
      {
        GGS_goilTemplateEnumationList::cEnumerator enumerator_13937 (var_cas_enumerationList, true) ;
        const GGS_goilTemplateEnumationList::cElement * operand_13937 = NULL ;
        while (((operand_13937 = enumerator_13937.nextObject ()))) {
          macroValidPointer (operand_13937) ;
          const GGS_goilTemplateFieldMap  var_cas_fieldMap = operand_13937->mEnumeratedValue.reader_mMapListValue (inLexique COMMA_SOURCE_FILE_AT_LINE (488)).reader_mMapAtIndex (inLexique, var_cas_idx COMMA_SOURCE_FILE_AT_LINE (488)) ;
          {
            GGS_goilTemplateFieldMap::cEnumerator enumerator_14062 (var_cas_fieldMap, true) ;
            const GGS_goilTemplateFieldMap::cElement * operand_14062 = NULL ;
            while (((operand_14062 = enumerator_14062.nextObject ()))) {
              macroValidPointer (operand_14062) ;
              GGS_lstring  var_cas_varName = GGS_lstring ::constructor_new (inLexique, (operand_13937->mPrefix).operator_concat (operand_14062->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (490))), operand_14062->mKey.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (490)) COMMA_HERE) ;
              var_cas_templateVariableMap.modifier_insertKey (inLexique, GGS_lstring ::constructor_new (inLexique, (operand_13937->mPrefix).operator_concat (operand_14062->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (495))), operand_14062->mKey.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (495)) COMMA_HERE), operand_14062->mInfo.mType, GGS_goilTemplateValue::constructor_new (operand_14062->mInfo.mUnsigned64Value, operand_14062->mInfo.mStringValue, operand_14062->mInfo.mListValue) COMMA_SOURCE_FILE_AT_LINE (494)) ;
            }
          }
        }
      }
      ::routine_addUnsignedValue (inLexique,  var_cas_templateVariableMap,  GGS_lstring ::constructor_new (inLexique, GGS_string ("INDEX"), GGS_location (inLexique) COMMA_HERE),  var_cas_idx.reader_uint64 (inLexique COMMA_SOURCE_FILE_AT_LINE (505)) COMMA_SOURCE_FILE_AT_LINE (505)) ;
      nt_template_instruction_list_ (inLexique, var_cas_inPrefix, var_cas_inPath, var_cas_inTemplateDirectory, var_cas_templateVariableMap, var_cas_ioResultingString) ;
      var_cas_idx.increment_operation (inLexique COMMA_SOURCE_FILE_AT_LINE (514)) ;
      switch (select_goil_template_parser_10 (inLexique)) {
        case 1 : {
          } break ;
        case 2 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_template_scanner::goil_template_scanner_1_between) COMMA_HERE) ;
          if (((var_cas_idx).operator_strictInf (var_cas_shortestListLentgh)).isBuiltAndTrue ()) {
            nt_template_instruction_list_ (inLexique, var_cas_inPrefix, var_cas_inPath, var_cas_inTemplateDirectory, var_cas_templateVariableMap, var_cas_ioResultingString) ;
          }else{
            nt_template_instruction_list_parseAndResetTemplateString (inLexique) ;
          }
          } break ;
        default :
          break ;
      }
      var_cas_ioTemplateVariableMap = var_cas_templateVariableMap.reader_overriddenMap (inLexique COMMA_SOURCE_FILE_AT_LINE (531)) ;
      _condition_15381 = (var_cas_idx).operator_strictInf (var_cas_shortestListLentgh) ;
    }
  }
  GGS_lstring  var_cas_s = GGS_lstring ::constructor_retrieveAndResetTemplateString (inLexique COMMA_HERE) ;
  switch (select_goil_template_parser_11 (inLexique)) {
    case 1 : {
      } break ;
    case 2 : {
      inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_template_scanner::goil_template_scanner_1_after) COMMA_HERE) ;
      if (((var_cas_shortestListLentgh).operator_strictSup (GGS_uint (0U))).isBuiltAndTrue ()) {
        nt_template_instruction_list_ (inLexique, var_cas_inPrefix, var_cas_inPath, var_cas_inTemplateDirectory, var_cas_ioTemplateVariableMap, var_cas_ioResultingString) ;
      }else{
        nt_template_instruction_list_parseAndResetTemplateString (inLexique) ;
      }
      } break ;
    default :
      break ;
  }
  inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_template_scanner::goil_template_scanner_1_end) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_template_scanner::goil_template_scanner_1_foreach) COMMA_HERE) ;
}

//---------------------------------------------------------------------------*

void goil_template_parser::
pr_template_instruction_goil_template_parser_424_27_parse (goil_template_scanner & inLexique) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_template_scanner::goil_template_scanner_1_foreach) COMMA_HERE) ;
  { bool syntaxRepeat_7 = true ;
    while (syntaxRepeat_7) {
        nt_expression_parse (inLexique) ;
        switch (select_goil_template_parser_8 (inLexique)) {
          case 1 : {
            } break ;
          case 2 : {
            inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_template_scanner::goil_template_scanner_1_prefixedby) COMMA_HERE) ;
            inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_template_scanner::goil_template_scanner_1_identifier) COMMA_HERE) ;
            } break ;
          default :
            break ;
        }
      switch (select_goil_template_parser_7 (inLexique)) {
        case 2 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_template_scanner::goil_template_scanner_1__2C_) COMMA_HERE) ;
          } break ;
        default :
          syntaxRepeat_7 = false ;
          break ;
      }
    }
  }
  switch (select_goil_template_parser_9 (inLexique)) {
    case 1 : {
      } break ;
    case 2 : {
      inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_template_scanner::goil_template_scanner_1_before) COMMA_HERE) ;
        nt_template_instruction_list_parse (inLexique) ;
      } break ;
    default :
      break ;
  }
  inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_template_scanner::goil_template_scanner_1_do) COMMA_HERE) ;
    nt_template_instruction_list_parse (inLexique) ;
    switch (select_goil_template_parser_10 (inLexique)) {
      case 1 : {
        } break ;
      case 2 : {
        inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_template_scanner::goil_template_scanner_1_between) COMMA_HERE) ;
          nt_template_instruction_list_parse (inLexique) ;
        } break ;
      default :
        break ;
    }
  switch (select_goil_template_parser_11 (inLexique)) {
    case 1 : {
      } break ;
    case 2 : {
      inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_template_scanner::goil_template_scanner_1_after) COMMA_HERE) ;
        nt_template_instruction_list_parse (inLexique) ;
      } break ;
    default :
      break ;
  }
  inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_template_scanner::goil_template_scanner_1_end) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_template_scanner::goil_template_scanner_1_foreach) COMMA_HERE) ;
  GGS_lstring::constructor_retrieveAndResetTemplateString (inLexique COMMA_HERE) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//         Implementation of production rule 'template_instruction'          *
//                                                                           *
//---------------------------------------------------------------------------*

void goil_template_parser::
pr_template_instruction_goil_template_parser_558_27_ (goil_template_scanner & inLexique,
                                const GGS_string var_cas_inPrefix,
                                const GGS_string var_cas_inPath,
                                const GGS_string var_cas_inTemplateDirectory,
                                GGS_goilTemplateVariableMap  &var_cas_ioTemplateVariableMap,
                                GGS_string &var_cas_ioResultingString) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_template_scanner::goil_template_scanner_1_for) COMMA_HERE) ;
  GGS_lstring  var_cas_variableName ;
  inLexique.assignFromAttribute_tokenString (var_cas_variableName) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_template_scanner::goil_template_scanner_1_identifier) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_template_scanner::goil_template_scanner_1_in) COMMA_HERE) ;
  GGS_goilTemplateExpressionList  var_cas_enumerationList = GGS_goilTemplateExpressionList ::constructor_emptyList () ;
  { bool syntaxRepeat_12 = true ;
    while (syntaxRepeat_12) {
        GGS_goilTemplateValue var_cas_enumeratedValue ;
        GGS_goilTemplateType var_cas_expressionType ;
        nt_expression_ (inLexique, var_cas_inPrefix, var_cas_inPath, var_cas_inTemplateDirectory, var_cas_ioTemplateVariableMap, var_cas_enumeratedValue, var_cas_expressionType) ;
        const GGS_bool cond_16866 = (((var_cas_expressionType).operator_isNotEqual (GGS_goilTemplateType::constructor_boolType (inLexique COMMA_HERE))).operator_and ((var_cas_expressionType).operator_isNotEqual (GGS_goilTemplateType::constructor_unsignedType (inLexique COMMA_HERE)))).operator_and ((var_cas_expressionType).operator_isNotEqual (GGS_goilTemplateType::constructor_stringType (inLexique COMMA_HERE))) ;
        if (cond_16866.isBuiltAndTrue ()) {
          GGS_location (inLexique).reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("only a bool, integer or string can be enumerated") COMMA_SOURCE_FILE_AT_LINE (586)) ;
        }
        var_cas_enumerationList.addAssign_operation (var_cas_enumeratedValue, var_cas_expressionType) ;
      switch (select_goil_template_parser_12 (inLexique)) {
        case 2 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_template_scanner::goil_template_scanner_1__2C_) COMMA_HERE) ;
          } break ;
        default :
          syntaxRepeat_12 = false ;
          break ;
      }
    }
  }
  inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_template_scanner::goil_template_scanner_1_do) COMMA_HERE) ;
  GGS_uint  var_cas_idx = GGS_uint (0U) ;
  GGS_uint _variant_18216 = var_cas_enumerationList.reader_length () ;
  const C_parsingContext context_18216 = inLexique.parsingContext () ;
  nt_template_instruction_list_parse (inLexique) ;
  switch (select_goil_template_parser_13 (inLexique)) {
    case 1 : {
      } break ;
    case 2 : {
      inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_template_scanner::goil_template_scanner_1_between) COMMA_HERE) ;
        nt_template_instruction_list_parse (inLexique) ;
      } break ;
    default :
      break ;
  }
  GGS_bool _condition_18216 ;
  if (_variant_18216.isBuilt ()) {
    _condition_18216 = (var_cas_enumerationList.reader_length ()).operator_strictSup (GGS_uint (0U)) ;
  }
  while (_condition_18216.isBuiltAndTrue ()) {
    inLexique.setParsingContext (context_18216) ;
    if (_variant_18216.uintValue () == 0) {
      inLexique.onTheFlyRunTimeError ("loop variant error" COMMA_SOURCE_FILE_AT_LINE (635)) ;
      _condition_18216 = GGS_bool (false) ;
    }else{
      _variant_18216.decrement_operation (inLexique COMMA_HERE) ;
      GGS_goilTemplateVariableMap  var_cas_templateVariableMap = GGS_goilTemplateVariableMap ::constructor_mapWithMapToOverride (inLexique, var_cas_ioTemplateVariableMap COMMA_HERE) ;
      GGS_goilTemplateValue var_cas_value ;
      GGS_goilTemplateType var_cas_type ;
      var_cas_enumerationList.modifier_popFirst (inLexique, var_cas_value, var_cas_type COMMA_SOURCE_FILE_AT_LINE (599)) ;
      var_cas_templateVariableMap.modifier_insertKey (inLexique, var_cas_variableName, var_cas_type, var_cas_value COMMA_SOURCE_FILE_AT_LINE (600)) ;
      ::routine_addUnsignedValue (inLexique,  var_cas_templateVariableMap,  GGS_lstring ::constructor_new (inLexique, GGS_string ("INDEX"), GGS_location (inLexique) COMMA_HERE),  var_cas_idx.reader_uint64 (inLexique COMMA_SOURCE_FILE_AT_LINE (608)) COMMA_SOURCE_FILE_AT_LINE (608)) ;
      nt_template_instruction_list_ (inLexique, var_cas_inPrefix, var_cas_inPath, var_cas_inTemplateDirectory, var_cas_templateVariableMap, var_cas_ioResultingString) ;
      var_cas_idx.increment_operation (inLexique COMMA_SOURCE_FILE_AT_LINE (617)) ;
      switch (select_goil_template_parser_13 (inLexique)) {
        case 1 : {
          } break ;
        case 2 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_template_scanner::goil_template_scanner_1_between) COMMA_HERE) ;
          if (((var_cas_enumerationList.reader_length ()).operator_strictSup (GGS_uint (0U))).isBuiltAndTrue ()) {
            nt_template_instruction_list_ (inLexique, var_cas_inPrefix, var_cas_inPath, var_cas_inTemplateDirectory, var_cas_templateVariableMap, var_cas_ioResultingString) ;
          }else{
            nt_template_instruction_list_parseAndResetTemplateString (inLexique) ;
          }
          } break ;
        default :
          break ;
      }
      var_cas_ioTemplateVariableMap = var_cas_templateVariableMap.reader_overriddenMap (inLexique COMMA_SOURCE_FILE_AT_LINE (634)) ;
      _condition_18216 = (var_cas_enumerationList.reader_length ()).operator_strictSup (GGS_uint (0U)) ;
    }
  }
  GGS_lstring  var_cas_s = GGS_lstring ::constructor_retrieveAndResetTemplateString (inLexique COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_template_scanner::goil_template_scanner_1_end) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_template_scanner::goil_template_scanner_1_for) COMMA_HERE) ;
}

//---------------------------------------------------------------------------*

void goil_template_parser::
pr_template_instruction_goil_template_parser_558_27_parse (goil_template_scanner & inLexique) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_template_scanner::goil_template_scanner_1_for) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_template_scanner::goil_template_scanner_1_identifier) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_template_scanner::goil_template_scanner_1_in) COMMA_HERE) ;
  { bool syntaxRepeat_12 = true ;
    while (syntaxRepeat_12) {
        nt_expression_parse (inLexique) ;
      switch (select_goil_template_parser_12 (inLexique)) {
        case 2 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_template_scanner::goil_template_scanner_1__2C_) COMMA_HERE) ;
          } break ;
        default :
          syntaxRepeat_12 = false ;
          break ;
      }
    }
  }
  inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_template_scanner::goil_template_scanner_1_do) COMMA_HERE) ;
    nt_template_instruction_list_parse (inLexique) ;
    switch (select_goil_template_parser_13 (inLexique)) {
      case 1 : {
        } break ;
      case 2 : {
        inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_template_scanner::goil_template_scanner_1_between) COMMA_HERE) ;
          nt_template_instruction_list_parse (inLexique) ;
        } break ;
      default :
        break ;
    }
  inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_template_scanner::goil_template_scanner_1_end) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_template_scanner::goil_template_scanner_1_for) COMMA_HERE) ;
  GGS_lstring::constructor_retrieveAndResetTemplateString (inLexique COMMA_HERE) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//         Implementation of production rule 'template_instruction'          *
//                                                                           *
//---------------------------------------------------------------------------*

void goil_template_parser::
pr_template_instruction_goil_template_parser_644_27_ (goil_template_scanner & inLexique,
                                const GGS_string var_cas_inPrefix,
                                const GGS_string var_cas_inPath,
                                const GGS_string var_cas_inTemplateDirectory,
                                GGS_goilTemplateVariableMap  &var_cas_ioTemplateVariableMap,
                                GGS_string &var_cas_ioResultingString) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_template_scanner::goil_template_scanner_1_loop) COMMA_HERE) ;
  GGS_lstring  var_cas_variableName ;
  inLexique.assignFromAttribute_tokenString (var_cas_variableName) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_template_scanner::goil_template_scanner_1_identifier) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_template_scanner::goil_template_scanner_1_from) COMMA_HERE) ;
  GGS_goilTemplateValue var_cas_startValue ;
  GGS_goilTemplateType var_cas_startType ;
  nt_expression_ (inLexique, var_cas_inPrefix, var_cas_inPath, var_cas_inTemplateDirectory, var_cas_ioTemplateVariableMap, var_cas_startValue, var_cas_startType) ;
  const GGS_bool cond_18963 = (var_cas_startType).operator_isNotEqual (GGS_goilTemplateType::constructor_unsignedType (inLexique COMMA_HERE)) ;
  if (cond_18963.isBuiltAndTrue ()) {
    GGS_location (inLexique).reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("loop start value should be an integer") COMMA_SOURCE_FILE_AT_LINE (665)) ;
  }
  inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_template_scanner::goil_template_scanner_1_to) COMMA_HERE) ;
  GGS_goilTemplateValue var_cas_endValue ;
  GGS_goilTemplateType var_cas_endType ;
  nt_expression_ (inLexique, var_cas_inPrefix, var_cas_inPath, var_cas_inTemplateDirectory, var_cas_ioTemplateVariableMap, var_cas_endValue, var_cas_endType) ;
  const GGS_bool cond_19273 = (var_cas_endType).operator_isNotEqual (GGS_goilTemplateType::constructor_unsignedType (inLexique COMMA_HERE)) ;
  if (cond_19273.isBuiltAndTrue ()) {
    GGS_location (inLexique).reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("loop end value should be an integer") COMMA_SOURCE_FILE_AT_LINE (679)) ;
  }
  switch (select_goil_template_parser_14 (inLexique)) {
    case 1 : {
      } break ;
    case 2 : {
      inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_template_scanner::goil_template_scanner_1_before) COMMA_HERE) ;
      if (((var_cas_endValue.reader_mUnsigned64Value (inLexique COMMA_SOURCE_FILE_AT_LINE (685))).operator_supOrEqual (var_cas_startValue.reader_mUnsigned64Value (inLexique COMMA_SOURCE_FILE_AT_LINE (685)))).isBuiltAndTrue ()) {
        nt_template_instruction_list_ (inLexique, var_cas_inPrefix, var_cas_inPath, var_cas_inTemplateDirectory, var_cas_ioTemplateVariableMap, var_cas_ioResultingString) ;
      }else{
        nt_template_instruction_list_parseAndResetTemplateString (inLexique) ;
      }
      } break ;
    default :
      break ;
  }
  inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_template_scanner::goil_template_scanner_1_do) COMMA_HERE) ;
  GGS_uint  var_cas_start = var_cas_startValue.reader_mUnsigned64Value (inLexique COMMA_SOURCE_FILE_AT_LINE (699)).reader_uint (inLexique COMMA_SOURCE_FILE_AT_LINE (699)) ;
  GGS_uint  var_cas_stop = var_cas_endValue.reader_mUnsigned64Value (inLexique COMMA_SOURCE_FILE_AT_LINE (700)).reader_uint (inLexique COMMA_SOURCE_FILE_AT_LINE (700)) ;
  GGS_uint  var_cas_idx = var_cas_start ;
  GGS_uint _variant_20776 = var_cas_stop.substract_operation (inLexique, var_cas_start COMMA_SOURCE_FILE_AT_LINE (702)).add_operation (inLexique, GGS_uint (1U) COMMA_SOURCE_FILE_AT_LINE (702)) ;
  const C_parsingContext context_20776 = inLexique.parsingContext () ;
  nt_template_instruction_list_parse (inLexique) ;
  switch (select_goil_template_parser_15 (inLexique)) {
    case 1 : {
      } break ;
    case 2 : {
      inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_template_scanner::goil_template_scanner_1_between) COMMA_HERE) ;
        nt_template_instruction_list_parse (inLexique) ;
      } break ;
    default :
      break ;
  }
  GGS_bool _condition_20776 ;
  if (_variant_20776.isBuilt ()) {
    _condition_20776 = (var_cas_idx).operator_infOrEqual (var_cas_stop) ;
  }
  while (_condition_20776.isBuiltAndTrue ()) {
    inLexique.setParsingContext (context_20776) ;
    if (_variant_20776.uintValue () == 0) {
      inLexique.onTheFlyRunTimeError ("loop variant error" COMMA_SOURCE_FILE_AT_LINE (735)) ;
      _condition_20776 = GGS_bool (false) ;
    }else{
      _variant_20776.decrement_operation (inLexique COMMA_HERE) ;
      GGS_goilTemplateVariableMap  var_cas_templateVariableMap = GGS_goilTemplateVariableMap ::constructor_mapWithMapToOverride (inLexique, var_cas_ioTemplateVariableMap COMMA_HERE) ;
      ::routine_addUnsignedValue (inLexique,  var_cas_templateVariableMap,  var_cas_variableName,  var_cas_idx.reader_uint64 (inLexique COMMA_SOURCE_FILE_AT_LINE (708)) COMMA_SOURCE_FILE_AT_LINE (708)) ;
      nt_template_instruction_list_ (inLexique, var_cas_inPrefix, var_cas_inPath, var_cas_inTemplateDirectory, var_cas_templateVariableMap, var_cas_ioResultingString) ;
      var_cas_idx.increment_operation (inLexique COMMA_SOURCE_FILE_AT_LINE (717)) ;
      switch (select_goil_template_parser_15 (inLexique)) {
        case 1 : {
          } break ;
        case 2 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_template_scanner::goil_template_scanner_1_between) COMMA_HERE) ;
          if (((var_cas_idx).operator_infOrEqual (var_cas_stop)).isBuiltAndTrue ()) {
            nt_template_instruction_list_ (inLexique, var_cas_inPrefix, var_cas_inPath, var_cas_inTemplateDirectory, var_cas_templateVariableMap, var_cas_ioResultingString) ;
          }else{
            nt_template_instruction_list_parseAndResetTemplateString (inLexique) ;
          }
          } break ;
        default :
          break ;
      }
      var_cas_ioTemplateVariableMap = var_cas_templateVariableMap.reader_overriddenMap (inLexique COMMA_SOURCE_FILE_AT_LINE (734)) ;
      _condition_20776 = (var_cas_idx).operator_infOrEqual (var_cas_stop) ;
    }
  }
  GGS_lstring  var_cas_s = GGS_lstring ::constructor_retrieveAndResetTemplateString (inLexique COMMA_HERE) ;
  switch (select_goil_template_parser_16 (inLexique)) {
    case 1 : {
      } break ;
    case 2 : {
      inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_template_scanner::goil_template_scanner_1_after) COMMA_HERE) ;
      if (((var_cas_stop).operator_supOrEqual (var_cas_start)).isBuiltAndTrue ()) {
        nt_template_instruction_list_ (inLexique, var_cas_inPrefix, var_cas_inPath, var_cas_inTemplateDirectory, var_cas_ioTemplateVariableMap, var_cas_ioResultingString) ;
      }else{
        nt_template_instruction_list_parseAndResetTemplateString (inLexique) ;
      }
      } break ;
    default :
      break ;
  }
  inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_template_scanner::goil_template_scanner_1_end) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_template_scanner::goil_template_scanner_1_loop) COMMA_HERE) ;
}

//---------------------------------------------------------------------------*

void goil_template_parser::
pr_template_instruction_goil_template_parser_644_27_parse (goil_template_scanner & inLexique) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_template_scanner::goil_template_scanner_1_loop) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_template_scanner::goil_template_scanner_1_identifier) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_template_scanner::goil_template_scanner_1_from) COMMA_HERE) ;
  nt_expression_parse (inLexique) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_template_scanner::goil_template_scanner_1_to) COMMA_HERE) ;
  nt_expression_parse (inLexique) ;
  switch (select_goil_template_parser_14 (inLexique)) {
    case 1 : {
      } break ;
    case 2 : {
      inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_template_scanner::goil_template_scanner_1_before) COMMA_HERE) ;
        nt_template_instruction_list_parse (inLexique) ;
      } break ;
    default :
      break ;
  }
  inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_template_scanner::goil_template_scanner_1_do) COMMA_HERE) ;
    nt_template_instruction_list_parse (inLexique) ;
    switch (select_goil_template_parser_15 (inLexique)) {
      case 1 : {
        } break ;
      case 2 : {
        inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_template_scanner::goil_template_scanner_1_between) COMMA_HERE) ;
          nt_template_instruction_list_parse (inLexique) ;
        } break ;
      default :
        break ;
    }
  switch (select_goil_template_parser_16 (inLexique)) {
    case 1 : {
      } break ;
    case 2 : {
      inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_template_scanner::goil_template_scanner_1_after) COMMA_HERE) ;
        nt_template_instruction_list_parse (inLexique) ;
      } break ;
    default :
      break ;
  }
  inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_template_scanner::goil_template_scanner_1_end) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_template_scanner::goil_template_scanner_1_loop) COMMA_HERE) ;
  GGS_lstring::constructor_retrieveAndResetTemplateString (inLexique COMMA_HERE) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//         Implementation of production rule 'template_instruction'          *
//                                                                           *
//---------------------------------------------------------------------------*

void goil_template_parser::
pr_template_instruction_goil_template_parser_761_27_ (goil_template_scanner & inLexique,
                                const GGS_string var_cas_inPrefix,
                                const GGS_string var_cas_inPath,
                                const GGS_string var_cas_inTemplateDirectory,
                                GGS_goilTemplateVariableMap  &var_cas_ioTemplateVariableMap,
                                GGS_string &/* var_cas_ioResultingString */) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_template_scanner::goil_template_scanner_1_let) COMMA_HERE) ;
  GGS_lstring  var_cas_variableName ;
  inLexique.assignFromAttribute_tokenString (var_cas_variableName) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_template_scanner::goil_template_scanner_1_identifier) COMMA_HERE) ;
  GGS_goilTemplateValue var_cas_enumeratedValue ;
  GGS_goilTemplateType var_cas_expressionType ;
  switch (select_goil_template_parser_17 (inLexique)) {
    case 1 : {
      inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_template_scanner::goil_template_scanner_1__3A__3D_) COMMA_HERE) ;
      nt_expression_ (inLexique, var_cas_inPrefix, var_cas_inPath, var_cas_inTemplateDirectory, var_cas_ioTemplateVariableMap, var_cas_enumeratedValue, var_cas_expressionType) ;
      const GGS_bool cond_22052 = var_cas_ioTemplateVariableMap.reader_hasKey (var_cas_variableName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (781))) ;
      if (cond_22052.isBuiltAndTrue ()) {
        var_cas_ioTemplateVariableMap.modifier_setMTypeForKey (inLexique, var_cas_expressionType, var_cas_variableName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (782)) COMMA_SOURCE_FILE_AT_LINE (782)) ;
        var_cas_ioTemplateVariableMap.modifier_setMValueForKey (inLexique, var_cas_enumeratedValue, var_cas_variableName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (783)) COMMA_SOURCE_FILE_AT_LINE (783)) ;
      }else if (cond_22052.isBuiltAndFalse ()) {
        var_cas_ioTemplateVariableMap.modifier_insertKey (inLexique, var_cas_variableName, var_cas_expressionType, var_cas_enumeratedValue COMMA_SOURCE_FILE_AT_LINE (785)) ;
      }
      } break ;
    case 2 : {
      inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_template_scanner::goil_template_scanner_1__2B__3D_) COMMA_HERE) ;
      nt_expression_ (inLexique, var_cas_inPrefix, var_cas_inPath, var_cas_inTemplateDirectory, var_cas_ioTemplateVariableMap, var_cas_enumeratedValue, var_cas_expressionType) ;
      const GGS_bool cond_22435 = (var_cas_expressionType).operator_isNotEqual (GGS_goilTemplateType::constructor_stringType (inLexique COMMA_HERE)) ;
      if (cond_22435.isBuiltAndTrue ()) {
        GGS_location (inLexique).reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("string type expected") COMMA_SOURCE_FILE_AT_LINE (799)) ;
      }else if (cond_22435.isBuiltAndFalse ()) {
        GGS_goilTemplateValue var_cas_variableValue ;
        GGS_goilTemplateType var_cas_variableType ;
        const GGS_goilTemplateVariableMap  temp_22552 = var_cas_ioTemplateVariableMap ;
        if (temp_22552.isBuilt ()) {
          temp_22552 (HERE)->method_searchKey (inLexique, var_cas_variableName, var_cas_variableType, var_cas_variableValue COMMA_SOURCE_FILE_AT_LINE (802)) ;
        }
        const GGS_bool cond_22717 = (var_cas_variableType).operator_isNotEqual (GGS_goilTemplateType::constructor_listType (inLexique COMMA_HERE)) ;
        if (cond_22717.isBuiltAndTrue ()) {
          var_cas_variableName.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("list type expected") COMMA_SOURCE_FILE_AT_LINE (805)) ;
        }else if (cond_22717.isBuiltAndFalse ()) {
          GGS_goilTemplateFieldMap  var_cas_fieldMap = GGS_goilTemplateFieldMap ::constructor_emptyMap (inLexique COMMA_HERE) ;
          var_cas_fieldMap.modifier_insertKey (inLexique, GGS_lstring ::constructor_new (inLexique, GGS_string ("NAME"), GGS_location (inLexique) COMMA_HERE), var_cas_expressionType, GGS_uint64 (0ULL), var_cas_enumeratedValue.reader_mStringValue (inLexique COMMA_SOURCE_FILE_AT_LINE (807)), GGS_goilTemplateFieldMapList ::constructor_emptyList () COMMA_SOURCE_FILE_AT_LINE (807)) ;
          var_cas_variableValue.mMapListValue.addAssign_operation (var_cas_fieldMap) ;
          var_cas_ioTemplateVariableMap.modifier_setMTypeForKey (inLexique, var_cas_variableType, var_cas_variableName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (809)) COMMA_SOURCE_FILE_AT_LINE (809)) ;
          var_cas_ioTemplateVariableMap.modifier_setMValueForKey (inLexique, var_cas_variableValue, var_cas_variableName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (810)) COMMA_SOURCE_FILE_AT_LINE (810)) ;
        }
      }
      } break ;
    default :
      break ;
  }
}

//---------------------------------------------------------------------------*

void goil_template_parser::
pr_template_instruction_goil_template_parser_761_27_parse (goil_template_scanner & inLexique) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_template_scanner::goil_template_scanner_1_let) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_template_scanner::goil_template_scanner_1_identifier) COMMA_HERE) ;
  switch (select_goil_template_parser_17 (inLexique)) {
    case 1 : {
      inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_template_scanner::goil_template_scanner_1__3A__3D_) COMMA_HERE) ;
      nt_expression_parse (inLexique) ;
      } break ;
    case 2 : {
      inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_template_scanner::goil_template_scanner_1__2B__3D_) COMMA_HERE) ;
      nt_expression_parse (inLexique) ;
      } break ;
    default :
      break ;
  }
  GGS_lstring::constructor_retrieveAndResetTemplateString (inLexique COMMA_HERE) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//           Implementation of production rule 'variable_or_here'            *
//                                                                           *
//---------------------------------------------------------------------------*

void goil_template_parser::
pr_variable_or_here_goil_template_parser_818_23_ (goil_template_scanner & inLexique,
                                const GGS_goilTemplateVariableMap  var_cas_inTemplateVariableMap,
                                GGS_location  &var_cas_outWhere) {
  switch (select_goil_template_parser_18 (inLexique)) {
    case 1 : {
      inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_template_scanner::goil_template_scanner_1_here) COMMA_HERE) ;
      var_cas_outWhere = GGS_location (inLexique) ;
      } break ;
    case 2 : {
      GGS_lstring  var_cas_variableName ;
      inLexique.assignFromAttribute_tokenString (var_cas_variableName) ;
      inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_template_scanner::goil_template_scanner_1_identifier) COMMA_HERE) ;
      var_cas_outWhere = var_cas_inTemplateVariableMap.reader_locationForKey (inLexique, var_cas_variableName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (827)) COMMA_SOURCE_FILE_AT_LINE (827)) ;
      } break ;
    default :
      break ;
  }
}

//---------------------------------------------------------------------------*

void goil_template_parser::
pr_variable_or_here_goil_template_parser_818_23_parse (goil_template_scanner & inLexique) {
  switch (select_goil_template_parser_18 (inLexique)) {
    case 1 : {
      inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_template_scanner::goil_template_scanner_1_here) COMMA_HERE) ;
      } break ;
    case 2 : {
      inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_template_scanner::goil_template_scanner_1_identifier) COMMA_HERE) ;
      } break ;
    default :
      break ;
  }
  GGS_lstring::constructor_retrieveAndResetTemplateString (inLexique COMMA_HERE) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//         Implementation of production rule 'template_instruction'          *
//                                                                           *
//---------------------------------------------------------------------------*

void goil_template_parser::
pr_template_instruction_goil_template_parser_833_27_ (goil_template_scanner & inLexique,
                                const GGS_string var_cas_inPrefix,
                                const GGS_string var_cas_inPath,
                                const GGS_string var_cas_inTemplateDirectory,
                                GGS_goilTemplateVariableMap  &var_cas_ioTemplateVariableMap,
                                GGS_string &/* var_cas_ioResultingString */) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_template_scanner::goil_template_scanner_1_error) COMMA_HERE) ;
  GGS_location  var_cas_where ;
  nt_variable_or_here_ (inLexique, var_cas_ioTemplateVariableMap, var_cas_where) ;
  GGS_goilTemplateValue var_cas_enumeratedValue ;
  GGS_goilTemplateType var_cas_expressionType ;
  nt_expression_ (inLexique, var_cas_inPrefix, var_cas_inPath, var_cas_inTemplateDirectory, var_cas_ioTemplateVariableMap, var_cas_enumeratedValue, var_cas_expressionType) ;
  const GGS_bool cond_24261 = (var_cas_expressionType).operator_isNotEqual (GGS_goilTemplateType::constructor_stringType (inLexique COMMA_HERE)) ;
  if (cond_24261.isBuiltAndTrue ()) {
    GGS_location (inLexique).reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("error message should by a string expression") COMMA_SOURCE_FILE_AT_LINE (855)) ;
  }else if (cond_24261.isBuiltAndFalse ()) {
    var_cas_where.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, var_cas_enumeratedValue.reader_mStringValue (inLexique COMMA_SOURCE_FILE_AT_LINE (856)) COMMA_SOURCE_FILE_AT_LINE (857)) ;
  }
}

//---------------------------------------------------------------------------*

void goil_template_parser::
pr_template_instruction_goil_template_parser_833_27_parse (goil_template_scanner & inLexique) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_template_scanner::goil_template_scanner_1_error) COMMA_HERE) ;
  nt_variable_or_here_parse (inLexique) ;
  nt_expression_parse (inLexique) ;
  GGS_lstring::constructor_retrieveAndResetTemplateString (inLexique COMMA_HERE) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//         Implementation of production rule 'template_instruction'          *
//                                                                           *
//---------------------------------------------------------------------------*

void goil_template_parser::
pr_template_instruction_goil_template_parser_862_27_ (goil_template_scanner & inLexique,
                                const GGS_string var_cas_inPrefix,
                                const GGS_string var_cas_inPath,
                                const GGS_string var_cas_inTemplateDirectory,
                                GGS_goilTemplateVariableMap  &var_cas_ioTemplateVariableMap,
                                GGS_string &/* var_cas_ioResultingString */) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_template_scanner::goil_template_scanner_1_warning) COMMA_HERE) ;
  GGS_location  var_cas_where ;
  nt_variable_or_here_ (inLexique, var_cas_ioTemplateVariableMap, var_cas_where) ;
  GGS_goilTemplateValue var_cas_enumeratedValue ;
  GGS_goilTemplateType var_cas_expressionType ;
  nt_expression_ (inLexique, var_cas_inPrefix, var_cas_inPath, var_cas_inTemplateDirectory, var_cas_ioTemplateVariableMap, var_cas_enumeratedValue, var_cas_expressionType) ;
  const GGS_bool cond_25025 = (var_cas_expressionType).operator_isNotEqual (GGS_goilTemplateType::constructor_stringType (inLexique COMMA_HERE)) ;
  if (cond_25025.isBuiltAndTrue ()) {
    GGS_location (inLexique).reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("error message should by a string expression") COMMA_SOURCE_FILE_AT_LINE (884)) ;
  }else if (cond_25025.isBuiltAndFalse ()) {
    var_cas_where.reader_location (inLexique COMMA_HERE).signalGGSSemanticWarning (inLexique, var_cas_enumeratedValue.reader_mStringValue (inLexique COMMA_SOURCE_FILE_AT_LINE (885)) COMMA_SOURCE_FILE_AT_LINE (885)) ;
  }
}

//---------------------------------------------------------------------------*

void goil_template_parser::
pr_template_instruction_goil_template_parser_862_27_parse (goil_template_scanner & inLexique) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_template_scanner::goil_template_scanner_1_warning) COMMA_HERE) ;
  nt_variable_or_here_parse (inLexique) ;
  nt_expression_parse (inLexique) ;
  GGS_lstring::constructor_retrieveAndResetTemplateString (inLexique COMMA_HERE) ;
}

//---------------------------------------------------------------------------*

