//---------------------------------------------------------------------------*
//                                                                           *
//                         File 'xml_resource.cpp'                           *
//                 Generated by version GALGAS_BETA_VERSION                  *
//                      june 12th, 2009, at 14h44'48"                        *
//                                                                           *
//---------------------------------------------------------------------------*

//--- START OF USER ZONE 1


//--- END OF USER ZONE 1

//---------------------------------------------------------------------------*

#include "version_libpm.h"
#if LIBPM_VERSION != 502
  #error "This file has been compiled with a version of GALGAS different than the version of libpm"
#endif

//---------------------------------------------------------------------------*

#include <typeinfo>
#include "utilities/MF_MemoryControl.h"
#include "files/C_TextFileWrite.h"
#include "xml_resource.h"

//---------------------------------------------------------------------------*

#ifndef DO_NOT_GENERATE_CHECKINGS
  #define SOURCE_FILE_AT_LINE(line) "xml_resource.ggs", line
  #define COMMA_SOURCE_FILE_AT_LINE(line) , SOURCE_FILE_AT_LINE(line)
#else
  #define SOURCE_FILE_AT_LINE(line) 
  #define COMMA_SOURCE_FILE_AT_LINE(line) 
#endif


//--- START OF USER ZONE 2


//--- END OF USER ZONE 2

//---------------------------------------------------------------------------*
//                                                                           *
//                Implementation of routine "parse_resource"                 *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_parse_resource (C_Compiler & inLexique,
                                const GGS_lstring   var_cas_name,
                                const GGS_xmlNodeList   var_cas_cont_elems,
                                GGS_root_obj  & var_cas_cpu COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_parse_resource at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  GGS_resource_obj  var_cas_r ;
  var_cas_r = function_default_resource_obj (inLexique COMMA_SOURCE_FILE_AT_LINE (36)) ;
  GGS_lstringlist  var_cas_acc_apps ;
  var_cas_acc_apps = var_cas_r.reader_acc_apps (inLexique COMMA_SOURCE_FILE_AT_LINE (37)) ;
  GGS_xmlNode  var_cas_node ;
  var_cas_node = function_elem_named (inLexique, var_cas_cont_elems, GGS_string ("PARAMETER-VALUES") COMMA_SOURCE_FILE_AT_LINE (39)) ;
  if ((function_is_not_void (inLexique, var_cas_node COMMA_SOURCE_FILE_AT_LINE (40))).isBuiltAndTrue ()) {
    GGS_xmlNodeList  var_cas_params ;
    var_cas_params = var_cas_node.reader_nodeList (inLexique COMMA_SOURCE_FILE_AT_LINE (41)) ;
    GGS_bool var_cas_linked_res_found ;
    var_cas_linked_res_found = GGS_bool (false) ;
    GGS_location  var_cas_linked_res_loc ;
    var_cas_linked_res_loc = GGS_location (inLexique) ;
    GGS_lstring  var_cas_linked_res_ref ;
    var_cas_linked_res_ref = function_empty_lstring (inLexique COMMA_SOURCE_FILE_AT_LINE (44)) ;
    {
      GGS_xmlNodeList::cEnumerator enumerator_1085 (var_cas_params, true) ;
      const GGS_xmlNodeList::cElement * operand_1085 = NULL ;
      while (((operand_1085 = enumerator_1085.nextObject ()))) {
        macroValidPointer (operand_1085) ;
        if ((function_is_param (inLexique, operand_1085->node, GGS_string ("OsResourceProperty") COMMA_SOURCE_FILE_AT_LINE (46))).isBuiltAndTrue ()) {
          GGS_lstring  var_cas_prop ;
          var_cas_prop = function_lstring_param (inLexique, operand_1085->node COMMA_SOURCE_FILE_AT_LINE (47)) ;
          GGS_string var_cas_p ;
          var_cas_p = var_cas_prop.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (48)) ;
          if (((var_cas_p).operator_isEqual (GGS_string ("INTERNAL"))).isBuiltAndTrue ()) {
            var_cas_r.modifier_setProperty (inLexique, GGS_resource_property_internal_obj ::constructor_new (inLexique, var_cas_prop.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (50)) COMMA_HERE) COMMA_SOURCE_FILE_AT_LINE (50)) ;
          }else if (((var_cas_p).operator_isEqual (GGS_string ("STANDARD"))).isBuiltAndTrue ()) {
            var_cas_r.modifier_setProperty (inLexique, GGS_resource_property_standard_obj ::constructor_new (inLexique, var_cas_prop.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (52)) COMMA_HERE) COMMA_SOURCE_FILE_AT_LINE (52)) ;
          }else if (((var_cas_p).operator_isEqual (GGS_string ("LINKED"))).isBuiltAndTrue ()) {
            var_cas_linked_res_found = GGS_bool (true) ;
            var_cas_linked_res_loc = var_cas_prop.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (55)) ;
          }
        }else if ((function_is_param (inLexique, operand_1085->node, GGS_string ("OsResourceAccessingApplication") COMMA_SOURCE_FILE_AT_LINE (57))).isBuiltAndTrue ()) {
          GGS_lstring  var_cas_aa ;
          var_cas_aa = function_lstring_param (inLexique, operand_1085->node COMMA_SOURCE_FILE_AT_LINE (58)) ;
          ::routine_add_lstring_unique (inLexique,  var_cas_acc_apps,  var_cas_aa,  GGS_string ("OsResourceAccessingApplication") COMMA_SOURCE_FILE_AT_LINE (59)) ;
        }else if ((function_is_param (inLexique, operand_1085->node, GGS_string ("OsResourceLinkedResourceRef") COMMA_SOURCE_FILE_AT_LINE (60))).isBuiltAndTrue ()) {
          var_cas_linked_res_ref = function_lstring_param (inLexique, operand_1085->node COMMA_SOURCE_FILE_AT_LINE (61)) ;
        }
      }
    }
    if ((var_cas_linked_res_found).isBuiltAndTrue ()) {
      if (((var_cas_linked_res_ref.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (65))).operator_isNotEqual (GGS_string (""))).isBuiltAndTrue ()) {
        var_cas_r.modifier_setProperty (inLexique, GGS_resource_property_linked_obj ::constructor_new (inLexique, var_cas_linked_res_loc, var_cas_linked_res_ref COMMA_HERE) COMMA_SOURCE_FILE_AT_LINE (66)) ;
      }else{
        var_cas_linked_res_loc.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("No OsResourceLinkedResourceRef found") COMMA_SOURCE_FILE_AT_LINE (69)) ;
      }
    }
  }else{
    var_cas_name.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("Resource does not have a PARAMETER-VALUES element") COMMA_SOURCE_FILE_AT_LINE (73)) ;
  }
  GGS_resource_map  var_cas_rm ;
  var_cas_rm = var_cas_cpu.reader_resources (inLexique COMMA_SOURCE_FILE_AT_LINE (74)) ;
  var_cas_rm.modifier_put (inLexique, var_cas_name, var_cas_r COMMA_SOURCE_FILE_AT_LINE (75)) ;
  var_cas_cpu.modifier_setResources (inLexique, var_cas_rm COMMA_SOURCE_FILE_AT_LINE (76)) ;
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_parse_resource\n") ;
  #endif
}

//---------------------------------------------------------------------------*

