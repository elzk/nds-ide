//---------------------------------------------------------------------------*
//                                                                           *
//                      File 'goil_message_verif.cpp'                        *
//                        Generated by version 2.0.0                         *
//                       july 7th, 2010, at 17h16'15"                        *
//                                                                           *
//---------------------------------------------------------------------------*

//--- START OF USER ZONE 1


//--- END OF USER ZONE 1

//---------------------------------------------------------------------------*

#include "version_libpm.h"
#if CURRENT_LIBPM_VERSION != 820
  #error "This file has been compiled with a version of GALGAS that uses libpm version 820, different than the current version (CURRENT_LIBPM_VERSION) of libpm"
#endif

//---------------------------------------------------------------------------*

#include <typeinfo>
#include "utilities/MF_MemoryControl.h"
#include "files/C_TextFileWrite.h"
#include "galgas/C_galgas_CLI_Options.h"
#include "goil_message_verif.h"

//---------------------------------------------------------------------------*

#ifndef DO_NOT_GENERATE_CHECKINGS
  #define SOURCE_FILE_AT_LINE(line) "goil_message_verif.gSemantics", line
  #define COMMA_SOURCE_FILE_AT_LINE(line) , SOURCE_FILE_AT_LINE(line)
#else
  #define SOURCE_FILE_AT_LINE(line) 
  #define COMMA_SOURCE_FILE_AT_LINE(line) 
#endif


//--- START OF USER ZONE 2


//--- END OF USER ZONE 2

//---------------------------------------------------------------------------*
//                                                                           *
//                Implementation of routine "check_net_dir"                  *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_check_net_dir (C_Compiler & inLexique,
                                GGS_lstring   var_cas_net,
                                GGS_netmess_map   var_cas_netm,
                                GGS_string  var_cas_exp_dir
                        COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_check_net_dir at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  GGS_netmess_obj  var_cas_nm ;
  GGS_lstring  var_cas_dir ;
  if (var_cas_netm.isBuilt ()) {
    var_cas_netm (HERE)->method_get (inLexique, var_cas_net, var_cas_nm COMMA_SOURCE_FILE_AT_LINE (16)) ;
  }
  { const GGS_base_netprop _var_733 = var_cas_nm.reader_netprop (inLexique COMMA_SOURCE_FILE_AT_LINE (17)) ; // CAST instruction
    if (_var_733.getPtr () != NULL) {
      macroValidPointer (_var_733.getPtr ()) ;
      if (typeid (cPtr_static_netprop) == typeid (* (_var_733.getPtr ()))) {
        const GGS_static_netprop var_cas_sn (_var_733.getPtr ()) ;
        var_cas_dir = var_cas_sn.reader_direction (inLexique COMMA_SOURCE_FILE_AT_LINE (18)) ;
      }else if (typeid (cPtr_dynamic_netprop) == typeid (* (_var_733.getPtr ()))) {
        const GGS_dynamic_netprop var_cas_dn (_var_733.getPtr ()) ;
        var_cas_dir = var_cas_dn.reader_direction (inLexique COMMA_SOURCE_FILE_AT_LINE (19)) ;
      }else if (typeid (cPtr_zero_netprop) == typeid (* (_var_733.getPtr ()))) {
        const GGS_zero_netprop var_cas_zn (_var_733.getPtr ()) ;
        var_cas_dir = var_cas_zn.reader_direction (inLexique COMMA_SOURCE_FILE_AT_LINE (20)) ;
      }else{
        var_cas_dir = GGS_lstring ::constructor_new (inLexique, GGS_string (""), GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (22)) ;
        var_cas_nm.reader_netprop (inLexique COMMA_SOURCE_FILE_AT_LINE (23)).reader_loc (inLexique COMMA_SOURCE_FILE_AT_LINE (23)).reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("Internal error, unexpected type") COMMA_SOURCE_FILE_AT_LINE (24)) ;
      }
    }
  }
  const GGS_bool cond_987 = (var_cas_dir.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (25))).operator_isNotEqual (GGS_string ("")) ;
  if (cond_987.isBuiltAndTrue ()) {
    const GGS_bool cond_976 = (var_cas_dir.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (26))).operator_isNotEqual (var_cas_exp_dir) ;
    if (cond_976.isBuiltAndTrue ()) {
      var_cas_net.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((GGS_string ("NETWORKMESSAGE does not have the DIRECTION = ")).operator_concat (var_cas_exp_dir.reader_uppercaseString ())).operator_concat (GGS_string (" attribute")) COMMA_SOURCE_FILE_AT_LINE (28)) ;
      var_cas_dir.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("DIRECTION attribute is defined here") COMMA_SOURCE_FILE_AT_LINE (29)) ;
    }
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_check_net_dir\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//             Implementation of routine "check_external_sent"               *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_check_external_sent (C_Compiler & inLexique,
                                GGS_lstring   var_cas_net,
                                GGS_netmess_map   var_cas_netm
                        COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_check_external_sent at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  const GGS_bool cond_1231 = (var_cas_netm.reader_hasKey (var_cas_net.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (38)))).operator_not () ;
  if (cond_1231.isBuiltAndTrue ()) {
    var_cas_net.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((GGS_string ("NETWORKMESSAGE ")).operator_concat (var_cas_net.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (39)))).operator_concat (GGS_string (" does not exist")) COMMA_SOURCE_FILE_AT_LINE (40)) ;
  }else if (cond_1231.isBuiltAndFalse ()) {
    ::routine_check_net_dir (inLexique,  var_cas_net,  var_cas_netm,  GGS_string ("sent") COMMA_SOURCE_FILE_AT_LINE (41)) ;
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_check_external_sent\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//           Implementation of routine "check_external_received"             *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_check_external_received (C_Compiler & inLexique,
                                GGS_lstring   var_cas_net,
                                GGS_netmess_map   var_cas_netm
                        COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_check_external_received at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  const GGS_bool cond_1524 = (var_cas_netm.reader_hasKey (var_cas_net.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (50)))).operator_not () ;
  if (cond_1524.isBuiltAndTrue ()) {
    var_cas_net.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((GGS_string ("NETWORKMESSAGE ")).operator_concat (var_cas_net.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (51)))).operator_concat (GGS_string (" does not exist")) COMMA_SOURCE_FILE_AT_LINE (52)) ;
  }else if (cond_1524.isBuiltAndFalse ()) {
    ::routine_check_net_dir (inLexique,  var_cas_net,  var_cas_netm,  GGS_string ("received") COMMA_SOURCE_FILE_AT_LINE (53)) ;
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_check_external_received\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//         Implementation of routine "check_external_link_received"          *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_check_external_link_received (C_Compiler & inLexique,
                                GGS_link_obj   var_cas_link,
                                GGS_message_map   var_cas_messages,
                                GGS_netmess_map   var_cas_netm,
                                GGS_location   var_cas_link_ref,
                                GGS_uint   var_cas_depth
                        COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_check_external_link_received at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  { const GGS_link_obj _var_3420 = var_cas_link ; // CAST instruction
    if (_var_3420.getPtr () != NULL) {
      macroValidPointer (_var_3420.getPtr ()) ;
      if (typeid (cPtr_true_link) == typeid (* (_var_3420.getPtr ()))) {
        const GGS_true_link var_cas_tl (_var_3420.getPtr ()) ;
        const GGS_bool cond_2019 = (var_cas_depth).operator_isEqual (GGS_uint (0U)) ;
        if (cond_2019.isBuiltAndTrue ()) {
          var_cas_link.reader_loc (inLexique COMMA_SOURCE_FILE_AT_LINE (67)).reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("This message is linked from another message.") COMMA_SOURCE_FILE_AT_LINE (68)) ;
          var_cas_link.reader_loc (inLexique COMMA_SOURCE_FILE_AT_LINE (68)).reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("So it should be linked to a network message.") COMMA_SOURCE_FILE_AT_LINE (69)) ;
          var_cas_link_ref.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("Referencing message is here") COMMA_SOURCE_FILE_AT_LINE (70)) ;
        }else if (cond_2019.isBuiltAndFalse ()) {
          GGS_lstring  var_cas_mess = var_cas_tl.reader_receivemessage (inLexique COMMA_SOURCE_FILE_AT_LINE (71)) ;
          const GGS_bool cond_3000 = var_cas_messages.reader_hasKey (var_cas_mess.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (73))) ;
          if (cond_3000.isBuiltAndTrue ()) {
            GGS_message_obj  var_cas_lm ;
            if (var_cas_messages.isBuilt ()) {
              var_cas_messages (HERE)->method_get (inLexique, var_cas_mess, var_cas_lm COMMA_SOURCE_FILE_AT_LINE (75)) ;
            }
            { const GGS_mess_prop_obj _var_2982 = var_cas_lm.reader_messageproperty (inLexique COMMA_SOURCE_FILE_AT_LINE (76)) ; // CAST instruction
              if (_var_2982.getPtr () != NULL) {
                macroValidPointer (_var_2982.getPtr ()) ;
                if (typeid (cPtr_rue_mess_prop) == typeid (* (_var_2982.getPtr ()))) {
                  const GGS_rue_mess_prop var_cas_ue (_var_2982.getPtr ()) ;
                  ::routine_check_external_link_received (inLexique,  var_cas_ue.reader_link (inLexique COMMA_SOURCE_FILE_AT_LINE (78)),  var_cas_messages,  var_cas_netm,  var_cas_tl.reader_loc (inLexique COMMA_SOURCE_FILE_AT_LINE (78)),  var_cas_depth.substract_operation (inLexique, GGS_uint (1U) COMMA_SOURCE_FILE_AT_LINE (78)) COMMA_SOURCE_FILE_AT_LINE (78)) ;
                }else if (typeid (cPtr_rqe_mess_prop) == typeid (* (_var_2982.getPtr ()))) {
                  const GGS_rqe_mess_prop var_cas_qe (_var_2982.getPtr ()) ;
                  ::routine_check_external_link_received (inLexique,  var_cas_qe.reader_link (inLexique COMMA_SOURCE_FILE_AT_LINE (80)),  var_cas_messages,  var_cas_netm,  var_cas_tl.reader_loc (inLexique COMMA_SOURCE_FILE_AT_LINE (80)),  var_cas_depth.substract_operation (inLexique, GGS_uint (1U) COMMA_SOURCE_FILE_AT_LINE (80)) COMMA_SOURCE_FILE_AT_LINE (80)) ;
                }else if (typeid (cPtr_rde_mess_prop) == typeid (* (_var_2982.getPtr ()))) {
                  const GGS_rde_mess_prop var_cas_de (_var_2982.getPtr ()) ;
                  ::routine_check_external_link_received (inLexique,  var_cas_de.reader_link (inLexique COMMA_SOURCE_FILE_AT_LINE (82)),  var_cas_messages,  var_cas_netm,  var_cas_tl.reader_loc (inLexique COMMA_SOURCE_FILE_AT_LINE (82)),  var_cas_depth.substract_operation (inLexique, GGS_uint (1U) COMMA_SOURCE_FILE_AT_LINE (82)) COMMA_SOURCE_FILE_AT_LINE (82)) ;
                }else{
                  var_cas_mess.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("Linked message has a wrong MESSAGEPROPERTY") COMMA_SOURCE_FILE_AT_LINE (85)) ;
                  GGS_location  var_cas_loc = var_cas_lm.reader_messageproperty (inLexique COMMA_SOURCE_FILE_AT_LINE (85)).reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (85)) ;
                  var_cas_loc.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("expected MESSAGEPROPERTY are") COMMA_SOURCE_FILE_AT_LINE (87)) ;
                  var_cas_loc.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("    RECEIVE_UNQUEUED_EXTERNAL,") COMMA_SOURCE_FILE_AT_LINE (88)) ;
                  var_cas_loc.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("    RECEIVE_QUEUED_EXTERNAL or") COMMA_SOURCE_FILE_AT_LINE (89)) ;
                  var_cas_loc.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("    RECEIVE_DYNAMIC_EXTERNAL") COMMA_SOURCE_FILE_AT_LINE (90)) ;
                }
              }
            }
          }else if (cond_3000.isBuiltAndFalse ()) {
            var_cas_mess.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((GGS_string ("Linked message ")).operator_concat (var_cas_mess.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (92)))).operator_concat (GGS_string (" does not exist")) COMMA_SOURCE_FILE_AT_LINE (93)) ;
          }
        }
      }else if (typeid (cPtr_false_link) == typeid (* (_var_3420.getPtr ()))) {
        const GGS_false_link var_cas_fl (_var_3420.getPtr ()) ;
        GGS_lstring  var_cas_net = var_cas_fl.reader_networkmessage (inLexique COMMA_SOURCE_FILE_AT_LINE (96)) ;
        const GGS_bool cond_3291 = (var_cas_netm.reader_hasKey (var_cas_net.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (97)))).operator_not () ;
        if (cond_3291.isBuiltAndTrue ()) {
          var_cas_net.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((GGS_string ("NETWORKMESSAGE ")).operator_concat (var_cas_net.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (98)))).operator_concat (GGS_string (" does not exist")) COMMA_SOURCE_FILE_AT_LINE (99)) ;
        }else if (cond_3291.isBuiltAndFalse ()) {
          ::routine_check_net_dir (inLexique,  var_cas_net,  var_cas_netm,  GGS_string ("received") COMMA_SOURCE_FILE_AT_LINE (100)) ;
        }
      }else{
        var_cas_link.reader_loc (inLexique COMMA_SOURCE_FILE_AT_LINE (103)).reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("Internal error, unexpected type") COMMA_SOURCE_FILE_AT_LINE (104)) ;
      }
    }
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_check_external_link_received\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//             Implementation of routine "messages_well_formed"              *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_messages_well_formed (C_Compiler & inLexique,
                                const GGS_message_map   var_cas_messages
                        COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_messages_well_formed at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  {
    GGS_message_map::cEnumerator enumerator_3759 (var_cas_messages, true) ;
    const GGS_message_map::cElement * operand_3759 = NULL ;
    while (((operand_3759 = enumerator_3759.nextObject ()))) {
      macroValidPointer (operand_3759) ;
      { const GGS_mess_prop_obj _var_3991 = operand_3759->mInfo.mess.reader_messageproperty (inLexique COMMA_SOURCE_FILE_AT_LINE (124)) ; // CAST instruction
        if (_var_3991.getPtr () != NULL) {
          macroValidPointer (_var_3991.getPtr ()) ;
          if (typeid (cPtr_void_mess_prop) == typeid (* (_var_3991.getPtr ()))) {
            operand_3759->mKey.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, (GGS_string ("MESSAGEPROPERTY attribute missing for message ")).operator_concat (operand_3759->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (126))) COMMA_SOURCE_FILE_AT_LINE (127)) ;
          }else{
          }
        }
      }
      { const GGS_action_obj _var_4625 = operand_3759->mInfo.mess.reader_notification (inLexique COMMA_SOURCE_FILE_AT_LINE (130)) ; // CAST instruction
        if (_var_4625.getPtr () != NULL) {
          macroValidPointer (_var_4625.getPtr ()) ;
          if (typeid (cPtr_void_action) == typeid (* (_var_4625.getPtr ()))) {
          }else{
            { const GGS_mess_prop_obj _var_4611 = operand_3759->mInfo.mess.reader_messageproperty (inLexique COMMA_SOURCE_FILE_AT_LINE (133)) ; // CAST instruction
              if (_var_4611.getPtr () != NULL) {
                macroValidPointer (_var_4611.getPtr ()) ;
                if (typeid (cPtr_ssi_mess_prop) == typeid (* (_var_4611.getPtr ()))) {
                  operand_3759->mInfo.mess.reader_notification (inLexique COMMA_SOURCE_FILE_AT_LINE (135)).reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (135)).reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("NOTIFICATION is not allowed for SEND_STATIC_INTERNAL message") COMMA_SOURCE_FILE_AT_LINE (136)) ;
                }else if (typeid (cPtr_szi_mess_prop) == typeid (* (_var_4611.getPtr ()))) {
                  operand_3759->mInfo.mess.reader_notification (inLexique COMMA_SOURCE_FILE_AT_LINE (137)).reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (137)).reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("NOTIFICATION is not allowed for SEND_ZERO_INTERNAL message") COMMA_SOURCE_FILE_AT_LINE (138)) ;
                }else if (typeid (cPtr_rzs_mess_prop) == typeid (* (_var_4611.getPtr ()))) {
                  operand_3759->mInfo.mess.reader_notification (inLexique COMMA_SOURCE_FILE_AT_LINE (139)).reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (139)).reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("NOTIFICATION is not allowed for RECEIVE_ZERO_SENDERS message") COMMA_SOURCE_FILE_AT_LINE (140)) ;
                }else{
                }
              }
            }
          }
        }
      }
      { const GGS_action_obj _var_5761 = operand_3759->mInfo.mess.reader_notificationerror (inLexique COMMA_SOURCE_FILE_AT_LINE (144)) ; // CAST instruction
        if (_var_5761.getPtr () != NULL) {
          macroValidPointer (_var_5761.getPtr ()) ;
          if (typeid (cPtr_void_action) == typeid (* (_var_5761.getPtr ()))) {
          }else{
            { const GGS_mess_prop_obj _var_5747 = operand_3759->mInfo.mess.reader_messageproperty (inLexique COMMA_SOURCE_FILE_AT_LINE (147)) ; // CAST instruction
              if (_var_5747.getPtr () != NULL) {
                macroValidPointer (_var_5747.getPtr ()) ;
                if (typeid (cPtr_ssi_mess_prop) == typeid (* (_var_5747.getPtr ()))) {
                  operand_3759->mInfo.mess.reader_notification (inLexique COMMA_SOURCE_FILE_AT_LINE (149)).reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (149)).reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("NOTIFICATIONERROR is not allowed for SEND_STATIC_INTERNAL message") COMMA_SOURCE_FILE_AT_LINE (150)) ;
                }else if (typeid (cPtr_szi_mess_prop) == typeid (* (_var_5747.getPtr ()))) {
                  operand_3759->mInfo.mess.reader_notification (inLexique COMMA_SOURCE_FILE_AT_LINE (151)).reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (151)).reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("NOTIFICATIONERROR is not allowed for SEND_ZERO_INTERNAL message") COMMA_SOURCE_FILE_AT_LINE (152)) ;
                }else if (typeid (cPtr_rzi_mess_prop) == typeid (* (_var_5747.getPtr ()))) {
                  operand_3759->mInfo.mess.reader_notification (inLexique COMMA_SOURCE_FILE_AT_LINE (153)).reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (153)).reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("NOTIFICATIONERROR is not allowed for RECEIVE_ZERO_INTERNAL message") COMMA_SOURCE_FILE_AT_LINE (154)) ;
                }else if (typeid (cPtr_rui_mess_prop) == typeid (* (_var_5747.getPtr ()))) {
                  operand_3759->mInfo.mess.reader_notification (inLexique COMMA_SOURCE_FILE_AT_LINE (155)).reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (155)).reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("NOTIFICATIONERROR is not allowed for RECEIVE_UNQUEUED_INTERNAL message") COMMA_SOURCE_FILE_AT_LINE (156)) ;
                }else if (typeid (cPtr_rqi_mess_prop) == typeid (* (_var_5747.getPtr ()))) {
                  operand_3759->mInfo.mess.reader_notification (inLexique COMMA_SOURCE_FILE_AT_LINE (157)).reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (157)).reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("NOTIFICATIONERROR is not allowed for RECEIVE_QUEUED_INTERNAL message") COMMA_SOURCE_FILE_AT_LINE (158)) ;
                }else if (typeid (cPtr_rzs_mess_prop) == typeid (* (_var_5747.getPtr ()))) {
                  operand_3759->mInfo.mess.reader_notification (inLexique COMMA_SOURCE_FILE_AT_LINE (159)).reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (159)).reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("NOTIFICATIONERROR is not allowed for RECEIVE_ZERO_SENDERS message") COMMA_SOURCE_FILE_AT_LINE (160)) ;
                }else{
                }
              }
            }
          }
        }
      }
    }
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_messages_well_formed\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//         Implementation of routine "networkmessages_exist_and_ok"          *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_networkmessages_exist_and_ok (C_Compiler & inLexique,
                                GGS_message_map   var_cas_messages,
                                GGS_netmess_map   var_cas_netm
                        COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_networkmessages_exist_and_ok at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  {
    GGS_message_map::cEnumerator enumerator_5991 (var_cas_messages, true) ;
    const GGS_message_map::cElement * operand_5991 = NULL ;
    while (((operand_5991 = enumerator_5991.nextObject ()))) {
      macroValidPointer (operand_5991) ;
      { const GGS_mess_prop_obj _var_6729 = operand_5991->mInfo.mess.reader_messageproperty (inLexique COMMA_SOURCE_FILE_AT_LINE (174)) ; // CAST instruction
        if (_var_6729.getPtr () != NULL) {
          macroValidPointer (_var_6729.getPtr ()) ;
          if (typeid (cPtr_sse_mess_prop) == typeid (* (_var_6729.getPtr ()))) {
            const GGS_sse_mess_prop var_cas_sse (_var_6729.getPtr ()) ;
            ::routine_check_external_sent (inLexique,  var_cas_sse.reader_networkmessage (inLexique COMMA_SOURCE_FILE_AT_LINE (176)),  var_cas_netm COMMA_SOURCE_FILE_AT_LINE (176)) ;
          }else if (typeid (cPtr_sde_mess_prop) == typeid (* (_var_6729.getPtr ()))) {
            const GGS_sde_mess_prop var_cas_sde (_var_6729.getPtr ()) ;
            ::routine_check_external_sent (inLexique,  var_cas_sde.reader_networkmessage (inLexique COMMA_SOURCE_FILE_AT_LINE (178)),  var_cas_netm COMMA_SOURCE_FILE_AT_LINE (178)) ;
          }else if (typeid (cPtr_sze_mess_prop) == typeid (* (_var_6729.getPtr ()))) {
            const GGS_sze_mess_prop var_cas_sze (_var_6729.getPtr ()) ;
            ::routine_check_external_sent (inLexique,  var_cas_sze.reader_networkmessage (inLexique COMMA_SOURCE_FILE_AT_LINE (180)),  var_cas_netm COMMA_SOURCE_FILE_AT_LINE (180)) ;
          }else if (typeid (cPtr_rze_mess_prop) == typeid (* (_var_6729.getPtr ()))) {
            const GGS_rze_mess_prop var_cas_rze (_var_6729.getPtr ()) ;
            ::routine_check_external_received (inLexique,  var_cas_rze.reader_networkmessage (inLexique COMMA_SOURCE_FILE_AT_LINE (182)),  var_cas_netm COMMA_SOURCE_FILE_AT_LINE (182)) ;
          }else if (typeid (cPtr_rue_mess_prop) == typeid (* (_var_6729.getPtr ()))) {
            const GGS_rue_mess_prop var_cas_rue (_var_6729.getPtr ()) ;
            ::routine_check_external_link_received (inLexique,  var_cas_rue.reader_link (inLexique COMMA_SOURCE_FILE_AT_LINE (184)),  var_cas_messages,  var_cas_netm,  GGS_location (inLexique),  GGS_uint (1U) COMMA_SOURCE_FILE_AT_LINE (184)) ;
          }else if (typeid (cPtr_rqe_mess_prop) == typeid (* (_var_6729.getPtr ()))) {
            const GGS_rqe_mess_prop var_cas_rqe (_var_6729.getPtr ()) ;
            ::routine_check_external_link_received (inLexique,  var_cas_rqe.reader_link (inLexique COMMA_SOURCE_FILE_AT_LINE (186)),  var_cas_messages,  var_cas_netm,  GGS_location (inLexique),  GGS_uint (1U) COMMA_SOURCE_FILE_AT_LINE (186)) ;
          }else if (typeid (cPtr_rde_mess_prop) == typeid (* (_var_6729.getPtr ()))) {
            const GGS_rde_mess_prop var_cas_rde (_var_6729.getPtr ()) ;
            ::routine_check_external_link_received (inLexique,  var_cas_rde.reader_link (inLexique COMMA_SOURCE_FILE_AT_LINE (188)),  var_cas_messages,  var_cas_netm,  GGS_location (inLexique),  GGS_uint (1U) COMMA_SOURCE_FILE_AT_LINE (188)) ;
          }else{
          }
        }
      }
    }
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_networkmessages_exist_and_ok\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//         Implementation of routine "networkmessages_well_formed"           *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_networkmessages_well_formed (C_Compiler & inLexique,
                                GGS_netmess_map   var_cas_netm
                        COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_networkmessages_well_formed at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  {
    GGS_netmess_map::cEnumerator enumerator_6841 (var_cas_netm, true) ;
    const GGS_netmess_map::cElement * operand_6841 = NULL ;
    while (((operand_6841 = enumerator_6841.nextObject ()))) {
      macroValidPointer (operand_6841) ;
      { const GGS_base_netprop _var_7000 = operand_6841->mInfo.netmess.reader_netprop (inLexique COMMA_SOURCE_FILE_AT_LINE (197)) ; // CAST instruction
        if (_var_7000.getPtr () != NULL) {
          macroValidPointer (_var_7000.getPtr ()) ;
          if (typeid (cPtr_void_netprop) == typeid (* (_var_7000.getPtr ()))) {
            operand_6841->mKey.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, (GGS_string ("MESSAGEPROPERTY attribute is missing for NETWORKMESSAGE ")).operator_concat (operand_6841->mKey) COMMA_SOURCE_FILE_AT_LINE (200)) ;
          }else{
          }
        }
      }
    }
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_networkmessages_well_formed\n") ;
  #endif
}

//---------------------------------------------------------------------------*

