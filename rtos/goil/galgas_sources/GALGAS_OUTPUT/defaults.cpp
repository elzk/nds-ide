//---------------------------------------------------------------------------*
//                                                                           *
//                           File 'defaults.cpp'                             *
//                        Generated by version 2.0.0                         *
//                       july 7th, 2010, at 17h16'12"                        *
//                                                                           *
//---------------------------------------------------------------------------*

//--- START OF USER ZONE 1


//--- END OF USER ZONE 1

//---------------------------------------------------------------------------*

#include "version_libpm.h"
#if CURRENT_LIBPM_VERSION != 820
  #error "This file has been compiled with a version of GALGAS that uses libpm version 820, different than the current version (CURRENT_LIBPM_VERSION) of libpm"
#endif

//---------------------------------------------------------------------------*

#include <typeinfo>
#include "utilities/MF_MemoryControl.h"
#include "files/C_TextFileWrite.h"
#include "galgas/C_galgas_CLI_Options.h"
#include "defaults.h"

//---------------------------------------------------------------------------*

#ifndef DO_NOT_GENERATE_CHECKINGS
  #define SOURCE_FILE_AT_LINE(line) "defaults.gSemantics", line
  #define COMMA_SOURCE_FILE_AT_LINE(line) , SOURCE_FILE_AT_LINE(line)
#else
  #define SOURCE_FILE_AT_LINE(line) 
  #define COMMA_SOURCE_FILE_AT_LINE(line) 
#endif


//--- START OF USER ZONE 2


//--- END OF USER ZONE 2

//---------------------------------------------------------------------------*
//                                                                           *
//              Implementation of routine "check_custom_field"               *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_check_custom_field (C_Compiler & inLexique,
                                GGS_ident_map  & var_cas_others,
                                GGS_lstring   var_cas_field,
                                GGS_imp_type   var_cas_f_def
                        COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_check_custom_field at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  const GGS_bool cond_1551 = (var_cas_others.reader_hasKey (var_cas_field.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (44)))).operator_not () ;
  if (cond_1551.isBuiltAndTrue ()) {
    { const GGS_imp_type _var_1535 = var_cas_f_def ; // CAST instruction
      if (_var_1535.getPtr () != NULL) {
        macroValidPointer (_var_1535.getPtr ()) ;
        if (typeid (cPtr_uint32_type) == typeid (* (_var_1535.getPtr ()))) {
          const GGS_uint32_type var_cas_f (_var_1535.getPtr ()) ;
          GGS_uint64_class  var_cas_val = GGS_uint64_class ::constructor_new (inLexique, var_cas_f.reader_loc (inLexique COMMA_SOURCE_FILE_AT_LINE (48)), var_cas_f.reader_def_val (inLexique COMMA_SOURCE_FILE_AT_LINE (48)).reader_value (inLexique COMMA_SOURCE_FILE_AT_LINE (48)).reader_uint64 (inLexique COMMA_SOURCE_FILE_AT_LINE (48)) COMMA_SOURCE_FILE_AT_LINE (48)) ;
          var_cas_others.modifier_put (inLexique, var_cas_field, var_cas_val COMMA_SOURCE_FILE_AT_LINE (49)) ;
        }else if (typeid (cPtr_sint32_type) == typeid (* (_var_1535.getPtr ()))) {
          const GGS_sint32_type var_cas_f (_var_1535.getPtr ()) ;
          var_cas_others.modifier_put (inLexique, var_cas_field, var_cas_f.reader_def_val (inLexique COMMA_SOURCE_FILE_AT_LINE (50)) COMMA_SOURCE_FILE_AT_LINE (50)) ;
        }else if (typeid (cPtr_uint64_type) == typeid (* (_var_1535.getPtr ()))) {
          const GGS_uint64_type var_cas_f (_var_1535.getPtr ()) ;
          var_cas_others.modifier_put (inLexique, var_cas_field, var_cas_f.reader_def_val (inLexique COMMA_SOURCE_FILE_AT_LINE (51)) COMMA_SOURCE_FILE_AT_LINE (51)) ;
        }else if (typeid (cPtr_sint64_type) == typeid (* (_var_1535.getPtr ()))) {
          const GGS_sint64_type var_cas_f (_var_1535.getPtr ()) ;
          var_cas_others.modifier_put (inLexique, var_cas_field, var_cas_f.reader_def_val (inLexique COMMA_SOURCE_FILE_AT_LINE (52)) COMMA_SOURCE_FILE_AT_LINE (52)) ;
        }else{
        }
      }
    }
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_check_custom_field\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//                 Implementation of routine "check_range"                   *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_check_range (C_Compiler & inLexique,
                                GGS_basic_type   var_cas_var,
                                GGS_imp_type   var_cas_def
                        COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_check_range at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  { const GGS_basic_type _var_2037 = var_cas_var ; // CAST instruction
    if (_var_2037.getPtr () != NULL) {
      macroValidPointer (_var_2037.getPtr ()) ;
      if (typeid (cPtr_uint32_class) == typeid (* (_var_2037.getPtr ()))) {
        const GGS_uint32_class var_cas_ui (_var_2037.getPtr ()) ;
        { const GGS_imp_type _var_1963 = var_cas_def ; // CAST instruction
          if (_var_1963.getPtr () != NULL) {
            macroValidPointer (_var_1963.getPtr ()) ;
            if (typeid (cPtr_uint32_type) == typeid (* (_var_1963.getPtr ()))) {
              const GGS_uint32_type var_cas_d (_var_1963.getPtr ()) ;
              ::routine_check_uint32_range (inLexique,  var_cas_d.reader_set (inLexique COMMA_SOURCE_FILE_AT_LINE (69)),  var_cas_ui.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (69)),  var_cas_ui.reader_value (inLexique COMMA_SOURCE_FILE_AT_LINE (69)) COMMA_SOURCE_FILE_AT_LINE (69)) ;
            }else{
              var_cas_def.reader_loc (inLexique COMMA_SOURCE_FILE_AT_LINE (71)).reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("Internal error") COMMA_SOURCE_FILE_AT_LINE (72)) ;
            }
          }
        }
      }else{
        var_cas_var.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (74)).reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("Internal error") COMMA_SOURCE_FILE_AT_LINE (75)) ;
      }
    }
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_check_range\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//        Implementation of routine "verify_and_set_tasks_defaults"          *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_verify_and_set_tasks_defaults (C_Compiler & inLexique,
                                GGS_task_map  & var_cas_tasks,
                                GGS_implementation_spec   var_cas_spec
                        COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_verify_and_set_tasks_defaults at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  GGS_task_map  var_cas_tp = var_cas_tasks ;
  {
    GGS_task_map::cEnumerator enumerator_2307 (var_cas_tp, true) ;
    const GGS_task_map::cElement * operand_2307 = NULL ;
    while (((operand_2307 = enumerator_2307.nextObject ()))) {
      macroValidPointer (operand_2307) ;
      GGS_task_obj  automatic_var_2372_0 ;
      var_cas_tasks.modifier_del (inLexique, operand_2307->mKey, automatic_var_2372_0 COMMA_SOURCE_FILE_AT_LINE (89)) ;
      GGS_ident_map  var_cas_others = operand_2307->mInfo.task.reader_others (inLexique COMMA_SOURCE_FILE_AT_LINE (90)) ;
      {
        GGS_implementation_spec::cEnumerator enumerator_2440 (var_cas_spec, true) ;
        const GGS_implementation_spec::cElement * operand_2440 = NULL ;
        while (((operand_2440 = enumerator_2440.nextObject ()))) {
          macroValidPointer (operand_2440) ;
          const GGS_bool cond_2601 = (operand_2440->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (92))).operator_isEqual (GGS_string ("PRIORITY")) ;
          if (cond_2601.isBuiltAndTrue ()) {
            ::routine_check_range (inLexique,  operand_2307->mInfo.task.reader_priority (inLexique COMMA_SOURCE_FILE_AT_LINE (93)),  operand_2440->mInfo.type COMMA_SOURCE_FILE_AT_LINE (93)) ;
          }else if (cond_2601.isBuiltAndFalse ()) {
            const GGS_bool cond_2645 = (operand_2440->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (94))).operator_isEqual (GGS_string ("")) ;
            if (cond_2645.isBuiltAndTrue ()) {
            }else if (cond_2645.isBuiltAndFalse ()) {
              const GGS_bool cond_2689 = (operand_2440->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (95))).operator_isEqual (GGS_string ("")) ;
              if (cond_2689.isBuiltAndTrue ()) {
              }else if (cond_2689.isBuiltAndFalse ()) {
                const GGS_bool cond_2733 = (operand_2440->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (96))).operator_isEqual (GGS_string ("")) ;
                if (cond_2733.isBuiltAndTrue ()) {
                }else if (cond_2733.isBuiltAndFalse ()) {
                  const GGS_bool cond_2777 = (operand_2440->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (97))).operator_isEqual (GGS_string ("")) ;
                  if (cond_2777.isBuiltAndTrue ()) {
                  }else if (cond_2777.isBuiltAndFalse ()) {
                    const GGS_bool cond_2821 = (operand_2440->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (98))).operator_isEqual (GGS_string ("")) ;
                    if (cond_2821.isBuiltAndTrue ()) {
                    }else if (cond_2821.isBuiltAndFalse ()) {
                      const GGS_bool cond_2864 = (operand_2440->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (99))).operator_isEqual (GGS_string ("")) ;
                      if (cond_2864.isBuiltAndTrue ()) {
                      }else if (cond_2864.isBuiltAndFalse ()) {
                        ::routine_check_custom_field (inLexique,  var_cas_others,  operand_2440->mKey,  operand_2440->mInfo.type COMMA_SOURCE_FILE_AT_LINE (101)) ;
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
      GGS_task_obj  var_cas_updated_task = GGS_task_obj ::constructor_new (inLexique, operand_2307->mInfo.task.reader_desc (inLexique COMMA_SOURCE_FILE_AT_LINE (105)), operand_2307->mInfo.task.reader_priority (inLexique COMMA_SOURCE_FILE_AT_LINE (106)), operand_2307->mInfo.task.reader_schedule (inLexique COMMA_SOURCE_FILE_AT_LINE (107)), operand_2307->mInfo.task.reader_activation (inLexique COMMA_SOURCE_FILE_AT_LINE (108)), operand_2307->mInfo.task.reader_autostart (inLexique COMMA_SOURCE_FILE_AT_LINE (109)), operand_2307->mInfo.task.reader_resources (inLexique COMMA_SOURCE_FILE_AT_LINE (110)), operand_2307->mInfo.task.reader_events (inLexique COMMA_SOURCE_FILE_AT_LINE (111)), operand_2307->mInfo.task.reader_messages (inLexique COMMA_SOURCE_FILE_AT_LINE (112)), operand_2307->mInfo.task.reader_acc_apps (inLexique COMMA_SOURCE_FILE_AT_LINE (113)), operand_2307->mInfo.task.reader_timing_prot (inLexique COMMA_SOURCE_FILE_AT_LINE (114)), var_cas_others COMMA_SOURCE_FILE_AT_LINE (104)) ;
      var_cas_tasks.modifier_put (inLexique, operand_2307->mKey, var_cas_updated_task COMMA_SOURCE_FILE_AT_LINE (117)) ;
    }
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_verify_and_set_tasks_defaults\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//         Implementation of routine "verify_and_set_isrs_defaults"          *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_verify_and_set_isrs_defaults (C_Compiler & inLexique,
                                GGS_isr_map  & var_cas_isrs,
                                GGS_implementation_spec   var_cas_spec
                        COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_verify_and_set_isrs_defaults at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  GGS_isr_map  var_cas_ip = var_cas_isrs ;
  {
    GGS_isr_map::cEnumerator enumerator_3656 (var_cas_ip, true) ;
    const GGS_isr_map::cElement * operand_3656 = NULL ;
    while (((operand_3656 = enumerator_3656.nextObject ()))) {
      macroValidPointer (operand_3656) ;
      GGS_isr_obj  automatic_var_3718_0 ;
      var_cas_isrs.modifier_del (inLexique, operand_3656->mKey, automatic_var_3718_0 COMMA_SOURCE_FILE_AT_LINE (132)) ;
      GGS_ident_map  var_cas_others = operand_3656->mInfo.isr.reader_other_fields (inLexique COMMA_SOURCE_FILE_AT_LINE (133)) ;
      {
        GGS_implementation_spec::cEnumerator enumerator_3791 (var_cas_spec, true) ;
        const GGS_implementation_spec::cElement * operand_3791 = NULL ;
        while (((operand_3791 = enumerator_3791.nextObject ()))) {
          macroValidPointer (operand_3791) ;
          const GGS_bool cond_3921 = (operand_3791->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (135))).operator_isEqual (GGS_string ("PRIORITY")) ;
          if (cond_3921.isBuiltAndTrue ()) {
            inLexique.printMessage (GGS_string ("PRIORITY!\n") COMMA_SOURCE_FILE_AT_LINE (136)) ;
          }else if (cond_3921.isBuiltAndFalse ()) {
            const GGS_bool cond_3965 = (operand_3791->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (137))).operator_isEqual (GGS_string ("")) ;
            if (cond_3965.isBuiltAndTrue ()) {
            }else if (cond_3965.isBuiltAndFalse ()) {
              const GGS_bool cond_4009 = (operand_3791->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (138))).operator_isEqual (GGS_string ("")) ;
              if (cond_4009.isBuiltAndTrue ()) {
              }else if (cond_4009.isBuiltAndFalse ()) {
                const GGS_bool cond_4053 = (operand_3791->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (139))).operator_isEqual (GGS_string ("")) ;
                if (cond_4053.isBuiltAndTrue ()) {
                }else if (cond_4053.isBuiltAndFalse ()) {
                  const GGS_bool cond_4097 = (operand_3791->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (140))).operator_isEqual (GGS_string ("")) ;
                  if (cond_4097.isBuiltAndTrue ()) {
                  }else if (cond_4097.isBuiltAndFalse ()) {
                    const GGS_bool cond_4141 = (operand_3791->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (141))).operator_isEqual (GGS_string ("")) ;
                    if (cond_4141.isBuiltAndTrue ()) {
                    }else if (cond_4141.isBuiltAndFalse ()) {
                      const GGS_bool cond_4184 = (operand_3791->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (142))).operator_isEqual (GGS_string ("")) ;
                      if (cond_4184.isBuiltAndTrue ()) {
                      }else if (cond_4184.isBuiltAndFalse ()) {
                        ::routine_check_custom_field (inLexique,  var_cas_others,  operand_3791->mKey,  operand_3791->mInfo.type COMMA_SOURCE_FILE_AT_LINE (144)) ;
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
      GGS_isr_obj  var_cas_updated_isr = GGS_isr_obj ::constructor_new (inLexique, operand_3656->mInfo.isr.reader_desc (inLexique COMMA_SOURCE_FILE_AT_LINE (148)), operand_3656->mInfo.isr.reader_category (inLexique COMMA_SOURCE_FILE_AT_LINE (149)), operand_3656->mInfo.isr.reader_priority (inLexique COMMA_SOURCE_FILE_AT_LINE (150)), operand_3656->mInfo.isr.reader_resources (inLexique COMMA_SOURCE_FILE_AT_LINE (151)), operand_3656->mInfo.isr.reader_messages (inLexique COMMA_SOURCE_FILE_AT_LINE (152)), operand_3656->mInfo.isr.reader_acc_apps (inLexique COMMA_SOURCE_FILE_AT_LINE (153)), operand_3656->mInfo.isr.reader_timing_prot (inLexique COMMA_SOURCE_FILE_AT_LINE (154)), var_cas_others COMMA_SOURCE_FILE_AT_LINE (147)) ;
      var_cas_isrs.modifier_put (inLexique, operand_3656->mKey, var_cas_updated_isr COMMA_SOURCE_FILE_AT_LINE (157)) ;
    }
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_verify_and_set_isrs_defaults\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//              Implementation of routine "add_system_counter"               *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_add_system_counter (C_Compiler & inLexique,
                                GGS_root_obj  & var_cas_cpu
                        COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_add_system_counter at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  GGS_counter_map  var_cas_counters = var_cas_cpu.reader_counters (inLexique COMMA_SOURCE_FILE_AT_LINE (171)) ;
  GGS_counter_obj  var_cas_sys_cnt ;
  GGS_lstringlist  var_cas_all_apps = var_cas_cpu.reader_applis (inLexique COMMA_SOURCE_FILE_AT_LINE (173)).reader_allKeyList (inLexique COMMA_SOURCE_FILE_AT_LINE (173)) ;
  {
    GGS_app_map::cEnumerator enumerator_4945 (var_cas_cpu.reader_applis (inLexique COMMA_SOURCE_FILE_AT_LINE (174)), true) ;
    const GGS_app_map::cElement * operand_4945 = NULL ;
    while (((operand_4945 = enumerator_4945.nextObject ()))) {
      macroValidPointer (operand_4945) ;
      var_cas_all_apps.addAssign_operation (operand_4945->mKey) ;
    }
  }
  const GGS_bool cond_6094 = var_cas_counters.reader_hasKey (GGS_string ("SystemCounter")) ;
  if (cond_6094.isBuiltAndTrue ()) {
    var_cas_counters.modifier_del (inLexique, GGS_lstring ::constructor_new (inLexique, GGS_string ("SystemCounter"), GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (179)), var_cas_sys_cnt COMMA_SOURCE_FILE_AT_LINE (179)) ;
    { const GGS_basic_type _var_5269 = var_cas_sys_cnt.reader_max_allowed_value (inLexique COMMA_SOURCE_FILE_AT_LINE (180)) ; // CAST instruction
      if (_var_5269.getPtr () != NULL) {
        macroValidPointer (_var_5269.getPtr ()) ;
        if (typeid (cPtr_void) == typeid (* (_var_5269.getPtr ()))) {
          var_cas_sys_cnt.modifier_setMax_allowed_value (inLexique, GGS_uint32_class ::constructor_new (inLexique, GGS_location (inLexique), GGS_uint (32767U) COMMA_SOURCE_FILE_AT_LINE (182)) COMMA_SOURCE_FILE_AT_LINE (182)) ;
        }else{
        }
      }
    }
    { const GGS_basic_type _var_5421 = var_cas_sys_cnt.reader_ticks_per_base (inLexique COMMA_SOURCE_FILE_AT_LINE (185)) ; // CAST instruction
      if (_var_5421.getPtr () != NULL) {
        macroValidPointer (_var_5421.getPtr ()) ;
        if (typeid (cPtr_void) == typeid (* (_var_5421.getPtr ()))) {
          var_cas_sys_cnt.modifier_setTicks_per_base (inLexique, GGS_uint32_class ::constructor_new (inLexique, GGS_location (inLexique), GGS_uint (1U) COMMA_SOURCE_FILE_AT_LINE (187)) COMMA_SOURCE_FILE_AT_LINE (187)) ;
        }else{
        }
      }
    }
    { const GGS_basic_type _var_5563 = var_cas_sys_cnt.reader_min_cycle (inLexique COMMA_SOURCE_FILE_AT_LINE (190)) ; // CAST instruction
      if (_var_5563.getPtr () != NULL) {
        macroValidPointer (_var_5563.getPtr ()) ;
        if (typeid (cPtr_void) == typeid (* (_var_5563.getPtr ()))) {
          var_cas_sys_cnt.modifier_setMin_cycle (inLexique, GGS_uint32_class ::constructor_new (inLexique, GGS_location (inLexique), GGS_uint (1U) COMMA_SOURCE_FILE_AT_LINE (192)) COMMA_SOURCE_FILE_AT_LINE (192)) ;
        }else{
        }
      }
    }
    const GGS_bool cond_5683 = (var_cas_sys_cnt.reader_source (inLexique COMMA_SOURCE_FILE_AT_LINE (195)).reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (195))).operator_isEqual (GGS_string ("")) ;
    if (cond_5683.isBuiltAndTrue ()) {
      var_cas_sys_cnt.reader_source (inLexique COMMA_SOURCE_FILE_AT_LINE (196)).reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("SystemCounter has no SOURCE") COMMA_SOURCE_FILE_AT_LINE (197)) ;
    }
    const GGS_bool cond_6083 = gOption_goil_5F_options_autosar_5F_on.reader_value () ;
    if (cond_6083.isBuiltAndTrue ()) {
      const GGS_bool cond_5904 = (var_cas_sys_cnt.reader_acc_apps (inLexique COMMA_SOURCE_FILE_AT_LINE (200)).reader_length ()).operator_isEqual (GGS_uint (0U)) ;
      if (cond_5904.isBuiltAndTrue ()) {
        var_cas_sys_cnt.modifier_setAcc_apps (inLexique, var_cas_all_apps COMMA_SOURCE_FILE_AT_LINE (201)) ;
      }
      { const GGS_counter_type _var_6069 = var_cas_sys_cnt.reader_type (inLexique COMMA_SOURCE_FILE_AT_LINE (203)) ; // CAST instruction
        if (_var_6069.getPtr () != NULL) {
          macroValidPointer (_var_6069.getPtr ()) ;
          if (typeid (cPtr_software_counter) == typeid (* (_var_6069.getPtr ()))) {
            const GGS_software_counter var_cas_sc (_var_6069.getPtr ()) ;
            var_cas_sc.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (205)).reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("Incompatible TYPE for SystemCounter") COMMA_SOURCE_FILE_AT_LINE (206)) ;
          }else{
          }
        }
      }
    }
  }else if (cond_6094.isBuiltAndFalse ()) {
    GGS_hardware_counter  var_cas_type = GGS_hardware_counter ::constructor_new (inLexique, GGS_location (inLexique), GGS_void_driver ::constructor_new (inLexique, GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (210)), GGS_time_constants ::constructor_emptyList () COMMA_SOURCE_FILE_AT_LINE (210)) ;
    var_cas_sys_cnt = GGS_counter_obj ::constructor_new (inLexique, GGS_lstring ::constructor_new (inLexique, GGS_string ("Predefined SystemCounter"), GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (212)), GGS_uint32_class ::constructor_new (inLexique, GGS_location (inLexique), GGS_uint (32767U) COMMA_SOURCE_FILE_AT_LINE (213)), GGS_uint32_class ::constructor_new (inLexique, GGS_location (inLexique), GGS_uint (1U) COMMA_SOURCE_FILE_AT_LINE (214)), GGS_uint32_class ::constructor_new (inLexique, GGS_location (inLexique), GGS_uint (1U) COMMA_SOURCE_FILE_AT_LINE (215)), GGS_lstring ::constructor_new (inLexique, GGS_string (""), GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (216)), var_cas_all_apps, var_cas_type, GGS_lstring ::constructor_new (inLexique, GGS_string (""), GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (219)) COMMA_SOURCE_FILE_AT_LINE (211)) ;
  }
  var_cas_counters.modifier_put (inLexique, GGS_lstring ::constructor_new (inLexique, GGS_string ("SystemCounter"), GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (223)), var_cas_sys_cnt COMMA_SOURCE_FILE_AT_LINE (223)) ;
  var_cas_cpu.modifier_setCounters (inLexique, var_cas_counters COMMA_SOURCE_FILE_AT_LINE (225)) ;
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_add_system_counter\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//                 Implementation of routine "set_defaults"                  *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_set_defaults (C_Compiler & inLexique,
                                const GGS_implementation   var_cas_imp,
                                GGS_root_obj  & var_cas_cpu
                        COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_set_defaults at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  const GGS_bool cond_7216 = var_cas_imp.reader_hasKey (GGS_string ("task")) ;
  if (cond_7216.isBuiltAndTrue ()) {
    GGS_task_map  var_cas_tasks = var_cas_cpu.reader_tasks (inLexique COMMA_SOURCE_FILE_AT_LINE (234)) ;
    GGS_implementation_spec  var_cas_spec ;
    if (var_cas_imp.isBuilt ()) {
      var_cas_imp (HERE)->method_get (inLexique, GGS_lstring ::constructor_new (inLexique, GGS_string ("task"), GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (236)), var_cas_spec COMMA_SOURCE_FILE_AT_LINE (236)) ;
    }
    ::routine_verify_and_set_tasks_defaults (inLexique,  var_cas_tasks,  var_cas_spec COMMA_SOURCE_FILE_AT_LINE (237)) ;
    var_cas_cpu.modifier_setTasks (inLexique, var_cas_tasks COMMA_SOURCE_FILE_AT_LINE (238)) ;
    var_cas_tasks = var_cas_cpu.reader_tasks (inLexique COMMA_SOURCE_FILE_AT_LINE (239)) ;
  }
  const GGS_bool cond_7477 = var_cas_imp.reader_hasKey (GGS_string ("isr")) ;
  if (cond_7477.isBuiltAndTrue ()) {
    GGS_isr_map  var_cas_isrs = var_cas_cpu.reader_isrs (inLexique COMMA_SOURCE_FILE_AT_LINE (244)) ;
    GGS_implementation_spec  var_cas_spec ;
    if (var_cas_imp.isBuilt ()) {
      var_cas_imp (HERE)->method_get (inLexique, GGS_lstring ::constructor_new (inLexique, GGS_string ("isr"), GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (246)), var_cas_spec COMMA_SOURCE_FILE_AT_LINE (246)) ;
    }
    ::routine_verify_and_set_isrs_defaults (inLexique,  var_cas_isrs,  var_cas_spec COMMA_SOURCE_FILE_AT_LINE (247)) ;
    var_cas_cpu.modifier_setIsrs (inLexique, var_cas_isrs COMMA_SOURCE_FILE_AT_LINE (248)) ;
  }
  ::routine_add_system_counter (inLexique,  var_cas_cpu COMMA_SOURCE_FILE_AT_LINE (251)) ;
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_set_defaults\n") ;
  #endif
}

//---------------------------------------------------------------------------*

