//---------------------------------------------------------------------------*
//                                                                           *
//                    File 'goil_timing_prot_attrs.cpp'                      *
//                        Generated by version 2.0.0                         *
//                       july 7th, 2010, at 17h17'6"                         *
//                                                                           *
//---------------------------------------------------------------------------*

//--- START OF USER ZONE 1


//--- END OF USER ZONE 1

//---------------------------------------------------------------------------*

#include "version_libpm.h"
#if CURRENT_LIBPM_VERSION != 820
  #error "This file has been compiled with a version of GALGAS that uses libpm version 820, different than the current version (CURRENT_LIBPM_VERSION) of libpm"
#endif

//---------------------------------------------------------------------------*

#include <typeinfo>
#include "utilities/MF_MemoryControl.h"
#include "files/C_TextFileWrite.h"
#include "galgas/C_galgas_CLI_Options.h"
#include "goil_timing_prot_attrs.h"

//---------------------------------------------------------------------------*

#ifndef DO_NOT_GENERATE_CHECKINGS
  #define SOURCE_FILE_AT_LINE(line) "goil_timing_prot_attrs.gSyntax", line
  #define COMMA_SOURCE_FILE_AT_LINE(line) , SOURCE_FILE_AT_LINE(line)
#else
  #define SOURCE_FILE_AT_LINE(line) 
  #define COMMA_SOURCE_FILE_AT_LINE(line) 
#endif


//--- START OF USER ZONE 2


//--- END OF USER ZONE 2

//---------------------------------------------------------------------------*
//                                                                           *
//          Implementation of production rule 'timing_prot_attrs'            *
//                                                                           *
//---------------------------------------------------------------------------*

void goil_timing_prot_attrs::rule_goil_5F_timing_5F_prot_5F_attrs_timing_5F_prot_5F_attrs_i0_ (C_Lexique_goil_5F_lexique & inLexique,
                                GGS_basic_type  &var_cas_exe_budget,
                                GGS_basic_type  &var_cas_exe_time,
                                GGS_basic_type  &var_cas_time_frame,
                                GGS_basic_type  &var_cas_os_it_lock,
                                GGS_basic_type  &var_cas_all_it_lock,
                                GGS_rezlock_map  &var_cas_rezlocks) {
  var_cas_exe_budget = GGS_void ::constructor_new (inLexique, GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (34)) ;
  var_cas_exe_time = GGS_void ::constructor_new (inLexique, GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (35)) ;
  var_cas_time_frame = GGS_void ::constructor_new (inLexique, GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (36)) ;
  var_cas_os_it_lock = GGS_void ::constructor_new (inLexique, GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (37)) ;
  var_cas_all_it_lock = GGS_void ::constructor_new (inLexique, GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (38)) ;
  var_cas_rezlocks = GGS_rezlock_map ::constructor_emptyMap (inLexique COMMA_SOURCE_FILE_AT_LINE (39)) ;
  { bool syntaxRepeat_0 = true ;
    while (syntaxRepeat_0) {
      switch (select_goil_5F_timing_5F_prot_5F_attrs_0 (inLexique)) {
        case 2 : {
          GGS_luint64  var_cas_eb ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_goil_5F_lexique::kToken_EXECUTIONBUDGET) COMMA_HERE) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_goil_5F_lexique::kToken__3D_) COMMA_HERE) ;
          inLexique.assignFromAttribute_integerNumber (var_cas_eb) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_goil_5F_lexique::kToken_uint_5F_number) COMMA_HERE) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_goil_5F_lexique::kToken__3B_) COMMA_HERE) ;
          { const GGS_basic_type _var_1529 = var_cas_exe_budget ; // CAST instruction
            if (_var_1529.getPtr () != NULL) {
              macroValidPointer (_var_1529.getPtr ()) ;
              if (typeid (cPtr_void) == typeid (* (_var_1529.getPtr ()))) {
                var_cas_exe_budget = GGS_uint64_class ::constructor_new (inLexique, GGS_location (inLexique), var_cas_eb.reader_uint64 (inLexique COMMA_SOURCE_FILE_AT_LINE (45)) COMMA_SOURCE_FILE_AT_LINE (45)) ;
              }else{
                GGS_location (inLexique).reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("EXECUTIONBUDGET already declared") COMMA_SOURCE_FILE_AT_LINE (48)) ;
                var_cas_exe_budget.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (48)).reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("was previously declared here") COMMA_SOURCE_FILE_AT_LINE (49)) ;
              }
            }
          }
          } break ;
        case 3 : {
          GGS_luint64  var_cas_et ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_goil_5F_lexique::kToken_EXECUTIONTIME) COMMA_HERE) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_goil_5F_lexique::kToken__3D_) COMMA_HERE) ;
          inLexique.assignFromAttribute_integerNumber (var_cas_et) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_goil_5F_lexique::kToken_uint_5F_number) COMMA_HERE) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_goil_5F_lexique::kToken__3B_) COMMA_HERE) ;
          { const GGS_basic_type _var_1886 = var_cas_exe_time ; // CAST instruction
            if (_var_1886.getPtr () != NULL) {
              macroValidPointer (_var_1886.getPtr ()) ;
              if (typeid (cPtr_void) == typeid (* (_var_1886.getPtr ()))) {
                var_cas_exe_time = GGS_uint64_class ::constructor_new (inLexique, GGS_location (inLexique), var_cas_et.reader_uint64 (inLexique COMMA_SOURCE_FILE_AT_LINE (54)) COMMA_SOURCE_FILE_AT_LINE (54)) ;
              }else{
                GGS_location (inLexique).reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("EXECUTIONTIME already declared") COMMA_SOURCE_FILE_AT_LINE (57)) ;
                var_cas_exe_time.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (57)).reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("was previously declared here") COMMA_SOURCE_FILE_AT_LINE (58)) ;
              }
            }
          }
          } break ;
        case 4 : {
          GGS_luint64  var_cas_tf ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_goil_5F_lexique::kToken_TIMEFRAME) COMMA_HERE) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_goil_5F_lexique::kToken__3D_) COMMA_HERE) ;
          inLexique.assignFromAttribute_integerNumber (var_cas_tf) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_goil_5F_lexique::kToken_uint_5F_number) COMMA_HERE) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_goil_5F_lexique::kToken__3B_) COMMA_HERE) ;
          { const GGS_basic_type _var_2241 = var_cas_time_frame ; // CAST instruction
            if (_var_2241.getPtr () != NULL) {
              macroValidPointer (_var_2241.getPtr ()) ;
              if (typeid (cPtr_void) == typeid (* (_var_2241.getPtr ()))) {
                var_cas_time_frame = GGS_uint64_class ::constructor_new (inLexique, GGS_location (inLexique), var_cas_tf.reader_uint64 (inLexique COMMA_SOURCE_FILE_AT_LINE (63)) COMMA_SOURCE_FILE_AT_LINE (63)) ;
              }else{
                GGS_location (inLexique).reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("TIMEFRAME already declared") COMMA_SOURCE_FILE_AT_LINE (66)) ;
                var_cas_time_frame.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (66)).reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("was previously declared here") COMMA_SOURCE_FILE_AT_LINE (67)) ;
              }
            }
          }
          } break ;
        case 5 : {
          GGS_luint64  var_cas_moilt ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_goil_5F_lexique::kToken_MAXOSINTERRUPTLOCKTIME) COMMA_HERE) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_goil_5F_lexique::kToken__3D_) COMMA_HERE) ;
          inLexique.assignFromAttribute_integerNumber (var_cas_moilt) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_goil_5F_lexique::kToken_uint_5F_number) COMMA_HERE) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_goil_5F_lexique::kToken__3B_) COMMA_HERE) ;
          { const GGS_basic_type _var_2631 = var_cas_os_it_lock ; // CAST instruction
            if (_var_2631.getPtr () != NULL) {
              macroValidPointer (_var_2631.getPtr ()) ;
              if (typeid (cPtr_void) == typeid (* (_var_2631.getPtr ()))) {
                var_cas_os_it_lock = GGS_uint64_class ::constructor_new (inLexique, GGS_location (inLexique), var_cas_moilt.reader_uint64 (inLexique COMMA_SOURCE_FILE_AT_LINE (72)) COMMA_SOURCE_FILE_AT_LINE (72)) ;
              }else{
                GGS_location (inLexique).reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("MAXOSINTERRUPTLOCKTIME already declared") COMMA_SOURCE_FILE_AT_LINE (75)) ;
                var_cas_os_it_lock.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (75)).reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("was previously declared here") COMMA_SOURCE_FILE_AT_LINE (76)) ;
              }
            }
          }
          } break ;
        case 6 : {
          GGS_luint64  var_cas_maitl ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_goil_5F_lexique::kToken_MAXALLINTERRUPTLOCKTIME) COMMA_HERE) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_goil_5F_lexique::kToken__3D_) COMMA_HERE) ;
          inLexique.assignFromAttribute_integerNumber (var_cas_maitl) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_goil_5F_lexique::kToken_uint_5F_number) COMMA_HERE) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_goil_5F_lexique::kToken__3B_) COMMA_HERE) ;
          { const GGS_basic_type _var_3026 = var_cas_all_it_lock ; // CAST instruction
            if (_var_3026.getPtr () != NULL) {
              macroValidPointer (_var_3026.getPtr ()) ;
              if (typeid (cPtr_void) == typeid (* (_var_3026.getPtr ()))) {
                var_cas_all_it_lock = GGS_uint64_class ::constructor_new (inLexique, GGS_location (inLexique), var_cas_maitl.reader_uint64 (inLexique COMMA_SOURCE_FILE_AT_LINE (81)) COMMA_SOURCE_FILE_AT_LINE (81)) ;
              }else{
                GGS_location (inLexique).reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("MAXALLINTERRUPTLOCKTIME already declared") COMMA_SOURCE_FILE_AT_LINE (84)) ;
                var_cas_all_it_lock.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (84)).reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("was previously declared here") COMMA_SOURCE_FILE_AT_LINE (85)) ;
              }
            }
          }
          } break ;
        case 7 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_goil_5F_lexique::kToken_LOCKINGTIME) COMMA_HERE) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_goil_5F_lexique::kToken__3D_) COMMA_HERE) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_goil_5F_lexique::kToken_RESOURCELOCK) COMMA_HERE) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_goil_5F_lexique::kToken__7B_) COMMA_HERE) ;
          GGS_lstring  var_cas_rez = GGS_lstring ::constructor_new (inLexique, GGS_string (""), GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (88)) ;
          GGS_basic_type  var_cas_lock = GGS_void ::constructor_new (inLexique, GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (89)) ;
          { bool syntaxRepeat_1 = true ;
            while (syntaxRepeat_1) {
              switch (select_goil_5F_timing_5F_prot_5F_attrs_1 (inLexique)) {
                case 2 : {
                  GGS_lstring  var_cas_r ;
                  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_goil_5F_lexique::kToken_RESOURCE) COMMA_HERE) ;
                  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_goil_5F_lexique::kToken__3D_) COMMA_HERE) ;
                  inLexique.assignFromAttribute_att_5F_token (var_cas_r) ;
                  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_goil_5F_lexique::kToken_idf) COMMA_HERE) ;
                  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_goil_5F_lexique::kToken__3B_) COMMA_HERE) ;
                  const GGS_bool cond_3473 = (var_cas_rez.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (94))).operator_isNotEqual (GGS_string ("")) ;
                  if (cond_3473.isBuiltAndTrue ()) {
                    GGS_location (inLexique).reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("RESOURCE already declared") COMMA_SOURCE_FILE_AT_LINE (96)) ;
                    var_cas_rez.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("was previously declared here") COMMA_SOURCE_FILE_AT_LINE (97)) ;
                  }else if (cond_3473.isBuiltAndFalse ()) {
                    var_cas_rez = var_cas_r ;
                  }
                  } break ;
                case 3 : {
                  GGS_luint64  var_cas_mrlt ;
                  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_goil_5F_lexique::kToken_MAXRESOURCELOCKTIME) COMMA_HERE) ;
                  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_goil_5F_lexique::kToken__3D_) COMMA_HERE) ;
                  inLexique.assignFromAttribute_integerNumber (var_cas_mrlt) ;
                  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_goil_5F_lexique::kToken_uint_5F_number) COMMA_HERE) ;
                  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_goil_5F_lexique::kToken__3B_) COMMA_HERE) ;
                  { const GGS_basic_type _var_3913 = var_cas_lock ; // CAST instruction
                    if (_var_3913.getPtr () != NULL) {
                      macroValidPointer (_var_3913.getPtr ()) ;
                      if (typeid (cPtr_void) == typeid (* (_var_3913.getPtr ()))) {
                        var_cas_lock = GGS_uint64_class ::constructor_new (inLexique, GGS_location (inLexique), var_cas_mrlt.reader_uint64 (inLexique COMMA_SOURCE_FILE_AT_LINE (104)) COMMA_SOURCE_FILE_AT_LINE (104)) ;
                      }else{
                        GGS_location (inLexique).reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("MAXRESOURCELOCKTIME already declared") COMMA_SOURCE_FILE_AT_LINE (107)) ;
                        var_cas_lock.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (107)).reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("was previously declared here") COMMA_SOURCE_FILE_AT_LINE (108)) ;
                      }
                    }
                  }
                  } break ;
                default :
                  syntaxRepeat_1 = false ;
                  break ;
              }
            }
          }
          const GGS_bool cond_4054 = (var_cas_rez.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (110))).operator_isEqual (GGS_string ("")) ;
          if (cond_4054.isBuiltAndTrue ()) {
            GGS_location (inLexique).reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("No RESOURCE declared for LOCKINGTIME") COMMA_SOURCE_FILE_AT_LINE (112)) ;
          }
          GGS_uint64  var_cas_l = GGS_uint64 (0ULL) ;
          { const GGS_basic_type _var_4262 = var_cas_lock ; // CAST instruction
            if (_var_4262.getPtr () != NULL) {
              macroValidPointer (_var_4262.getPtr ()) ;
              if (typeid (cPtr_uint64_class) == typeid (* (_var_4262.getPtr ()))) {
                const GGS_uint64_class var_cas_lu (_var_4262.getPtr ()) ;
                var_cas_l = var_cas_lu.reader_value (inLexique COMMA_SOURCE_FILE_AT_LINE (116)) ;
              }else{
                GGS_location (inLexique).reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("No MAXRESOURCELOCKTIME declared for LOCKINGTIME") COMMA_SOURCE_FILE_AT_LINE (119)) ;
              }
            }
          }
          var_cas_rezlocks.modifier_put (inLexique, var_cas_rez, var_cas_l COMMA_SOURCE_FILE_AT_LINE (120)) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_goil_5F_lexique::kToken__7D_) COMMA_HERE) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_goil_5F_lexique::kToken__3B_) COMMA_HERE) ;
          } break ;
        default :
          syntaxRepeat_0 = false ;
          break ;
      }
    }
  }
  { const GGS_basic_type _var_4431 = var_cas_time_frame ; // CAST instruction
    if (_var_4431.getPtr () != NULL) {
      macroValidPointer (_var_4431.getPtr ()) ;
      if (typeid (cPtr_void) == typeid (* (_var_4431.getPtr ()))) {
        GGS_location (inLexique).reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("TIMEFRAME not declared") COMMA_SOURCE_FILE_AT_LINE (124)) ;
      }else{
      }
    }
  }
  { const GGS_basic_type _var_4540 = var_cas_os_it_lock ; // CAST instruction
    if (_var_4540.getPtr () != NULL) {
      macroValidPointer (_var_4540.getPtr ()) ;
      if (typeid (cPtr_void) == typeid (* (_var_4540.getPtr ()))) {
        GGS_location (inLexique).reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("MAXOSINTERRUPTLOCKTIME not declared") COMMA_SOURCE_FILE_AT_LINE (125)) ;
      }else{
      }
    }
  }
  { const GGS_basic_type _var_4650 = var_cas_all_it_lock ; // CAST instruction
    if (_var_4650.getPtr () != NULL) {
      macroValidPointer (_var_4650.getPtr ()) ;
      if (typeid (cPtr_void) == typeid (* (_var_4650.getPtr ()))) {
        GGS_location (inLexique).reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("MAXALLINTERRUPTLOCKTIME not declared") COMMA_SOURCE_FILE_AT_LINE (126)) ;
      }else{
      }
    }
  }
}

//---------------------------------------------------------------------------*

void goil_timing_prot_attrs::rule_goil_5F_timing_5F_prot_5F_attrs_timing_5F_prot_5F_attrs_i0_parse (C_Lexique_goil_5F_lexique & inLexique) {
  { bool syntaxRepeat_0 = true ;
    while (syntaxRepeat_0) {
      switch (select_goil_5F_timing_5F_prot_5F_attrs_0 (inLexique)) {
        case 2 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_goil_5F_lexique::kToken_EXECUTIONBUDGET) COMMA_HERE) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_goil_5F_lexique::kToken__3D_) COMMA_HERE) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_goil_5F_lexique::kToken_uint_5F_number) COMMA_HERE) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_goil_5F_lexique::kToken__3B_) COMMA_HERE) ;
          } break ;
        case 3 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_goil_5F_lexique::kToken_EXECUTIONTIME) COMMA_HERE) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_goil_5F_lexique::kToken__3D_) COMMA_HERE) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_goil_5F_lexique::kToken_uint_5F_number) COMMA_HERE) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_goil_5F_lexique::kToken__3B_) COMMA_HERE) ;
          } break ;
        case 4 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_goil_5F_lexique::kToken_TIMEFRAME) COMMA_HERE) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_goil_5F_lexique::kToken__3D_) COMMA_HERE) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_goil_5F_lexique::kToken_uint_5F_number) COMMA_HERE) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_goil_5F_lexique::kToken__3B_) COMMA_HERE) ;
          } break ;
        case 5 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_goil_5F_lexique::kToken_MAXOSINTERRUPTLOCKTIME) COMMA_HERE) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_goil_5F_lexique::kToken__3D_) COMMA_HERE) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_goil_5F_lexique::kToken_uint_5F_number) COMMA_HERE) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_goil_5F_lexique::kToken__3B_) COMMA_HERE) ;
          } break ;
        case 6 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_goil_5F_lexique::kToken_MAXALLINTERRUPTLOCKTIME) COMMA_HERE) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_goil_5F_lexique::kToken__3D_) COMMA_HERE) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_goil_5F_lexique::kToken_uint_5F_number) COMMA_HERE) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_goil_5F_lexique::kToken__3B_) COMMA_HERE) ;
          } break ;
        case 7 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_goil_5F_lexique::kToken_LOCKINGTIME) COMMA_HERE) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_goil_5F_lexique::kToken__3D_) COMMA_HERE) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_goil_5F_lexique::kToken_RESOURCELOCK) COMMA_HERE) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_goil_5F_lexique::kToken__7B_) COMMA_HERE) ;
          { bool syntaxRepeat_1 = true ;
            while (syntaxRepeat_1) {
              switch (select_goil_5F_timing_5F_prot_5F_attrs_1 (inLexique)) {
                case 2 : {
                  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_goil_5F_lexique::kToken_RESOURCE) COMMA_HERE) ;
                  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_goil_5F_lexique::kToken__3D_) COMMA_HERE) ;
                  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_goil_5F_lexique::kToken_idf) COMMA_HERE) ;
                  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_goil_5F_lexique::kToken__3B_) COMMA_HERE) ;
                  } break ;
                case 3 : {
                  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_goil_5F_lexique::kToken_MAXRESOURCELOCKTIME) COMMA_HERE) ;
                  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_goil_5F_lexique::kToken__3D_) COMMA_HERE) ;
                  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_goil_5F_lexique::kToken_uint_5F_number) COMMA_HERE) ;
                  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_goil_5F_lexique::kToken__3B_) COMMA_HERE) ;
                  } break ;
                default :
                  syntaxRepeat_1 = false ;
                  break ;
              }
            }
          }
          inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_goil_5F_lexique::kToken__7D_) COMMA_HERE) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_goil_5F_lexique::kToken__3B_) COMMA_HERE) ;
          } break ;
        default :
          syntaxRepeat_0 = false ;
          break ;
      }
    }
  }
  GGS_lstring::constructor_retrieveAndResetTemplateString (inLexique COMMA_HERE) ;
}

//---------------------------------------------------------------------------*

