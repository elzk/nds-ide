#
# @file goil_obj_counter.ggs
#
# @section File description
#
# Counter object parsing
#
# @section Copyright
#
# Goil OIL compiler for Trampoline
#
# Goil is copyright (c) IRCCyN 2005+
# Goil is protected by the french law of intellectual property
#
# This software is distributed under the GNU Public Licence V2
#
# @section File informations
#
# $Date$
# $Rev$
# $Author$
# $URL$
#

syntax goil_obj_counter :
#--- Lexique Reference, used when grammar source file extension is .gGrammar
with "goil_lexique.gLexique";

import lexique goil_lexique in "goil_lexique.gLexique" ;
import option goil_options in "goil_options.gOption" ;
import semantics goil_semantics in "goil_semantics.gSemantics" ;

import "goil_options.gOption" ;
import "goil_semantics.gSemantics" ;

nonterminal <counter>
  ?!@counter_map counters  
label parse
;

nonterminal <counter_parameters> 
  ?!@basic_type   max_allowed_value
  ?!@basic_type   ticks_per_base
  ?!@basic_type   min_cycle
  ?!@lstring      source
  ?!@lstringlist  acc_apps
  ?!@counter_type type
  ?!@lstring      unit 
label parse
 ;

nonterminal <counter_type_attrs>
  !@counter_type type 
label parse
;
#
# external nonterminals
#
nonterminal <description>
  !@lstring desc  
label parse
;

#
# counter rules implementation
#
rule <counter>
  ?!@counter_map counters
:
  @lstring      counter_name ;
  @counter_obj  counter ;
  @basic_type   max_allowed_value ;
  @basic_type   ticks_per_base ;
  @basic_type   min_cycle ;
  @lstring      source;
  @lstringlist    acc_apps ;
  @counter_type type ;
  @lstring      unit ;
  @lstring      desc ;

  $COUNTER$ ;
  $idf$ ?counter_name ;

  if [counters hasKey ![counter_name string]] then
    [!?counters del !counter_name ?counter] ;
    max_allowed_value := [counter max_allowed_value] ;
    ticks_per_base    := [counter ticks_per_base] ;
    min_cycle         := [counter min_cycle] ;
    source            := [counter source];
    acc_apps          := [counter acc_apps] ;
    type              := [counter type] ;
    unit              := [counter unit] ;
    desc              := [counter desc] ;
  else # counter must also be written in this branch to comply with galgas static verification policy
    max_allowed_value := [@void new !here] ;
    ticks_per_base    := [@void new !here] ;
    min_cycle         := [@void new !here] ;
    source            := [@lstring new !"" !here] ;
    acc_apps          := [@lstringlist emptyList] ;
    type              := [@void_counter new !here] ;
    unit              := [@lstring new !"" !here] ;
    desc              := [@lstring new !"" !here];
    counter := [@counter_obj new
      !desc
      !max_allowed_value
      !ticks_per_base
      !min_cycle
      !source
      !acc_apps
      !type
      !unit] ;
  end if ;
  ${$ ;
  <counter_parameters> !?max_allowed_value !?ticks_per_base !?min_cycle !?source !?acc_apps !?type !?unit ;
  $}$ ;
  <description> ?desc ;
  $;$ ;

  counter := [@counter_obj new
    !desc
    !max_allowed_value
    !ticks_per_base
    !min_cycle
    !source
    !acc_apps
    !type
    !unit] ;
  [!?counters put !counter_name !counter] ;
end rule ;

rule <counter_parameters>
  ?!@basic_type   max_allowed_value
  ?!@basic_type   ticks_per_base
  ?!@basic_type   min_cycle
  ?!@lstring      source
  ?!@lstringlist  acc_apps
  ?!@counter_type type
  ?!@lstring      unit
:
  repeat
  while
    @luint64 m ;
    $MAXALLOWEDVALUE$ ; $=$ ; $uint_number$ ?m ; <description> ?* ; $;$ ;
    set_uint32 !?max_allowed_value !m !"MAXALLOWEDVALUE" ;
  while
    @luint64 t ;
    $TICKSPERBASE$ ; $=$ ; $uint_number$ ?t ; <description> ?* ; $;$ ;
    set_uint32 !?ticks_per_base !t !"TICKSPERBASE" ;
  while
    @luint64 c ;
    $MINCYCLE$ ; $=$ ; $uint_number$ ?c ; <description> ?* ; $;$ ;
    set_uint32 !?min_cycle !c !"MINCYCLE" ;
  while
    if [option goil_options.autosar_on value] == false then
      error here : "AUTOSAR flag is off, turn it on to use TYPE attribute in COUNTER object" ;
    end if ;
    @counter_type cpt_type ;
    $TYPE$ ; $=$ ; <counter_type_attrs> ?cpt_type ; $;$ ;
    cast type :
    when == @void_counter do
      type := cpt_type ;
    else
      error here : "Redefinitiion of TYPE" ;
      error [type location] : "was defined here" ;
    end cast ;      
  while
    if [option goil_options.autosar_on value] == false then
      error here : "AUTOSAR flag is off, turn it on to use UNIT attribute in COUNTER object" ;
    end if ;
    @lstring cpt_unit ;
    $UNIT$ ; $=$ ;
    select
      $TICKS$ ?cpt_unit ;
    or
      $NANOSECONDS$ ?cpt_unit ;
    end select ;
    $;$ ;
    if [unit string] == "" then
      unit := cpt_unit ;
    else
      error here : "UNIT attribute already defined for this counter" ;
      error unit : "was defined here" ;
    end if ;
  while
    @lstring src;
    $SOURCE$; $=$; $idf$ ?src; <description> ?* ; $;$ ;
    set_lstring_if_empty !?source !src !"SOURCE";
  while
    @lstring app ;
    $ACCESSING_APPLICATION$ ; $=$ ; $idf$ ?app ; <description> ?* ; $;$ ;
    add_lstring_unique !?acc_apps !app !"ACCESSING_APPLICATION" ;
  while
    $idf$ ?* ; $=$ ; select $idf$ ?* ; or $uint_number$ ?* ; end select ; <description> ?* ; $;$ ;
  end repeat ;
end rule ;

rule <counter_type_attrs>
  !@counter_type type
:
  select
    $SOFTWARE$ ;
    type := [@software_counter new !here] ;
  or
    @time_constants tc [emptyList] ;
    @counter_driver cd := [@void_driver new !here] ;
    $HARDWARE$ ; ${$ ;
    repeat
    while
      $DRIVER$ ; $=$ ;
      @counter_driver cpt_cd ;
      select
        $OSINTERNAL$ ;
        cpt_cd := [@os_internal_driver new !here] ;
      or
        $GPT$ ; ${$ ;
        @basic_type npht := [@void new !here] ;
        @lstring gcn := [@lstring new !"" !here] ;
        repeat
        while
          @luint64 ui ;
          $NS_PER_HW_TICK$ ; $=$ ; $uint_number$ ?ui ;
          set_uint64 !?npht !ui !"NS_PER_HW_TICK" ;
        while
          @lstring cn ;
          $GPTCHANNELNAME$ ; $=$ ; $string$ ?cn ;
          set_lstring_if_empty !?gcn !cn !"GPTCHANNELNAME" ;
        end repeat ;
        $}$ ;
        cast npht :
        when == @void do
          error here : "NS_PER_HW_TICK subattribute not defined for this hardware counter GPT" ;
        else end cast ;
        if [gcn string] == "" then
          error here : "GPTCHANNELNAME subattribute not defined for this hardware counter GPT" ;
        end if ;
        cpt_cd := [@gpt_driver new !here !npht !gcn] ;
      end select ;
      $;$ ;
      cast cd :
      when == @void_driver do
        cd := cpt_cd ;
      else
        error here : "DRIVER subattribute already defined for this hardware counter" ;
        error [cd location] : "was defined here" ;
      end cast ;
    while
      $TIMECONSTANTS$ ; $=$ ; $TIMECONSTANT$ ; ${$ ;
      @basic_type ns := [@void new !here] ;
      @lstring cn := [@lstring new !"" !here] ;
      repeat
      while
        @luint64 ui ;
        $NS$ ; $=$ ; $uint_number$ ?ui ; $;$ ;
        set_uint64 !?ns !ui !"NS" ;
      while
        @lstring c ;
        $CONSTNAME$ ; $=$ ; $string$ ?c ; $;$ ;
        set_lstring_if_empty !?cn !c !"CONSTNAME" ;
      end repeat ;
      $}$ ; $;$ ;
      tc += !ns !cn ;
    end repeat ;
    $}$ ;
    type := [@hardware_counter new !here !cd !tc] ;
  end select ;
end rule ;

end syntax ;
# vim:ft=ggs:ts=4:sw=4
