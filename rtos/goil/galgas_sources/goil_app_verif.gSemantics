semantics goil_app_verif :

#import semantics goil_semantics in "goil_semantics.ggs" ;
import semantics goil_types_root     in "goil_types_root.gSemantics";
import "goil_types_root.gSemantics";

#import semantics goil_types_app in "goil_types_app.ggs" ;
#import semantics goil_types_task in "goil_types_task.ggs" ;
#import semantics goil_types_scheduletable in "goil_types_scheduletable.ggs" ;

routine object_exists
  ?@stringset   def
  ?@lstringlist ref
  ?@string      obj_type
:
  foreach ref (@lstring s) do
    if not [def hasKey ![s string]] then
      error s : obj_type." ".[s string]." referenced does not exist" ;
    end if ;
  end foreach ;
end routine ;

routine object_in_one
  ?!@lstringlist objects
  ?@lstring      sName
  ?@string       kind
:
  @bool not_found := true ;
  foreach objects (@lstring name) do
#    message [name string]."\n" ;
    if [name string] == [sName string] then
      not_found := false ;
      error sName : kind." ".[sName string]." is already part of an OS Application" ;
      error name : "It has been declared here" ;
    end if ;
  end foreach ;

  if not_found then
    objects += !sName ;
  end if ;
end routine ;

routine object_not_in_any
  ?@lstringlist objs
  ?@stringset   app_objs
  ?@string      obj_kind
:
  foreach objs (@lstring lname) do
    @string name := [lname string] ;
    if not [app_objs hasKey !name] then
      error lname : obj_kind." ".name." does not belong to any OS Application" ;
    end if ;
  end foreach ;
end routine ;

routine apps_well_formed
  ??@root_obj cpu
#  ?@app_map           apps
#  ?@task_map          tasks
#  ?@isr_map           isrs
#  ?@alarm_map         alarms
#  ?@scheduletable_map schedtables
#  ?@counter_map       counters
#  ?@resource_map      resources
#  ?@message_map       messages
:
  @app_map           apps        := [cpu applis];
  @task_map          tasks       := [cpu tasks];
  @isr_map           isrs        := [cpu isrs];
  @alarm_map         alarms      := [cpu alarms];
  @scheduletable_map schedtables := [cpu scheduletables];
  @counter_map       counters    := [cpu counters];
  @resource_map      resources   := [cpu resources];
  @message_map       messages    := [cpu messages];

  if [apps count] > 0 then
    # Verify the objects referenced from an application exists
    foreach apps do
      object_exists ![tasks allKeys] ![[app tasks] allKeyList] !"Task" ;
      object_exists ![isrs allKeys] ![[app isrs] allKeyList] !"ISR" ;
      object_exists ![alarms allKeys] ![[app alarms] allKeyList] !"Alarm" ;
      object_exists ![schedtables allKeys] ![[app scheduletables] allKeyList] !"Schedule Table" ;
      object_exists ![counters allKeys] ![[app counters] allKeyList] !"Counter" ;
      object_exists ![resources allKeys] ![[app resources] allKeyList] !"Resource" ;
#    object_exists ![messages allKeys] ![[app messages] allKeys] !"Message" !lkey ;
    end foreach ;

    # verify accessing applications of each object exist
    @stringset all_apps := [apps allKeys] ;
    foreach tasks do
      object_exists !all_apps ![task acc_apps] !"Application" ;
    end foreach ;
    foreach isrs do
      object_exists !all_apps ![isr acc_apps] !"Application" ;
    end foreach ;
    foreach alarms do
      object_exists !all_apps ![alarm acc_apps] !"Application" ;
    end foreach ;
    foreach schedtables do
      object_exists !all_apps ![scheduletable acc_apps] !"Application" ;
    end foreach ;
    foreach counters do
      object_exists !all_apps ![counter acc_apps] !"Application" ;
    end foreach ;
    foreach resources do
      object_exists !all_apps ![resource acc_apps] !"Application" ;
    end foreach ;
    foreach messages do
      object_exists !all_apps ![mess acc_apps] !"Application" ;
    end foreach ;

    # verify objects are not in 2 OS Applications
    @lstringlist objects [emptyList] ;
    foreach apps do
      foreach [app tasks] do object_in_one !?objects !lkey !"TASK" ; end foreach ;
      foreach [app isrs] do object_in_one !?objects !lkey !"ISR" ; end foreach ;
      foreach [app alarms] do object_in_one !?objects !lkey !"ALARM" ; end foreach ;
      foreach [app scheduletables] do object_in_one !?objects !lkey !"SCHEDULETABLE" ; end foreach ;
      foreach [app counters] do object_in_one !?objects !lkey !"COUNTER" ; end foreach ;
      foreach [app resources] do object_in_one !?objects !lkey !"RESOURCE" ; end foreach ;
    end foreach ;

    # verify all objects are in an OS Application
    # Build a big stringset of all objects referenced in
    # OS Applications.
    @stringset all_tasks_in_app  [emptySet] ;
    @stringset all_isrs_in_app   [emptySet] ;
    @stringset all_alarms_in_app [emptySet] ;
    @stringset all_sts_in_app    [emptySet] ;
    @stringset all_cnts_in_app   [emptySet] ;
    @stringset all_rezs_in_app   [emptySet] ;
    foreach apps do
      all_tasks_in_app  := all_tasks_in_app  | [[app tasks]          allKeys] ;
      all_isrs_in_app   := all_isrs_in_app   | [[app isrs]           allKeys] ;
      all_alarms_in_app := all_alarms_in_app | [[app alarms]         allKeys] ;
      all_sts_in_app    := all_sts_in_app    | [[app scheduletables] allKeys] ;
      all_cnts_in_app   := all_cnts_in_app   | [[app counters]       allKeys] ;
      all_rezs_in_app   := all_rezs_in_app   | [[app resources]      allKeys] ;
    end foreach ;

    # tasks
    object_not_in_any ![tasks allKeyList]       !all_tasks_in_app  !"TASK" ;
    # isrs
    object_not_in_any ![isrs allKeyList]        !all_isrs_in_app   !"ISR" ;
    # alarms
    object_not_in_any ![alarms allKeyList]      !all_alarms_in_app !"ALARM" ;
    # schedule tables
    object_not_in_any ![schedtables allKeyList] !all_sts_in_app    !"SCHEDULETABLE" ;
    # counters
    # remove the SystemCounter which does not belong to any app
    @lstringlist counter_keys [emptyList];
    foreach counters do
      if [lkey string] != "SystemCounter" then
        counter_keys += !lkey;
      end if;
    end foreach;
    object_not_in_any !counter_keys          !all_cnts_in_app   !"COUNTER" ;
    # resources
    object_not_in_any ![resources allKeyList]   !all_rezs_in_app   !"RESOURCE" ;

    #verify than an OS-Application is composed by at least one Task OR Isr2
    foreach apps (@lstring app_name @app_obj app) do
       #message "There is ".[[[[app tasks] allKeyList] length] string]." tasks in app ".[app_name string]."\n";
       if ([[[app tasks] allKeyList] length] == 0) & ([[[app isrs] allKeyList] length] == 0) then
          error app_name:"OS445 - An application should have at least one Task OR ISR2.";
       end if;
    end foreach;
    
    @bool right_app := false;
    @bool access_app := false;
    #verify than an alarm/schedule table doesn't try to access to objects (task, counter, object counter) in other applications)
    foreach alarms (@lstring alarm_name @alarm_obj alarm) do 
        #verify object counter:
        # find counter's application...
        foreach apps (@lstring app_name @app_obj app) do                        
           foreach [app counters] (@lstring counter_name2 @basic_type counter) do
             if ( [counter_name2 string] == [[alarm counter_name] string]) then
                # ... and verify if the alarm is in the same application of the task
                foreach [app alarms] (@lstring alarm_name2 @basic_type alarm2) do
                   if ( [alarm_name2 string] == [alarm_name string]) then
                      right_app := true;
                   end if;
                end foreach;       
                if (right_app == false) then
                   foreach [alarm acc_apps] (@lstring s) do
                     if [s string] == [app_name string] then
                         access_app := true;
                     end if ;
                   end foreach ;
                   if (access_app == false) then
                      error alarm_name:"Counter ".[[alarm counter_name] string]." doesn't belong to the same application of alarm ".[alarm_name string];
                   end if;
                   access_app := false;
                end if;             
                right_app := false;
             end if;
           end foreach; 
        end foreach;  
        
        #verify task, counter:
        @action_obj alarm_action;
        alarm_action := [alarm action_params];
        cast alarm_action :
        when == @setevent_action sea do
            # find task's application...
            foreach apps (@lstring app_name @app_obj app) do                        
               foreach [app tasks] (@lstring task_name2 @basic_type task) do
                 if ( [task_name2 string] == [[sea task_name] string]) then
                    # ... and verify if the alarm is in the same application of the task
                    foreach [app alarms] (@lstring alarm_name2 @basic_type alarm2) do
                       if ( [alarm_name2 string] == [alarm_name string]) then
                          right_app := true;
                       end if;
                    end foreach;       
                    if (right_app == false) then
                       foreach [alarm acc_apps] (@lstring s) do
                         if [s string] == [app_name string] then
                             access_app := true;
                         end if ;
                       end foreach ;
                       if (access_app == false) then
                          error alarm_name:"Task ".[[sea task_name] string]." doesn't belong to the same application of alarm ".[alarm_name string];
                       end if;
                       access_app := false;
                    end if;             
                    right_app := false;
                 end if;
               end foreach; 
            end foreach;
        when == @activatetask_action ata do
            # find task's application...
            foreach apps (@lstring app_name @app_obj app) do                        
               foreach [app tasks] (@lstring task_name2 @basic_type task) do
                 if ( [task_name2 string] == [[ata task_name] string]) then
                    # ... and verify if the alarm is in the same application of the task
                    foreach [app alarms] (@lstring alarm_name2 @basic_type alarm2) do
                       if ( [alarm_name2 string] == [alarm_name string]) then
                          right_app := true;
                       end if;
                    end foreach;       
                    if (right_app == false) then
                       foreach [alarm acc_apps] (@lstring s) do
                         if [s string] == [app_name string] then
                             access_app := true;
                         end if ;
                       end foreach ;
                       if (access_app == false) then
                          error alarm_name:"Task ".[[ata task_name] string]." doesn't belong to the same application of alarm ".[alarm_name string];
                       end if;
                       access_app := false;
                    end if;             
                    right_app := false;
                 end if;
               end foreach; 
            end foreach;        
        when == @incrementcounter_action ica do
            # find counter's application...
            foreach apps (@lstring app_name @app_obj app) do                        
               foreach [app counters] (@lstring counter_name2 @basic_type counter) do
                 if ( [counter_name2 string] == [[ica counter_name] string]) then
                    # ... and verify if the alarm is in the same application of the task
                    foreach [app alarms] (@lstring alarm_name2 @basic_type alarm2) do
                       if ( [alarm_name2 string] == [alarm_name string]) then
                          right_app := true;
                       end if;
                    end foreach;       
                    if (right_app == false) then
                       foreach [alarm acc_apps] (@lstring s) do
                         if [s string] == [app_name string] then
                             access_app := true;
                         end if ;
                       end foreach ;
                       if (access_app == false) then
                          error alarm_name:"Counter ".[[ica counter_name] string]." doesn't belong to the same application of alarm ".[alarm_name string];
                       end if;
                       access_app := false;
                    end if;             
                    right_app := false;
                 end if;
               end foreach; 
            end foreach;          
        else end cast;       
    end foreach;
    
    foreach schedtables (@lstring sched_name @scheduletable_obj sched) do 
        #verify object counter:
        # find counter's application...
        foreach apps (@lstring app_name @app_obj app) do                        
           foreach [app counters] (@lstring counter_name2 @basic_type counter) do
             if ( [counter_name2 string] == [[sched counter] string]) then
                # ... and verify if the schedule table is in the same application of the task
                foreach [app scheduletables] (@lstring sched_name2 @basic_type sched) do
                   if ( [sched_name2 string] == [sched_name string]) then
                      right_app := true;
                   end if;
                end foreach;       
                if (right_app == false) then
                   foreach [sched acc_apps] (@lstring s) do
                     if [s string] == [app_name string] then
                         access_app := true;
                     end if ;
                   end foreach ;
                   if (access_app == false) then                
                       error sched_name:"Counter ".[[sched counter] string]." doesn't belong to the same application of schedule table ".[sched_name string];
                   end if;
                   access_app := false;
                end if;             
                right_app := false;
             end if;
           end foreach; 
        end foreach;  
        
        #check each expiry point        
        @expiry_point_list eps:= [sched exp_points];
        foreach eps (@uint64 eps_name @expiry_point_obj eps) do
          #cast point :
          #when == @setevent_action sea do
          #else end cast;
          @action_list eps_action;
          eps_action := [eps actions];
          foreach eps_action (@uint action_name @action_obj actionobj) do
             cast actionobj :
             when == @setevent_action sea do
               # find task's application...
               foreach apps (@lstring app_name @app_obj app) do                        
                 foreach [app tasks] (@lstring task_name2 @basic_type task) do
                   if ( [task_name2 string] == [[sea task_name] string]) then
                      # ... and verify if the schedule table is in the same application of the task
                      foreach [app scheduletables] (@lstring sched_name2 @basic_type sched) do
                         if ( [sched_name2 string] == [sched_name string]) then
                            right_app := true;
                         end if;
                      end foreach;            
                      if (right_app == false) then
                         foreach [sched acc_apps] (@lstring s) do
                           if [s string] == [app_name string] then
                               access_app := true;
                           end if ;
                         end foreach ;
                         if (access_app == false) then
                            error sched_name:"Task ".[[sea task_name] string]." doesn't belong to the same application of schedule table ".[sched_name string];
                         end if;
                         access_app := false;
                      end if;             
                      right_app := false;
                   end if;
                 end foreach; 
               end foreach;
             when == @activatetask_action ata do
               # find task's application...
               foreach apps (@lstring app_name @app_obj app) do                        
                 foreach [app tasks] (@lstring task_name2 @basic_type task) do
                   if ( [task_name2 string] == [[ata task_name] string]) then
                      # ... and verify if the schedule table is in the same application of the task
                      foreach [app scheduletables] (@lstring sched_name2 @basic_type sched) do
                         if ( [sched_name2 string] == [sched_name string]) then
                            right_app := true;
                         end if;
                      end foreach;            
                      if (right_app == false) then
                         foreach [sched acc_apps] (@lstring s) do
                           if [s string] == [app_name string] then
                               access_app := true;
                           end if ;
                         end foreach ;
                         if (access_app == false) then                      
                            error sched_name:"Task ".[[ata task_name] string]." doesn't belong to the same application of schedule table ".[sched_name string];
                         end if;
                         access_app := false;
                      end if;             
                      right_app := false;
                   end if;
                 end foreach; 
               end foreach;         
             else end cast;       
          end foreach;
        end foreach;   
    end foreach;

    
   end if ;
end routine ;

end semantics ;