semantics goil_types_action :

import semantics goil_basic_types in "goil_basic_types.gSemantics" ;
import semantics goil_routines in "goil_routines.gSemantics" ;

import "goil_basic_types.gSemantics" ;
import "goil_routines.gSemantics" ;

abstract class @action_obj {
    @location location ;

#    abstract method generate
#        ?@lstring    unused name
#        ?@string     unused err
#        ?@string     unused lkey
#        ?!@string    unused h_res
#        ?!@string    unused i_res ;
#
#    method flag ?!@stringset unused f :
#    end method ;
}

class @void_action extends @action_obj {
#    override method generate
#        ?@lstring    unused name
#        ?@string     unused err
#        ?@string     lkey
#        ?!@string    unused h_res
#        ?!@string    i_res :
#
#       doReplace !?i_res !lkey !"NULL_PTR" ;
#    end method ;
}

class @setevent_action extends @action_obj {
    @lstring task_name ;
    @lstring event_name ;

#    override method generate
#        ?@lstring    name
#        ?@string     err
#        ?@string     lkey
#        ?!@string    unused h_res
#        ?!@string    i_res :
#
#        @string res := template_string[!"code" !"notification_setevent"];
#
#        doReplace !?res !"$NOTIFICATION_NAME$"   !err." of message ".[name string] ;
#        doReplace !?res !"$NOTIFICATION$" ![name string]."_notification" ;
#        doReplace !?res !"$TASK$" ![task_name string]."_id" ;
#        doReplace !?res !"$EVENT$" ![event_name string]."_mask" ;
#
#        doReplace !?i_res !lkey !"&".[name string]."_notification" ;
#
#        i_res := res."\n".i_res ;
#   end method ;
}

class @activatetask_action extends @action_obj {
    @lstring task_name ;

#    override method generate
#        ?@lstring    name
#        ?@string     err
#        ?@string     lkey
#        ?!@string    unused h_res
#        ?!@string    i_res :
#
#        @string res := template_string[!"code" !"notification_activatetask"];
#
#        doReplace !?res !"$NOTIFICATION_NAME$"   !err." of message ".[name string] ;
#        doReplace !?res !"$NOTIFICATION$" ![name string]."_notification" ;
#        doReplace !?res !"$TASK$" ![task_name string]."_id" ;
#
#        doReplace !?i_res !lkey !"&".[name string]."_notification" ;
#
#        i_res := res."\n".i_res ;
#    end method ;
}

class @callback_action extends @action_obj {
    @lstring function_name ;

#    override method generate
#        ?@lstring    name
#        ?@string     err
#        ?@string     lkey
#        ?!@string    unused h_res
#        ?!@string    i_res :
#
#        @string res := template_string[!"code" !"notification_callback"];
#
#        doReplace !?res !"$NOTIFICATION_NAME$"   !err." of message ".[name string] ;
#        doReplace !?res !"$NOTIFICATION$" ![name string]."_notification" ;
#        doReplace !?res !"$CALLBACK$" ![function_name string]."_callback" ;
#
#        doReplace !?i_res !lkey !"&".[name string]."_notification" ;
#
#        i_res := res."\n".i_res ;
#    end method ;
}

class @flag_action extends @action_obj {
    @lstring flag_name ;
#    override method generate
#        ?@lstring    name
#        ?@string     err
#        ?@string     lkey
#        ?!@string    unused h_res
#        ?!@string    i_res :
#
#        @string res := template_string[!"code" !"notification_flag"];
#
#        doReplace !?res !"$NOTIFICATION_NAME$"   !err." of message ".[name string] ;
#        doReplace !?res !"$NOTIFICATION$" ![name string]."_notification" ;
#        doReplace !?res !"$FLAGFUNCTION$" !"tpl_set_flag_".[flag_name string] ;
#
#        doReplace !?i_res !lkey !"&".[name string]."_notification" ;
#
#        i_res := res."\n".i_res ;
#    end method ;
#
#    override method flag ?!@stringset f :
#        f += ![flag_name string] ;
#    end method ;
}

class @incrementcounter_action extends @action_obj {
    @lstring counter_name ;
#   override method generate
#        ?@lstring    name
#        ?@string     err
#        ?@string     lkey
#        ?!@string    unused h_res
#        ?!@string    i_res :
#
#        @string res := template_string[!"code" !"notification_incrementcounter"];
#        
#        doReplace !?res !"$NOTIFICATION_NAME$"   !err." of message ".[name string] ;
#        doReplace !?res !"$NOTIFICATION$" ![name string]."_notification" ;
#        doReplace !?res !"$COUNTER$" ![counter_name string]."_id" ;
#
#        doReplace !?i_res !lkey !"&".[name string]."_notification" ;
#
#        i_res := res."\n".i_res ;
#    end method ;
}

class @finalize_st_action extends @action_obj {
  @lstring scheduleTableName;
#  override method generate
#    ?@lstring    unused name
#    ?@string     unused err
#    ?@string     unused lkey
#    ?!@string    unused h_res
#    ?!@string    unused i_res :
#  end method ;
}

end semantics ;
# vim:ft=ggs:ts=4:sw=4
