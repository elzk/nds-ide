#
# @file xml_schedtable.ggs
#
# @section File description
#
# This file contains routine to parse a scheduletable container.
#
# @section Copyright
#
# Goil OIL compiler for Trampoline
#
# Goil is copyright (c) IRCCyN 2005+
# Goil is protected by the french law of intellectual property
#
# This software is distributed under the GNU Public Licence V2
#
# @section File informations
#
# $Date$
# $Rev$
# $Author$
# $URL$
#

semantics xml_schedtable:

import semantics xml_types in "xml_types.ggs";
import semantics goil_types_root in "goil_types_root.ggs";
import semantics xml_utils in "xml_utils.ggs";

routine parse_schedtable_autostart
  ??@xmlNodeList       cont_elems
  ??@lstring           name
  ??@location          unused autoloc
  ?!@scheduletable_obj st
:
  @xmlNode node := elem_named(!cont_elems!"REFERENCE-VALUES");
  if is_not_void(!node) then
    @xmlNodeList subs := [node nodeList];
    @stringset ams [emptySet];
    @lstring auto_type := empty_lstring();
    @basic_type auto_val_abs := [@void new !here];
    @basic_type auto_val_rel := [@void new !here];
    foreach subs do
      if    is_param(!node!"OsScheduleTableAutostartType") then
        set_lstring_if_empty !?auto_type !lstring_param(!node) !"OsScheduleTableAutostartType";
      elsif is_param(!node!"OsScheduleTableAbsValue") then
        set_uint64 !?auto_val_abs !luint64_param(!node) !"OsScheduleTableAbsValue";
      end if;
      @string am := [[ref_text(!node) string] lastPathComponent];
      ams += !am;
    end foreach;
    @autostart_obj auto_obj := [st autostart];
    if    [auto_type string] == "RELATIVE" then
      cast auto_val_rel:
      when == @uint64_class av do
        auto_obj := [@sd_autostart_relative new ![auto_type location] !ams !luint64_value(!av)];
      else
        error auto_type: "Relative value expected";
      end cast;
    elsif [auto_type string] == "ABSOLUTE" then
      cast auto_val_abs:
      when == @uint64_class av do
        auto_obj := [@sd_autostart_absolute new ![auto_type location] !ams !luint64_value(!av)];
      else
        error auto_type: "Absolute value expected";
      end cast;
    elsif [auto_type string] == "SYNCHRON" then
      auto_obj := [@sd_autostart_synchron new ![auto_type location] !ams];
    end if;
    [!?st setAutostart !auto_obj];
  else
    error name: "No REFERENCE-VALUES found in OsTaskAutostart";
  end if; 
end routine;

routine parse_st_taskactivation
  ??@xmlNodeList       cont_elems
  ??@lstring           name
  ??@location          loc
  ??@uint64            offset
  ?!@action_list       actions
:
  @xmlNode node := elem_named(!cont_elems!"REFERENCE-VALUES");
  if is_not_void(!node) then
    @xmlNodeList subs := [node nodeList];
    @lstring task := empty_lstring();
    foreach subs do
      if    is_param(!node!"OsScheduleTableActivateTaskRef") then
        message " TASK = ".[lstring_param(!node) string]."\n";
        set_lstring_if_empty !?task !lstring_param(!node) !"OsScheduleTableActivateTaskRef";
      end if;
    end foreach;
    if [task string] != "" then
      @activatetask_action sdata := [@activatetask_action new !loc !task];
      actions += !offset !1 !sdata;
    else
      error [node name]: "No OsScheduleTableActivateTaskRef parameter found";
    end if;
  else
    error name: "No REFERENCE-VALUES found in OsScheduleTableTaskActivation";
  end if; 
end routine;

routine parse_st_eventsetting
  ??@xmlNodeList       cont_elems
  ??@lstring           name
  ??@location          loc
  ??@uint64            offset
  ?!@action_list       actions
:
  @xmlNode node := elem_named(!cont_elems!"REFERENCE-VALUES");
  if is_not_void(!node) then
    @xmlNodeList subs := [node nodeList];
    @lstring task := empty_lstring();
    @lstring event := empty_lstring();
    foreach subs do
      if    is_param(!node!"OsScheduleTableSetEventTaskRef") then
        message " TASK = ".[lstring_param(!node) string]."\n";
        set_lstring_if_empty !?task !lstring_param(!node) !"OsScheduleTableSetEventTaskRef";
      elsif is_param(!node!"OsScheduleTableSetEventRef") then
        message " EVENT = ".[lstring_param(!node) string]."\n";
        set_lstring_if_empty !?event !lstring_param(!node) !"OsScheduleTableSetEventRef";
      end if;
    end foreach;
    if [task string] != "" then
      if [event string] != "" then
        @setevent_action sdata := [@setevent_action new !loc !task !event];
        actions += !offset !2 !sdata;
      else
        error [node name]: "No OsScheduleTableSetEventRef parameter found";
      end if;
    else
      error [node name]: "No OsScheduleTableSetEventTaskRef parameter found";
    end if;
  else
    error name: "No REFERENCE-VALUES found in OsScheduleTableTaskActivation";
  end if; 
end routine;

routine parse_st_adjustexppoint
  ??@xmlNodeList       cont_elems
  ??@lstring           name
  ??@location          loc
  ?!@scheduletable_obj st
:
  @xmlNode node := elem_named(!cont_elems!"PARAMETER-VALUES");
  if is_not_void(!node) then
    @xmlNodeList subs := [node nodeList];
    @basic_type max_advance := void_class();
    @basic_type max_retard := void_class();
    foreach subs do
      if    is_param(!node!"OsScheduleTableMaxAdvance") then
        message " MAX ADVANCE = ".[[luint64_param(!node) uint64] string]."\n";
        set_uint64 !?max_advance !luint64_param(!node) !"OsScheduleTableMaxAdvance";
      elsif is_param(!node!"OsScheduleTableMaxRetard") then
        message " MAX RETARD = ".[[luint64_param(!node) uint64] string]."\n";
        set_uint64 !?max_retard !luint64_param(!node) !"OsScheduleTableMaxRetard";
      end if;
    end foreach;
  else    
    error name: "No PARAMETER-VALUES found in OsScheduleTblAdjustableExpPoint";
  end if; 
end routine;

routine parse_schedtable_expiry_subcontainer
  ??@xmlNodeList       cont_elems
  ??@lstring           name
  ??@uint64            offset
  ?!@scheduletable_obj st
:
  @action_list actions := [st actions];
  foreach cont_elems do
    @lstring elem_name := long_name(!node);
    if [elem_name string] == "OsScheduleTableTaskActivation" then
      parse_st_taskactivation !cont_elems !name ![elem_name location] !offset !?actions;
   elsif [elem_name string] == "OsScheduleTableEventSetting" then
      parse_st_eventsetting !cont_elems !name ![elem_name location] !offset !?actions;
    elsif [elem_name string] == "OsScheduleTblAdjustableExpPoint" then      
      parse_st_adjustexppoint !cont_elems !name ![elem_name location] !?st;
    end if;
  end foreach;
  [!?st setActions !actions];
end routine;

routine parse_schedtable_expiry 
  ??@xmlNodeList       cont_elems
  ??@lstring           name
  ??@location          expiryloc
  ?!@scheduletable_obj st
:
  @xmlNode node := elem_named(!cont_elems!"PARAMETER-VALUES");
  if is_not_void(!node) then
    @xmlNodeList subs := [node nodeList];
    @basic_type offset := void_class();
    foreach subs do
      if    is_param(!node!"OsScheduleTblExpPointOffset") then
        message " OFFSET = ".[[luint64_param(!node) uint64] string]."\n";
        set_uint64 !?offset !luint64_param(!node) !"OsScheduleTblExpPointOffset";
      end if;
    end foreach;
    node := elem_named(!cont_elems!"SUB-CONTAINERS");
    @xmlNodeList nl := [node nodeList];
    cast offset:
    when == @uint64_class off do
      foreach nl do
        parse_schedtable_expiry_subcontainer ![node nodeList] !name ![off value] !?st;
      end foreach;
    else
      error [node name]: "No OFFSET parameter found";
    end cast; 
  else
    error name: "No PARAMETER-VALUES found in OsScheduleTableExpiryPoint";
  end if; 
end routine;

routine parse_schedtable_sync 
  ??@xmlNodeList       cont_elems
  ??@lstring           name
  ??@location          syncloc
  ?!@scheduletable_obj st
:
end routine;

routine parse_schedtable_subcontainer 
  ??@xmlNodeList       cont_elems
  ??@lstring           name
  ?!@scheduletable_obj st
:
  foreach cont_elems do
    @lstring elem_name := long_name(!node);
    if    [elem_name string] == "OsScheduleTableAutostart" then
      message "ScheduleTable Autostart trouve\n";
      parse_schedtable_autostart !cont_elems !name ![elem_name location] !?st;
    elsif [elem_name string] == "OsScheduleTableExpiryPoint" then
      message "OsScheduleTableExpiryPoint trouve\n";
      parse_schedtable_expiry !cont_elems !name ![elem_name location] !?st;
    elsif [elem_name string] == "OsScheduleTableSync" then
      message "OsScheduleTableSync trouve\n";
      parse_schedtable_sync !cont_elems !name ![elem_name location] !?st;
    end if;
  end foreach;
end routine;

routine parse_schedtable
  ??@lstring     name
  ??@xmlNodeList cont_elems
  ?!@root_obj    cpu
:
  @scheduletable_obj st := default_scheduletable_obj();
# get the level 0 attributes
  @xmlNode node := elem_named(!cont_elems!"PARAMETER-VALUES");
  if is_not_void(!node) then
    @xmlNodeList params := [node nodeList];
    foreach params do
      if    is_param(!node!"OsScheduleTableRepeating") then
        [!?st setPeriodic !bool_class_param(!node)];
      elsif is_param(!node!"OsSchTblAccessingApplication") then
        @lstringlist acc_apps := [st acc_apps];
        acc_apps += !value_text(!node);
        [!?st setAcc_apps !acc_apps];
        log acc_apps;
      elsif is_param(!node!"OsScheduleTableCounterRef") then
        [!?st setCounter !lstring_param(!node)];
      end if; 
    end foreach;  
  else
    error name : "ScheduleTable does not have a PARAMETER-VALUES element";
  end if;
  node := elem_named(!cont_elems!"SUB-CONTAINERS");
  @xmlNodeList nl := [node nodeList];
  foreach nl do
    parse_schedtable_subcontainer ![node nodeList] !name !?st;
  end foreach;
  @scheduletable_map sts := [cpu scheduletables];
  [!?sts put !name !st];
  [!?cpu setScheduletables !sts];
end routine;

end semantics;
