#
# Trampoline OS
#
# Trampoline is copyright (c) IRCCyN 2005+
#
# This software is distributed under the Lesser GNU Public Licence
#
# GOIL application object parser
#
# $Date$
# $Rev$
# $Author$
# $URL$
#

syntax goil_obj_application :
#--- Lexique Reference, used when grammar source file extension is .gGrammar
with "goil_lexique.gLexique";

import lexique goil_lexique in "goil_lexique.gLexique" ;
import option goil_options in "goil_options.gOption" ;
import semantics goil_types_app in "goil_types_app.gSemantics" ;

import "goil_options.gOption" ;
import "goil_types_app.gSemantics" ;

#
# external rules 
#
nonterminal <description>
    !@lstring desc  
label parse
;

#
# local rules declaration
#
nonterminal <appli>
    ?!@app_map applis
label check_appli_exist
    ?!@app_map applis_check
    !@bool appli_exist
;

nonterminal <app_attributes>
    ?!@app_obj app
    ?@lstring  name 
label parse
;

nonterminal <trusted_fcts>
    !@app_trusted_obj trust_attr 
label parse
;

rule <appli>
    ?!@app_map applis
:
    @lstring            name ;
    @lstring            desc ;
    @app_obj app;
    

    $APPLICATION$ ;
    if [option goil_options.autosar_on value] == false then
      error here : "AUTOSAR flag is off, turn it on to use APPLICATION objects" ;
    end if ;
    $idf$ ?name ;

    if [applis hasKey ![name string]] then
        [!?applis del !name ?app] ;
    else
        app := [@app_obj new
            ![@lstring new !"" !here]      # description
            ![@app_trusted_void new !here] # trusted
            ![@void new !here]             # startuphook
            ![@void new !here]             # shutdownhook
            ![@void new !here]             # errorhook
            ![@void new !here]             # restart
            ![@ident_map emptyMap]         # tasks
            ![@ident_map emptyMap]         # isrs
            ![@ident_map emptyMap]         # alarms
            ![@ident_map emptyMap]         # schedtables
            ![@ident_map emptyMap]         # counters
            ![@ident_map emptyMap]         # resources
            ![@ident_map emptyMap]         # messages
        ] ;
    end if ;

    ${$ ;
    <app_attributes> !?app !name ;
    $}$ ;
    <description> ?desc ;
    $;$ ;

    [!?applis put !name !app] ;

label check_appli_exist
    ?!@app_map applis
    !@bool appli_exist
:
    @lstring            name ;
    @lstring            desc ;
    @app_obj app;
    
    $APPLICATION$ ;
    appli_exist := true;
    if [option goil_options.autosar_on value] == false then
      error here : "AUTOSAR flag is off, turn it on to use APPLICATION objects" ;
    end if ;
    $idf$ ?name ;

    if [applis hasKey ![name string]] then
        [!?applis del !name ?app] ;
    else
        app := [@app_obj new
            ![@lstring new !"" !here]      # description
            ![@app_trusted_void new !here] # trusted
            ![@void new !here]             # startuphook
            ![@void new !here]             # shutdownhook
            ![@void new !here]             # errorhook
            ![@void new !here]             # restart
            ![@ident_map emptyMap]         # tasks
            ![@ident_map emptyMap]         # isrs
            ![@ident_map emptyMap]         # alarms
            ![@ident_map emptyMap]         # schedtables
            ![@ident_map emptyMap]         # counters
            ![@ident_map emptyMap]         # resources
            ![@ident_map emptyMap]         # messages
        ] ;
    end if ;

    ${$ ;
    <app_attributes> !?app !name ;
    $}$ ;
    <description> ?desc ;
    $;$ ;

    [!?applis put !name !app] ;

end rule ;

rule <app_attributes> 
    ?!@app_obj app
    ?@lstring  name
:
    @app_trusted_obj trusted := [app trusted] ;
    @basic_type  startuphook := [app startuphook] ;
    @basic_type  shutdownhook := [app shutdownhook] ;
    @basic_type  errorhook := [app errorhook] ;
    @basic_type  restart := [app restart] ;
    @ident_map   tasks := [app tasks] ;
    @ident_map   isrs := [app isrs] ;
    @ident_map   alarms := [app alarms] ;
    @ident_map   schedtables := [app scheduletables] ;
    @ident_map   counters := [app counters] ;
    @ident_map   resources := [app resources] ;
    @ident_map   messages := [app messages] ;
    repeat
    while
        @app_trusted_obj trust ;
        $TRUSTED$ ; $=$ ;
        select
            $TRUE$ ;
            <trusted_fcts> ?trust ;
   or
            $FALSE$ ;
            trust := [@app_trusted_false new !here] ;
        end select ;
        <description> ?* ; $;$ ;
        cast trusted :
        when == @app_trusted_void do trusted := trust ;
        else
            error [trust location] : "TRUSTED attribute already defined for Application ".[name string] ;
            error [trusted location] : "Was previously define here" ;
        end cast ;
    while
        @bool sh ;
        $STARTUPHOOK$ ; $=$ ;
        select
            $TRUE$ ; sh := true ;
        or
            $FALSE$ ; sh := false ;
        end select ;
        cast startuphook :
        when == @void do startuphook := [@bool_class new !here !sh] ;
        else
            error here : "STARTUPHOOK attribute already defined for Application ".[name string] ;
            error [startuphook location] : "Was previously define here" ;
        end cast ;
        <description> ?* ; $;$ ;
   while
        @bool sh ;
        $SHUTDOWNHOOK$ ; $=$ ;
        select
            $TRUE$ ; sh := true ;
   or
            $FALSE$ ; sh := false ;
        end select ;
        cast shutdownhook :
        when == @void do shutdownhook := [@bool_class new !here !sh] ;
        else
            error here : "SHUTDOWNHOOK attribute already defined for Application ".[name string] ;
            error [shutdownhook location] : "Was previously define here" ;
        end cast ;
        <description> ?* ; $;$ ;
    while
        @bool eh ;
        $ERRORHOOK$ ; $=$ ;
        select
            $TRUE$ ; eh := true ;
   or
            $FALSE$ ; eh := false ;
        end select ;
        cast errorhook :
        when == @void do errorhook := [@bool_class new !here !eh] ;
        else
            error here : "ERRORHOOK attribute already defined for Application ".[name string] ;
            error [errorhook location] : "Was previously define here" ;
        end cast ;
        <description> ?* ; $;$ ;
    while
        @basic_type hr ;
        $HAS_RESTARTTASK$ ; $=$ ;
        select
            @lstring res_task ;
            $TRUE$ ; ${$ ; $RESTARTTASK$ ; $=$ ; $idf$ ?res_task ; $;$ ; $}$ ;
            hr := [@string_class new !here ![res_task string]] ;
   or
            $FALSE$ ;
            hr := [@bool_class new !here !false] ;
        end select ;
        cast restart :
        when == @void do restart := hr ;
        else
            error here : "RESTARTTASK attribute already defined for Application ".[name string] ;
            error [restart location] : "Was previously define here" ;
        end cast ;
        <description> ?* ; $;$ ;
    while
        @lstring task ;
        $TASK$ ; $=$ ; $idf$ ?task ;
        [!?tasks put !task ![@string_class new !here ![task string]]] ;
        <description> ?* ; $;$ ;
    while
        @lstring isr ;
        $ISR$ ; $=$ ; $idf$ ?isr ;
        [!?isrs put !isr ![@string_class new !here ![isr string]]] ;
        <description> ?* ; $;$ ;
    while
        @lstring alarm ;
        $ALARM$ ; $=$ ; $idf$ ?alarm ;
        [!?alarms put !alarm ![@string_class new !here ![alarm string]]] ;
        <description> ?* ; $;$ ;
    while
        @lstring st ;
        $SCHEDULETABLE$ ; $=$ ; $idf$ ?st ;
        [!?schedtables put !st ![@string_class new !here ![st string]]] ;
        <description> ?* ; $;$ ;
    while
        @lstring ct ;
        $COUNTER$ ; $=$ ; $idf$ ?ct ;
        [!?counters put !ct ![@string_class new !here ![ct string]]] ;
        <description> ?* ; $;$ ;
    while
        @lstring rez ;
        $RESOURCE$ ; $=$ ; $idf$ ?rez ;
        [!?resources put !rez ![@string_class new !here ![rez string]]] ;
        <description> ?* ; $;$ ;
    while
        @lstring mes ;
        $MESSAGE$ ; $=$ ; $idf$ ?mes ;
        [!?messages put !mes ![@string_class new !here ![mes string]]] ;
        <description> ?* ; $;$ ;
    end repeat ;


    app := [@app_obj new
        ![@lstring new !"" !here]      # description
        !trusted                       # trusted
        !startuphook                   # startuphook
        !shutdownhook                  # shutdownhook
        !errorhook                     # errorhook
        !restart                       # restart
        !tasks                         # tasks
        !isrs                          # isrs
        !alarms                        # alarms
        !schedtables                   # schedtables
        !counters                      # counters
        !resources                     # resources
        !messages                      # messages
    ] ;
end rule ;

rule <trusted_fcts>
    !@app_trusted_obj trust_attr
:
  @stringset t_funcs := [@stringset emptySet] ;
  select
    ${$ ;
    repeat
    while
      @lstring f_name := [@lstring new !"" !here] ;
      $TRUSTED_FUNCTION$ ; $=$ ;
      @bool tfok := false ;
      select
        $idf$ ?f_name ; $;$ ; tfok := true ;
      or
        $TRUE$ ; ${$ ; $NAME$ ; $=$ ; $string$ ?f_name ; $;$ ; $}$ ; $;$ ;
        tfok := true ;
      or
        $FALSE$ ;
      end select ;
      if tfok then
        t_funcs += ![f_name string] ;
      end if ;
    end repeat ;
    $}$ ;
  or end select ;

  trust_attr := [@app_trusted_true new !here !t_funcs] ;
end rule ;

end syntax ;
