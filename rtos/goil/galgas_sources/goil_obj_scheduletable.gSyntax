#
# Trampoline OS
#
# Trampoline is copyright (c) IRCCyN 2005+
# Trampoline and its Autosar extension are protected by the
# French intellectual property law.
#
# This software is distributed under the Lesser GNU Public Licence
#
# GOIL scheduletable object parser
#
# $Date$
# $Rev$
# $Author$
# $URL$
#

syntax goil_obj_scheduletable :
#--- Lexique Reference, used when grammar source file extension is .gGrammar
with "goil_lexique.gLexique";

import lexique goil_lexique in "goil_lexique.gLexique";
import option goil_options in "goil_options.gOption";
import semantics goil_semantics in "goil_semantics.gSemantics";
import semantics goil_basic_types in "goil_basic_types.gSemantics";
import semantics goil_types_action in "goil_types_action.gSemantics";
import semantics goil_types_scheduletable in "goil_types_scheduletable.gSemantics";

import "goil_options.gOption";
import "goil_semantics.gSemantics";
import "goil_basic_types.gSemantics";
import "goil_types_action.gSemantics";
import "goil_types_scheduletable.gSemantics";

nonterminal <scheduletable>
  ?!@scheduletable_map stm 
label parse
;
nonterminal <scheduletable_parameters>
  ?!@scheduletable_obj st
  ?@lstring name 
label parse
;
nonterminal <st_autostart_rel_params>
  !@autostart_obj autostart 
label parse
;
nonterminal <st_autostart_abs_params>
  !@autostart_obj autostart 
label parse
;
nonterminal <st_autostart_sync_params>
  !@autostart_obj autostart 
label parse
;
nonterminal <ltgt_sync_params>
  !@ltgt_sync_obj sync 
label parse
;
nonterminal <st_expiry_pt_params>
  ?@lstring          ep_name
  !@expiry_point_obj epl 
label parse
;
nonterminal <st_action_params>
  ?!@action_list actions 
label parse
;

# external non terminal
nonterminal <description>
  !@lstring desc 
label parse
;
nonterminal <boolean>
  !@lbool bool 
label parse
;

rule <scheduletable>
  ?!@scheduletable_map stm
:
  $SCHEDULETABLE$;
  if [option goil_options.autosar_on value] == false then
    error here : "AUTOSAR flag is off, turn it on to use SCHEDULETABLE objects";
  end if;
  @lstring name;
  $idf$ ?name;
  ${$;

  # get the object in the table if previously declared
  @scheduletable_obj st;
  if [stm hasKey ![name string]] then
    [!?stm del !name ?st];
  else
    st := default_scheduletable_obj[];
  end if;

  <scheduletable_parameters> !?st !name;
  $}$;
  @lstring desc;
  <description> ?desc;
  $;$;

  [!?stm put !name !st];
end rule;

rule <scheduletable_parameters>
  ?!@scheduletable_obj st
  ?@lstring name
:
  @lstring           st_description := [st desc];
  @lstring           st_counter     := [st counter];
  @autostart_obj     st_autostart   := [st autostart];
  @ltgt_sync_obj     st_ltgt_sync   := [st ltgt_sync];
  @basic_type        st_periodic    := [st periodic];
  @basic_type        st_length      := [st length];
  @expiry_point_list st_exp_pts     := [st exp_points];
  @lstringlist       st_acc_apps    := [st acc_apps];

  repeat
  while
    @lstring counter;
    $COUNTER$;  $=$; $idf$ ?counter; <description> ?*; $;$;
    if [st_counter string] != "" then
      error here : "OS409 - COUNTER attribute already defined for Schedule Table ".[name string];
      error [st_counter location] : "Was previously define here";
    else
      st_counter := counter;
    end if;
  while
    @autostart_obj autostart;
    $AUTOSTART$;  $=$;
    select
      $ABSOLUTE$;
      ${$;
      <st_autostart_abs_params> ?autostart;
      $}$;
    or
      $RELATIVE$;
      ${$;
      <st_autostart_rel_params> ?autostart;
      $}$;
    or
      $SYNCHRON$;
      ${$;
      <st_autostart_sync_params> ?autostart;
      $}$;
    or
      $TRUE$;
      ${$;
      <st_autostart_rel_params> ?autostart;
      $}$;
    or
      $FALSE$; autostart := [@sd_autostart_false new !here];
    or
      $NONE$; autostart := [@sd_autostart_false new !here];
    end select;
    <description> ?*; $;$;

    cast st_autostart :
    when == @autostart_void do
      st_autostart := autostart;
    else
      error here : "AUTOSTART attribute already defined for Schedule Table ".[name string];
      error [st_autostart location] : "Was previously define here";
    end cast;
  while
    @ltgt_sync_obj sync;
    $LOCAL_TO_GLOBAL_TIME_SYNCHRONIZATION$; $=$;
    select
      $TRUE$;
      ${$;
      <ltgt_sync_params> ?sync;
      $}$;
    or
      $FALSE$;
      sync := [@ltgt_sync_false new !here];
    end select;
    <description> ?*; $;$;

    cast st_ltgt_sync :
    when == @ltgt_sync_void do
      st_ltgt_sync := sync;
    else
      error here : "LOCAL_TO_GLOBAL_TIME_SYNCHRONIZATION attribute already defined for Schedule Table ".[name string];
      error [st_ltgt_sync loc] : "Was previously defined here";
    end cast;
  while
    @lbool periodic;
    $PERIODIC$; $=$; <boolean> ?periodic; <description> ?*; $;$;

      cast st_periodic :
    when == @void do
      st_periodic := [@bool_class new ![periodic location] ![periodic bool]];
    else
      error periodic : "PERIODIC attribute already defined for Schedule Table ".[name string];
      error [st_periodic location] : "Was previously define here";
    end cast;
  while
    @luint64 length;
    $LENGTH$; $=$; $uint_number$ ?length; <description> ?*; $;$;

    cast st_length :
    when == @void do
      st_length := [@uint64_class new !here ![length uint64]];
    else
      error here : "LENGTH attribute already defined for Schedule Table ".[name string];
      error [st_periodic location] : "Was previously define here";
    end cast;
#  while
#    $ACTION$; $=$; <st_action_params> !?st_actions; <description> ?*; $;$;
#
  while
    @lstring exp_name;
    $EXPIRY_POINT$; $idf$ ?exp_name; ${$;
      @expiry_point_obj ep;
      <st_expiry_pt_params> !exp_name ?ep;
    $}$; <description> ?*; $;$;
    cast [ep offset]:
    when == @uint64_class off do
      st_exp_pts += ![off value] !ep;
    else
      error exp_name: "OS404 - OFFSET is missing for expiry point ".[exp_name string];
    end cast;
  while
    @lstring app;
    $ACCESSING_APPLICATION$; $=$; $idf$ ?app; <description> ?*; $;$;
    add_lstring_unique !?st_acc_apps !app !"ACCESSING_APPLICATION";
  while
    $idf$ ?*;     $=$; select $idf$ ?*; or $uint_number$ ?*; end select;
    <description> ?*; $;$;
  end repeat;

  st := [@scheduletable_obj new
    !st_description
    !st_counter
    !st_autostart
    !st_ltgt_sync
    !st_periodic
    !st_length
    !st_exp_pts
    !st_acc_apps
    
  ];
end rule;

rule <st_autostart_rel_params>
  !@autostart_obj autostart
:
  @bool offset_known := false;

  @luint64 offset := [@luint64 new !0L !here];
  @lstring app_mode := [@lstring new !"" !here];
  @stringset app_modes := [@stringset emptySet];

  repeat
  while
    if offset_known then
      error here : "OFFSET attribute already defined for this schedule table autostart";
      error [offset location] : "was previously defined here";
    end if; 
    $OFFSET$; $=$; $uint_number$ ?offset; <description> ?*; $;$;
    offset_known := true;

  while
    $APPMODE$; $=$; $idf$ ?app_mode; <description> ?*; $;$;
    app_modes += ![app_mode string];
 end repeat;

  # signal an error when the OFFSET parameter is missing
  if (offset_known == false) then
    error here : "OFFSET attribute is missing";
  end if;

  autostart := [@sd_autostart_relative new !here !app_modes !offset];
end rule;

rule <st_autostart_abs_params>
  !@autostart_obj autostart
:
  @bool start_known := false;

  @luint64 start := [@luint64 new !0L !here];
  @lstring app_mode := [@lstring new !"" !here];
  @stringset app_modes := [@stringset emptySet];

  repeat
  while
    if start_known then
      error here : "OFFSET attribute already defined for this schedule table autostart";
      error [start location] : "was previously defined here";
    end if; 
    $START$; $=$; $uint_number$ ?start; <description> ?*; $;$;
    start_known := true;

  while
    $APPMODE$; $=$; $idf$ ?app_mode; <description> ?*; $;$;
    app_modes += ![app_mode string];
 end repeat;

  # signal an error when the OFFSET parameter is missing
  if (start_known == false) then
    error here : "START attribute is missing";
  end if;

  autostart := [@sd_autostart_absolute new !here !app_modes !start];
end rule;

rule <st_autostart_sync_params>
  !@autostart_obj autostart
:
  @lstring app_mode := [@lstring new !"" !here];
  @stringset app_modes := [@stringset emptySet];

  repeat
  while
    $APPMODE$; $=$; $idf$ ?app_mode; <description> ?*; $;$;
    app_modes += ![app_mode string];
 end repeat;

  autostart := [@sd_autostart_synchron new !here !app_modes];
end rule;

rule <ltgt_sync_params>
  !@ltgt_sync_obj sync
:
  @basic_type precision := [@void new !here];
  @lstring strategy := [@lstring new !"" !here];
  
  repeat
  while
    @luint64 prec;
    $PRECISION$; $=$; $uint_number$ ?prec;
    cast precision :
    when == @void do
      precision := [@uint64_class new !here ![prec uint64]];
    else
      error here : "PRECISION attribute already defined";
      error [precision location] : "Was previously defined here";
    end cast;
    $;$;
  while
    @lstring strat;
    $SYNC_STRATEGY$; $=$; $idf$ ?strat;
    if [strategy string] == "" then
      strategy := strat;
    else
      error here : "SYNC_STRATEGY attribute already defined";
      error strategy : "Was previously defined here";
    end if;
    $;$;  
  end repeat;

  cast precision :
  when == @void do
 if ([strategy string] == "IMPLICIT") then
  precision := [@uint64_class new !here !0L] ;
 else
  error here : "PRECISION attribute is missing " ;
 end if;
  else end cast ;
  
  if [strategy string] == "" then
    error here : "SYNC_STRATEGY attribute is missing";
  end if;

  sync := [@ltgt_sync_true new !here !strategy !precision];
end rule;

rule <st_expiry_pt_params>
  ?@lstring          ep_name
  !@expiry_point_obj epl
:
  @adjustable_obj adjust := [@adjustable_void new !empty_lstring[] !here];
  @basic_type offset := void_obj[];
  @action_list actions [emptySortedList];
  repeat
  while
    @luint64 off;
    $OFFSET$; $=$; $uint_number$ ?off; $;$;
    set_uint64 !?offset !off !"OS442 - OFFSET";
  while

    $ACTION$; $=$; <st_action_params> !?actions; $;$;
  while
    $ADJUSTABLE$;
    @location adj_loc := here;
    $=$;
    select
      $TRUE$; ${$;
        @basic_type max_retard := void_obj[];
        @basic_type max_advance := void_obj[];
        repeat
        while
          @luint64 ret;
          $MAX_RETARD$; $=$; $uint_number$ ?ret; $;$;
          set_uint64 !?max_retard !ret !"MAX_RETARD"; 
        while
          @luint64 adv;
          $MAX_ADVANCE$; $=$; $uint_number$ ?adv; $;$;
          set_uint64 !?max_advance !adv !"MAX_ADVANCE"; 
        end repeat;
      $}$;
      set_adjustable
        !?adjust
        ![@adjustable_true new !empty_lstring[] !adj_loc !max_retard !max_advance];
    or
      $FALSE$;
      set_adjustable !?adjust ![@adjustable_false new !empty_lstring[] !adj_loc];
    end select;
    $;$;
  end repeat;
  epl := [@expiry_point_obj new
   !empty_lstring[] 
   !offset 
   !ep_name
   !adjust
   !actions
  ];
end rule;

rule <st_action_params>
  ?!@action_list actions
:
  select
    $ACTIVATETASK$;
    ${$;
    @bool    task_known := false;
    @lstring task := [@lstring new !"" !here];
    repeat
    while
      @lstring new_task;
      $TASK$; $=$; $idf$ ?new_task; $;$;
      if task_known then
        error here : "TASK attribute already defined for this schedule table ACTIVATETASK action";
        error [task location] : "was previously defined here";
      else
        task := new_task;
        task_known := true;
      end if;
    end repeat;
    if task_known then
      @activatetask_action sdata := [@activatetask_action new !here !task];
      actions += !1 !sdata;
    else
      error here : "incomplete action";
    end if;
    $}$;
  or
    @bool    task_known := false;
    @bool    event_known := false;
    @lstring task := [@lstring new !"" !here];
    @lstring event := [@lstring new !"" !here];
    $SETEVENT$;
    ${$;
    repeat
    while
      @lstring new_task;
      $TASK$; $=$; $idf$ ?new_task; $;$;
      if task_known then
        error here : "TASK attribute already defined for this schedule table SETEVENT action";
        error [task location] : "was previously defined here";
      else
       task := new_task;
       task_known := true;
      end if;
    while
      @lstring new_event;
      $EVENT$; $=$; $idf$ ?new_event; $;$;
      if event_known then
        error here : "EVENT attribute already defined for this schedule table ACTIVATETASK action";
        error [event location] : "was previously defined here";
      else
        event := new_event;
        event_known := true;
      end if;
    end repeat;
    if task_known & event_known then
      @setevent_action sdata := [@setevent_action new !here !task !event];
      actions += !2 !sdata;
    else
      error here : "incomplete action";
    end if;
    $}$;
  end select;
end rule;

end syntax;
# vim:ft=ggs:ts=4:sw=4
