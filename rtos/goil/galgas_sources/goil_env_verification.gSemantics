#
# @file goil_env_verification.ggs
#
# @section File description
#
# This file wraps user application configuration header.
# This wrapped file is typically
# generated from an OIL source.
#
# @section Copyright
#
# Trampoline OS
#
# Trampoline is copyright (c) IRCCyN 2005+
# Trampoline is protected by the french intellectual property law.
#
# This software is distributed under the GNU Public Licence V2
#
# @section File informations
#
# $Date$
# $Rev$
# $Author$
# $URL$
#

semantics goil_env_verification :
import option goil_options in "goil_options.gOption" ;
import semantics goil_routines in "goil_routines.gSemantics" ;

import "goil_options.gOption" ;
import "goil_routines.gSemantics" ;

routine getAbsoluteSourceFilePath
  ?? @string fileName
  !  @string absoluteFilePath
:
  @string sourceFilePath := [[@string stringWithSourceFilePath] stringByDeletingLastPathComponent];
  if sourceFilePath == "" then
    if [[@string stringWithSourceFilePath] firstCharacterOrNul] != '/' then
      sourceFilePath := ".";
    end if;
  end if;
  absoluteFilePath := [fileName absolutePathFromPath !sourceFilePath];
end routine;

#This routine checks that a file exists. If not, a Warning is generated.
routine checkFileExists
  ?? @lstring fileName
:
  @string absoluteFilePath;
  getAbsoluteSourceFilePath ![fileName string] ?absoluteFilePath;
  if not [absoluteFilePath fileExists] then
    warning [fileName location]: "The file \'".absoluteFilePath."\' does not exists!";
  end if;
end routine;

#This routine checks that file does not exists. In fact
# it checks that it does not point to a directory.
# if file exists... nothing is done!! 
# if it is a directory, an error is generated.
# it also checks that the filename does not corespond to the project file name.
routine checkFileDoesNotExists
  ?? @lstring fileName
:
  @string absoluteFilePath;
  getAbsoluteSourceFilePath ![fileName string] ?absoluteFilePath;
  if [[fileName string] directoryExists] then
    error [fileName location]: "The file \'".absoluteFilePath."\' already exists and is a directory. It will not be overwritten.";
#  elsif [[fileName string] fileExists] then
#    warning [fileName location]: "The file \'".absoluteFilePath."\' already exists. It will be overwritten.";
  else
    #it may also be the project directory (generated by goil).
    @string projectDir := projectName[];
    projectDir := [projectDir absolutePathFromPath ![@string stringWithCurrentDirectory]];
    if projectDir == absoluteFilePath then
      error [fileName location]: "The file \'".absoluteFilePath."\' is already the project directory. It will not be overwritten.";
    end if;
  end if;  
end routine;

#This routine checks that the path in pameter corresponds to
#the trampoline base path. It checks that is have both
# - os subfolder
# - machines subfolder.
#An error is generated in other cases.
routine checkTrampolinePath
  ?? @lstring path
:
  @string absolutePath;
  getAbsoluteSourceFilePath ![path string] ?absolutePath;
  #first check that os path is ok
  @string osPath := absolutePath."/os";
  if not [osPath directoryExists] then
    error [path location]: "The directory \'".absolutePath."\' does not seem to be the Trampoline base path.".
                           " I can\'t find the os/ subfolder.";
  end if;
  #then checks machines path.
  @string machinesPath := absolutePath."/machines";
  if not [machinesPath directoryExists] then
    error [path location]: "The directory \'".absolutePath."\' does not seem to be the Trampoline base path.".
                           "I can\'t find the machines/ subfolder.";
  end if;
end routine;

# This routine checks the arch, chip and board corresponds
# a valid configuration
routine check_target
  ??@string trampoline_path
:
  @string machines_path;
  getAbsoluteSourceFilePath !trampoline_path ?machines_path;
  machines_path .= "/machines";
  @string arch_path := machines_path."/".arch[];
  @string chip_path := arch_path."/".chip[];
  @string board_path := chip_path."/".board[];
  if not [arch_path directoryExists] then
    warning here: "The directory \'".arch_path."\' does not exist";
  elsif not [chip_path directoryExists] then
    warning here: "The directory \'".chip_path."\' does not exist";
  elsif not [board_path directoryExists] then
    warning here: "The directory \'".board_path."\' does not exist";
  end if;
end routine;

end semantics;
# vim:ft=ggs:ts=4:sw=4
