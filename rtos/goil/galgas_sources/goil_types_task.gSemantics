semantics goil_types_task :

import semantics goil_basic_types in "goil_basic_types.gSemantics" ;
import semantics goil_types_timing_prot in "goil_types_timing_prot.gSemantics" ;

import "goil_basic_types.gSemantics" ;
import "goil_types_timing_prot.gSemantics" ;

#
# Task classes
#
abstract class @task_autostart_obj {
    @location location ;
}

class @task_autostart_void extends @task_autostart_obj {
}

class @task_autostart_false extends @task_autostart_obj {
}

class @task_autostart_true extends @task_autostart_obj {
 @stringset appmodes ;
}

class @task_obj extends @oil_obj {
    @basic_type         priority    feature setter;
    @lstring            schedule    feature setter;
    @basic_type         activation  feature setter;
    @task_autostart_obj autostart   feature setter;
    @lstringlist        resources   feature setter;
    @lstringlist        events      feature setter;
    @lstringlist        messages    feature setter;
    @lstringlist        acc_apps    feature setter;
    @timing_prot        timing_prot feature setter;
    @ident_map          others      feature setter;
}

function void_task_obj
  ->@task_obj task
:
  @void    void_obj := [@void new !here];
  @lstring emptyString := [@lstring new !"" !here];
  task := [@task_obj new
    !emptyString
    !void_obj
    !emptyString
    !void_obj
    ![@task_autostart_void new !here]
    ![@lstringlist emptyList]
    ![@lstringlist emptyList]
    ![@lstringlist emptyList]
    ![@lstringlist emptyList]
    ![@void_timing_prot new !here]
    ![@ident_map emptyMap]
  ] ;
end function;

function default_task_obj
  ->@task_obj task
:
  @void    void_obj := [@void new !here];
  @lstring emptyString := [@lstring new !"" !here];
  task := [@task_obj new
    !emptyString
    !void_obj
    !emptyString
    !void_obj
    ![@task_autostart_false new !here]
    ![@lstringlist emptyList]
    ![@lstringlist emptyList]
    ![@lstringlist emptyList]
    ![@lstringlist emptyList]
    ![@false_timing_prot new !here]
    ![@ident_map emptyMap]
  ] ;
end function;

map @task_map {
    @task_obj task ;
    insert put error message "Task %K is already defined in %L" ;
    search get error message "Task %K is unkown" ;
    remove del error message "Task %K is unkown" ;
}

map @task_mask {
    @uint64 mask ;
    insert insert_mask error message "Task %K has already its mask" ;
    search get_mask error message "No mask for task %K" ;
    remove del_mask error message "No mask for task %K" ;
}

sortedlist @objs_by_prio {
    @uint    prio ;
    @uint    act ;
    @lstring name ;
}{  prio < }

#
# This sorted list type is used to sort tasks with the extended ones before
# the basic ones.
#
sortedlist @tasks_by_type {
    @uint    type ;
    @string  name ;
}{  type < }

list @prio_list {
    @uint    fifosize ;
}

map @prio_map {
    @uint    prio ;
    @uint    act ;
    insert put error message "Object %K is already defined in %L" ;
    search get error message "Object %K is unkown" ;
}

end semantics ;