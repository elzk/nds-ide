semantics goil_types_resource :

import semantics goil_basic_types in "goil_basic_types.gSemantics" ;

import "goil_basic_types.gSemantics" ;

#
# Resource classes
#
abstract class @resource_property_obj {
    @location location ;
}

class @resource_property_void_obj extends @resource_property_obj {
}

class @resource_property_standard_obj extends @resource_property_obj {
}

class @resource_property_linked_obj extends @resource_property_obj {
    @lstring linked_resource ;
}

class @resource_property_internal_obj extends @resource_property_obj {
}

class @resource_obj extends @oil_obj {
    @resource_property_obj property feature setter;
    @lstringlist           acc_apps feature setter;
}

map @resource_map {
    @resource_obj resource ;
    insert put error message "Resource %K is already defined in %L" ;
    search get error message "Resource %K is not defined" ;
    remove del error message "Resource %K is not defined" ;
}

map @linked_resources {
 @lstring linked_resource ;
 insert put error message "Resource %K (%L) is part of a cycle of linked resources" ;
}

function default_resource_obj
  ->@resource_obj rez
:
  rez := [@resource_obj new
    !empty_lstring[]
    ![@resource_property_void_obj new !here]
    ![@lstringlist emptyList]
  ];
end function;

end semantics ;