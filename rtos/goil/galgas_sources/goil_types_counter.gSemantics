semantics goil_types_counter :

import semantics goil_basic_types in "goil_basic_types.gSemantics";

import "goil_basic_types.gSemantics";
 
#
# Counter classes
#

abstract class @counter_driver {
    @location location;
}

class @void_driver extends @counter_driver {}

class @os_internal_driver extends @counter_driver {}

class @gpt_driver extends @counter_driver {
    @basic_type ns_per_hw_tick;
    @lstring    gpt_channel_name;
}

list @time_constants {
    @basic_type     ns;
    @lstring        const_name; 
}    

abstract class @counter_type {
    @location location;
}

class @void_counter extends @counter_type {}

class @software_counter extends @counter_type {}

class @hardware_counter extends @counter_type {
    @counter_driver driver;
    @time_constants time_consts; 
}

class @counter_obj extends @oil_obj {
    @basic_type   max_allowed_value feature setter;
    @basic_type   ticks_per_base feature setter;
    @basic_type   min_cycle feature setter;
    @lstring      source;
# AUTOSAR fields
    @lstringlist  acc_apps feature setter;
    @counter_type type;
    @lstring      unit;
}

map @counter_map {
    @counter_obj counter;
    insert put error message "Counter %K is duplicated in %L";
    search getCounter error message "Counter %K is not defined";
    remove del error message "Counter %K is not defined";
}

sortedlist @counter_by_source {
  @string      source;
  @lstring     name;
  @counter_obj counter;
}{
  source >
}

function maxAllowedValue ??@counter_obj counter ->@uint64 value :
  value := 0L;
  cast [counter max_allowed_value]:
  when == @uint32_class max do value := [[max value] uint64];
  else error [[counter max_allowed_value] location] : "internal, wrong type for MAXALLOWEDVALUE";
  end cast; 
end function;

function minCycle ??@counter_obj counter ->@uint64 value :
  value := 0L;
  cast [counter min_cycle]:
  when == @uint32_class min do value := [[min value] uint64];
  else error [[counter min_cycle] location] : "internal, wrong type for MINCYCLE";
  end cast; 
end function;

function ticksPerBase ??@counter_obj counter ->@uint64 value :
  value := 0L;
  cast [counter ticks_per_base]:
  when == @uint32_class ticks do value := [[ticks value] uint64];
  else error [[counter ticks_per_base] location] : "internal, wrong type for TICKSPERBASE";
  end cast; 
end function;

end semantics;