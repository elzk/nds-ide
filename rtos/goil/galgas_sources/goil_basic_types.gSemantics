#
# @file goil_basic_types.ggs
#
# @section File description
#
# This file wraps user application configuration header. This wrapped file is typically
# generated from an OIL source.
#
# @section Copyright
#
# Trampoline OS
#
# Trampoline is copyright (c) IRCCyN 2005+
# Trampoline est protege par la loi sur la propriete intellectuelle
#
# This software is distributed under the Lesser GNU Public Licence
#
# @section File informations
#
# $Date$
# $Rev$
# $Author$
# $URL$
#

semantics goil_basic_types :

abstract class @basic_type {
  @location location ;
  method string !@string s :
    s := "" ;
  end method ;
}

class @void extends @basic_type {}

class @uint32_class    extends @basic_type {
  @uint   value ;
  override method string !@string s :
    s := [value string] ;
  end method ;
}

function uint32_or_error
  ?@basic_type t
  ?@string     att
  ->@uint      v
:
  v := 0;
  cast t:
  when == @uint32_class ui do
    v := [ui value];
  else
    error [t location]: att." is not defined";
  end cast;
end function;

class @sint32_class    extends @basic_type {
  @sint   value ;
  override method string !@string s :
    s := [value string] ;
  end method ;
}

class @uint64_class    extends @basic_type {
  @uint64 value ;
  override method string !@string s :
    s := [value string] ;
  end method ;
}

function uint64OrError
  ?@basic_type t
  ?@string     att
  ->@uint64    v
:
  v := 0L;
  cast t:
  when == @uint64_class ui do
    v := [ui value];
  else
    error [t location]: "Internal error, ".att." has a wrong datatype";
  end cast;
end function;

function luint64OrError
  ?@basic_type t
  ?@string     att
  ->@luint64    v
:
  cast t:
  when == @uint64_class ui do
    v := [@luint64 new ![ui value] ![ui location]];
  else
    v := [@luint64 new !0L !here];
    error [t location]: "Internal error, ".att." has a wrong datatype";
  end cast;
end function;

class @sint64_class    extends @basic_type {
  @sint64 value ;
  override method string !@string s :
    s := [value string] ;
  end method ;
}

class @float_class     extends @basic_type {
  @double value ;
  override method string !@string s :
    s := "" ;
  end method ;
}

class @string_class    extends @basic_type {
  @string value ;
  override method string !@string s :
    s := value ;
  end method ;
}

class @bool_class      extends @basic_type {
  @bool   value ;
  override method string !@string s :
    if value then
      s := "true" ;
    else
      s := "false" ;
    end if ;
  end method ;
}

class @void_uint32_class extends @uint32_class {}
class @void_sint32_class extends @sint32_class {}
class @void_uint64_class extends @uint64_class {}
class @void_sint64_class extends @sint64_class {}
class @void_float_class  extends @float_class  {}
class @void_string_class extends @string_class {}
class @void_bool_class   extends @bool_class   {}

class @auto_uint32_class extends @uint32_class {}
class @auto_sint32_class extends @sint32_class {}
class @auto_uint64_class extends @uint64_class {}
class @auto_sint64_class extends @sint64_class {}
class @auto_string_class extends @string_class {}
class @auto_bool_class   extends @bool_class   {}

#
# Types used for implementation specific type declaration
#
list @list_uint32 { @uint val ;   }
list @list_sint32  { @sint val ;   }
list @list_uint64 { @uint64 val ; }
list @list_sint64  { @sint64 val ; }

abstract class @number_set { @location loc ; }
abstract class @uint32_set extends @number_set {}
abstract class @sint32_set extends @number_set {}
abstract class @uint64_set extends @number_set {}
abstract class @sint64_set extends @number_set {}
abstract class @float_set  extends @number_set {}

class @uint32_empty_set extends @uint32_set {}
class @sint32_empty_set extends @sint32_set {}
class @uint64_empty_set extends @uint64_set {}
class @sint64_empty_set extends @sint64_set {}
class @float_empty_set  extends @float_set {}

class @uint32_range extends @uint32_set { @uint min ; @uint max ;     }
class @uint32_list  extends @uint32_set { @list_uint32 li ;           }
class @sint32_range extends @sint32_set { @sint min ; @sint max ;     }
class @sint32_list  extends @sint32_set { @list_sint32 li ;            }
class @uint64_range extends @uint64_set { @uint64 min ; @uint64 max ; }
class @uint64_list  extends @uint64_set { @list_uint64 li ;           }
class @sint64_range extends @sint64_set { @sint64 min ; @sint64 max ; }
class @sint64_list  extends @sint64_set { @list_sint64 li ;            }

abstract class @imp_type {
    @location loc ;
    @lstring  desc ;
    @bool     multiple ;
}

abstract class @imp_sca_type extends @imp_type {
    @bool       with_auto ;
}

abstract class @imp_obj_ref extends @imp_type {
}

class @void_type   extends @imp_type     {}

class @uint32_type extends @imp_sca_type {
    @uint32_class def_val ;
    @uint32_set   set ;
}

class @sint32_type extends @imp_sca_type {
    @sint32_class def_val ;
    @sint32_set   set ;
}

class @uint64_type extends @imp_sca_type {
    @uint64_class def_val ;
    @uint64_set   set ;
}

class @sint64_type extends @imp_sca_type {
    @sint64_class def_val ;
    @sint64_set   set ;
}

#
#
#

map @ident_map {
    @basic_type value ;
    insert put error message "%K is duplicated in %L";
    search get error message "Identifier %K is not defined" ;
}

map @stringMap {
    @string value ;
    insert put error message "stringmap lkey %K is duplicated in %L";
    search get error message "stringmap lkey %K is not defined" ;
}

map @lstringMap {
    @lstring value ;
    insert put error message "lstringmap lkey %K is duplicated in %L";
    search get error message "lstringmap lkey %K is not defined" ;
}

#
# Map to store string constants used
# for code generation
#
map @prefix_map {
    @string prefix ;
    @string tag_to_rep ;
    insert add error message "prefix %K duplicated %L" ;
    insert insert_prefix error message "prefix %K duplicated %L" ;
    search prefix error message "prefix %K is not defined" ;
}

map @stringset_map {
    @stringset ids ;
    insert add error message "Key %K is already used there";
    search get error message "Key %K is not there" ;
    remove delete error message "Key %K cannot be deleted" ;
}

#
# list of strings to store chained objects
#

list @ident_list {
    @lstring obj_name ;
}

map @ident_list_map {
    @ident_list objs ;
    insert add error message "Key %K is already used there";
    search get error message "Key %K is not there" ;
    remove delete error message "Key %K cannot be deleted" ;
}

abstract class @oil_obj {
    @lstring desc ;
}


abstract class @autostart_obj {
    @location location ;
}

class @autostart_void extends @autostart_obj {
}

class @autostart_false extends @autostart_obj {
}


function empty_lstring
  ->@lstring ls
:
  ls := [@lstring new !"" !here];
end function ;

function void_obj
  ->@basic_type v
:
  v := [@void new !here];
end function;

#
# set_uint32 sets it first argument as a @uint32_class according
# to its second argument if it is unset (ie @void). Otherwise
# it outputs an error.
#
# @param  t     The uint32 to set
# @param  i     The integer used as source
# @param  att   The name of the attribute.
#               Used in the error message
#
routine set_uint32
  ?!@basic_type t
  ?@luint64     i
  ?@string      att
:
  cast t :
  when == @void do
    t := [@uint32_class new ![i location] ![[i uint64] uint]] ;
  else
    error i : att." Redefinition" ;
    error [t location] : "was defined here" ;
  end cast ;
end routine ;

#
# set_uint64 sets it first argument as a @uint64_class according
# to its second argument if it is unset (ie @void). Otherwise
# it outputs an error.
#
# @param  t     The uint64 to set
# @param  i     The integer used as source
# @param  att   The name of the attribute.
#               Used in the error message
#
routine set_uint64
  ?!@basic_type t
  ?@luint64     i
  ?@string      att
:
  cast t :
  when == @void do
    t := [@uint64_class new ![i location] ![i uint64]] ;
  else
    error i : att." Redefinition" ;
    error [t location] : "was defined here" ;
  end cast ;
end routine ;

#
# set_lstring sets it first argument as a @string_class according
# to its second argument if it is unset (ie @void). Otherwise
# it outputs an error.
#
# @param  t     The uint64 to set
# @param  s     The lstring used as source
# @param  att   The name of the attribute.
#               Used in the error message
#
routine set_lstring
  ?!@basic_type t
  ?@lstring    s
  ?@string     att
:
  cast t :
    when == @void do
      t := [@string_class new ![s location] ![s string]];
    else
      error s : att." Redefinition";
      error [t location] : "was defined here";
  end cast;
end routine;

#
# set_bool sets it first argument as a @bool_class according
# to its second argument if it is unset (ie @void). Otherwise
# it outputs an error.
#
# @param  t     The bool to set
# @param  b     The bool used as source
# @param  att   The name of the attribute.
#               Used in the error message
#
routine set_bool
  ?!@basic_type t
  ?@lbool       b
  ?@string      att
:
  cast t :
  when == @bool_class do
    error b : "Redefinition of ".att ;
    error [t location] : "was defined here" ;
  else
    t := [@bool_class new ![b location] ![b bool]] ;
  end cast ;
end routine ;

function getBool
  ??@basic_type t
  ??@bool       def
  ->@bool       b
:
  cast t :
  when == @bool_class bc do
    b := [bc value] ;
  else
    b := def ;
  end cast ;
end function ;

function yes_no ?@bool b ->@string res :
  if b then res := "YES"; else res := "NO"; end if;
end function ;

function true_false ?@bool b ->@string res :
  if b then res := "true"; else res := "false"; end if;
end function;

function bool_define
  ?@string     flag
  ?@bool       b
  ->@string    res
:
  res := "#define    ".flag."    ".yes_no[!b]."\n" ;
end function ;

function bool_make_define
  ?@string     flag
  ?@bool       b
  ->@string    res
:
  res := flag." = ".true_false[!b]."\n" ;
end function ;

function bool_class_define
  ?@string     flag
  ?@basic_type t
  ?@bool       def
  ->@string    res
:
  cast t :
  when == @bool_class b do
    res := bool_define[!flag![b value]];
  else
    res := bool_define[!flag!def] ;
  end cast ;
end function ;

function bool_class_make_define
  ?@string     flag
  ?@basic_type t
  ?@bool       def
  ->@string    res
:
  cast t :
  when == @bool_class b do
    res := bool_make_define[!flag![b value]];
  else
    res := bool_make_define[!flag!def] ;
  end cast ;
end function ;

routine bool_flag
  ?!@string res
  ?@basic_type b
  ?@string flag
:
  cast b :
  when == @void do
#    res .= "#define ".flag."    NO\n" ;
  when == @bool_class bo do
    if [bo value] then
      res .= "#define ".flag."\n";#."    YES\n" ;
    else
#      res .= "#define ".flag."    NO\n" ;
    end if ;
  else 
    error [b location] : "Internal error, wrong datatype" ;
  end cast ;
end routine ;

routine p_bt
  ??@basic_type bt
:
  @string res;
  [bt string ?res];
  message [[bt location] locationString].": ".res."\n";
end routine;

function luint64_value
  ??@uint64_class c
  ->@luint64      v
:
  v := [@luint64 new ![c value] ![c location]];
end function;



end semantics ;
# vim:ft=ggs:ts=2:sw=2
