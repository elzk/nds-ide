// Free RTOS Headers
// See API reference Document in http://www.freertos.org/

#include <FreeRTOS.h>
#include <task.h>
#include <queue.h>
#include <semphr.h>

// NDS / Sevencore Board Headers
#include <nds.h>
#include <sevencore_io.h>

#include <stdio.h>
#include <time.h>
#include <stdlib.h>

#define COLOR_RED       RGB(31,  0,  0) /* Bright Red  	*/
#define COLOR_WHITE     RGB(31, 31, 31) /* Bright White */
#define COLOR_BLACK     RGB( 0,  0,  0)	/* Black : Zero	*/

#define BOX_WIDTH	8
#define BOX_HEIGHT	8
#define BOX_Y_POS	13
#define BOX_X_MAX	(SCREEN_WIDTH / BOX_WIDTH)

// �ʿ��� global ����
#define SCREEN_WIDTH 256
#define SCREEN_HEIGHT 192
#define WALL_BASE_Y 80
#define WALL_WIDTH 32
#define WALL_HEIGHT 32

#define LEFT 0
#define RIGHT 1
#define RIGHT_END 31

#define TRUE 1
#define FALSE 0
#define BG_GFX (u16)0x60000000
int wall = 0;

void
draw_my_box(int pos_x, int pos_y, u16 color)
{
	int i, j;
    u32 *basePoint, pixel;

    pixel = (color << 16) + color;
    for (i = 0; i < BOX_HEIGHT; i++) {
 	    basePoint = (u32 *)BG_GFX +
 	      ((((pos_y * BOX_HEIGHT) + i) * SCREEN_WIDTH) + pos_x * BOX_WIDTH) / 2;
    	for (j = 0; j < (BOX_WIDTH / 2); j++)
    		*basePoint++ = pixel;
	}
}

void
draw_my_wall(int pos_x, int pos_y, u16 color)
{
	// draw big white box
	int i, j;
    u32 *basePoint, pixel;

    pixel = (color << 16) + color;
    for (i = 0; i < 32; i++) {
 	    basePoint = (u32 *)BG_GFX +
 	      ((((pos_y * 32) + i) * SCREEN_WIDTH) + pos_x * BOX_WIDTH) / 2;
    	for (j = 0; j < (32 / 2); j++)
    		*basePoint++ = pixel;
	}
}

extern xTaskHandle BallTask;
xSemaphoreHandle xSemaphore[7];

void
Exp_8_Homework_A(void)
{
    while (1) {
    	// Ű ��Ʈ�������� ������ ��ġ�� white box
    	vTaskResume(BallTask);

    	// START key�� ������ ����
    	if(NDS_SWITCH() & KEY_START)
    		break;
    }
	while (NDS_SWITCH() & KEY_START)
		vTaskDelay(10);		// Wait while START KEY is being pressed
}

void
Exp_8_Homework_B(void)
{
	u8 key, old_key = -1;
    // ���� ���� �� �ʱ�ȭ (������ ����)
    vTaskResume(BallTask);

	while (1) {
		// key = getkey();
		old_key = key;

		if((key = getkey()) != 0){
			if(key > 32){
				continue;
			}
			for(int i=0;i<key;i++){
				draw_my_wall(i, 13, COLOR_BLACK);
				xSemaphoreGive(xSemaphore[i]);
			}
			wall = 0;

			for(int i=0;i<key;i++){
				while(!SemaphoreTake(xSemaphore[i], 0));
				draw_my_wall(i, 13, COLOR_BLACK);
				wall++;
			}
		}
		if(NDS_SWITCH() & KEY_START)
    		break;
    }
	while (NDS_SWITCH() & KEY_START)
		vTaskDelay(10);
}

portTASK_FUNCTION(Ball_Task, pvParameters)
{
	// �ʿ��� ����, �ʱ�ȭ
	int i = 28;
	u8 LEFT = TRUE;
	u8 key, old_key = -1;

	draw_my_box(31, 10, COLOR_WHITE);

	while (1) {
		// 2�ʸ� �ֱ�� ���� ���� Box�� �¿�� ������
		// ���� ������� �ʵ��� ����
		old_key = key;

		draw_my_box(old_key, BOX_Y_POS, COLOR_BLACK);
		draw_my_box(i, BOX_Y_POS, COLOR_RED);

		if(LEFT == TRUE){
			if(i == 0)
				LEFT = FALSE;
			else
				i--;
		}else{
			if(i == 31)
				LEFT = TRUE;
			else
				i++;
			}
		}
	vTaskDelay(20);
	}
}

// Key Matrix Scanning Task

void
key_init(void)
{
	int i;
	u8 key;

	for (i = 0; i < MAX_KEY_LOG; i++)
		xQueueReceive(KeyQueue, &key, 0);
}

int
kbhit(void)
{
	u8 key;
	int ret = xQueuePeek(KeyQueue, &key, 0);
	return (ret == pdPASS);
}
u8
getkey(void)
{
	u8 key;
	xQueueReceive(KeyQueue, &key, portMAX_DELAY);
	return key;
}

portTASK_FUNCTION(Key_Task, pvParameters)
{
	// Key Task
	u8 key, scan = 0;
	u8  key_pressed = FALSE;

	while (1) {
		if(key_pressed == FALSE){
			//스캔
			writeb_virtual_io(KEY_MATRIX, 0x80 >> scan);
			key = scan * 4;
			switch (readb_virtual_io(KEY_MATRIX)) {
			  case 8 :
				  key += 1;
				  break;
			  case 4 :
				  key += 2;
				  break;
			  case 2 :
				  key += 3;
				  break;
			  case 1 :
				  key += 4;
				  if (key == 16)
					  key = 0;
				  break;
			  default :
				  key = 255;
				  break;
			}
			scan++;
			if (scan == 4)
				scan = 0;
			if (key < 16){
				xQueueSend(KeyQueue, &key, 0);
				key_pressed = TRUE;
			}
		}
		if (key_pressed == TRUE && readb_virtual_io(KEY_MATRIX) == 0){
				key_pressed = FALSE;
		}
		vTaskDelay(MSEC2TICK(1));
	}
}
