#include "FreeRTOS.h"
#include "task.h"
#include "queue.h"
#include <nds.h>
#include <stdio.h>
#include <time.h>
#include <stdlib.h>
#include "sevencore_io.h"

extern xQueueHandle KeyQueue;
#define MAX_KEY_LOG		10

void
key_init(void)
{
	int i;
	u8 key;

	for (i = 0; i < MAX_KEY_LOG; i++)
		xQueueReceive(KeyQueue, &key, 0);
}

int
kbhit(void)
{
	u8 key;
	int ret = xQueuePeek(KeyQueue, &key, 0);
	return (ret == pdPASS);
}
u8
getkey(void)
{
	u8 key;
	xQueueReceive(KeyQueue, &key, portMAX_DELAY);
	//while (pdPASS != xQueueReceive(KeyQueue, &key, 0))
	//		vTaskDelay(MSEC2TICK(5));
	return key;
}

void
Exp_5_Homework_A(void)
{
	int i;
	u8 key;
	u8 array_key[8];

	key_init();

	for(i=0; i<NUM_7SEG_LED; i++)
		writeb_virtual_io(SEG7LED, 0x80 + (i << 4));

	while(1){
		key = getkey();
		array_key[0] = key;
		if(key == 0)
			break;
		for(i=0; i<8; i++)
			array_key[i+1] = array_key[i];
		for(i=0; i<NUM_7SEG_LED; i++)
			writeb_virtual_io(SEG7LED, 0x70 - (0x10 * i) + array_key[i]);

	}
}

void
Exp_5_Homework_B(void)
{
}

portTASK_FUNCTION(Key_Task, pvParameters)
{
}
