/*
 * Exp_Homework.c
 *
 *  Created on: 2011. 9. 22.
 *      Author: Minsuk Lee
 */

#include "FreeRTOS.h"
#include "task.h"
#include <nds.h>
#include <stdio.h>
#include <time.h>
#include <stdlib.h>
#include "sevencore_io.h"

portTickType short_timer = 0;
portTickType start_time_x = 0;
u16 barled;
int cur_led = 0;

#define NUM_STATE	9
#define NUM_INPUT	4

// Actions

f_ts(void *p)
{
	start_time_x = xTaskGetTickCount();
}

end_ts(void *p)
{
	short_timer = xTaskGetTickCount();
}
static
void
S(void *p)
{
	if(cur_led ==0)
		cur_led = 0x080;
	else
		cur_led = cur_led/2;
	printf("S\n");
	writeb_virtual_io(BARLED1, cur_led);
	writeb_virtual_io(BARLED2, 0);
}

static
void
L(void *p)
{
	printf("L\n");
	writeb_virtual_io(BARLED1, 0x80);
	writeb_virtual_io(BARLED2, 0);
}
static
void
S_S(void *p)
{
	printf("SS\n");
	cur_led= cur_led *2;
}
static
void
S_L(void *p)
{
	printf("SL\n");
	writeb_virtual_io(BARLED1, 0x03f);
	writeb_virtual_io(BARLED2, 0);
}
static
void
L_S(void *p)
{
	printf("LS\n");
	writeb_virtual_io(BARLED1, 0xFF);
	writeb_virtual_io(BARLED2, 0xFF);
}

static
void
L_L(void *p)
{
	printf("LL\n");
	writeb_virtual_io(BARLED1, 0);
	writeb_virtual_io(BARLED2, 0);
}

struct state_machine_x {
	int check_timer;
	int next_state[NUM_INPUT];
	void (* action[NUM_INPUT])(void *p);
};
enum { SW_ON, SW_OFF, TO , RTO};

struct state_machine_x SM[NUM_STATE] = {
		   // SW_ON              SW_OFF           TO
    { 0, { 1, 0, 0, 0 }, { f_ts, NULL, NULL, NULL },},    /* State 0 */
    { 1, { 1, 3, 2, 0 }, { NULL, end_ts, NULL, NULL },},
    { 2, { 2, 4, 0, 0 }, { NULL, end_ts, NULL, NULL },},
    { 3, { 5, 3, 0, 0 }, { NULL, NULL, NULL, S },},
    { 4, { 6, 4, 0, 0 }, { NULL, NULL, NULL, L },},
    { 5, { 5, 0, 7, 0 }, { NULL, S_S, NULL, NULL },},
    { 6, { 6, 0, 8, 0 }, { NULL, L_S, NULL, NULL },},
    { 7, { 7, 0, 0, 0 }, { NULL, S_L, NULL, NULL },},
    { 8, { 8, 0, 0, 0 }, { NULL, L_L, NULL, NULL },},
	// Fill here
};

void
Exp_3_Homework(void)
{
    int state;
    int input;

	printf("0892054-EXP_HomeWork\n");

	state = 0;							// Initial State 0 : All LED Off
	writeb_virtual_io(BARLED1, 0);
	writeb_virtual_io(BARLED2, 0);

	while (1) {
		/* Step 0: Generate Input Event */
		if (SM[state].check_timer) {
			if ((xTaskGetTickCount() - start_time_x) >= MSEC2TICK(300)) {
				input = TO;
				goto do_action;		// Input happens
			}
		}

		if (SM[state].check_timer) {
			if ((xTaskGetTickCount() - short_timer) >= MSEC2TICK(100)) {
				input = RTO;
				goto do_action;		// Input happens
			}
		}
		if (NDS_SWITCH() & KEY_A)
			input = SW_ON;
		else
			input = SW_OFF;

		/* Step 1: Do Action */
do_action:
		if (SM[state].action[input])
			SM[state].action[input](NULL);

		/* Step 2: Set Next State */
		state = SM[state].next_state[input];
		if (NDS_SWITCH() & KEY_START)
			break;
		vTaskDelay(MSEC2TICK(50));
	}
	while (NDS_SWITCH() & KEY_START)
		vTaskDelay(MSEC2TICK(10));		// Wait while START KEY is being pressed
}
