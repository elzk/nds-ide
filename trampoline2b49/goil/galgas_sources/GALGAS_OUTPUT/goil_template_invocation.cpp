//---------------------------------------------------------------------------*
//                                                                           *
//                   File 'goil_template_invocation.cpp'                     *
//                        Generated by version 1.9.9                         *
//                     january 28th, 2010, at 15h58'31"                      *
//                                                                           *
//---------------------------------------------------------------------------*

//--- START OF USER ZONE 1


//--- END OF USER ZONE 1

//---------------------------------------------------------------------------*

#include "version_libpm.h"
#if LIBPM_VERSION != 647
  #error "This file has been compiled with a version of GALGAS different than the version of libpm"
#endif

//---------------------------------------------------------------------------*

#include <typeinfo>
#include "utilities/MF_MemoryControl.h"
#include "files/C_TextFileWrite.h"
#include "galgas/C_galgas_CLI_Options.h"
#include "goil_template_invocation.h"

//---------------------------------------------------------------------------*

#ifndef DO_NOT_GENERATE_CHECKINGS
  #define SOURCE_FILE_AT_LINE(line) "goil_template_invocation.ggs", line
  #define COMMA_SOURCE_FILE_AT_LINE(line) , SOURCE_FILE_AT_LINE(line)
#else
  #define SOURCE_FILE_AT_LINE(line) 
  #define COMMA_SOURCE_FILE_AT_LINE(line) 
#endif

//---------------------------------------------------------------------------*
//                                                                           *
//             Include directives generated by grammar includes              *
//                                                                           *
//---------------------------------------------------------------------------*

#include "goil_template_grammar.h"

//--- START OF USER ZONE 2


//--- END OF USER ZONE 2

//---------------------------------------------------------------------------*
//                                                                           *
//            Implementation of once function "allowedFunctions"             *
//                                                                           *
//---------------------------------------------------------------------------*

static GGS_stringset  gCachedResultForOnceFunction_allowedFunctions ;
static bool gCacheFlagForOnceFunction_allowedFunctions = false ;

//---------------------------------------------------------------------------*

GGS_stringset  function_allowedFunctions (C_Compiler & COMMA_UNUSED_LOCATION_ARGS) {
  if (! gCacheFlagForOnceFunction_allowedFunctions) {
    #ifdef DEBUG_TRACE_ENABLED
      printf ("ENTER function_allowedFunctions at %s:%d\n", __FILE__, __LINE__) ;
    #endif
  GGS_stringset  var_cas_outAllowedFunctionSet ;
    var_cas_outAllowedFunctionSet = GGS_stringset ::constructor_emptySet () ;
    var_cas_outAllowedFunctionSet.addAssign_operation (GGS_string ("testFunction")) ;
    var_cas_outAllowedFunctionSet.addAssign_operation (GGS_string ("tasks")) ;
    var_cas_outAllowedFunctionSet.addAssign_operation (GGS_string ("trueFalse")) ;
    var_cas_outAllowedFunctionSet.addAssign_operation (GGS_string ("yesNo")) ;
    #ifdef DEBUG_TRACE_ENABLED
      printf ("LEAVE function_allowedFunctions\n") ;
    #endif
    gCacheFlagForOnceFunction_allowedFunctions = true ;
    gCachedResultForOnceFunction_allowedFunctions = var_cas_outAllowedFunctionSet ;
  }
  return gCachedResultForOnceFunction_allowedFunctions ;
}

//---------------------------------------------------------------------------*

static GGS_object functionForGenericCall_allowedFunctions (C_Compiler & inLexique,
                           const GGS_objectlist & /* inEffectiveParameterArray */,
                           const GGS_location & /* inErrorLocation */
                           COMMA_LOCATION_ARGS) {
  const GGS_stringset  result = function_allowedFunctions (inLexique
                            COMMA_THERE) ;
  return result.reader_object () ;
}

//---------------------------------------------------------------------------*

const C_galgas_function_descriptor kFunction_descriptor_allowedFunctions ("allowedFunctions",
                              functionForGenericCall_allowedFunctions,
                              & kTypeDescriptor_GGS_stringset ,
                              0,
                              NULL) ;

//---------------------------------------------------------------------------*
//                                                                           *
//                 Implementation of routine "addBoolValue"                  *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_addBoolValue (C_Compiler & inLexique,
                                GGS_goilTemplateVariableMap  & var_cas_ioTemplateVariableMap,
                                const GGS_lstring   var_cas_inVariableName,
                                const GGS_bool  var_cas_inValue COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_addBoolValue at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  var_cas_ioTemplateVariableMap.modifier_insertKey (inLexique, var_cas_inVariableName, GGS_goilTemplateType::constructor_boolType (inLexique COMMA_HERE), GGS_goilTemplateValue::constructor_new (((var_cas_inValue).isBuiltAndTrue () ? (GGS_uint64 (1ULL)) : (GGS_uint64 (0ULL))), GGS_string (""), GGS_goilTemplateFieldMapList ::constructor_emptyList ()) COMMA_SOURCE_FILE_AT_LINE (43)) ;
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_addBoolValue\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//               Implementation of routine "addUnsignedValue"                *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_addUnsignedValue (C_Compiler & inLexique,
                                GGS_goilTemplateVariableMap  & var_cas_ioTemplateVariableMap,
                                const GGS_lstring   var_cas_inVariableName,
                                const GGS_uint64   var_cas_inValue COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_addUnsignedValue at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  var_cas_ioTemplateVariableMap.modifier_insertKey (inLexique, var_cas_inVariableName, GGS_goilTemplateType::constructor_unsignedType (inLexique COMMA_HERE), GGS_goilTemplateValue::constructor_new (var_cas_inValue, GGS_string (""), GGS_goilTemplateFieldMapList ::constructor_emptyList ()) COMMA_SOURCE_FILE_AT_LINE (57)) ;
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_addUnsignedValue\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//              Implementation of routine "addLUnsignedValue"                *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_addLUnsignedValue (C_Compiler & inLexique,
                                GGS_goilTemplateVariableMap  & var_cas_ioTemplateVariableMap,
                                const GGS_string  var_cas_inVariableName,
                                const GGS_luint64   var_cas_inValue COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_addLUnsignedValue at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  ::routine_addUnsignedValue (inLexique,  var_cas_ioTemplateVariableMap,  GGS_lstring ::constructor_new (inLexique, var_cas_inVariableName, var_cas_inValue.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (71)) COMMA_HERE),  var_cas_inValue.reader_uint64 (inLexique COMMA_SOURCE_FILE_AT_LINE (71)) COMMA_SOURCE_FILE_AT_LINE (71)) ;
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_addLUnsignedValue\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//                Implementation of routine "addStringValue"                 *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_addStringValue (C_Compiler & inLexique,
                                GGS_goilTemplateVariableMap  & var_cas_ioTemplateVariableMap,
                                const GGS_lstring   var_cas_inVariableName,
                                const GGS_string  var_cas_inValue COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_addStringValue at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  var_cas_ioTemplateVariableMap.modifier_insertKey (inLexique, var_cas_inVariableName, GGS_goilTemplateType::constructor_stringType (inLexique COMMA_HERE), GGS_goilTemplateValue::constructor_new (GGS_uint64 (0ULL), var_cas_inValue, GGS_goilTemplateFieldMapList ::constructor_emptyList ()) COMMA_SOURCE_FILE_AT_LINE (81)) ;
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_addStringValue\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//               Implementation of routine "addLStringValue"                 *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_addLStringValue (C_Compiler & inLexique,
                                GGS_goilTemplateVariableMap  & var_cas_ioTemplateVariableMap,
                                const GGS_string  var_cas_inVariableName,
                                const GGS_lstring   var_cas_inValue COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_addLStringValue at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  ::routine_addStringValue (inLexique,  var_cas_ioTemplateVariableMap,  GGS_lstring ::constructor_new (inLexique, var_cas_inVariableName, var_cas_inValue.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (95)) COMMA_HERE),  var_cas_inValue.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (95)) COMMA_SOURCE_FILE_AT_LINE (95)) ;
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_addLStringValue\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//                 Implementation of routine "addListValue"                  *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_addListValue (C_Compiler & inLexique,
                                GGS_goilTemplateVariableMap  & var_cas_ioTemplateVariableMap,
                                const GGS_lstring   var_cas_inVariableName,
                                const GGS_goilTemplateFieldMapList   var_cas_inValue COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_addListValue at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  var_cas_ioTemplateVariableMap.modifier_insertKey (inLexique, var_cas_inVariableName, GGS_goilTemplateType::constructor_listType (inLexique COMMA_HERE), GGS_goilTemplateValue::constructor_new (GGS_uint64 (0ULL), GGS_string (""), var_cas_inValue) COMMA_SOURCE_FILE_AT_LINE (105)) ;
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_addListValue\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//              Implementation of routine "addBoolFieldValue"                *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_addBoolFieldValue (C_Compiler & inLexique,
                                GGS_goilTemplateFieldMap  & var_cas_ioTemplateFieldMap,
                                const GGS_lstring   var_cas_inVariableName,
                                const GGS_bool  var_cas_inValue COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_addBoolFieldValue at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  var_cas_ioTemplateFieldMap.modifier_insertKey (inLexique, var_cas_inVariableName, GGS_goilTemplateType::constructor_boolType (inLexique COMMA_HERE), ((var_cas_inValue).isBuiltAndTrue () ? (GGS_uint64 (1ULL)) : (GGS_uint64 (0ULL))), GGS_string (""), GGS_goilTemplateFieldMapList ::constructor_emptyList () COMMA_SOURCE_FILE_AT_LINE (123)) ;
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_addBoolFieldValue\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//            Implementation of routine "addUnsignedFieldValue"              *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_addUnsignedFieldValue (C_Compiler & inLexique,
                                GGS_goilTemplateFieldMap  & var_cas_ioTemplateFieldMap,
                                const GGS_lstring   var_cas_inVariableName,
                                const GGS_uint64   var_cas_inValue COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_addUnsignedFieldValue at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  var_cas_ioTemplateFieldMap.modifier_insertKey (inLexique, var_cas_inVariableName, GGS_goilTemplateType::constructor_unsignedType (inLexique COMMA_HERE), var_cas_inValue, GGS_string (""), GGS_goilTemplateFieldMapList ::constructor_emptyList () COMMA_SOURCE_FILE_AT_LINE (139)) ;
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_addUnsignedFieldValue\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//            Implementation of routine "addLUnsignedFieldValue"             *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_addLUnsignedFieldValue (C_Compiler & inLexique,
                                GGS_goilTemplateFieldMap  & var_cas_ioTemplateFieldMap,
                                const GGS_string  var_cas_inVariableName,
                                const GGS_luint64   var_cas_inValue COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_addLUnsignedFieldValue at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  ::routine_addUnsignedFieldValue (inLexique,  var_cas_ioTemplateFieldMap,  GGS_lstring ::constructor_new (inLexique, var_cas_inVariableName, var_cas_inValue.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (157)) COMMA_HERE),  var_cas_inValue.reader_uint64 (inLexique COMMA_SOURCE_FILE_AT_LINE (158)) COMMA_SOURCE_FILE_AT_LINE (155)) ;
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_addLUnsignedFieldValue\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//             Implementation of routine "addStringFieldValue"               *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_addStringFieldValue (C_Compiler & inLexique,
                                GGS_goilTemplateFieldMap  & var_cas_ioTemplateFieldMap,
                                const GGS_lstring   var_cas_inVariableName,
                                const GGS_string  var_cas_inValue COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_addStringFieldValue at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  var_cas_ioTemplateFieldMap.modifier_insertKey (inLexique, var_cas_inVariableName, GGS_goilTemplateType::constructor_stringType (inLexique COMMA_HERE), GGS_uint64 (0ULL), var_cas_inValue, GGS_goilTemplateFieldMapList ::constructor_emptyList () COMMA_SOURCE_FILE_AT_LINE (168)) ;
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_addStringFieldValue\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//             Implementation of routine "addLStringFieldValue"              *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_addLStringFieldValue (C_Compiler & inLexique,
                                GGS_goilTemplateFieldMap  & var_cas_ioTemplateFieldMap,
                                const GGS_string  var_cas_inVariableName,
                                const GGS_lstring   var_cas_inValue COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_addLStringFieldValue at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  ::routine_addStringFieldValue (inLexique,  var_cas_ioTemplateFieldMap,  GGS_lstring ::constructor_new (inLexique, var_cas_inVariableName, var_cas_inValue.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (186)) COMMA_HERE),  var_cas_inValue.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (187)) COMMA_SOURCE_FILE_AT_LINE (184)) ;
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_addLStringFieldValue\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//              Implementation of routine "addListFieldValue"                *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_addListFieldValue (C_Compiler & inLexique,
                                GGS_goilTemplateFieldMap  & var_cas_ioTemplateFieldMap,
                                const GGS_lstring   var_cas_inVariableName,
                                const GGS_goilTemplateFieldMapList   var_cas_inValue COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_addListFieldValue at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  var_cas_ioTemplateFieldMap.modifier_insertKey (inLexique, var_cas_inVariableName, GGS_goilTemplateType::constructor_listType (inLexique COMMA_HERE), GGS_uint64 (0ULL), GGS_string (""), var_cas_inValue COMMA_SOURCE_FILE_AT_LINE (197)) ;
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_addListFieldValue\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//                 Implementation of function "fullPrefix"                   *
//                                                                           *
//---------------------------------------------------------------------------*

GGS_string function_fullPrefix (C_Compiler & inLexique,
                                const GGS_goilTemplateVariableMap   var_cas_vars,
                                const GGS_lstring   var_cas_prefix COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER function_fullPrefix at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  GGS_string var_cas_full ;
  GGS_string var_cas_stringPrefix = var_cas_prefix.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (211)) ;
  const GGS_bool cond_7211 = (var_cas_stringPrefix).operator_isEqual (GGS_string ("compiler")) ;
  if (cond_7211.isBuiltAndTrue ()) {
    GGS_goilTemplateType var_cas_type ;
    GGS_goilTemplateValue var_cas_value ;
    const GGS_goilTemplateVariableMap  temp_7114 = var_cas_vars ;
    if (temp_7114.isBuilt ()) {
      temp_7114 (HERE)->method_searchKey (inLexique, function_lstringWith (inLexique, GGS_string ("COMPILER") COMMA_SOURCE_FILE_AT_LINE (215)), var_cas_type, var_cas_value COMMA_SOURCE_FILE_AT_LINE (215)) ;
    }
    var_cas_stringPrefix.appendCString ("/") ;
    var_cas_stringPrefix.dotAssign_operation (var_cas_value.reader_mStringValue (inLexique COMMA_SOURCE_FILE_AT_LINE (216))) ;
  }else if (cond_7211.isBuiltAndFalse ()) {
    const GGS_bool cond_7414 = (var_cas_stringPrefix).operator_isEqual (GGS_string ("linker")) ;
    if (cond_7414.isBuiltAndTrue ()) {
      GGS_goilTemplateType var_cas_type ;
      GGS_goilTemplateValue var_cas_value ;
      const GGS_goilTemplateVariableMap  temp_7319 = var_cas_vars ;
      if (temp_7319.isBuilt ()) {
        temp_7319 (HERE)->method_searchKey (inLexique, function_lstringWith (inLexique, GGS_string ("LINKER") COMMA_SOURCE_FILE_AT_LINE (220)), var_cas_type, var_cas_value COMMA_SOURCE_FILE_AT_LINE (220)) ;
      }
      var_cas_stringPrefix.appendCString ("/") ;
      var_cas_stringPrefix.dotAssign_operation (var_cas_value.reader_mStringValue (inLexique COMMA_SOURCE_FILE_AT_LINE (221))) ;
    }else if (cond_7414.isBuiltAndFalse ()) {
      const GGS_bool cond_7621 = (var_cas_stringPrefix).operator_isEqual (GGS_string ("assembler")) ;
      if (cond_7621.isBuiltAndTrue ()) {
        GGS_goilTemplateType var_cas_type ;
        GGS_goilTemplateValue var_cas_value ;
        const GGS_goilTemplateVariableMap  temp_7525 = var_cas_vars ;
        if (temp_7525.isBuilt ()) {
          temp_7525 (HERE)->method_searchKey (inLexique, function_lstringWith (inLexique, GGS_string ("ASSEMBLER") COMMA_SOURCE_FILE_AT_LINE (225)), var_cas_type, var_cas_value COMMA_SOURCE_FILE_AT_LINE (225)) ;
        }
        var_cas_stringPrefix.appendCString ("/") ;
        var_cas_stringPrefix.dotAssign_operation (var_cas_value.reader_mStringValue (inLexique COMMA_SOURCE_FILE_AT_LINE (226))) ;
      }
    }
  }
  var_cas_full = var_cas_stringPrefix ;
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE function_fullPrefix\n") ;
  #endif
  return var_cas_full ;
}

//---------------------------------------------------------------------------*

static GGS_object functionForGenericCall_fullPrefix (C_Compiler & inLexique,
                           const GGS_objectlist & inEffectiveParameterArray,
                           const GGS_location & inErrorLocation
                           COMMA_LOCATION_ARGS) {
  const GGS_goilTemplateVariableMap  arg_0 = GGS_goilTemplateVariableMap ::castFromObject (inLexique, inEffectiveParameterArray.reader_mValueAtIndex (inLexique, GGS_uint (0) COMMA_THERE), inErrorLocation COMMA_THERE) ;
  const GGS_lstring  arg_1 = GGS_lstring ::castFromObject (inLexique, inEffectiveParameterArray.reader_mValueAtIndex (inLexique, GGS_uint (1) COMMA_THERE), inErrorLocation COMMA_THERE) ;
  const GGS_string result = function_fullPrefix (inLexique,
                            arg_0,
                            arg_1
                            COMMA_THERE) ;
  return result.reader_object () ;
}

//---------------------------------------------------------------------------*

static const C_galgas_type_descriptorEX *
kArgumentTypeList_fullPrefix [2] = {& kTypeDescriptor_GGS_goilTemplateVariableMap ,
                              & kTypeDescriptor_GGS_lstring } ;

const C_galgas_function_descriptor
kFunction_descriptor_fullPrefix ("fullPrefix",
                              functionForGenericCall_fullPrefix,
                              & kTypeDescriptor_GGS_string,
                              2,
                              kArgumentTypeList_fullPrefix) ;

//---------------------------------------------------------------------------*
//                                                                           *
//             Implementation of function "displayTypeAndValue"              *
//                                                                           *
//---------------------------------------------------------------------------*

GGS_string function_displayTypeAndValue (C_Compiler & inLexique,
                                const GGS_goilTemplateType  var_cas_inType,
                                const GGS_goilTemplateValue  var_cas_inValue COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER function_displayTypeAndValue at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  GGS_string var_cas_outResult ;
  switch (var_cas_inType.enumValue ()) {
  case GGS_goilTemplateType::enum_boolType:
    {
    var_cas_outResult = (GGS_string ("bool: ")).operator_concat ((((var_cas_inValue.reader_mUnsigned64Value (inLexique COMMA_SOURCE_FILE_AT_LINE (245))).operator_isEqual (GGS_uint64 (1ULL))).isBuiltAndTrue () ? (GGS_string ("yes")) : (GGS_string ("no")))) ;
    }
    break ;
  case GGS_goilTemplateType::enum_unsignedType:
    {
    var_cas_outResult = (GGS_string ("unsigned: ")).operator_concat (var_cas_inValue.reader_mUnsigned64Value (inLexique COMMA_SOURCE_FILE_AT_LINE (247)).reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (247))) ;
    }
    break ;
  case GGS_goilTemplateType::enum_stringType:
    {
    var_cas_outResult = ((GGS_string ("string: '")).operator_concat (var_cas_inValue.reader_mStringValue (inLexique COMMA_SOURCE_FILE_AT_LINE (249)))).operator_concat (GGS_string ("'")) ;
    }
    break ;
  case GGS_goilTemplateType::enum_listType:
    {
    var_cas_outResult = ((((GGS_string ("list, ")).operator_concat (var_cas_inValue.reader_mMapListValue (inLexique COMMA_SOURCE_FILE_AT_LINE (251)).reader_length ().reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (251)))).operator_concat (GGS_string (" element"))).operator_concat ((((var_cas_inValue.reader_mMapListValue (inLexique COMMA_SOURCE_FILE_AT_LINE (251)).reader_length ()).operator_strictSup (GGS_uint (1U))).isBuiltAndTrue () ? (GGS_string ("s")) : (GGS_string (""))))).operator_concat (GGS_string (":")) ;
    {
        GGS_uint var_cas_idx (true, 0) ;
      GGS_goilTemplateFieldMapList::cEnumerator enumerator_8666 (var_cas_inValue.reader_mMapListValue (inLexique COMMA_SOURCE_FILE_AT_LINE (252)), true) ;
      const GGS_goilTemplateFieldMapList::cElement * operand_8666 = NULL ;
      while (((operand_8666 = enumerator_8666.nextObject ()))) {
        macroValidPointer (operand_8666) ;
        var_cas_outResult.appendCString ("\n"
          "  #") ;
        var_cas_outResult.dotAssign_operation (var_cas_idx.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (253))) ;
        var_cas_outResult.appendCString (":") ;
        {
          GGS_goilTemplateFieldMap::cEnumerator enumerator_8769 (operand_8666->mMap, true) ;
          const GGS_goilTemplateFieldMap::cElement * operand_8769 = enumerator_8769.nextObject () ;
          if ((operand_8769 != NULL)) {
            bool _foreach_loop_8769 ;
            do{
              macroValidPointer (operand_8769) ;
              var_cas_outResult.appendCString ("'") ;
              var_cas_outResult.dotAssign_operation (operand_8769->mKey) ;
              var_cas_outResult.appendCString ("' ") ;
              switch (operand_8769->mInfo.mType.enumValue ()) {
              case GGS_goilTemplateType::enum_boolType:
                {
                var_cas_outResult.appendCString ("bool: ") ;
                var_cas_outResult.dotAssign_operation ((((operand_8769->mInfo.mUnsigned64Value).operator_isEqual (GGS_uint64 (1ULL))).isBuiltAndTrue () ? (GGS_string ("yes")) : (GGS_string ("no")))) ;
                }
                break ;
              case GGS_goilTemplateType::enum_unsignedType:
                {
                var_cas_outResult.appendCString ("unsigned: ") ;
                var_cas_outResult.dotAssign_operation (operand_8769->mInfo.mUnsigned64Value.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (260))) ;
                }
                break ;
              case GGS_goilTemplateType::enum_stringType:
                {
                var_cas_outResult.appendCString ("string: '") ;
                var_cas_outResult.dotAssign_operation (operand_8769->mInfo.mStringValue) ;
                var_cas_outResult.appendCString ("'") ;
                }
                break ;
              case GGS_goilTemplateType::enum_listType:
                {
                }
                break ;
              case GGS_goilTemplateType::kNotBuilt:
                break ;
              }
              operand_8769 = enumerator_8769.nextObject () ;
              _foreach_loop_8769 = ((operand_8769 != NULL)) ;
              if (_foreach_loop_8769) {
                var_cas_outResult.appendCString (", ") ;
              }
            }while (_foreach_loop_8769) ;
          }
        }
        var_cas_idx.mValue ++ ;
      }
    }
    }
    break ;
  case GGS_goilTemplateType::kNotBuilt:
    break ;
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE function_displayTypeAndValue\n") ;
  #endif
  return var_cas_outResult ;
}

//---------------------------------------------------------------------------*

static GGS_object functionForGenericCall_displayTypeAndValue (C_Compiler & inLexique,
                           const GGS_objectlist & inEffectiveParameterArray,
                           const GGS_location & inErrorLocation
                           COMMA_LOCATION_ARGS) {
  const GGS_goilTemplateType arg_0 = GGS_goilTemplateType::castFromObject (inLexique, inEffectiveParameterArray.reader_mValueAtIndex (inLexique, GGS_uint (0) COMMA_THERE), inErrorLocation COMMA_THERE) ;
  const GGS_goilTemplateValue arg_1 = GGS_goilTemplateValue::castFromObject (inLexique, inEffectiveParameterArray.reader_mValueAtIndex (inLexique, GGS_uint (1) COMMA_THERE), inErrorLocation COMMA_THERE) ;
  const GGS_string result = function_displayTypeAndValue (inLexique,
                            arg_0,
                            arg_1
                            COMMA_THERE) ;
  return result.reader_object () ;
}

//---------------------------------------------------------------------------*

static const C_galgas_type_descriptorEX *
kArgumentTypeList_displayTypeAndValue [2] = {& kTypeDescriptor_GGS_goilTemplateType,
                              & kTypeDescriptor_GGS_goilTemplateValue} ;

const C_galgas_function_descriptor
kFunction_descriptor_displayTypeAndValue ("displayTypeAndValue",
                              functionForGenericCall_displayTypeAndValue,
                              & kTypeDescriptor_GGS_string,
                              2,
                              kArgumentTypeList_displayTypeAndValue) ;

//---------------------------------------------------------------------------*
//                                                                           *
//          Implementation of routine "displayTemplateVariableMap"           *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_displayTemplateVariableMap (C_Compiler & inLexique,
                                const GGS_goilTemplateVariableMap   var_cas_inTemplateVariableMap COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_displayTemplateVariableMap at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  {
    GGS_goilTemplateVariableMap::cEnumerator enumerator_9462 (var_cas_inTemplateVariableMap, true) ;
    const GGS_goilTemplateVariableMap::cElement * operand_9462 = NULL ;
    while (((operand_9462 = enumerator_9462.nextObject ()))) {
      macroValidPointer (operand_9462) ;
      inLexique.printMessage (((((GGS_string ("'")).operator_concat (operand_9462->mKey)).operator_concat (GGS_string ("' "))).operator_concat (function_displayTypeAndValue (inLexique, operand_9462->mInfo.mType, operand_9462->mInfo.mValue COMMA_SOURCE_FILE_AT_LINE (277)))).operator_concat (GGS_string ("\n")) COMMA_SOURCE_FILE_AT_LINE (277)) ;
    }
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_displayTemplateVariableMap\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//               Implementation of routine "displayPathList"                 *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_displayPathList (C_Compiler & inLexique,
                                const GGS_stringlist   var_cas_pathList COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_displayPathList at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  inLexique.printMessage (GGS_string (" -----------------------------------------\n") COMMA_SOURCE_FILE_AT_LINE (284)) ;
  {
    GGS_stringlist::cEnumerator enumerator_9698 (var_cas_pathList, true) ;
    const GGS_stringlist::cElement * operand_9698 = NULL ;
    while (((operand_9698 = enumerator_9698.nextObject ()))) {
      macroValidPointer (operand_9698) ;
      inLexique.printMessage (((GGS_string (" - '")).operator_concat (operand_9698->mValue)).operator_concat (GGS_string ("'\n")) COMMA_SOURCE_FILE_AT_LINE (286)) ;
    }
  }
  inLexique.printMessage (GGS_string (" -----------------------------------------\n") COMMA_SOURCE_FILE_AT_LINE (288)) ;
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_displayPathList\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//             Implementation of routine "findFileInHierarchy"               *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_findFileInHierarchy (C_Compiler & inLexique,
                                const GGS_string  var_cas_file,
                                const GGS_string  var_cas_rootPath,
                                const GGS_string  var_cas_searchPath,
                                GGS_stringlist  & var_cas_searchedPathList,
                                GGS_bool & var_cas_found,
                                GGS_string & var_cas_fullPath COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_findFileInHierarchy at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  GGS_string var_cas_partialPath = var_cas_searchPath ;
  GGS_uint _variant_10486 = var_cas_searchPath.reader_length () ;
  GGS_bool _condition_10486 (_variant_10486.isBuilt (), true) ;
  while (_condition_10486.isBuiltAndTrue ()) {
    _condition_10486 = ((var_cas_partialPath.reader_length ()).operator_strictSup (GGS_uint (0U))).operator_and ((var_cas_found).operator_not ()) ;
    if (_condition_10486.isBuiltAndTrue ()) {
      if (_variant_10486.uintValue () == 0) {
        inLexique.onTheFlyRunTimeError ("loop variant error" COMMA_SOURCE_FILE_AT_LINE (312)) ;
        _condition_10486 = GGS_bool (false) ;
      }else{
        _variant_10486.decrement_operation (inLexique COMMA_HERE) ;
        const GGS_string var_cas_fullFilePath = ((((var_cas_rootPath).operator_concat (GGS_string ("/"))).operator_concat (var_cas_partialPath)).operator_concat (GGS_string ("/"))).operator_concat (var_cas_file) ;
        var_cas_searchedPathList.addAssign_operation (var_cas_fullFilePath) ;
        var_cas_found = var_cas_fullFilePath.reader_fileExists () ;
        const GGS_bool cond_10398 = var_cas_found ;
        if (cond_10398.isBuiltAndTrue ()) {
          var_cas_fullPath = var_cas_fullFilePath ;
        }else if (cond_10398.isBuiltAndFalse ()) {
          var_cas_partialPath = var_cas_partialPath.reader_stringByDeletingLastPathComponent () ;
        }
      }
    }
  }
  const GGS_bool cond_10716 = (var_cas_found).operator_not () ;
  if (cond_10716.isBuiltAndTrue ()) {
    const GGS_string var_cas_fullFilePath = ((var_cas_rootPath).operator_concat (GGS_string ("/"))).operator_concat (var_cas_file) ;
    var_cas_searchedPathList.addAssign_operation (var_cas_fullFilePath) ;
    var_cas_found = var_cas_fullFilePath.reader_fileExists () ;
    const GGS_bool cond_10706 = var_cas_found ;
    if (cond_10706.isBuiltAndTrue ()) {
      var_cas_fullPath = var_cas_fullFilePath ;
    }
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_findFileInHierarchy\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//           Implementation of routine "findAllFilesInHierarchy"             *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_findAllFilesInHierarchy (C_Compiler & inLexique,
                                const GGS_string  var_cas_file,
                                const GGS_string  var_cas_rootPath,
                                const GGS_string  var_cas_searchPath,
                                GGS_stringlist  & var_cas_searchedPathList,
                                GGS_stringlist  & var_cas_fullPaths COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_findAllFilesInHierarchy at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  GGS_string var_cas_partialPath = var_cas_searchPath ;
  GGS_uint _variant_11483 = var_cas_searchPath.reader_length () ;
  GGS_bool _condition_11483 (_variant_11483.isBuilt (), true) ;
  while (_condition_11483.isBuiltAndTrue ()) {
    _condition_11483 = (var_cas_partialPath.reader_length ()).operator_strictSup (GGS_uint (0U)) ;
    if (_condition_11483.isBuiltAndTrue ()) {
      if (_variant_11483.uintValue () == 0) {
        inLexique.onTheFlyRunTimeError ("loop variant error" COMMA_SOURCE_FILE_AT_LINE (346)) ;
        _condition_11483 = GGS_bool (false) ;
      }else{
        _variant_11483.decrement_operation (inLexique COMMA_HERE) ;
        const GGS_string var_cas_fullFilePath = ((((var_cas_rootPath).operator_concat (GGS_string ("/"))).operator_concat (var_cas_partialPath)).operator_concat (GGS_string ("/"))).operator_concat (var_cas_file) ;
        var_cas_searchedPathList.addAssign_operation (var_cas_fullFilePath) ;
        const GGS_bool cond_11269 = var_cas_fullFilePath.reader_fileExists () ;
        if (cond_11269.isBuiltAndTrue ()) {
          var_cas_fullPaths.addAssign_operation (var_cas_fullFilePath) ;
        }
        GGS_string var_cas_newPartialPath = var_cas_partialPath.reader_stringByDeletingLastPathComponent () ;
        const GGS_bool cond_11428 = (var_cas_newPartialPath).operator_isEqual (var_cas_partialPath) ;
        if (cond_11428.isBuiltAndTrue ()) {
          var_cas_partialPath = GGS_string ("") ;
        }else if (cond_11428.isBuiltAndFalse ()) {
          var_cas_partialPath = var_cas_newPartialPath ;
        }
      }
    }
  }
  const GGS_string var_cas_fullFilePath = ((var_cas_rootPath).operator_concat (GGS_string ("/"))).operator_concat (var_cas_file) ;
  var_cas_searchedPathList.addAssign_operation (var_cas_fullFilePath) ;
  const GGS_bool cond_11656 = var_cas_fullFilePath.reader_fileExists () ;
  if (cond_11656.isBuiltAndTrue ()) {
    var_cas_fullPaths.addAssign_operation (var_cas_fullFilePath) ;
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_findAllFilesInHierarchy\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//              Implementation of routine "findFileInPathList"               *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_findFileInPathList (C_Compiler & inLexique,
                                const GGS_string  var_cas_file,
                                const GGS_stringlist   var_cas_rootPathList,
                                const GGS_string  var_cas_searchPath,
                                GGS_stringlist  & var_cas_searchedPathList,
                                GGS_bool & var_cas_found,
                                GGS_string & var_cas_fullPath COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_findFileInPathList at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  var_cas_searchedPathList = GGS_stringlist ::constructor_emptyList () ;
  var_cas_found = GGS_bool (false) ;
  var_cas_fullPath = GGS_string ("") ;
  {
    GGS_stringlist::cEnumerator enumerator_12030 (var_cas_rootPathList, true) ;
    const GGS_stringlist::cElement * operand_12030 = NULL ;
    while (((operand_12030 = enumerator_12030.nextObject ()))) {
      macroValidPointer (operand_12030) ;
      ::routine_findFileInHierarchy (inLexique,  var_cas_file,  operand_12030->mValue,  var_cas_searchPath,  var_cas_searchedPathList,  var_cas_found,  var_cas_fullPath COMMA_SOURCE_FILE_AT_LINE (369)) ;
    }
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_findFileInPathList\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//            Implementation of routine "findAllFilesInPathList"             *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_findAllFilesInPathList (C_Compiler & inLexique,
                                const GGS_string  var_cas_file,
                                const GGS_stringlist   var_cas_rootPathList,
                                const GGS_string  var_cas_searchPath,
                                GGS_stringlist  & var_cas_searchedPathList,
                                GGS_stringlist  & var_cas_fullPaths COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_findAllFilesInPathList at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  var_cas_searchedPathList = GGS_stringlist ::constructor_emptyList () ;
  var_cas_fullPaths = GGS_stringlist ::constructor_emptyList () ;
  {
    GGS_stringlist::cEnumerator enumerator_12569 (var_cas_rootPathList, true) ;
    const GGS_stringlist::cElement * operand_12569 = NULL ;
    while (((operand_12569 = enumerator_12569.nextObject ()))) {
      macroValidPointer (operand_12569) ;
      ::routine_findAllFilesInHierarchy (inLexique,  var_cas_file,  operand_12569->mValue,  var_cas_searchPath,  var_cas_searchedPathList,  var_cas_fullPaths COMMA_SOURCE_FILE_AT_LINE (393)) ;
    }
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_findAllFilesInPathList\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//            Implementation of routine "goilTemplateInvocation"             *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_goilTemplateInvocation (C_Compiler & inLexique,
                                const GGS_lstring   var_cas_inTemplateName,
                                const GGS_string  var_cas_inPrefix,
                                const GGS_string  var_cas_inPath,
                                const GGS_string  var_cas_inTemplateDirectory,
                                const GGS_bool  var_cas_inErrorIfNotFound,
                                const GGS_goilTemplateVariableMap   var_cas_inTemplateVariableMap,
                                GGS_string & var_cas_ioResultingString,
                                GGS_bool & var_cas_outNoErrorOccured COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_goilTemplateInvocation at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  var_cas_outNoErrorOccured = GGS_bool (true) ;
  const GGS_bool cond_16985 = (GGS_uint ::constructor_errorCount (inLexique COMMA_HERE)).operator_isEqual (GGS_uint (0U)) ;
  if (cond_16985.isBuiltAndTrue ()) {
    const GGS_string var_cas_templateDir = var_cas_inTemplateDirectory ;
    const GGS_bool cond_13519 = (var_cas_templateDir.reader_length ()).operator_isEqual (GGS_uint (0U)) ;
    if (cond_13519.isBuiltAndTrue ()) {
      var_cas_inTemplateName.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("the '--goil-templates' option or the environment variable GOIL_TEMPLATES is required for generating code") COMMA_SOURCE_FILE_AT_LINE (420)) ;
    }else if (cond_13519.isBuiltAndFalse ()) {
      const GGS_bool cond_13678 = (var_cas_templateDir.reader_directoryExists ()).operator_not () ;
      if (cond_13678.isBuiltAndTrue ()) {
        var_cas_inTemplateName.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((GGS_string ("the template path '")).operator_concat (var_cas_templateDir)).operator_concat (GGS_string ("' exists but is not a valid directory path")) COMMA_SOURCE_FILE_AT_LINE (422)) ;
      }else if (cond_13678.isBuiltAndFalse ()) {
        const GGS_string var_cas_targetDir = gOption_goil_5F_options_target_5F_platform.reader_value () ;
        GGS_string var_cas_fullTemplateDir ;
        const GGS_bool cond_13867 = (var_cas_inPrefix).operator_isEqual (GGS_string ("")) ;
        if (cond_13867.isBuiltAndTrue ()) {
          var_cas_fullTemplateDir = var_cas_templateDir ;
        }else if (cond_13867.isBuiltAndFalse ()) {
          var_cas_fullTemplateDir = ((var_cas_templateDir).operator_concat (GGS_string ("/"))).operator_concat (var_cas_inPrefix) ;
        }
        const GGS_bool cond_14084 = (var_cas_targetDir.reader_length ()).operator_isEqual (GGS_uint (0U)) ;
        if (cond_14084.isBuiltAndTrue ()) {
          var_cas_inTemplateName.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("the '--target' (or '-t') option is required for generating code") COMMA_SOURCE_FILE_AT_LINE (432)) ;
        }else if (cond_14084.isBuiltAndFalse ()) {
          const GGS_bool cond_14549 = (var_cas_fullTemplateDir.reader_directoryExists ()).operator_not () ;
          if (cond_14549.isBuiltAndTrue ()) {
            var_cas_inTemplateName.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((GGS_string ("internal. no '")).operator_concat (var_cas_fullTemplateDir)).operator_concat (GGS_string ("' template found")) COMMA_SOURCE_FILE_AT_LINE (439)) ;
          }else if (cond_14549.isBuiltAndFalse ()) {
            GGS_stringlist  var_cas_pathList = GGS_stringlist ::constructor_emptyList () ;
            GGS_bool var_cas_found = GGS_bool (false) ;
            const GGS_bool cond_15300 = (var_cas_inPath).operator_isNotEqual (GGS_string ("")) ;
            if (cond_15300.isBuiltAndTrue ()) {
              GGS_string var_cas_userTemplateDir ;
              const GGS_bool cond_14772 = (var_cas_inPrefix).operator_isEqual (GGS_string ("")) ;
              if (cond_14772.isBuiltAndTrue ()) {
                var_cas_userTemplateDir = var_cas_inPath ;
              }else if (cond_14772.isBuiltAndFalse ()) {
                var_cas_userTemplateDir = ((var_cas_inPath).operator_concat (GGS_string ("/"))).operator_concat (var_cas_inPrefix) ;
              }
              const GGS_string var_cas_fullTemplatePath = (((var_cas_userTemplateDir).operator_concat (GGS_string ("/"))).operator_concat (var_cas_inTemplateName)).operator_concat (GGS_string (".goilTemplate")) ;
              var_cas_pathList.addAssign_operation (var_cas_fullTemplatePath) ;
              var_cas_found = var_cas_fullTemplatePath.reader_fileExists () ;
              const GGS_bool cond_15284 = var_cas_found ;
              if (cond_15284.isBuiltAndTrue ()) {
                const GGS_string _depExtension = GGS_string ("") ;
                const GGS_string _depPath = GGS_string ("") ;
                if (_depExtension.isBuilt () && _depPath.isBuilt ()) {
                  goil_template_grammar::_performSourceFileParsing_ (inLexique,
                                                _depExtension.string (),
                                                _depPath.string (),
                                                NULL,
                                                GGS_lstring ::constructor_new (inLexique, var_cas_fullTemplatePath, GGS_location (inLexique) COMMA_HERE),
                                                var_cas_inPrefix,
                                                var_cas_inPath,
                                                var_cas_inTemplateDirectory,
                                                var_cas_inTemplateVariableMap,
                                                var_cas_ioResultingString
                                                COMMA_SOURCE_FILE_AT_LINE (454)) ;
                }
              }
            }
            GGS_string var_cas_targetTemplatePartialPath = var_cas_targetDir ;
            GGS_uint _variant_16079 = var_cas_targetDir.reader_length () ;
            GGS_bool _condition_16079 (_variant_16079.isBuilt (), true) ;
            while (_condition_16079.isBuiltAndTrue ()) {
              _condition_16079 = ((var_cas_targetTemplatePartialPath.reader_length ()).operator_strictSup (GGS_uint (0U))).operator_and ((var_cas_found).operator_not ()) ;
              if (_condition_16079.isBuiltAndTrue ()) {
                if (_variant_16079.uintValue () == 0) {
                  inLexique.onTheFlyRunTimeError ("loop variant error" COMMA_SOURCE_FILE_AT_LINE (470)) ;
                  _condition_16079 = GGS_bool (false) ;
                }else{
                  _variant_16079.decrement_operation (inLexique COMMA_HERE) ;
                  const GGS_string var_cas_fullTemplatePath = (((((var_cas_fullTemplateDir).operator_concat (GGS_string ("/"))).operator_concat (var_cas_targetTemplatePartialPath)).operator_concat (GGS_string ("/"))).operator_concat (var_cas_inTemplateName)).operator_concat (GGS_string (".goilTemplate")) ;
                  var_cas_pathList.addAssign_operation (var_cas_fullTemplatePath) ;
                  var_cas_found = var_cas_fullTemplatePath.reader_fileExists () ;
                  const GGS_bool cond_15945 = var_cas_found ;
                  if (cond_15945.isBuiltAndTrue ()) {
                    const GGS_string _depExtension = GGS_string ("") ;
                    const GGS_string _depPath = GGS_string ("") ;
                    if (_depExtension.isBuilt () && _depPath.isBuilt ()) {
                      goil_template_grammar::_performSourceFileParsing_ (inLexique,
                                                    _depExtension.string (),
                                                    _depPath.string (),
                                                    NULL,
                                                    GGS_lstring ::constructor_new (inLexique, var_cas_fullTemplatePath, GGS_location (inLexique) COMMA_HERE),
                                                    var_cas_inPrefix,
                                                    var_cas_inPath,
                                                    var_cas_inTemplateDirectory,
                                                    var_cas_inTemplateVariableMap,
                                                    var_cas_ioResultingString
                                                    COMMA_SOURCE_FILE_AT_LINE (466)) ;
                    }
                  }else if (cond_15945.isBuiltAndFalse ()) {
                    var_cas_targetTemplatePartialPath = var_cas_targetTemplatePartialPath.reader_stringByDeletingLastPathComponent () ;
                  }
                }
              }
            }
            const GGS_bool cond_16565 = (var_cas_found).operator_not () ;
            if (cond_16565.isBuiltAndTrue ()) {
              const GGS_string var_cas_fullTemplatePath = (((var_cas_fullTemplateDir).operator_concat (GGS_string ("/"))).operator_concat (var_cas_inTemplateName)).operator_concat (GGS_string (".goilTemplate")) ;
              var_cas_pathList.addAssign_operation (var_cas_fullTemplatePath) ;
              var_cas_found = var_cas_fullTemplatePath.reader_fileExists () ;
              const GGS_bool cond_16549 = var_cas_found ;
              if (cond_16549.isBuiltAndTrue ()) {
                const GGS_string _depExtension = GGS_string ("") ;
                const GGS_string _depPath = GGS_string ("") ;
                if (_depExtension.isBuilt () && _depPath.isBuilt ()) {
                  goil_template_grammar::_performSourceFileParsing_ (inLexique,
                                                _depExtension.string (),
                                                _depPath.string (),
                                                NULL,
                                                GGS_lstring ::constructor_new (inLexique, var_cas_fullTemplatePath, GGS_location (inLexique) COMMA_HERE),
                                                var_cas_inPrefix,
                                                var_cas_inPath,
                                                var_cas_inTemplateDirectory,
                                                var_cas_inTemplateVariableMap,
                                                var_cas_ioResultingString
                                                COMMA_SOURCE_FILE_AT_LINE (477)) ;
                }
              }
            }
            const GGS_bool cond_16949 = (var_cas_found).operator_not () ;
            if (cond_16949.isBuiltAndTrue ()) {
              var_cas_outNoErrorOccured = GGS_bool (false) ;
              const GGS_bool cond_16933 = var_cas_inErrorIfNotFound ;
              if (cond_16933.isBuiltAndTrue ()) {
                GGS_string var_cas_m = ((GGS_string ("cannot find a valid path for the '")).operator_concat (var_cas_inTemplateName)).operator_concat (GGS_string ("' template; I have tried:")) ;
                {
                  GGS_stringlist::cEnumerator enumerator_16808 (var_cas_pathList, true) ;
                  const GGS_stringlist::cElement * operand_16808 = NULL ;
                  while (((operand_16808 = enumerator_16808.nextObject ()))) {
                    macroValidPointer (operand_16808) ;
                    var_cas_m.appendCString ("\n"
                      "  - '") ;
                    var_cas_m.dotAssign_operation (operand_16808->mValue) ;
                    var_cas_m.appendCString ("';") ;
                  }
                }
                var_cas_inTemplateName.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, var_cas_m COMMA_SOURCE_FILE_AT_LINE (488)) ;
              }
            }
          }
        }
      }
    }
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_goilTemplateInvocation\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//                      Prologue and epilogue actions                        *
//                                                                           *
//---------------------------------------------------------------------------*

static void epilogueRoutineFor_goil_template_invocation (void) {
  gCachedResultForOnceFunction_allowedFunctions.drop () ;
}

//---------------------------------------------------------------------------*

C_PrologueEpilogue prologueEpilogueObjectFor_goil_template_invocation (NULL,
                                   epilogueRoutineFor_goil_template_invocation) ;

//---------------------------------------------------------------------------*

