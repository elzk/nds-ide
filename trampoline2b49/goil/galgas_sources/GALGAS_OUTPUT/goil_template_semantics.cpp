//---------------------------------------------------------------------------*
//                                                                           *
//                    File 'goil_template_semantics.cpp'                     *
//                        Generated by version 1.9.9                         *
//                     january 28th, 2010, at 16h9'26"                       *
//                                                                           *
//---------------------------------------------------------------------------*

//--- START OF USER ZONE 1


//--- END OF USER ZONE 1

//---------------------------------------------------------------------------*

#include "version_libpm.h"
#if LIBPM_VERSION != 647
  #error "This file has been compiled with a version of GALGAS different than the version of libpm"
#endif

//---------------------------------------------------------------------------*

#include <typeinfo>
#include "utilities/MF_MemoryControl.h"
#include "files/C_TextFileWrite.h"
#include "galgas/C_galgas_CLI_Options.h"
#include "goil_template_semantics.h"

//---------------------------------------------------------------------------*

#ifndef DO_NOT_GENERATE_CHECKINGS
  #define SOURCE_FILE_AT_LINE(line) "template_semantics.ggs", line
  #define COMMA_SOURCE_FILE_AT_LINE(line) , SOURCE_FILE_AT_LINE(line)
#else
  #define SOURCE_FILE_AT_LINE(line) 
  #define COMMA_SOURCE_FILE_AT_LINE(line) 
#endif


//--- START OF USER ZONE 2


//--- END OF USER ZONE 2

//---------------------------------------------------------------------------*
//                                                                           *
//                 Class for 'goilTemplateType' Enumeration                  *
//                                                                           *
//---------------------------------------------------------------------------*

const C_galgas_type_descriptorEX kTypeDescriptor_GGS_goilTemplateType ("goilTemplateType", false, NULL) ;

//---------------------------------------------------------------------------*

bool GGS_goilTemplateType::
isBuilt (void) const {
  return mValue > kNotBuilt ;
}

//---------------------------------------------------------------------------*

GGS_bool GGS_goilTemplateType::
operator_isEqual (const GGS_goilTemplateType inOperand) const {
  return GGS_bool (isBuilt () && inOperand.isBuilt (),
                   mValue == inOperand.mValue) ;
}

//---------------------------------------------------------------------------*

GGS_bool GGS_goilTemplateType::
operator_isNotEqual (const GGS_goilTemplateType inOperand) const {
  return GGS_bool (isBuilt () && inOperand.isBuilt (),
                   mValue != inOperand.mValue) ;
}

//---------------------------------------------------------------------------*

GGS_bool GGS_goilTemplateType::
operator_infOrEqual (const GGS_goilTemplateType inOperand) const {
  return GGS_bool (isBuilt () && inOperand.isBuilt (),
                   mValue <= inOperand.mValue) ;
}

//---------------------------------------------------------------------------*

GGS_bool GGS_goilTemplateType::
operator_supOrEqual (const GGS_goilTemplateType inOperand) const {
  return GGS_bool (isBuilt () && inOperand.isBuilt (),
                   mValue >= inOperand.mValue) ;
}

//---------------------------------------------------------------------------*

GGS_bool GGS_goilTemplateType::
operator_strictInf (const GGS_goilTemplateType inOperand) const {
  return GGS_bool (isBuilt () && inOperand.isBuilt (),
                   mValue < inOperand.mValue) ;
}

//---------------------------------------------------------------------------*

GGS_bool GGS_goilTemplateType::
operator_strictSup (const GGS_goilTemplateType inOperand) const {
  return GGS_bool (isBuilt () && inOperand.isBuilt (),
                   mValue > inOperand.mValue) ;
}

//---------------------------------------------------------------------------*

GGS_string GGS_goilTemplateType::
reader_messageGoilTemplateType (C_Compiler & /* inLexique */
                       COMMA_UNUSED_LOCATION_ARGS) const {
  const char * kMessages [5] = {"",
    "bool",
    "list",
    "string",
    "unsigned"
  } ;
  return GGS_string (mValue > 0, kMessages [mValue]) ;
}

//---------------------------------------------------------------------------*

GGS_string GGS_goilTemplateType::
reader_description (const PMSInt32 /* inIndentation */) const {
  C_String s ;
  s << "<enum @goilTemplateType" ;
  switch (mValue) {
  case enum_boolType:
    s << " boolType>" ;
    break ;
  case enum_listType:
    s << " listType>" ;
    break ;
  case enum_stringType:
    s << " stringType>" ;
    break ;
  case enum_unsignedType:
    s << " unsignedType>" ;
    break ;
  case kNotBuilt:
    s << " (not built)>" ;
    break ;
  }
  return GGS_string (true, s) ;
}

//---------------------------------------------------------------------------*

GGS_object GGS_goilTemplateType::reader_object (void) const {
  GGS_object result ;
  if (isBuilt ()) {
    GGS_goilTemplateType * p = NULL ;
    macroMyNew (p, GGS_goilTemplateType (*this)) ;
    result = GGS_object (p) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_goilTemplateType GGS_goilTemplateType::castFromObject (C_Compiler & inLexique,
                                   const GGS_object & inObject,
                                   const GGS_location & inErrorLocation
                                   COMMA_LOCATION_ARGS) {
  GGS_goilTemplateType result ;
  const GGS__root * embeddedObject = inObject.embeddedObject () ;
  if (NULL != embeddedObject) {
    const GGS_goilTemplateType * p = dynamic_cast <const GGS_goilTemplateType *> (embeddedObject) ;
    if (NULL != p) {
      result = * p ;
    }else{
      castFromObjectErrorSignaling (inLexique, inErrorLocation, & kTypeDescriptor_GGS_goilTemplateType, embeddedObject COMMA_THERE) ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*

const C_galgas_type_descriptorEX * GGS_goilTemplateType::typeDescriptor (void) const {
  return & kTypeDescriptor_GGS_goilTemplateType ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                 Element of list '@goilTemplateTypeList'                   *
//                                                                           *
//---------------------------------------------------------------------------*

elementOf_GGS_goilTemplateTypeList::
elementOf_GGS_goilTemplateTypeList (const GGS_goilTemplateType& argument_0
                                COMMA_LOCATION_ARGS) :
AC_galgas_list::cListElement (THERE),
mType (argument_0) {
}

//---------------------------------------------------------------------------*

bool elementOf_GGS_goilTemplateTypeList::
isEqualToObject (const cListElement * inOperand) const {
  bool equal = inOperand == this ;
  if (! equal) {
    const elementOf_GGS_goilTemplateTypeList * ptr = dynamic_cast <const elementOf_GGS_goilTemplateTypeList *> (inOperand) ;
    macroValidPointer (ptr) ;
    equal = mType.operator_isEqual (ptr->mType).boolValue () ;
  }
  return equal ;
}

//---------------------------------------------------------------------------*

void elementOf_GGS_goilTemplateTypeList::
appendForDescription (C_String & ioString,
                      const PMSInt32 inIndentation) const {
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "|-" ;
  ioString << mType.reader_description (inIndentation) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                       List '@goilTemplateTypeList'                        *
//                                                                           *
//---------------------------------------------------------------------------*

const C_galgas_type_descriptorEX kTypeDescriptor_GGS_goilTemplateTypeList ("goilTemplateTypeList", false, NULL) ;

//---------------------------------------------------------------------------*

void GGS_goilTemplateTypeList::
internalAppendValues (const GGS_goilTemplateType& argument_0
                    COMMA_LOCATION_ARGS) {
  cElement * nouvelElement = (cElement *) NULL ;
  macroMyNew (nouvelElement, cElement (argument_0
                                COMMA_THERE)) ;
  _internalAppendItem (nouvelElement) ;
}

//---------------------------------------------------------------------------*

void GGS_goilTemplateTypeList::
internalPrependValues (const GGS_goilTemplateType& argument_0
                    COMMA_LOCATION_ARGS) {
  cElement * nouvelElement = (cElement *) NULL ;
  macroMyNew (nouvelElement, cElement (argument_0
                                COMMA_THERE)) ;
  _internalPrependItem (nouvelElement) ;
}

//---------------------------------------------------------------------------*

void GGS_goilTemplateTypeList::
addAssign_operation (const GGS_goilTemplateType& argument_0) {
  if (isBuilt ()&& argument_0.isBuilt ()) {
    insulateList () ;
    internalAppendValues (argument_0
                                COMMA_HERE) ;
  }
}

//---------------------------------------------------------------------------*

GGS_goilTemplateTypeList GGS_goilTemplateTypeList::
operator_concat (const GGS_goilTemplateTypeList & inOperand) const {
  GGS_goilTemplateTypeList result = * this ;
  result.dotAssign_operation (inOperand) ;
  return result ;
}

//---------------------------------------------------------------------------*

void GGS_goilTemplateTypeList::
dotAssign_operation (const GGS_goilTemplateTypeList inOperand) {
  if (isBuilt () && inOperand.isBuilt ()) {
    if (count () == 0) {
      * this = inOperand ;
    }else{
      if (inOperand.count () > 0) {
        insulateList () ;
        elementOf_GGS_goilTemplateTypeList * p = inOperand.firstObject () ;
        while (p != NULL) {
          macroValidPointer (p) ;
          GGS_goilTemplateType p_0 = p->mType ;
          internalAppendValues (p_0 COMMA_HERE) ;
          p = p->nextObject () ;
        }
      }
    }
  }
}

//---------------------------------------------------------------------------*

void GGS_goilTemplateTypeList::
modifier_prependValue (C_Compiler & /* inLexique */,
                     const GGS_goilTemplateType& argument_0
                     COMMA_UNUSED_LOCATION_ARGS) {
  if (isBuilt ()) {
    insulateList () ;
    internalPrependValues (argument_0
                                COMMA_HERE) ;
  }
}

//---------------------------------------------------------------------------*

void GGS_goilTemplateTypeList::
insulateList (void) {
  if (_shared ()) {
    cElement * ptr = firstObject () ;
    alloc () ;
    while (ptr != NULL) {
      macroValidPointer (ptr) ;
      internalAppendValues (ptr->mType
                                COMMA_HERE) ;
      ptr = ptr->nextObject () ;
    }
  }
}

//---------------------------------------------------------------------------*

GGS_goilTemplateTypeList  GGS_goilTemplateTypeList::
constructor_emptyList (void) {
  GGS_goilTemplateTypeList result ;
  result.alloc () ;
  return result ;
}

//---------------------------------------------------------------------------*

GGS_goilTemplateTypeList  GGS_goilTemplateTypeList::
constructor_listWithValue (const GGS_goilTemplateType& argument_0) {
  GGS_goilTemplateTypeList result ;
  result.alloc () ;
  result.addAssign_operation (argument_0) ;
  return result ;
}

//---------------------------------------------------------------------------*

void GGS_goilTemplateTypeList::
internalSubListWithRange (GGS_goilTemplateTypeList & ioList,
                          const PMSInt32 inFirstIndex,
                          const PMSInt32 inCount) const {
  ioList.alloc () ;
  if (inCount > 0) {
    cElement * ptr = firstObject () ;
    for (PMSInt32 i=0 ; i<inFirstIndex ; i++) {
      macroValidPointer (ptr) ;
      ptr = ptr->nextObject () ;
    }
    for (PMSInt32 i=0 ; i<inCount ; i++) {
      macroValidPointer (ptr) ;
      ioList.addAssign_operation (ptr->mType) ;
      ptr = ptr->nextObject () ;
    }
  }
}

//---------------------------------------------------------------------------*

GGS_goilTemplateTypeList GGS_goilTemplateTypeList::
reader_subListWithRange (C_Compiler & inLexique,
                         const GGS_uint & inFirstIndex,
                         const GGS_uint & inCount
                         COMMA_LOCATION_ARGS) const {
  GGS_goilTemplateTypeList result ;
  if (isBuilt () && inFirstIndex.isBuilt () && inCount.isBuilt ()) {
    const PMSInt32 firstIndex = (PMSInt32) inFirstIndex.uintValue () ;
    const PMSInt32 rangeCount = (PMSInt32) inCount.uintValue () ;
    if ((firstIndex + rangeCount) > count ()) {
      inLexique.onTheFlyRunTimeError ("'subListWithRange' method invoked with upper bound greater than list object count" COMMA_THERE) ;
    }else{
      internalSubListWithRange (result, firstIndex, rangeCount) ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_goilTemplateTypeList GGS_goilTemplateTypeList::
reader_subListFromIndex (C_Compiler & inLexique,
                         const GGS_uint & inIndex
                         COMMA_LOCATION_ARGS) const {
  GGS_goilTemplateTypeList result ;
  if (isBuilt () && inIndex.isBuilt ()) {
    const PMSInt32 startIndex = (PMSInt32) inIndex.uintValue () ;
    if (startIndex > count ()) {
      inLexique.onTheFlyRunTimeError ("'subListFromIndex' method invoked with start index greater than list object count" COMMA_THERE) ;
    }else{
      internalSubListWithRange (result, startIndex, count () - startIndex) ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_string GGS_goilTemplateTypeList::
reader_description (const PMSInt32 inIndentation) const {
  return performDescription ("@goilTemplateTypeList", inIndentation) ;
}

//---------------------------------------------------------------------------*

void GGS_goilTemplateTypeList::
method_first (C_Compiler & inLexique,
              GGS_goilTemplateType& _out_0
              COMMA_LOCATION_ARGS) const {
  cElement * ptr = NULL ;
  if (isBuilt ()) {
    ptr = firstObject () ;
    if (ptr == NULL) {
      inLexique.onTheFlyRunTimeError ("'first' method invoked on an empty list" COMMA_THERE) ;
    }
  }
  if (ptr != NULL) {
    _out_0 = ptr->mType ;
  }else{
    _out_0.drop () ;
  }
}

//---------------------------------------------------------------------------*

void GGS_goilTemplateTypeList::
method_last (C_Compiler & inLexique,
             GGS_goilTemplateType& _out_0
             COMMA_LOCATION_ARGS) const {
  cElement * ptr = NULL ;
  if (isBuilt ()) {
    ptr = lastObject () ;
    if (ptr == NULL) {
      inLexique.onTheFlyRunTimeError ("'last' method invoked on an empty list" COMMA_THERE) ;
    }
  }
  if (ptr != NULL) {
    _out_0 = ptr->mType ;
  }else{
    _out_0.drop () ;
  }
}

//---------------------------------------------------------------------------*

void GGS_goilTemplateTypeList::
modifier_popFirst (C_Compiler & inLexique,
                 GGS_goilTemplateType& _out_0
                 COMMA_LOCATION_ARGS) {
  cElement * ptr = NULL ;
  if (isBuilt ()) {
    ptr = firstObject () ;
    if (ptr == NULL) {
      inLexique.onTheFlyRunTimeError ("'popFirst' modifier invoked on an empty list" COMMA_THERE) ;
    }
  }
  if (ptr != NULL) {
    _out_0 = ptr->mType ;
    insulateList () ;
    _internalRemoveFirst () ;
  }else{
    _out_0.drop () ;
  }
}

//---------------------------------------------------------------------------*

void GGS_goilTemplateTypeList::
modifier_popLast (C_Compiler & inLexique,
                GGS_goilTemplateType& _out_0
                COMMA_LOCATION_ARGS) {
  cElement * ptr = NULL ;
  if (isBuilt ()) {
    ptr = lastObject () ;
    if (ptr == NULL) {
      inLexique.onTheFlyRunTimeError ("'popLast' modifier invoked on an empty list" COMMA_THERE) ;
    }
  }
  if (ptr != NULL) {
    _out_0 = ptr->mType ;
    insulateList () ;
    _internalRemoveLast () ;
  }else{
    _out_0.drop () ;
  }
}

//---------------------------------------------------------------------------*

GGS_goilTemplateType GGS_goilTemplateTypeList::
reader_mTypeAtIndex (C_Compiler & inLexique, const GGS_uint & inIndex COMMA_LOCATION_ARGS) const {
  GGS_goilTemplateType result ;
  if (isBuilt () && inIndex.isBuilt ()) {
    cElement * object = (cElement *) objectAtIndex (inLexique, inIndex.uintValue () COMMA_THERE) ;
    if (object != NULL) {
      result = object->mType ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*

void GGS_goilTemplateTypeList::
modifier_setMTypeAtIndex (C_Compiler & inLexique,
                              const GGS_goilTemplateType & inObject,
                              const GGS_uint & inIndex
                              COMMA_LOCATION_ARGS) const {
  if (isBuilt () && inIndex.isBuilt ()) {
    cElement * object = (cElement *) objectAtIndex (inLexique, inIndex.uintValue () COMMA_THERE) ;
    if (object != NULL) {
      object->mType = inObject ;
    }
  }
}

//---------------------------------------------------------------------------*

/* const */ GGS_goilTemplateType & GGS_goilTemplateTypeList::cEnumerator::_mType (LOCATION_ARGS) const {
  macroValidPointerThere (mCurrentEnumeratedObject) ;
  return ((/* const */ cElement *) mCurrentEnumeratedObject)->mType ;
}

//---------------------------------------------------------------------------*

GGS_object GGS_goilTemplateTypeList::reader_object (void) const {
  GGS_object result ;
  if (isBuilt ()) {
    GGS_goilTemplateTypeList * p = NULL ;
    macroMyNew (p, GGS_goilTemplateTypeList (*this)) ;
    result = GGS_object (p) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_goilTemplateTypeList GGS_goilTemplateTypeList::castFromObject (C_Compiler & inLexique,
                                   const GGS_object & inObject,
                                   const GGS_location & inErrorLocation
                                   COMMA_LOCATION_ARGS) {
  GGS_goilTemplateTypeList result ;
  const GGS__root * embeddedObject = inObject.embeddedObject () ;
  if (NULL != embeddedObject) {
    const GGS_goilTemplateTypeList * p = dynamic_cast <const GGS_goilTemplateTypeList *> (embeddedObject) ;
    if (NULL != p) {
      result = * p ;
    }else{
      castFromObjectErrorSignaling (inLexique, inErrorLocation, & kTypeDescriptor_GGS_goilTemplateTypeList, embeddedObject COMMA_THERE) ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*

const C_galgas_type_descriptorEX * GGS_goilTemplateTypeList::typeDescriptor (void) const {
  return & kTypeDescriptor_GGS_goilTemplateTypeList ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                      class 'e_goilTemplateFieldMap'                       *
//                                                                           *
//---------------------------------------------------------------------------*

e_goilTemplateFieldMap::e_goilTemplateFieldMap (void) :
mType (),
mUnsigned64Value (),
mStringValue (),
mListValue () {
}

//---------------------------------------------------------------------------*
//                                                                           *
//                    class map '@goilTemplateFieldMap'                      *
//                                                                           *
//---------------------------------------------------------------------------*

const C_galgas_type_descriptorEX kTypeDescriptor_GGS_goilTemplateFieldMap ("goilTemplateFieldMap", false, NULL) ;

//---------------------------------------------------------------------------*

elementOf_GGS_goilTemplateFieldMap::
elementOf_GGS_goilTemplateFieldMap (const GGS_lstring & inKey,
              const PMSInt32 inIndex,
              const e_goilTemplateFieldMap & inInfo) :
AC_galgas_map_element (inKey, inIndex),
mInfo (inInfo) {
}

//---------------------------------------------------------------------------*

void elementOf_GGS_goilTemplateFieldMap::
appendForMapDescription (const PMSInt32 inElementIndex,
                         C_String & ioString,
                         const PMSInt32 inIndentation) const {
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "|-key " ;
  ioString.appendSigned (inElementIndex) ;
  ioString << ":" << mKey.reader_description (inIndentation + 1) ;
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "|-value " ;
  ioString.appendSigned (inElementIndex) ;
  ioString << ":" << mInfo.mType.reader_description (inIndentation + 1) ;
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "|-value " ;
  ioString.appendSigned (inElementIndex) ;
  ioString << ":" << mInfo.mUnsigned64Value.reader_description (inIndentation + 1) ;
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "|-value " ;
  ioString.appendSigned (inElementIndex) ;
  ioString << ":" << mInfo.mStringValue.reader_description (inIndentation + 1) ;
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "|-value " ;
  ioString.appendSigned (inElementIndex) ;
  ioString << ":" << mInfo.mListValue.reader_description (inIndentation + 1) ;
}

//---------------------------------------------------------------------------*

bool elementOf_GGS_goilTemplateFieldMap::
isEqualToMapElement (const AC_galgas_map_element * inOperand) const {
  const elementOf_GGS_goilTemplateFieldMap * ptr = dynamic_cast <const elementOf_GGS_goilTemplateFieldMap *> (inOperand) ;
  macroValidPointer (ptr) ;
  return (mInfo.mType.operator_isEqual (ptr->mInfo.mType)).boolValue ()
           && (mInfo.mUnsigned64Value.operator_isEqual (ptr->mInfo.mUnsigned64Value)).boolValue ()
           && (mInfo.mStringValue.operator_isEqual (ptr->mInfo.mStringValue)).boolValue ()
           && (mInfo.mListValue.operator_isEqual (ptr->mInfo.mListValue)).boolValue () ;
}

//---------------------------------------------------------------------------*

AC_galgas_map_element * GGS_goilTemplateFieldMap::
new_element (const GGS_lstring & inKey, void * inInfo) {
  MF_Assert (reinterpret_cast <e_goilTemplateFieldMap *> (inInfo) != NULL, "Dynamic cast error", 0, 0) ;
  AC_galgas_map_element * p = NULL ;
  e_goilTemplateFieldMap * info = (e_goilTemplateFieldMap *) inInfo ;
  macroMyNew (p, cElement (inKey, nextIndex (), * info)) ;
  return p ;
}

//---------------------------------------------------------------------------*

void GGS_goilTemplateFieldMap::
assignInfo (AC_galgas_map_element * inPtr, void * inInfo) {
  MF_Assert (reinterpret_cast <cElement *> (inPtr) != NULL, "Dynamic cast error", 0, 0) ;
  MF_Assert (reinterpret_cast <e_goilTemplateFieldMap *> (inInfo) != NULL, "Dynamic cast error", 0, 0) ;
  cElement * p = (cElement *) inPtr ;
  e_goilTemplateFieldMap * info = (e_goilTemplateFieldMap *) inInfo ;
  p->mInfo = * info ;
}

//---------------------------------------------------------------------------*

GGS_goilTemplateFieldMap GGS_goilTemplateFieldMap::
constructor_emptyMap (C_Compiler & /* inLexique */ COMMA_UNUSED_LOCATION_ARGS) {
  GGS_goilTemplateFieldMap result ;
  macroMyNew (result.mSharedMapRoot, cMapRoot) ;
  return result ;
}

//---------------------------------------------------------------------------*

void GGS_goilTemplateFieldMap::
enterIndex (const GGS_lstring & inKey,
            AC_galgas_index_core & outIndex) {
  e_goilTemplateFieldMap info  ;
  internalEnterIndex (inKey,
                      (void *) & info,
                      outIndex) ;
}

//---------------------------------------------------------------------------*

GGS_bool GGS_goilTemplateFieldMap::
operator_isEqual (const GGS_goilTemplateFieldMap & inOperand) const {
  return GGS_bool (isBuilt () && inOperand.isBuilt (), isEqualToMap (inOperand)) ;
}

//---------------------------------------------------------------------------*

GGS_bool GGS_goilTemplateFieldMap::
operator_isNotEqual (const GGS_goilTemplateFieldMap & inOperand) const {
  return GGS_bool (isBuilt () && inOperand.isBuilt (), ! isEqualToMap (inOperand)) ;
}

//---------------------------------------------------------------------------*

void GGS_goilTemplateFieldMap::
internalInsertForDuplication (AC_galgas_map_element * inPtr) {
  MF_Assert (reinterpret_cast <cElement *> (inPtr) != NULL, "Dynamic cast error", 0, 0) ;
  cElement * p = (cElement *) inPtr ;
  PMSInt32 attributeIndex = -1 ; // Unused here
  GGS_location existingKeyLocation ; // Unused here
  internalInsert (p->mKey, (void *) & p->mInfo, attributeIndex, existingKeyLocation) ;
}

//---------------------------------------------------------------------------*

void GGS_goilTemplateFieldMap::
insertElement (C_Compiler & inLexique,
                const utf32 * inErrorMessage,
                const GGS_lstring & inKey,
                const GGS_goilTemplateType& inParameter0,
                const GGS_uint64 & inParameter1,
                const GGS_string& inParameter2,
                const GGS_goilTemplateFieldMapList & inParameter3,
                GGS_luint * outIndex
                COMMA_LOCATION_ARGS) {
  PMSInt32 elementID = - 1 ;
  if (isBuilt ()
   && inParameter0.isBuilt ()
   && inParameter1.isBuilt ()
   && inParameter2.isBuilt ()
   && inParameter3.isBuilt ()
   && inKey.isBuilt ()) {
    insulateMap () ;
    e_goilTemplateFieldMap info  ;
    info.mType = inParameter0 ;
    info.mUnsigned64Value = inParameter1 ;
    info.mStringValue = inParameter2 ;
    info.mListValue = inParameter3 ;
    GGS_location existingKeyLocation ;
    internalInsert (inKey, (void *) & info, elementID, existingKeyLocation) ;
    if (elementID < 0) {
      emitInsertMapSemanticErrorMessage (inLexique, inKey, inErrorMessage, existingKeyLocation COMMA_THERE) ;
    }
  }
  if (outIndex != NULL) {
    * outIndex = GGS_luint (GGS_uint (elementID >= 0, (PMUInt32) elementID), inKey) ;
  }
}

//---------------------------------------------------------------------------*

void GGS_goilTemplateFieldMap::
searchElement (C_Compiler & inLexique,
               const utf32 * inErrorMessage,
               const GGS_lstring & inKey,
               GGS_goilTemplateType  & outParameter0,
               GGS_uint64   & outParameter1,
               GGS_string  & outParameter2,
               GGS_goilTemplateFieldMapList   & outParameter3,
               GGS_luint * outIndex
               COMMA_LOCATION_ARGS) const {
  cElement * node = NULL  ;
  if (isBuilt () && inKey.isBuilt ()) {
    AC_galgas_map_element * p = internal_search (inKey.string ()) ;
    MF_Assert ((p == NULL) || (reinterpret_cast <cElement *> (p) != NULL), "Dynamic cast error", 0, 0) ;
    node = (cElement *) p ;
    if (node == NULL) {
      emitMapSemanticErrorMessage (inLexique, inKey, inErrorMessage COMMA_THERE) ;
    }
  }
  if (node == NULL) {
    outParameter0.drop () ;
    outParameter1.drop () ;
    outParameter2.drop () ;
    outParameter3.drop () ;
    if (outIndex != NULL) {
      outIndex->drop () ;
     }
  }else{
    outParameter0 = node->mInfo.mType ;
    outParameter1 = node->mInfo.mUnsigned64Value ;
    outParameter2 = node->mInfo.mStringValue ;
    outParameter3 = node->mInfo.mListValue ;
    if (outIndex != NULL) {
      * outIndex = GGS_luint (GGS_uint (true, (PMUInt32) node->mID), inKey) ;
    }
  }
}

//---------------------------------------------------------------------------*

const utf32 GGS_goilTemplateFieldMap::kSearchMessage_searchKey [] = {
  TO_UNICODE ('t'),
  TO_UNICODE ('h'),
  TO_UNICODE ('e'),
  TO_UNICODE ('r'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('i'),
  TO_UNICODE ('s'),
  TO_UNICODE (' '),
  TO_UNICODE ('n'),
  TO_UNICODE ('o'),
  TO_UNICODE (' '),
  TO_UNICODE ('t'),
  TO_UNICODE ('e'),
  TO_UNICODE ('m'),
  TO_UNICODE ('p'),
  TO_UNICODE ('l'),
  TO_UNICODE ('a'),
  TO_UNICODE ('t'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('f'),
  TO_UNICODE ('i'),
  TO_UNICODE ('e'),
  TO_UNICODE ('l'),
  TO_UNICODE ('d'),
  TO_UNICODE (' '),
  TO_UNICODE ('n'),
  TO_UNICODE ('a'),
  TO_UNICODE ('m'),
  TO_UNICODE ('e'),
  TO_UNICODE ('d'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('%'),
  TO_UNICODE ('K'),
  TO_UNICODE ('\''),
  TO_UNICODE (0)
} ;

//---------------------------------------------------------------------------*

void GGS_goilTemplateFieldMap::
method_searchKey (C_Compiler & inLexique,
                                const GGS_lstring & inKey,
                                GGS_goilTemplateType  & outParameter0,
                                GGS_uint64   & outParameter1,
                                GGS_string  & outParameter2,
                                GGS_goilTemplateFieldMapList   & outParameter3 COMMA_LOCATION_ARGS) const {
  searchElement (inLexique,
                  kSearchMessage_searchKey,
                  inKey,
                  outParameter0,
                  outParameter1,
                  outParameter2,
                  outParameter3,
                  NULL
                  COMMA_THERE) ;
}

//---------------------------------------------------------------------------*

const utf32 GGS_goilTemplateFieldMap::kInsertMessage_insertKey [] = {
  TO_UNICODE ('a'),
  TO_UNICODE (' '),
  TO_UNICODE ('t'),
  TO_UNICODE ('e'),
  TO_UNICODE ('m'),
  TO_UNICODE ('p'),
  TO_UNICODE ('l'),
  TO_UNICODE ('a'),
  TO_UNICODE ('t'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('f'),
  TO_UNICODE ('i'),
  TO_UNICODE ('e'),
  TO_UNICODE ('l'),
  TO_UNICODE ('d'),
  TO_UNICODE (' '),
  TO_UNICODE ('n'),
  TO_UNICODE ('a'),
  TO_UNICODE ('m'),
  TO_UNICODE ('e'),
  TO_UNICODE ('d'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('%'),
  TO_UNICODE ('K'),
  TO_UNICODE ('\''),
  TO_UNICODE (' '),
  TO_UNICODE ('i'),
  TO_UNICODE ('s'),
  TO_UNICODE (' '),
  TO_UNICODE ('a'),
  TO_UNICODE ('l'),
  TO_UNICODE ('r'),
  TO_UNICODE ('e'),
  TO_UNICODE ('a'),
  TO_UNICODE ('d'),
  TO_UNICODE ('y'),
  TO_UNICODE (' '),
  TO_UNICODE ('d'),
  TO_UNICODE ('e'),
  TO_UNICODE ('c'),
  TO_UNICODE ('l'),
  TO_UNICODE ('a'),
  TO_UNICODE ('r'),
  TO_UNICODE ('e'),
  TO_UNICODE ('d'),
  TO_UNICODE (' '),
  TO_UNICODE ('i'),
  TO_UNICODE ('n'),
  TO_UNICODE (' '),
  TO_UNICODE ('%'),
  TO_UNICODE ('L'),
  TO_UNICODE (0)
} ;

//---------------------------------------------------------------------------*

void GGS_goilTemplateFieldMap::
modifier_insertKey (C_Compiler & inLexique,
                                const GGS_lstring & inKey,
                                const GGS_goilTemplateType& inParameter0,
                                const GGS_uint64 & inParameter1,
                                const GGS_string& inParameter2,
                                const GGS_goilTemplateFieldMapList & inParameter3 COMMA_LOCATION_ARGS) {
  insertElement (inLexique,
                 kInsertMessage_insertKey,
                 inKey,
                 inParameter0,
                 inParameter1,
                 inParameter2,
                 inParameter3,
                 NULL
                 COMMA_THERE) ;
}

//---------------------------------------------------------------------------*

GGS_goilTemplateFieldMap GGS_goilTemplateFieldMap::
constructor_mapWithMapToOverride (C_Compiler & /* inLexique */,
                                  const GGS_goilTemplateFieldMap & inMapToOverride
                                  COMMA_UNUSED_LOCATION_ARGS) {
  GGS_goilTemplateFieldMap result ; // Not Built
  if (inMapToOverride.mSharedMapRoot != NULL) {
    macroValidPointer (inMapToOverride.mSharedMapRoot) ;
    macroMyNew (result.mSharedMapRoot, cMapRoot) ;
    result.mSharedMapRoot->mNextMap = inMapToOverride.mSharedMapRoot ;
    inMapToOverride.mSharedMapRoot->mReferenceCount ++ ;
    result.mSharedMapRoot->mSequenceNumber = inMapToOverride.mSharedMapRoot->mSequenceNumber ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_goilTemplateFieldMap GGS_goilTemplateFieldMap::
reader_overriddenMap (C_Compiler & /* inLexique */
                      COMMA_UNUSED_LOCATION_ARGS) const {
  GGS_goilTemplateFieldMap result ; // Not Built
  if (mSharedMapRoot != NULL) {
    macroValidPointer (mSharedMapRoot) ;
    result.mSharedMapRoot = mSharedMapRoot->mNextMap ;
    if (result.mSharedMapRoot != NULL) {
      macroValidPointer (result.mSharedMapRoot) ;
      result.mSharedMapRoot->mReferenceCount ++ ;
    }else{
      macroMyNew (result.mSharedMapRoot, cMapRoot) ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_string GGS_goilTemplateFieldMap::
reader_description (const PMSInt32 inIndentation) const {
  C_String s ;
  s << "<map @goilTemplateFieldMap " ;
  if (isBuilt ()) {
    s.appendSigned (count ()) ;
    s << " object" << ((count () > 1) ? "s " : " ") ;
    cMapRoot * mapRoot = mSharedMapRoot ;
    PMSInt32 level = 0 ;
    while (mapRoot != NULL) {
      if (level > 0) {
        s << "\n" ;
        s.writeStringMultiple ("| ", inIndentation) ;
        s << "------- level " << cStringWithSigned (level) ;
      }
      macroValidPointer (mapRoot) ;
      cElement * p = (cElement *) mapRoot->mFirstItem ;
      PMSInt32 elementID = 0 ;
      while (p != NULL) {
        macroValidPointer (p) ;
        p->appendForMapDescription (elementID, s, inIndentation) ;
        p = p->nextObject () ;
        elementID ++ ;
      }
      mapRoot = mapRoot->mNextMap ;
      level ++ ;
    }
  }else{
    s << "not built" ;
  }
  s << "\n" ;
  s.writeStringMultiple ("| ", inIndentation) ;
  s << ">" ;
  return GGS_string (true, s) ;
}

//---------------------------------------------------------------------------*

/* const */ GGS_goilTemplateType & GGS_goilTemplateFieldMap::cEnumerator::_mType (LOCATION_ARGS) const {
  return ((cElement *) mObjectArray (mCurrentIndex COMMA_THERE))->mInfo.mType ;
}

//---------------------------------------------------------------------------*

/* const */ GGS_uint64  & GGS_goilTemplateFieldMap::cEnumerator::_mUnsigned64Value (LOCATION_ARGS) const {
  return ((cElement *) mObjectArray (mCurrentIndex COMMA_THERE))->mInfo.mUnsigned64Value ;
}

//---------------------------------------------------------------------------*

/* const */ GGS_string & GGS_goilTemplateFieldMap::cEnumerator::_mStringValue (LOCATION_ARGS) const {
  return ((cElement *) mObjectArray (mCurrentIndex COMMA_THERE))->mInfo.mStringValue ;
}

//---------------------------------------------------------------------------*

/* const */ GGS_goilTemplateFieldMapList  & GGS_goilTemplateFieldMap::cEnumerator::_mListValue (LOCATION_ARGS) const {
  return ((cElement *) mObjectArray (mCurrentIndex COMMA_THERE))->mInfo.mListValue ;
}

//---------------------------------------------------------------------------*

GGS_object GGS_goilTemplateFieldMap::reader_object (void) const {
  GGS_object result ;
  if (isBuilt ()) {
    GGS_goilTemplateFieldMap * p = NULL ;
    macroMyNew (p, GGS_goilTemplateFieldMap (*this)) ;
    result = GGS_object (p) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_goilTemplateFieldMap GGS_goilTemplateFieldMap::castFromObject (C_Compiler & inLexique,
                                   const GGS_object & inObject,
                                   const GGS_location & inErrorLocation
                                   COMMA_LOCATION_ARGS) {
  GGS_goilTemplateFieldMap result ;
  const GGS__root * embeddedObject = inObject.embeddedObject () ;
  if (NULL != embeddedObject) {
    const GGS_goilTemplateFieldMap * p = dynamic_cast <const GGS_goilTemplateFieldMap *> (embeddedObject) ;
    if (NULL != p) {
      result = * p ;
    }else{
      castFromObjectErrorSignaling (inLexique, inErrorLocation, & kTypeDescriptor_GGS_goilTemplateFieldMap, embeddedObject COMMA_THERE) ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*

const C_galgas_type_descriptorEX * GGS_goilTemplateFieldMap::typeDescriptor (void) const {
  return & kTypeDescriptor_GGS_goilTemplateFieldMap ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//               Element of list '@goilTemplateFieldMapList'                 *
//                                                                           *
//---------------------------------------------------------------------------*

elementOf_GGS_goilTemplateFieldMapList::
elementOf_GGS_goilTemplateFieldMapList (const GGS_goilTemplateFieldMap & argument_0
                                COMMA_LOCATION_ARGS) :
AC_galgas_list::cListElement (THERE),
mMap (argument_0) {
}

//---------------------------------------------------------------------------*

bool elementOf_GGS_goilTemplateFieldMapList::
isEqualToObject (const cListElement * inOperand) const {
  bool equal = inOperand == this ;
  if (! equal) {
    const elementOf_GGS_goilTemplateFieldMapList * ptr = dynamic_cast <const elementOf_GGS_goilTemplateFieldMapList *> (inOperand) ;
    macroValidPointer (ptr) ;
    equal = mMap.operator_isEqual (ptr->mMap).boolValue () ;
  }
  return equal ;
}

//---------------------------------------------------------------------------*

void elementOf_GGS_goilTemplateFieldMapList::
appendForDescription (C_String & ioString,
                      const PMSInt32 inIndentation) const {
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "|-" ;
  ioString << mMap.reader_description (inIndentation) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                     List '@goilTemplateFieldMapList'                      *
//                                                                           *
//---------------------------------------------------------------------------*

const C_galgas_type_descriptorEX kTypeDescriptor_GGS_goilTemplateFieldMapList ("goilTemplateFieldMapList", false, NULL) ;

//---------------------------------------------------------------------------*

void GGS_goilTemplateFieldMapList::
internalAppendValues (const GGS_goilTemplateFieldMap & argument_0
                    COMMA_LOCATION_ARGS) {
  cElement * nouvelElement = (cElement *) NULL ;
  macroMyNew (nouvelElement, cElement (argument_0
                                COMMA_THERE)) ;
  _internalAppendItem (nouvelElement) ;
}

//---------------------------------------------------------------------------*

void GGS_goilTemplateFieldMapList::
internalPrependValues (const GGS_goilTemplateFieldMap & argument_0
                    COMMA_LOCATION_ARGS) {
  cElement * nouvelElement = (cElement *) NULL ;
  macroMyNew (nouvelElement, cElement (argument_0
                                COMMA_THERE)) ;
  _internalPrependItem (nouvelElement) ;
}

//---------------------------------------------------------------------------*

void GGS_goilTemplateFieldMapList::
addAssign_operation (const GGS_goilTemplateFieldMap & argument_0) {
  if (isBuilt ()&& argument_0.isBuilt ()) {
    insulateList () ;
    internalAppendValues (argument_0
                                COMMA_HERE) ;
  }
}

//---------------------------------------------------------------------------*

GGS_goilTemplateFieldMapList GGS_goilTemplateFieldMapList::
operator_concat (const GGS_goilTemplateFieldMapList & inOperand) const {
  GGS_goilTemplateFieldMapList result = * this ;
  result.dotAssign_operation (inOperand) ;
  return result ;
}

//---------------------------------------------------------------------------*

void GGS_goilTemplateFieldMapList::
dotAssign_operation (const GGS_goilTemplateFieldMapList inOperand) {
  if (isBuilt () && inOperand.isBuilt ()) {
    if (count () == 0) {
      * this = inOperand ;
    }else{
      if (inOperand.count () > 0) {
        insulateList () ;
        elementOf_GGS_goilTemplateFieldMapList * p = inOperand.firstObject () ;
        while (p != NULL) {
          macroValidPointer (p) ;
          GGS_goilTemplateFieldMap  p_0 = p->mMap ;
          internalAppendValues (p_0 COMMA_HERE) ;
          p = p->nextObject () ;
        }
      }
    }
  }
}

//---------------------------------------------------------------------------*

void GGS_goilTemplateFieldMapList::
modifier_prependValue (C_Compiler & /* inLexique */,
                     const GGS_goilTemplateFieldMap & argument_0
                     COMMA_UNUSED_LOCATION_ARGS) {
  if (isBuilt ()) {
    insulateList () ;
    internalPrependValues (argument_0
                                COMMA_HERE) ;
  }
}

//---------------------------------------------------------------------------*

void GGS_goilTemplateFieldMapList::
insulateList (void) {
  if (_shared ()) {
    cElement * ptr = firstObject () ;
    alloc () ;
    while (ptr != NULL) {
      macroValidPointer (ptr) ;
      internalAppendValues (ptr->mMap
                                COMMA_HERE) ;
      ptr = ptr->nextObject () ;
    }
  }
}

//---------------------------------------------------------------------------*

GGS_goilTemplateFieldMapList  GGS_goilTemplateFieldMapList::
constructor_emptyList (void) {
  GGS_goilTemplateFieldMapList result ;
  result.alloc () ;
  return result ;
}

//---------------------------------------------------------------------------*

GGS_goilTemplateFieldMapList  GGS_goilTemplateFieldMapList::
constructor_listWithValue (const GGS_goilTemplateFieldMap & argument_0) {
  GGS_goilTemplateFieldMapList result ;
  result.alloc () ;
  result.addAssign_operation (argument_0) ;
  return result ;
}

//---------------------------------------------------------------------------*

void GGS_goilTemplateFieldMapList::
internalSubListWithRange (GGS_goilTemplateFieldMapList & ioList,
                          const PMSInt32 inFirstIndex,
                          const PMSInt32 inCount) const {
  ioList.alloc () ;
  if (inCount > 0) {
    cElement * ptr = firstObject () ;
    for (PMSInt32 i=0 ; i<inFirstIndex ; i++) {
      macroValidPointer (ptr) ;
      ptr = ptr->nextObject () ;
    }
    for (PMSInt32 i=0 ; i<inCount ; i++) {
      macroValidPointer (ptr) ;
      ioList.addAssign_operation (ptr->mMap) ;
      ptr = ptr->nextObject () ;
    }
  }
}

//---------------------------------------------------------------------------*

GGS_goilTemplateFieldMapList GGS_goilTemplateFieldMapList::
reader_subListWithRange (C_Compiler & inLexique,
                         const GGS_uint & inFirstIndex,
                         const GGS_uint & inCount
                         COMMA_LOCATION_ARGS) const {
  GGS_goilTemplateFieldMapList result ;
  if (isBuilt () && inFirstIndex.isBuilt () && inCount.isBuilt ()) {
    const PMSInt32 firstIndex = (PMSInt32) inFirstIndex.uintValue () ;
    const PMSInt32 rangeCount = (PMSInt32) inCount.uintValue () ;
    if ((firstIndex + rangeCount) > count ()) {
      inLexique.onTheFlyRunTimeError ("'subListWithRange' method invoked with upper bound greater than list object count" COMMA_THERE) ;
    }else{
      internalSubListWithRange (result, firstIndex, rangeCount) ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_goilTemplateFieldMapList GGS_goilTemplateFieldMapList::
reader_subListFromIndex (C_Compiler & inLexique,
                         const GGS_uint & inIndex
                         COMMA_LOCATION_ARGS) const {
  GGS_goilTemplateFieldMapList result ;
  if (isBuilt () && inIndex.isBuilt ()) {
    const PMSInt32 startIndex = (PMSInt32) inIndex.uintValue () ;
    if (startIndex > count ()) {
      inLexique.onTheFlyRunTimeError ("'subListFromIndex' method invoked with start index greater than list object count" COMMA_THERE) ;
    }else{
      internalSubListWithRange (result, startIndex, count () - startIndex) ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_string GGS_goilTemplateFieldMapList::
reader_description (const PMSInt32 inIndentation) const {
  return performDescription ("@goilTemplateFieldMapList", inIndentation) ;
}

//---------------------------------------------------------------------------*

void GGS_goilTemplateFieldMapList::
method_first (C_Compiler & inLexique,
              GGS_goilTemplateFieldMap & _out_0
              COMMA_LOCATION_ARGS) const {
  cElement * ptr = NULL ;
  if (isBuilt ()) {
    ptr = firstObject () ;
    if (ptr == NULL) {
      inLexique.onTheFlyRunTimeError ("'first' method invoked on an empty list" COMMA_THERE) ;
    }
  }
  if (ptr != NULL) {
    _out_0 = ptr->mMap ;
  }else{
    _out_0.drop () ;
  }
}

//---------------------------------------------------------------------------*

void GGS_goilTemplateFieldMapList::
method_last (C_Compiler & inLexique,
             GGS_goilTemplateFieldMap & _out_0
             COMMA_LOCATION_ARGS) const {
  cElement * ptr = NULL ;
  if (isBuilt ()) {
    ptr = lastObject () ;
    if (ptr == NULL) {
      inLexique.onTheFlyRunTimeError ("'last' method invoked on an empty list" COMMA_THERE) ;
    }
  }
  if (ptr != NULL) {
    _out_0 = ptr->mMap ;
  }else{
    _out_0.drop () ;
  }
}

//---------------------------------------------------------------------------*

void GGS_goilTemplateFieldMapList::
modifier_popFirst (C_Compiler & inLexique,
                 GGS_goilTemplateFieldMap & _out_0
                 COMMA_LOCATION_ARGS) {
  cElement * ptr = NULL ;
  if (isBuilt ()) {
    ptr = firstObject () ;
    if (ptr == NULL) {
      inLexique.onTheFlyRunTimeError ("'popFirst' modifier invoked on an empty list" COMMA_THERE) ;
    }
  }
  if (ptr != NULL) {
    _out_0 = ptr->mMap ;
    insulateList () ;
    _internalRemoveFirst () ;
  }else{
    _out_0.drop () ;
  }
}

//---------------------------------------------------------------------------*

void GGS_goilTemplateFieldMapList::
modifier_popLast (C_Compiler & inLexique,
                GGS_goilTemplateFieldMap & _out_0
                COMMA_LOCATION_ARGS) {
  cElement * ptr = NULL ;
  if (isBuilt ()) {
    ptr = lastObject () ;
    if (ptr == NULL) {
      inLexique.onTheFlyRunTimeError ("'popLast' modifier invoked on an empty list" COMMA_THERE) ;
    }
  }
  if (ptr != NULL) {
    _out_0 = ptr->mMap ;
    insulateList () ;
    _internalRemoveLast () ;
  }else{
    _out_0.drop () ;
  }
}

//---------------------------------------------------------------------------*

GGS_goilTemplateFieldMap  GGS_goilTemplateFieldMapList::
reader_mMapAtIndex (C_Compiler & inLexique, const GGS_uint & inIndex COMMA_LOCATION_ARGS) const {
  GGS_goilTemplateFieldMap  result ;
  if (isBuilt () && inIndex.isBuilt ()) {
    cElement * object = (cElement *) objectAtIndex (inLexique, inIndex.uintValue () COMMA_THERE) ;
    if (object != NULL) {
      result = object->mMap ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*

void GGS_goilTemplateFieldMapList::
modifier_setMMapAtIndex (C_Compiler & inLexique,
                              const GGS_goilTemplateFieldMap  & inObject,
                              const GGS_uint & inIndex
                              COMMA_LOCATION_ARGS) const {
  if (isBuilt () && inIndex.isBuilt ()) {
    cElement * object = (cElement *) objectAtIndex (inLexique, inIndex.uintValue () COMMA_THERE) ;
    if (object != NULL) {
      object->mMap = inObject ;
    }
  }
}

//---------------------------------------------------------------------------*

/* const */ GGS_goilTemplateFieldMap  & GGS_goilTemplateFieldMapList::cEnumerator::_mMap (LOCATION_ARGS) const {
  macroValidPointerThere (mCurrentEnumeratedObject) ;
  return ((/* const */ cElement *) mCurrentEnumeratedObject)->mMap ;
}

//---------------------------------------------------------------------------*

GGS_object GGS_goilTemplateFieldMapList::reader_object (void) const {
  GGS_object result ;
  if (isBuilt ()) {
    GGS_goilTemplateFieldMapList * p = NULL ;
    macroMyNew (p, GGS_goilTemplateFieldMapList (*this)) ;
    result = GGS_object (p) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_goilTemplateFieldMapList GGS_goilTemplateFieldMapList::castFromObject (C_Compiler & inLexique,
                                   const GGS_object & inObject,
                                   const GGS_location & inErrorLocation
                                   COMMA_LOCATION_ARGS) {
  GGS_goilTemplateFieldMapList result ;
  const GGS__root * embeddedObject = inObject.embeddedObject () ;
  if (NULL != embeddedObject) {
    const GGS_goilTemplateFieldMapList * p = dynamic_cast <const GGS_goilTemplateFieldMapList *> (embeddedObject) ;
    if (NULL != p) {
      result = * p ;
    }else{
      castFromObjectErrorSignaling (inLexique, inErrorLocation, & kTypeDescriptor_GGS_goilTemplateFieldMapList, embeddedObject COMMA_THERE) ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*

const C_galgas_type_descriptorEX * GGS_goilTemplateFieldMapList::typeDescriptor (void) const {
  return & kTypeDescriptor_GGS_goilTemplateFieldMapList ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//               Implementation of 'goilTemplateValue' struct                *
//                                                                           *
//---------------------------------------------------------------------------*

const C_galgas_type_descriptorEX kTypeDescriptor_GGS_goilTemplateValue ("goilTemplateValue", false, NULL) ;

//---------------------------------------------------------------------------*

GGS_goilTemplateValue::GGS_goilTemplateValue (void) :
mUnsigned64Value (),
mStringValue (),
mMapListValue () {
}

//---------------------------------------------------------------------------*

GGS_goilTemplateValue::~GGS_goilTemplateValue (void) {
}

//---------------------------------------------------------------------------*

void GGS_goilTemplateValue::drop (void) {
  mUnsigned64Value.drop () ;
  mStringValue.drop () ;
  mMapListValue.drop () ;
}

//---------------------------------------------------------------------------*

bool GGS_goilTemplateValue::isBuilt (void) const {
  return mUnsigned64Value.isBuilt ()
    && mStringValue.isBuilt ()
    && mMapListValue.isBuilt () ;
}

//---------------------------------------------------------------------------*

GGS_bool GGS_goilTemplateValue::
operator_isEqual (const GGS_goilTemplateValue & inOperand) const {
  return mUnsigned64Value.operator_isEqual (inOperand.mUnsigned64Value)
    .operator_and (mStringValue.operator_isEqual (inOperand.mStringValue))
    .operator_and (mMapListValue.operator_isEqual (inOperand.mMapListValue)) ;
}

//---------------------------------------------------------------------------*

GGS_bool GGS_goilTemplateValue::
operator_isNotEqual (const GGS_goilTemplateValue & inOperand) const {
  return mUnsigned64Value.operator_isNotEqual (inOperand.mUnsigned64Value)
    .operator_or (mStringValue.operator_isNotEqual (inOperand.mStringValue))
    .operator_or (mMapListValue.operator_isNotEqual (inOperand.mMapListValue)) ;
}

//---------------------------------------------------------------------------*

GGS_goilTemplateValue GGS_goilTemplateValue::
constructor_new (const GGS_uint64 & argument_0,
                 const GGS_string& argument_1,
                 const GGS_goilTemplateFieldMapList & argument_2) {
  GGS_goilTemplateValue result ;
  result.mUnsigned64Value = argument_0 ;
  result.mStringValue = argument_1 ;
  result.mMapListValue = argument_2 ;
  return result ;
}

//---------------------------------------------------------------------------*

GGS_string GGS_goilTemplateValue::
reader_description (const PMSInt32 inIndentation) const {
  C_String _s ;
  _s << "<struct @goilTemplateValue" ;
  if (isBuilt ()) {
    _s << "\n" ;
    _s.writeStringMultiple ("| ", inIndentation + 1) ;
    _s << "mUnsigned64Value " ;
    _s << mUnsigned64Value.reader_description (inIndentation + 1) ;
    _s << "\n" ;
    _s.writeStringMultiple ("| ", inIndentation + 1) ;
    _s << "mStringValue " ;
    _s << mStringValue.reader_description (inIndentation + 1) ;
    _s << "\n" ;
    _s.writeStringMultiple ("| ", inIndentation + 1) ;
    _s << "mMapListValue " ;
    _s << mMapListValue.reader_description (inIndentation + 1) ;
  }else{
    _s << "not built" ;
  }
  _s << "\n" ;
  _s.writeStringMultiple ("| ", inIndentation) ;
  _s << ">" ;
  return GGS_string (true, _s) ;
}

//---------------------------------------------------------------------------*

GGS_object GGS_goilTemplateValue::reader_object (void) const {
  GGS_object result ;
  if (isBuilt ()) {
    GGS_goilTemplateValue * p = NULL ;
    macroMyNew (p, GGS_goilTemplateValue (*this)) ;
    result = GGS_object (p) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_goilTemplateValue GGS_goilTemplateValue::castFromObject (C_Compiler & inLexique,
                                   const GGS_object & inObject,
                                   const GGS_location & inErrorLocation
                                   COMMA_LOCATION_ARGS) {
  GGS_goilTemplateValue result ;
  const GGS__root * embeddedObject = inObject.embeddedObject () ;
  if (NULL != embeddedObject) {
    const GGS_goilTemplateValue * p = dynamic_cast <const GGS_goilTemplateValue *> (embeddedObject) ;
    if (NULL != p) {
      result = * p ;
    }else{
      castFromObjectErrorSignaling (inLexique, inErrorLocation, & kTypeDescriptor_GGS_goilTemplateValue, embeddedObject COMMA_THERE) ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*

const C_galgas_type_descriptorEX * GGS_goilTemplateValue::typeDescriptor (void) const {
  return & kTypeDescriptor_GGS_goilTemplateValue ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                    class 'e_goilTemplateVariableMap'                      *
//                                                                           *
//---------------------------------------------------------------------------*

e_goilTemplateVariableMap::e_goilTemplateVariableMap (void) :
mType (),
mValue () {
}

//---------------------------------------------------------------------------*
//                                                                           *
//                   class map '@goilTemplateVariableMap'                    *
//                                                                           *
//---------------------------------------------------------------------------*

const C_galgas_type_descriptorEX kTypeDescriptor_GGS_goilTemplateVariableMap ("goilTemplateVariableMap", false, NULL) ;

//---------------------------------------------------------------------------*

elementOf_GGS_goilTemplateVariableMap::
elementOf_GGS_goilTemplateVariableMap (const GGS_lstring & inKey,
              const PMSInt32 inIndex,
              const e_goilTemplateVariableMap & inInfo) :
AC_galgas_map_element (inKey, inIndex),
mInfo (inInfo) {
}

//---------------------------------------------------------------------------*

void elementOf_GGS_goilTemplateVariableMap::
appendForMapDescription (const PMSInt32 inElementIndex,
                         C_String & ioString,
                         const PMSInt32 inIndentation) const {
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "|-key " ;
  ioString.appendSigned (inElementIndex) ;
  ioString << ":" << mKey.reader_description (inIndentation + 1) ;
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "|-value " ;
  ioString.appendSigned (inElementIndex) ;
  ioString << ":" << mInfo.mType.reader_description (inIndentation + 1) ;
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "|-value " ;
  ioString.appendSigned (inElementIndex) ;
  ioString << ":" << mInfo.mValue.reader_description (inIndentation + 1) ;
}

//---------------------------------------------------------------------------*

bool elementOf_GGS_goilTemplateVariableMap::
isEqualToMapElement (const AC_galgas_map_element * inOperand) const {
  const elementOf_GGS_goilTemplateVariableMap * ptr = dynamic_cast <const elementOf_GGS_goilTemplateVariableMap *> (inOperand) ;
  macroValidPointer (ptr) ;
  return (mInfo.mType.operator_isEqual (ptr->mInfo.mType)).boolValue ()
           && (mInfo.mValue.operator_isEqual (ptr->mInfo.mValue)).boolValue () ;
}

//---------------------------------------------------------------------------*

AC_galgas_map_element * GGS_goilTemplateVariableMap::
new_element (const GGS_lstring & inKey, void * inInfo) {
  MF_Assert (reinterpret_cast <e_goilTemplateVariableMap *> (inInfo) != NULL, "Dynamic cast error", 0, 0) ;
  AC_galgas_map_element * p = NULL ;
  e_goilTemplateVariableMap * info = (e_goilTemplateVariableMap *) inInfo ;
  macroMyNew (p, cElement (inKey, nextIndex (), * info)) ;
  return p ;
}

//---------------------------------------------------------------------------*

void GGS_goilTemplateVariableMap::
assignInfo (AC_galgas_map_element * inPtr, void * inInfo) {
  MF_Assert (reinterpret_cast <cElement *> (inPtr) != NULL, "Dynamic cast error", 0, 0) ;
  MF_Assert (reinterpret_cast <e_goilTemplateVariableMap *> (inInfo) != NULL, "Dynamic cast error", 0, 0) ;
  cElement * p = (cElement *) inPtr ;
  e_goilTemplateVariableMap * info = (e_goilTemplateVariableMap *) inInfo ;
  p->mInfo = * info ;
}

//---------------------------------------------------------------------------*

GGS_goilTemplateVariableMap GGS_goilTemplateVariableMap::
constructor_emptyMap (C_Compiler & /* inLexique */ COMMA_UNUSED_LOCATION_ARGS) {
  GGS_goilTemplateVariableMap result ;
  macroMyNew (result.mSharedMapRoot, cMapRoot) ;
  return result ;
}

//---------------------------------------------------------------------------*

void GGS_goilTemplateVariableMap::
enterIndex (const GGS_lstring & inKey,
            AC_galgas_index_core & outIndex) {
  e_goilTemplateVariableMap info  ;
  internalEnterIndex (inKey,
                      (void *) & info,
                      outIndex) ;
}

//---------------------------------------------------------------------------*

GGS_bool GGS_goilTemplateVariableMap::
operator_isEqual (const GGS_goilTemplateVariableMap & inOperand) const {
  return GGS_bool (isBuilt () && inOperand.isBuilt (), isEqualToMap (inOperand)) ;
}

//---------------------------------------------------------------------------*

GGS_bool GGS_goilTemplateVariableMap::
operator_isNotEqual (const GGS_goilTemplateVariableMap & inOperand) const {
  return GGS_bool (isBuilt () && inOperand.isBuilt (), ! isEqualToMap (inOperand)) ;
}

//---------------------------------------------------------------------------*

void GGS_goilTemplateVariableMap::
internalInsertForDuplication (AC_galgas_map_element * inPtr) {
  MF_Assert (reinterpret_cast <cElement *> (inPtr) != NULL, "Dynamic cast error", 0, 0) ;
  cElement * p = (cElement *) inPtr ;
  PMSInt32 attributeIndex = -1 ; // Unused here
  GGS_location existingKeyLocation ; // Unused here
  internalInsert (p->mKey, (void *) & p->mInfo, attributeIndex, existingKeyLocation) ;
}

//---------------------------------------------------------------------------*

void GGS_goilTemplateVariableMap::
removeElement (C_Compiler & inLexique,
                const utf32 * inErrorMessage,
                const GGS_lstring & inKey,
                GGS_goilTemplateType& outParameter0,
                GGS_goilTemplateValue& outParameter1,
                GGS_luint * outIndex
                COMMA_LOCATION_ARGS) {
  AC_galgas_map_element * removedElement = NULL ;
  PMSInt32 elementID = - 1 ;
  if (isBuilt () && inKey.isBuilt ()) {
    removedElement = internalRemove (inKey) ;
    if (removedElement == NULL) {
      emitMapSemanticErrorMessage (inLexique, inKey, inErrorMessage COMMA_THERE) ;
      outParameter0.drop () ;
      outParameter1.drop () ;
    }else{
      cElement * ptr = (cElement *) removedElement ;
      elementID = ptr->mID ;
      outParameter0 = ptr->mInfo.mType ;
      outParameter1 = ptr->mInfo.mValue ;
    }
  }
  if (outIndex != NULL) {
    * outIndex = GGS_luint (GGS_uint (elementID >= 0, (PMUInt32) elementID), inKey) ;
  }
  macroMyDelete (removedElement, cElement) ;
}

//---------------------------------------------------------------------------*

void GGS_goilTemplateVariableMap::
insertElement (C_Compiler & inLexique,
                const utf32 * inErrorMessage,
                const GGS_lstring & inKey,
                const GGS_goilTemplateType& inParameter0,
                const GGS_goilTemplateValue& inParameter1,
                GGS_luint * outIndex
                COMMA_LOCATION_ARGS) {
  PMSInt32 elementID = - 1 ;
  if (isBuilt ()
   && inParameter0.isBuilt ()
   && inParameter1.isBuilt ()
   && inKey.isBuilt ()) {
    insulateMap () ;
    e_goilTemplateVariableMap info  ;
    info.mType = inParameter0 ;
    info.mValue = inParameter1 ;
    GGS_location existingKeyLocation ;
    internalInsert (inKey, (void *) & info, elementID, existingKeyLocation) ;
    if (elementID < 0) {
      emitInsertMapSemanticErrorMessage (inLexique, inKey, inErrorMessage, existingKeyLocation COMMA_THERE) ;
    }
  }
  if (outIndex != NULL) {
    * outIndex = GGS_luint (GGS_uint (elementID >= 0, (PMUInt32) elementID), inKey) ;
  }
}

//---------------------------------------------------------------------------*

void GGS_goilTemplateVariableMap::
searchElement (C_Compiler & inLexique,
               const utf32 * inErrorMessage,
               const GGS_lstring & inKey,
               GGS_goilTemplateType  & outParameter0,
               GGS_goilTemplateValue  & outParameter1,
               GGS_luint * outIndex
               COMMA_LOCATION_ARGS) const {
  cElement * node = NULL  ;
  if (isBuilt () && inKey.isBuilt ()) {
    AC_galgas_map_element * p = internal_search (inKey.string ()) ;
    MF_Assert ((p == NULL) || (reinterpret_cast <cElement *> (p) != NULL), "Dynamic cast error", 0, 0) ;
    node = (cElement *) p ;
    if (node == NULL) {
      emitMapSemanticErrorMessage (inLexique, inKey, inErrorMessage COMMA_THERE) ;
    }
  }
  if (node == NULL) {
    outParameter0.drop () ;
    outParameter1.drop () ;
    if (outIndex != NULL) {
      outIndex->drop () ;
     }
  }else{
    outParameter0 = node->mInfo.mType ;
    outParameter1 = node->mInfo.mValue ;
    if (outIndex != NULL) {
      * outIndex = GGS_luint (GGS_uint (true, (PMUInt32) node->mID), inKey) ;
    }
  }
}

//---------------------------------------------------------------------------*

void GGS_goilTemplateVariableMap::
modifier_setMTypeForKey (C_Compiler & inLexique,
                        const GGS_goilTemplateType& inValue,
                        const GGS_string & inKey
                        COMMA_LOCATION_ARGS) {
  if (isBuilt () && inValue.isBuilt () && inKey.isBuilt ()) {
    insulateMap () ;
    AC_galgas_map_element * p = internal_search (inKey.string ()) ;
    MF_Assert ((p == NULL) || (reinterpret_cast <cElement *> (p) != NULL), "Dynamic cast error", 0, 0) ;
    cElement * node = (cElement *) p ;
    if (node == NULL) {
      C_String errorMessage ;
      errorMessage << "the '" << inKey << "' key does not exist when calling 'setMTypeForKey' modifier" ;
      inLexique.onTheFlyRunTimeError (errorMessage COMMA_THERE) ;
    }else{
      node->mInfo.mType = inValue ;
    }
  }
}

//---------------------------------------------------------------------------*

void GGS_goilTemplateVariableMap::
modifier_setMValueForKey (C_Compiler & inLexique,
                        const GGS_goilTemplateValue& inValue,
                        const GGS_string & inKey
                        COMMA_LOCATION_ARGS) {
  if (isBuilt () && inValue.isBuilt () && inKey.isBuilt ()) {
    insulateMap () ;
    AC_galgas_map_element * p = internal_search (inKey.string ()) ;
    MF_Assert ((p == NULL) || (reinterpret_cast <cElement *> (p) != NULL), "Dynamic cast error", 0, 0) ;
    cElement * node = (cElement *) p ;
    if (node == NULL) {
      C_String errorMessage ;
      errorMessage << "the '" << inKey << "' key does not exist when calling 'setMValueForKey' modifier" ;
      inLexique.onTheFlyRunTimeError (errorMessage COMMA_THERE) ;
    }else{
      node->mInfo.mValue = inValue ;
    }
  }
}

//---------------------------------------------------------------------------*

const utf32 GGS_goilTemplateVariableMap::kSearchMessage_searchKey [] = {
  TO_UNICODE ('t'),
  TO_UNICODE ('h'),
  TO_UNICODE ('e'),
  TO_UNICODE ('r'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('i'),
  TO_UNICODE ('s'),
  TO_UNICODE (' '),
  TO_UNICODE ('n'),
  TO_UNICODE ('o'),
  TO_UNICODE (' '),
  TO_UNICODE ('t'),
  TO_UNICODE ('e'),
  TO_UNICODE ('m'),
  TO_UNICODE ('p'),
  TO_UNICODE ('l'),
  TO_UNICODE ('a'),
  TO_UNICODE ('t'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('v'),
  TO_UNICODE ('a'),
  TO_UNICODE ('r'),
  TO_UNICODE ('i'),
  TO_UNICODE ('a'),
  TO_UNICODE ('b'),
  TO_UNICODE ('l'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('n'),
  TO_UNICODE ('a'),
  TO_UNICODE ('m'),
  TO_UNICODE ('e'),
  TO_UNICODE ('d'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('%'),
  TO_UNICODE ('K'),
  TO_UNICODE ('\''),
  TO_UNICODE (0)
} ;

//---------------------------------------------------------------------------*

void GGS_goilTemplateVariableMap::
method_searchKey (C_Compiler & inLexique,
                                const GGS_lstring & inKey,
                                GGS_goilTemplateType  & outParameter0,
                                GGS_goilTemplateValue  & outParameter1 COMMA_LOCATION_ARGS) const {
  searchElement (inLexique,
                  kSearchMessage_searchKey,
                  inKey,
                  outParameter0,
                  outParameter1,
                  NULL
                  COMMA_THERE) ;
}

//---------------------------------------------------------------------------*

const utf32 GGS_goilTemplateVariableMap::kRemoveMessage_removeKey [] = {
  TO_UNICODE ('t'),
  TO_UNICODE ('h'),
  TO_UNICODE ('e'),
  TO_UNICODE ('r'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('i'),
  TO_UNICODE ('s'),
  TO_UNICODE (' '),
  TO_UNICODE ('n'),
  TO_UNICODE ('o'),
  TO_UNICODE (' '),
  TO_UNICODE ('t'),
  TO_UNICODE ('e'),
  TO_UNICODE ('m'),
  TO_UNICODE ('p'),
  TO_UNICODE ('l'),
  TO_UNICODE ('a'),
  TO_UNICODE ('t'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('v'),
  TO_UNICODE ('a'),
  TO_UNICODE ('r'),
  TO_UNICODE ('i'),
  TO_UNICODE ('a'),
  TO_UNICODE ('b'),
  TO_UNICODE ('l'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('n'),
  TO_UNICODE ('a'),
  TO_UNICODE ('m'),
  TO_UNICODE ('e'),
  TO_UNICODE ('d'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('%'),
  TO_UNICODE ('K'),
  TO_UNICODE ('\''),
  TO_UNICODE (0)
} ;

//---------------------------------------------------------------------------*

void GGS_goilTemplateVariableMap::
modifier_removeKey (C_Compiler & inLexique,
                                const GGS_lstring & inKey,
                                GGS_goilTemplateType& outParameter0,
                                GGS_goilTemplateValue& outParameter1 COMMA_LOCATION_ARGS) {
  removeElement (inLexique,
                  kRemoveMessage_removeKey,
                  inKey,
                  outParameter0,
                  outParameter1,
                  NULL
                  COMMA_THERE) ;
}

//---------------------------------------------------------------------------*

const utf32 GGS_goilTemplateVariableMap::kInsertMessage_insertKey [] = {
  TO_UNICODE ('a'),
  TO_UNICODE (' '),
  TO_UNICODE ('t'),
  TO_UNICODE ('e'),
  TO_UNICODE ('m'),
  TO_UNICODE ('p'),
  TO_UNICODE ('l'),
  TO_UNICODE ('a'),
  TO_UNICODE ('t'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('v'),
  TO_UNICODE ('a'),
  TO_UNICODE ('r'),
  TO_UNICODE ('i'),
  TO_UNICODE ('a'),
  TO_UNICODE ('b'),
  TO_UNICODE ('l'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('n'),
  TO_UNICODE ('a'),
  TO_UNICODE ('m'),
  TO_UNICODE ('e'),
  TO_UNICODE ('d'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('%'),
  TO_UNICODE ('K'),
  TO_UNICODE ('\''),
  TO_UNICODE (' '),
  TO_UNICODE ('i'),
  TO_UNICODE ('s'),
  TO_UNICODE (' '),
  TO_UNICODE ('a'),
  TO_UNICODE ('l'),
  TO_UNICODE ('r'),
  TO_UNICODE ('e'),
  TO_UNICODE ('a'),
  TO_UNICODE ('d'),
  TO_UNICODE ('y'),
  TO_UNICODE (' '),
  TO_UNICODE ('d'),
  TO_UNICODE ('e'),
  TO_UNICODE ('c'),
  TO_UNICODE ('l'),
  TO_UNICODE ('a'),
  TO_UNICODE ('r'),
  TO_UNICODE ('e'),
  TO_UNICODE ('d'),
  TO_UNICODE (' '),
  TO_UNICODE ('i'),
  TO_UNICODE ('n'),
  TO_UNICODE (' '),
  TO_UNICODE ('%'),
  TO_UNICODE ('L'),
  TO_UNICODE (0)
} ;

//---------------------------------------------------------------------------*

void GGS_goilTemplateVariableMap::
modifier_insertKey (C_Compiler & inLexique,
                                const GGS_lstring & inKey,
                                const GGS_goilTemplateType& inParameter0,
                                const GGS_goilTemplateValue& inParameter1 COMMA_LOCATION_ARGS) {
  insertElement (inLexique,
                 kInsertMessage_insertKey,
                 inKey,
                 inParameter0,
                 inParameter1,
                 NULL
                 COMMA_THERE) ;
}

//---------------------------------------------------------------------------*

GGS_goilTemplateVariableMap GGS_goilTemplateVariableMap::
constructor_mapWithMapToOverride (C_Compiler & /* inLexique */,
                                  const GGS_goilTemplateVariableMap & inMapToOverride
                                  COMMA_UNUSED_LOCATION_ARGS) {
  GGS_goilTemplateVariableMap result ; // Not Built
  if (inMapToOverride.mSharedMapRoot != NULL) {
    macroValidPointer (inMapToOverride.mSharedMapRoot) ;
    macroMyNew (result.mSharedMapRoot, cMapRoot) ;
    result.mSharedMapRoot->mNextMap = inMapToOverride.mSharedMapRoot ;
    inMapToOverride.mSharedMapRoot->mReferenceCount ++ ;
    result.mSharedMapRoot->mSequenceNumber = inMapToOverride.mSharedMapRoot->mSequenceNumber ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_goilTemplateVariableMap GGS_goilTemplateVariableMap::
reader_overriddenMap (C_Compiler & /* inLexique */
                      COMMA_UNUSED_LOCATION_ARGS) const {
  GGS_goilTemplateVariableMap result ; // Not Built
  if (mSharedMapRoot != NULL) {
    macroValidPointer (mSharedMapRoot) ;
    result.mSharedMapRoot = mSharedMapRoot->mNextMap ;
    if (result.mSharedMapRoot != NULL) {
      macroValidPointer (result.mSharedMapRoot) ;
      result.mSharedMapRoot->mReferenceCount ++ ;
    }else{
      macroMyNew (result.mSharedMapRoot, cMapRoot) ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_string GGS_goilTemplateVariableMap::
reader_description (const PMSInt32 inIndentation) const {
  C_String s ;
  s << "<map @goilTemplateVariableMap " ;
  if (isBuilt ()) {
    s.appendSigned (count ()) ;
    s << " object" << ((count () > 1) ? "s " : " ") ;
    cMapRoot * mapRoot = mSharedMapRoot ;
    PMSInt32 level = 0 ;
    while (mapRoot != NULL) {
      if (level > 0) {
        s << "\n" ;
        s.writeStringMultiple ("| ", inIndentation) ;
        s << "------- level " << cStringWithSigned (level) ;
      }
      macroValidPointer (mapRoot) ;
      cElement * p = (cElement *) mapRoot->mFirstItem ;
      PMSInt32 elementID = 0 ;
      while (p != NULL) {
        macroValidPointer (p) ;
        p->appendForMapDescription (elementID, s, inIndentation) ;
        p = p->nextObject () ;
        elementID ++ ;
      }
      mapRoot = mapRoot->mNextMap ;
      level ++ ;
    }
  }else{
    s << "not built" ;
  }
  s << "\n" ;
  s.writeStringMultiple ("| ", inIndentation) ;
  s << ">" ;
  return GGS_string (true, s) ;
}

//---------------------------------------------------------------------------*

/* const */ GGS_goilTemplateType & GGS_goilTemplateVariableMap::cEnumerator::_mType (LOCATION_ARGS) const {
  return ((cElement *) mObjectArray (mCurrentIndex COMMA_THERE))->mInfo.mType ;
}

//---------------------------------------------------------------------------*

/* const */ GGS_goilTemplateValue & GGS_goilTemplateVariableMap::cEnumerator::_mValue (LOCATION_ARGS) const {
  return ((cElement *) mObjectArray (mCurrentIndex COMMA_THERE))->mInfo.mValue ;
}

//---------------------------------------------------------------------------*

GGS_object GGS_goilTemplateVariableMap::reader_object (void) const {
  GGS_object result ;
  if (isBuilt ()) {
    GGS_goilTemplateVariableMap * p = NULL ;
    macroMyNew (p, GGS_goilTemplateVariableMap (*this)) ;
    result = GGS_object (p) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_goilTemplateVariableMap GGS_goilTemplateVariableMap::castFromObject (C_Compiler & inLexique,
                                   const GGS_object & inObject,
                                   const GGS_location & inErrorLocation
                                   COMMA_LOCATION_ARGS) {
  GGS_goilTemplateVariableMap result ;
  const GGS__root * embeddedObject = inObject.embeddedObject () ;
  if (NULL != embeddedObject) {
    const GGS_goilTemplateVariableMap * p = dynamic_cast <const GGS_goilTemplateVariableMap *> (embeddedObject) ;
    if (NULL != p) {
      result = * p ;
    }else{
      castFromObjectErrorSignaling (inLexique, inErrorLocation, & kTypeDescriptor_GGS_goilTemplateVariableMap, embeddedObject COMMA_THERE) ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*

const C_galgas_type_descriptorEX * GGS_goilTemplateVariableMap::typeDescriptor (void) const {
  return & kTypeDescriptor_GGS_goilTemplateVariableMap ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//              Element of list '@goilTemplateExpressionList'                *
//                                                                           *
//---------------------------------------------------------------------------*

elementOf_GGS_goilTemplateExpressionList::
elementOf_GGS_goilTemplateExpressionList (const GGS_goilTemplateValue& argument_0,
                                const GGS_goilTemplateType& argument_1
                                COMMA_LOCATION_ARGS) :
AC_galgas_list::cListElement (THERE),
mValue (argument_0),
mType (argument_1) {
}

//---------------------------------------------------------------------------*

bool elementOf_GGS_goilTemplateExpressionList::
isEqualToObject (const cListElement * inOperand) const {
  bool equal = inOperand == this ;
  if (! equal) {
    const elementOf_GGS_goilTemplateExpressionList * ptr = dynamic_cast <const elementOf_GGS_goilTemplateExpressionList *> (inOperand) ;
    macroValidPointer (ptr) ;
    equal = mValue.operator_isEqual (ptr->mValue).boolValue ()
         && mType.operator_isEqual (ptr->mType).boolValue () ;
  }
  return equal ;
}

//---------------------------------------------------------------------------*

void elementOf_GGS_goilTemplateExpressionList::
appendForDescription (C_String & ioString,
                      const PMSInt32 inIndentation) const {
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "|-" ;
  ioString << mValue.reader_description (inIndentation) ;
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "|-" ;
  ioString << mType.reader_description (inIndentation) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                    List '@goilTemplateExpressionList'                     *
//                                                                           *
//---------------------------------------------------------------------------*

const C_galgas_type_descriptorEX kTypeDescriptor_GGS_goilTemplateExpressionList ("goilTemplateExpressionList", false, NULL) ;

//---------------------------------------------------------------------------*

void GGS_goilTemplateExpressionList::
internalAppendValues (const GGS_goilTemplateValue& argument_0,
                    const GGS_goilTemplateType& argument_1
                    COMMA_LOCATION_ARGS) {
  cElement * nouvelElement = (cElement *) NULL ;
  macroMyNew (nouvelElement, cElement (argument_0,
                                argument_1
                                COMMA_THERE)) ;
  _internalAppendItem (nouvelElement) ;
}

//---------------------------------------------------------------------------*

void GGS_goilTemplateExpressionList::
internalPrependValues (const GGS_goilTemplateValue& argument_0,
                    const GGS_goilTemplateType& argument_1
                    COMMA_LOCATION_ARGS) {
  cElement * nouvelElement = (cElement *) NULL ;
  macroMyNew (nouvelElement, cElement (argument_0,
                                argument_1
                                COMMA_THERE)) ;
  _internalPrependItem (nouvelElement) ;
}

//---------------------------------------------------------------------------*

void GGS_goilTemplateExpressionList::
addAssign_operation (const GGS_goilTemplateValue& argument_0,
                                const GGS_goilTemplateType& argument_1) {
  if (isBuilt ()&& argument_0.isBuilt ()&& argument_1.isBuilt ()) {
    insulateList () ;
    internalAppendValues (argument_0,
                                argument_1
                                COMMA_HERE) ;
  }
}

//---------------------------------------------------------------------------*

GGS_goilTemplateExpressionList GGS_goilTemplateExpressionList::
operator_concat (const GGS_goilTemplateExpressionList & inOperand) const {
  GGS_goilTemplateExpressionList result = * this ;
  result.dotAssign_operation (inOperand) ;
  return result ;
}

//---------------------------------------------------------------------------*

void GGS_goilTemplateExpressionList::
dotAssign_operation (const GGS_goilTemplateExpressionList inOperand) {
  if (isBuilt () && inOperand.isBuilt ()) {
    if (count () == 0) {
      * this = inOperand ;
    }else{
      if (inOperand.count () > 0) {
        insulateList () ;
        elementOf_GGS_goilTemplateExpressionList * p = inOperand.firstObject () ;
        while (p != NULL) {
          macroValidPointer (p) ;
          GGS_goilTemplateValue p_0 = p->mValue ;
          GGS_goilTemplateType p_1 = p->mType ;
          internalAppendValues (p_0, p_1 COMMA_HERE) ;
          p = p->nextObject () ;
        }
      }
    }
  }
}

//---------------------------------------------------------------------------*

void GGS_goilTemplateExpressionList::
modifier_prependValue (C_Compiler & /* inLexique */,
                     const GGS_goilTemplateValue& argument_0,
                     const GGS_goilTemplateType& argument_1
                     COMMA_UNUSED_LOCATION_ARGS) {
  if (isBuilt ()) {
    insulateList () ;
    internalPrependValues (argument_0,
                                argument_1
                                COMMA_HERE) ;
  }
}

//---------------------------------------------------------------------------*

void GGS_goilTemplateExpressionList::
insulateList (void) {
  if (_shared ()) {
    cElement * ptr = firstObject () ;
    alloc () ;
    while (ptr != NULL) {
      macroValidPointer (ptr) ;
      internalAppendValues (ptr->mValue,
                                ptr->mType
                                COMMA_HERE) ;
      ptr = ptr->nextObject () ;
    }
  }
}

//---------------------------------------------------------------------------*

GGS_goilTemplateExpressionList  GGS_goilTemplateExpressionList::
constructor_emptyList (void) {
  GGS_goilTemplateExpressionList result ;
  result.alloc () ;
  return result ;
}

//---------------------------------------------------------------------------*

GGS_goilTemplateExpressionList  GGS_goilTemplateExpressionList::
constructor_listWithValue (const GGS_goilTemplateValue& argument_0,
                                const GGS_goilTemplateType& argument_1) {
  GGS_goilTemplateExpressionList result ;
  result.alloc () ;
  result.addAssign_operation (argument_0, argument_1) ;
  return result ;
}

//---------------------------------------------------------------------------*

void GGS_goilTemplateExpressionList::
internalSubListWithRange (GGS_goilTemplateExpressionList & ioList,
                          const PMSInt32 inFirstIndex,
                          const PMSInt32 inCount) const {
  ioList.alloc () ;
  if (inCount > 0) {
    cElement * ptr = firstObject () ;
    for (PMSInt32 i=0 ; i<inFirstIndex ; i++) {
      macroValidPointer (ptr) ;
      ptr = ptr->nextObject () ;
    }
    for (PMSInt32 i=0 ; i<inCount ; i++) {
      macroValidPointer (ptr) ;
      ioList.addAssign_operation (ptr->mValue, ptr->mType) ;
      ptr = ptr->nextObject () ;
    }
  }
}

//---------------------------------------------------------------------------*

GGS_goilTemplateExpressionList GGS_goilTemplateExpressionList::
reader_subListWithRange (C_Compiler & inLexique,
                         const GGS_uint & inFirstIndex,
                         const GGS_uint & inCount
                         COMMA_LOCATION_ARGS) const {
  GGS_goilTemplateExpressionList result ;
  if (isBuilt () && inFirstIndex.isBuilt () && inCount.isBuilt ()) {
    const PMSInt32 firstIndex = (PMSInt32) inFirstIndex.uintValue () ;
    const PMSInt32 rangeCount = (PMSInt32) inCount.uintValue () ;
    if ((firstIndex + rangeCount) > count ()) {
      inLexique.onTheFlyRunTimeError ("'subListWithRange' method invoked with upper bound greater than list object count" COMMA_THERE) ;
    }else{
      internalSubListWithRange (result, firstIndex, rangeCount) ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_goilTemplateExpressionList GGS_goilTemplateExpressionList::
reader_subListFromIndex (C_Compiler & inLexique,
                         const GGS_uint & inIndex
                         COMMA_LOCATION_ARGS) const {
  GGS_goilTemplateExpressionList result ;
  if (isBuilt () && inIndex.isBuilt ()) {
    const PMSInt32 startIndex = (PMSInt32) inIndex.uintValue () ;
    if (startIndex > count ()) {
      inLexique.onTheFlyRunTimeError ("'subListFromIndex' method invoked with start index greater than list object count" COMMA_THERE) ;
    }else{
      internalSubListWithRange (result, startIndex, count () - startIndex) ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_string GGS_goilTemplateExpressionList::
reader_description (const PMSInt32 inIndentation) const {
  return performDescription ("@goilTemplateExpressionList", inIndentation) ;
}

//---------------------------------------------------------------------------*

void GGS_goilTemplateExpressionList::
method_first (C_Compiler & inLexique,
              GGS_goilTemplateValue& _out_0,
              GGS_goilTemplateType& _out_1
              COMMA_LOCATION_ARGS) const {
  cElement * ptr = NULL ;
  if (isBuilt ()) {
    ptr = firstObject () ;
    if (ptr == NULL) {
      inLexique.onTheFlyRunTimeError ("'first' method invoked on an empty list" COMMA_THERE) ;
    }
  }
  if (ptr != NULL) {
    _out_0 = ptr->mValue ;
    _out_1 = ptr->mType ;
  }else{
    _out_0.drop () ;
    _out_1.drop () ;
  }
}

//---------------------------------------------------------------------------*

void GGS_goilTemplateExpressionList::
method_last (C_Compiler & inLexique,
             GGS_goilTemplateValue& _out_0,
             GGS_goilTemplateType& _out_1
             COMMA_LOCATION_ARGS) const {
  cElement * ptr = NULL ;
  if (isBuilt ()) {
    ptr = lastObject () ;
    if (ptr == NULL) {
      inLexique.onTheFlyRunTimeError ("'last' method invoked on an empty list" COMMA_THERE) ;
    }
  }
  if (ptr != NULL) {
    _out_0 = ptr->mValue ;
    _out_1 = ptr->mType ;
  }else{
    _out_0.drop () ;
    _out_1.drop () ;
  }
}

//---------------------------------------------------------------------------*

void GGS_goilTemplateExpressionList::
modifier_popFirst (C_Compiler & inLexique,
                 GGS_goilTemplateValue& _out_0,
                 GGS_goilTemplateType& _out_1
                 COMMA_LOCATION_ARGS) {
  cElement * ptr = NULL ;
  if (isBuilt ()) {
    ptr = firstObject () ;
    if (ptr == NULL) {
      inLexique.onTheFlyRunTimeError ("'popFirst' modifier invoked on an empty list" COMMA_THERE) ;
    }
  }
  if (ptr != NULL) {
    _out_0 = ptr->mValue ;
    _out_1 = ptr->mType ;
    insulateList () ;
    _internalRemoveFirst () ;
  }else{
    _out_0.drop () ;
    _out_1.drop () ;
  }
}

//---------------------------------------------------------------------------*

void GGS_goilTemplateExpressionList::
modifier_popLast (C_Compiler & inLexique,
                GGS_goilTemplateValue& _out_0,
                GGS_goilTemplateType& _out_1
                COMMA_LOCATION_ARGS) {
  cElement * ptr = NULL ;
  if (isBuilt ()) {
    ptr = lastObject () ;
    if (ptr == NULL) {
      inLexique.onTheFlyRunTimeError ("'popLast' modifier invoked on an empty list" COMMA_THERE) ;
    }
  }
  if (ptr != NULL) {
    _out_0 = ptr->mValue ;
    _out_1 = ptr->mType ;
    insulateList () ;
    _internalRemoveLast () ;
  }else{
    _out_0.drop () ;
    _out_1.drop () ;
  }
}

//---------------------------------------------------------------------------*

GGS_goilTemplateValue GGS_goilTemplateExpressionList::
reader_mValueAtIndex (C_Compiler & inLexique, const GGS_uint & inIndex COMMA_LOCATION_ARGS) const {
  GGS_goilTemplateValue result ;
  if (isBuilt () && inIndex.isBuilt ()) {
    cElement * object = (cElement *) objectAtIndex (inLexique, inIndex.uintValue () COMMA_THERE) ;
    if (object != NULL) {
      result = object->mValue ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_goilTemplateType GGS_goilTemplateExpressionList::
reader_mTypeAtIndex (C_Compiler & inLexique, const GGS_uint & inIndex COMMA_LOCATION_ARGS) const {
  GGS_goilTemplateType result ;
  if (isBuilt () && inIndex.isBuilt ()) {
    cElement * object = (cElement *) objectAtIndex (inLexique, inIndex.uintValue () COMMA_THERE) ;
    if (object != NULL) {
      result = object->mType ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*

void GGS_goilTemplateExpressionList::
modifier_setMValueAtIndex (C_Compiler & inLexique,
                              const GGS_goilTemplateValue & inObject,
                              const GGS_uint & inIndex
                              COMMA_LOCATION_ARGS) const {
  if (isBuilt () && inIndex.isBuilt ()) {
    cElement * object = (cElement *) objectAtIndex (inLexique, inIndex.uintValue () COMMA_THERE) ;
    if (object != NULL) {
      object->mValue = inObject ;
    }
  }
}

//---------------------------------------------------------------------------*

void GGS_goilTemplateExpressionList::
modifier_setMTypeAtIndex (C_Compiler & inLexique,
                              const GGS_goilTemplateType & inObject,
                              const GGS_uint & inIndex
                              COMMA_LOCATION_ARGS) const {
  if (isBuilt () && inIndex.isBuilt ()) {
    cElement * object = (cElement *) objectAtIndex (inLexique, inIndex.uintValue () COMMA_THERE) ;
    if (object != NULL) {
      object->mType = inObject ;
    }
  }
}

//---------------------------------------------------------------------------*

/* const */ GGS_goilTemplateValue & GGS_goilTemplateExpressionList::cEnumerator::_mValue (LOCATION_ARGS) const {
  macroValidPointerThere (mCurrentEnumeratedObject) ;
  return ((/* const */ cElement *) mCurrentEnumeratedObject)->mValue ;
}

//---------------------------------------------------------------------------*

/* const */ GGS_goilTemplateType & GGS_goilTemplateExpressionList::cEnumerator::_mType (LOCATION_ARGS) const {
  macroValidPointerThere (mCurrentEnumeratedObject) ;
  return ((/* const */ cElement *) mCurrentEnumeratedObject)->mType ;
}

//---------------------------------------------------------------------------*

GGS_object GGS_goilTemplateExpressionList::reader_object (void) const {
  GGS_object result ;
  if (isBuilt ()) {
    GGS_goilTemplateExpressionList * p = NULL ;
    macroMyNew (p, GGS_goilTemplateExpressionList (*this)) ;
    result = GGS_object (p) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_goilTemplateExpressionList GGS_goilTemplateExpressionList::castFromObject (C_Compiler & inLexique,
                                   const GGS_object & inObject,
                                   const GGS_location & inErrorLocation
                                   COMMA_LOCATION_ARGS) {
  GGS_goilTemplateExpressionList result ;
  const GGS__root * embeddedObject = inObject.embeddedObject () ;
  if (NULL != embeddedObject) {
    const GGS_goilTemplateExpressionList * p = dynamic_cast <const GGS_goilTemplateExpressionList *> (embeddedObject) ;
    if (NULL != p) {
      result = * p ;
    }else{
      castFromObjectErrorSignaling (inLexique, inErrorLocation, & kTypeDescriptor_GGS_goilTemplateExpressionList, embeddedObject COMMA_THERE) ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*

const C_galgas_type_descriptorEX * GGS_goilTemplateExpressionList::typeDescriptor (void) const {
  return & kTypeDescriptor_GGS_goilTemplateExpressionList ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//               Element of list '@goilTemplateEnumationList'                *
//                                                                           *
//---------------------------------------------------------------------------*

elementOf_GGS_goilTemplateEnumationList::
elementOf_GGS_goilTemplateEnumationList (const GGS_goilTemplateValue& argument_0,
                                const GGS_string& argument_1
                                COMMA_LOCATION_ARGS) :
AC_galgas_list::cListElement (THERE),
mEnumeratedValue (argument_0),
mPrefix (argument_1) {
}

//---------------------------------------------------------------------------*

bool elementOf_GGS_goilTemplateEnumationList::
isEqualToObject (const cListElement * inOperand) const {
  bool equal = inOperand == this ;
  if (! equal) {
    const elementOf_GGS_goilTemplateEnumationList * ptr = dynamic_cast <const elementOf_GGS_goilTemplateEnumationList *> (inOperand) ;
    macroValidPointer (ptr) ;
    equal = mEnumeratedValue.operator_isEqual (ptr->mEnumeratedValue).boolValue ()
         && mPrefix.operator_isEqual (ptr->mPrefix).boolValue () ;
  }
  return equal ;
}

//---------------------------------------------------------------------------*

void elementOf_GGS_goilTemplateEnumationList::
appendForDescription (C_String & ioString,
                      const PMSInt32 inIndentation) const {
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "|-" ;
  ioString << mEnumeratedValue.reader_description (inIndentation) ;
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "|-" ;
  ioString << mPrefix.reader_description (inIndentation) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                    List '@goilTemplateEnumationList'                      *
//                                                                           *
//---------------------------------------------------------------------------*

const C_galgas_type_descriptorEX kTypeDescriptor_GGS_goilTemplateEnumationList ("goilTemplateEnumationList", false, NULL) ;

//---------------------------------------------------------------------------*

void GGS_goilTemplateEnumationList::
internalAppendValues (const GGS_goilTemplateValue& argument_0,
                    const GGS_string& argument_1
                    COMMA_LOCATION_ARGS) {
  cElement * nouvelElement = (cElement *) NULL ;
  macroMyNew (nouvelElement, cElement (argument_0,
                                argument_1
                                COMMA_THERE)) ;
  _internalAppendItem (nouvelElement) ;
}

//---------------------------------------------------------------------------*

void GGS_goilTemplateEnumationList::
internalPrependValues (const GGS_goilTemplateValue& argument_0,
                    const GGS_string& argument_1
                    COMMA_LOCATION_ARGS) {
  cElement * nouvelElement = (cElement *) NULL ;
  macroMyNew (nouvelElement, cElement (argument_0,
                                argument_1
                                COMMA_THERE)) ;
  _internalPrependItem (nouvelElement) ;
}

//---------------------------------------------------------------------------*

void GGS_goilTemplateEnumationList::
addAssign_operation (const GGS_goilTemplateValue& argument_0,
                                const GGS_string& argument_1) {
  if (isBuilt ()&& argument_0.isBuilt ()&& argument_1.isBuilt ()) {
    insulateList () ;
    internalAppendValues (argument_0,
                                argument_1
                                COMMA_HERE) ;
  }
}

//---------------------------------------------------------------------------*

GGS_goilTemplateEnumationList GGS_goilTemplateEnumationList::
operator_concat (const GGS_goilTemplateEnumationList & inOperand) const {
  GGS_goilTemplateEnumationList result = * this ;
  result.dotAssign_operation (inOperand) ;
  return result ;
}

//---------------------------------------------------------------------------*

void GGS_goilTemplateEnumationList::
dotAssign_operation (const GGS_goilTemplateEnumationList inOperand) {
  if (isBuilt () && inOperand.isBuilt ()) {
    if (count () == 0) {
      * this = inOperand ;
    }else{
      if (inOperand.count () > 0) {
        insulateList () ;
        elementOf_GGS_goilTemplateEnumationList * p = inOperand.firstObject () ;
        while (p != NULL) {
          macroValidPointer (p) ;
          GGS_goilTemplateValue p_0 = p->mEnumeratedValue ;
          GGS_string p_1 = p->mPrefix ;
          internalAppendValues (p_0, p_1 COMMA_HERE) ;
          p = p->nextObject () ;
        }
      }
    }
  }
}

//---------------------------------------------------------------------------*

void GGS_goilTemplateEnumationList::
modifier_prependValue (C_Compiler & /* inLexique */,
                     const GGS_goilTemplateValue& argument_0,
                     const GGS_string& argument_1
                     COMMA_UNUSED_LOCATION_ARGS) {
  if (isBuilt ()) {
    insulateList () ;
    internalPrependValues (argument_0,
                                argument_1
                                COMMA_HERE) ;
  }
}

//---------------------------------------------------------------------------*

void GGS_goilTemplateEnumationList::
insulateList (void) {
  if (_shared ()) {
    cElement * ptr = firstObject () ;
    alloc () ;
    while (ptr != NULL) {
      macroValidPointer (ptr) ;
      internalAppendValues (ptr->mEnumeratedValue,
                                ptr->mPrefix
                                COMMA_HERE) ;
      ptr = ptr->nextObject () ;
    }
  }
}

//---------------------------------------------------------------------------*

GGS_goilTemplateEnumationList  GGS_goilTemplateEnumationList::
constructor_emptyList (void) {
  GGS_goilTemplateEnumationList result ;
  result.alloc () ;
  return result ;
}

//---------------------------------------------------------------------------*

GGS_goilTemplateEnumationList  GGS_goilTemplateEnumationList::
constructor_listWithValue (const GGS_goilTemplateValue& argument_0,
                                const GGS_string& argument_1) {
  GGS_goilTemplateEnumationList result ;
  result.alloc () ;
  result.addAssign_operation (argument_0, argument_1) ;
  return result ;
}

//---------------------------------------------------------------------------*

void GGS_goilTemplateEnumationList::
internalSubListWithRange (GGS_goilTemplateEnumationList & ioList,
                          const PMSInt32 inFirstIndex,
                          const PMSInt32 inCount) const {
  ioList.alloc () ;
  if (inCount > 0) {
    cElement * ptr = firstObject () ;
    for (PMSInt32 i=0 ; i<inFirstIndex ; i++) {
      macroValidPointer (ptr) ;
      ptr = ptr->nextObject () ;
    }
    for (PMSInt32 i=0 ; i<inCount ; i++) {
      macroValidPointer (ptr) ;
      ioList.addAssign_operation (ptr->mEnumeratedValue, ptr->mPrefix) ;
      ptr = ptr->nextObject () ;
    }
  }
}

//---------------------------------------------------------------------------*

GGS_goilTemplateEnumationList GGS_goilTemplateEnumationList::
reader_subListWithRange (C_Compiler & inLexique,
                         const GGS_uint & inFirstIndex,
                         const GGS_uint & inCount
                         COMMA_LOCATION_ARGS) const {
  GGS_goilTemplateEnumationList result ;
  if (isBuilt () && inFirstIndex.isBuilt () && inCount.isBuilt ()) {
    const PMSInt32 firstIndex = (PMSInt32) inFirstIndex.uintValue () ;
    const PMSInt32 rangeCount = (PMSInt32) inCount.uintValue () ;
    if ((firstIndex + rangeCount) > count ()) {
      inLexique.onTheFlyRunTimeError ("'subListWithRange' method invoked with upper bound greater than list object count" COMMA_THERE) ;
    }else{
      internalSubListWithRange (result, firstIndex, rangeCount) ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_goilTemplateEnumationList GGS_goilTemplateEnumationList::
reader_subListFromIndex (C_Compiler & inLexique,
                         const GGS_uint & inIndex
                         COMMA_LOCATION_ARGS) const {
  GGS_goilTemplateEnumationList result ;
  if (isBuilt () && inIndex.isBuilt ()) {
    const PMSInt32 startIndex = (PMSInt32) inIndex.uintValue () ;
    if (startIndex > count ()) {
      inLexique.onTheFlyRunTimeError ("'subListFromIndex' method invoked with start index greater than list object count" COMMA_THERE) ;
    }else{
      internalSubListWithRange (result, startIndex, count () - startIndex) ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_string GGS_goilTemplateEnumationList::
reader_description (const PMSInt32 inIndentation) const {
  return performDescription ("@goilTemplateEnumationList", inIndentation) ;
}

//---------------------------------------------------------------------------*

void GGS_goilTemplateEnumationList::
method_first (C_Compiler & inLexique,
              GGS_goilTemplateValue& _out_0,
              GGS_string& _out_1
              COMMA_LOCATION_ARGS) const {
  cElement * ptr = NULL ;
  if (isBuilt ()) {
    ptr = firstObject () ;
    if (ptr == NULL) {
      inLexique.onTheFlyRunTimeError ("'first' method invoked on an empty list" COMMA_THERE) ;
    }
  }
  if (ptr != NULL) {
    _out_0 = ptr->mEnumeratedValue ;
    _out_1 = ptr->mPrefix ;
  }else{
    _out_0.drop () ;
    _out_1.drop () ;
  }
}

//---------------------------------------------------------------------------*

void GGS_goilTemplateEnumationList::
method_last (C_Compiler & inLexique,
             GGS_goilTemplateValue& _out_0,
             GGS_string& _out_1
             COMMA_LOCATION_ARGS) const {
  cElement * ptr = NULL ;
  if (isBuilt ()) {
    ptr = lastObject () ;
    if (ptr == NULL) {
      inLexique.onTheFlyRunTimeError ("'last' method invoked on an empty list" COMMA_THERE) ;
    }
  }
  if (ptr != NULL) {
    _out_0 = ptr->mEnumeratedValue ;
    _out_1 = ptr->mPrefix ;
  }else{
    _out_0.drop () ;
    _out_1.drop () ;
  }
}

//---------------------------------------------------------------------------*

void GGS_goilTemplateEnumationList::
modifier_popFirst (C_Compiler & inLexique,
                 GGS_goilTemplateValue& _out_0,
                 GGS_string& _out_1
                 COMMA_LOCATION_ARGS) {
  cElement * ptr = NULL ;
  if (isBuilt ()) {
    ptr = firstObject () ;
    if (ptr == NULL) {
      inLexique.onTheFlyRunTimeError ("'popFirst' modifier invoked on an empty list" COMMA_THERE) ;
    }
  }
  if (ptr != NULL) {
    _out_0 = ptr->mEnumeratedValue ;
    _out_1 = ptr->mPrefix ;
    insulateList () ;
    _internalRemoveFirst () ;
  }else{
    _out_0.drop () ;
    _out_1.drop () ;
  }
}

//---------------------------------------------------------------------------*

void GGS_goilTemplateEnumationList::
modifier_popLast (C_Compiler & inLexique,
                GGS_goilTemplateValue& _out_0,
                GGS_string& _out_1
                COMMA_LOCATION_ARGS) {
  cElement * ptr = NULL ;
  if (isBuilt ()) {
    ptr = lastObject () ;
    if (ptr == NULL) {
      inLexique.onTheFlyRunTimeError ("'popLast' modifier invoked on an empty list" COMMA_THERE) ;
    }
  }
  if (ptr != NULL) {
    _out_0 = ptr->mEnumeratedValue ;
    _out_1 = ptr->mPrefix ;
    insulateList () ;
    _internalRemoveLast () ;
  }else{
    _out_0.drop () ;
    _out_1.drop () ;
  }
}

//---------------------------------------------------------------------------*

GGS_goilTemplateValue GGS_goilTemplateEnumationList::
reader_mEnumeratedValueAtIndex (C_Compiler & inLexique, const GGS_uint & inIndex COMMA_LOCATION_ARGS) const {
  GGS_goilTemplateValue result ;
  if (isBuilt () && inIndex.isBuilt ()) {
    cElement * object = (cElement *) objectAtIndex (inLexique, inIndex.uintValue () COMMA_THERE) ;
    if (object != NULL) {
      result = object->mEnumeratedValue ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_string GGS_goilTemplateEnumationList::
reader_mPrefixAtIndex (C_Compiler & inLexique, const GGS_uint & inIndex COMMA_LOCATION_ARGS) const {
  GGS_string result ;
  if (isBuilt () && inIndex.isBuilt ()) {
    cElement * object = (cElement *) objectAtIndex (inLexique, inIndex.uintValue () COMMA_THERE) ;
    if (object != NULL) {
      result = object->mPrefix ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*

void GGS_goilTemplateEnumationList::
modifier_setMEnumeratedValueAtIndex (C_Compiler & inLexique,
                              const GGS_goilTemplateValue & inObject,
                              const GGS_uint & inIndex
                              COMMA_LOCATION_ARGS) const {
  if (isBuilt () && inIndex.isBuilt ()) {
    cElement * object = (cElement *) objectAtIndex (inLexique, inIndex.uintValue () COMMA_THERE) ;
    if (object != NULL) {
      object->mEnumeratedValue = inObject ;
    }
  }
}

//---------------------------------------------------------------------------*

void GGS_goilTemplateEnumationList::
modifier_setMPrefixAtIndex (C_Compiler & inLexique,
                              const GGS_string & inObject,
                              const GGS_uint & inIndex
                              COMMA_LOCATION_ARGS) const {
  if (isBuilt () && inIndex.isBuilt ()) {
    cElement * object = (cElement *) objectAtIndex (inLexique, inIndex.uintValue () COMMA_THERE) ;
    if (object != NULL) {
      object->mPrefix = inObject ;
    }
  }
}

//---------------------------------------------------------------------------*

/* const */ GGS_goilTemplateValue & GGS_goilTemplateEnumationList::cEnumerator::_mEnumeratedValue (LOCATION_ARGS) const {
  macroValidPointerThere (mCurrentEnumeratedObject) ;
  return ((/* const */ cElement *) mCurrentEnumeratedObject)->mEnumeratedValue ;
}

//---------------------------------------------------------------------------*

/* const */ GGS_string & GGS_goilTemplateEnumationList::cEnumerator::_mPrefix (LOCATION_ARGS) const {
  macroValidPointerThere (mCurrentEnumeratedObject) ;
  return ((/* const */ cElement *) mCurrentEnumeratedObject)->mPrefix ;
}

//---------------------------------------------------------------------------*

GGS_object GGS_goilTemplateEnumationList::reader_object (void) const {
  GGS_object result ;
  if (isBuilt ()) {
    GGS_goilTemplateEnumationList * p = NULL ;
    macroMyNew (p, GGS_goilTemplateEnumationList (*this)) ;
    result = GGS_object (p) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_goilTemplateEnumationList GGS_goilTemplateEnumationList::castFromObject (C_Compiler & inLexique,
                                   const GGS_object & inObject,
                                   const GGS_location & inErrorLocation
                                   COMMA_LOCATION_ARGS) {
  GGS_goilTemplateEnumationList result ;
  const GGS__root * embeddedObject = inObject.embeddedObject () ;
  if (NULL != embeddedObject) {
    const GGS_goilTemplateEnumationList * p = dynamic_cast <const GGS_goilTemplateEnumationList *> (embeddedObject) ;
    if (NULL != p) {
      result = * p ;
    }else{
      castFromObjectErrorSignaling (inLexique, inErrorLocation, & kTypeDescriptor_GGS_goilTemplateEnumationList, embeddedObject COMMA_THERE) ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*

const C_galgas_type_descriptorEX * GGS_goilTemplateEnumationList::typeDescriptor (void) const {
  return & kTypeDescriptor_GGS_goilTemplateEnumationList ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                Implementation of function "valueWithBool"                 *
//                                                                           *
//---------------------------------------------------------------------------*

GGS_goilTemplateValue function_valueWithBool (C_Compiler & inLexique,
                                const GGS_bool  var_cas_inValue COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER function_valueWithBool at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  GGS_goilTemplateValue var_cas_outValue ;
  var_cas_outValue = GGS_goilTemplateValue::constructor_new (var_cas_inValue.reader_uint64 (inLexique COMMA_SOURCE_FILE_AT_LINE (106)), GGS_string (""), GGS_goilTemplateFieldMapList ::constructor_emptyList ()) ;
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE function_valueWithBool\n") ;
  #endif
  return var_cas_outValue ;
}

//---------------------------------------------------------------------------*

static GGS_object functionForGenericCall_valueWithBool (C_Compiler & inLexique,
                           const GGS_objectlist & inEffectiveParameterArray,
                           const GGS_location & inErrorLocation
                           COMMA_LOCATION_ARGS) {
  const GGS_bool arg_0 = GGS_bool::castFromObject (inLexique, inEffectiveParameterArray.reader_mValueAtIndex (inLexique, GGS_uint (0) COMMA_THERE), inErrorLocation COMMA_THERE) ;
  const GGS_goilTemplateValue result = function_valueWithBool (inLexique,
                            arg_0
                            COMMA_THERE) ;
  return result.reader_object () ;
}

//---------------------------------------------------------------------------*

static const C_galgas_type_descriptorEX *
kArgumentTypeList_valueWithBool [1] = {& kTypeDescriptor_GGS_bool} ;

const C_galgas_function_descriptor
kFunction_descriptor_valueWithBool ("valueWithBool",
                              functionForGenericCall_valueWithBool,
                              & kTypeDescriptor_GGS_goilTemplateValue,
                              1,
                              kArgumentTypeList_valueWithBool) ;

//---------------------------------------------------------------------------*
//                                                                           *
//              Implementation of function "valueWithUnsigned"               *
//                                                                           *
//---------------------------------------------------------------------------*

GGS_goilTemplateValue function_valueWithUnsigned (C_Compiler &,
                                const GGS_uint64   var_cas_inValue COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER function_valueWithUnsigned at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  GGS_goilTemplateValue var_cas_outValue ;
  var_cas_outValue = GGS_goilTemplateValue::constructor_new (var_cas_inValue, GGS_string (""), GGS_goilTemplateFieldMapList ::constructor_emptyList ()) ;
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE function_valueWithUnsigned\n") ;
  #endif
  return var_cas_outValue ;
}

//---------------------------------------------------------------------------*

static GGS_object functionForGenericCall_valueWithUnsigned (C_Compiler & inLexique,
                           const GGS_objectlist & inEffectiveParameterArray,
                           const GGS_location & inErrorLocation
                           COMMA_LOCATION_ARGS) {
  const GGS_uint64  arg_0 = GGS_uint64 ::castFromObject (inLexique, inEffectiveParameterArray.reader_mValueAtIndex (inLexique, GGS_uint (0) COMMA_THERE), inErrorLocation COMMA_THERE) ;
  const GGS_goilTemplateValue result = function_valueWithUnsigned (inLexique,
                            arg_0
                            COMMA_THERE) ;
  return result.reader_object () ;
}

//---------------------------------------------------------------------------*

static const C_galgas_type_descriptorEX *
kArgumentTypeList_valueWithUnsigned [1] = {& kTypeDescriptor_GGS_uint64 } ;

const C_galgas_function_descriptor
kFunction_descriptor_valueWithUnsigned ("valueWithUnsigned",
                              functionForGenericCall_valueWithUnsigned,
                              & kTypeDescriptor_GGS_goilTemplateValue,
                              1,
                              kArgumentTypeList_valueWithUnsigned) ;

//---------------------------------------------------------------------------*
//                                                                           *
//               Implementation of function "valueWithString"                *
//                                                                           *
//---------------------------------------------------------------------------*

GGS_goilTemplateValue function_valueWithString (C_Compiler &,
                                const GGS_string  var_cas_inValue COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER function_valueWithString at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  GGS_goilTemplateValue var_cas_outValue ;
  var_cas_outValue = GGS_goilTemplateValue::constructor_new (GGS_uint64 (0ULL), var_cas_inValue, GGS_goilTemplateFieldMapList ::constructor_emptyList ()) ;
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE function_valueWithString\n") ;
  #endif
  return var_cas_outValue ;
}

//---------------------------------------------------------------------------*

static GGS_object functionForGenericCall_valueWithString (C_Compiler & inLexique,
                           const GGS_objectlist & inEffectiveParameterArray,
                           const GGS_location & inErrorLocation
                           COMMA_LOCATION_ARGS) {
  const GGS_string arg_0 = GGS_string::castFromObject (inLexique, inEffectiveParameterArray.reader_mValueAtIndex (inLexique, GGS_uint (0) COMMA_THERE), inErrorLocation COMMA_THERE) ;
  const GGS_goilTemplateValue result = function_valueWithString (inLexique,
                            arg_0
                            COMMA_THERE) ;
  return result.reader_object () ;
}

//---------------------------------------------------------------------------*

static const C_galgas_type_descriptorEX *
kArgumentTypeList_valueWithString [1] = {& kTypeDescriptor_GGS_string} ;

const C_galgas_function_descriptor
kFunction_descriptor_valueWithString ("valueWithString",
                              functionForGenericCall_valueWithString,
                              & kTypeDescriptor_GGS_goilTemplateValue,
                              1,
                              kArgumentTypeList_valueWithString) ;

//---------------------------------------------------------------------------*

