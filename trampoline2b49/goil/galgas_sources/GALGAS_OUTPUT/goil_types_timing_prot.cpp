//---------------------------------------------------------------------------*
//                                                                           *
//                    File 'goil_types_timing_prot.cpp'                      *
//                        Generated by version 2.0.0                         *
//                       july 7th, 2010, at 17h16'16"                        *
//                                                                           *
//---------------------------------------------------------------------------*

//--- START OF USER ZONE 1


//--- END OF USER ZONE 1

//---------------------------------------------------------------------------*

#include "version_libpm.h"
#if CURRENT_LIBPM_VERSION != 820
  #error "This file has been compiled with a version of GALGAS that uses libpm version 820, different than the current version (CURRENT_LIBPM_VERSION) of libpm"
#endif

//---------------------------------------------------------------------------*

#include <typeinfo>
#include "utilities/MF_MemoryControl.h"
#include "files/C_TextFileWrite.h"
#include "galgas/C_galgas_CLI_Options.h"
#include "goil_types_timing_prot.h"

//---------------------------------------------------------------------------*

#ifndef DO_NOT_GENERATE_CHECKINGS
  #define SOURCE_FILE_AT_LINE(line) "goil_types_timing_prot.gSemantics", line
  #define COMMA_SOURCE_FILE_AT_LINE(line) , SOURCE_FILE_AT_LINE(line)
#else
  #define SOURCE_FILE_AT_LINE(line) 
  #define COMMA_SOURCE_FILE_AT_LINE(line) 
#endif


//--- START OF USER ZONE 2


//--- END OF USER ZONE 2

//---------------------------------------------------------------------------*
//                                                                           *
//                          class 'e_rezlock_map'                            *
//                                                                           *
//---------------------------------------------------------------------------*

e_rezlock_map::e_rezlock_map (void) :
time () {
}

//---------------------------------------------------------------------------*
//                                                                           *
//                         class map '@rezlock_map'                          *
//                                                                           *
//---------------------------------------------------------------------------*

const C_galgas_type_descriptorEX kTypeDescriptor_GGS_rezlock_map ("rezlock_map", false, NULL) ;

//---------------------------------------------------------------------------*

elementOf_GGS_rezlock_map::
elementOf_GGS_rezlock_map (const GGS_lstring & inKey,
              const PMSInt32 inIndex,
              const e_rezlock_map & inInfo,
              const PMUInt32 inInitialState) :
AC_galgas_map_element (inKey, inIndex, inInitialState),
mInfo (inInfo) {
}

//---------------------------------------------------------------------------*

void elementOf_GGS_rezlock_map::
appendForMapDescription (const PMSInt32 inElementIndex,
                         C_String & ioString,
                         const PMSInt32 inIndentation) const {
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "|-key " ;
  ioString.appendSigned (inElementIndex) ;
  ioString << ":" << mKey.reader_description (inIndentation + 1) ;
  ioString << (mIsDefined ? "" : "(not solved)") ;
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "|-value " ;
  ioString.appendSigned (inElementIndex) ;
  ioString << ":" << mInfo.time.reader_description (inIndentation + 1) ;
}

//---------------------------------------------------------------------------*

bool elementOf_GGS_rezlock_map::
isEqualToMapElement (const AC_galgas_map_element * inOperand) const {
  const elementOf_GGS_rezlock_map * ptr = dynamic_cast <const elementOf_GGS_rezlock_map *> (inOperand) ;
  macroValidPointer (ptr) ;
  return (mInfo.time.operator_isEqual (ptr->mInfo.time)).boolValue () ;
}

//---------------------------------------------------------------------------*

AC_galgas_map_element * GGS_rezlock_map::
new_element (const GGS_lstring & inKey, void * inInfo, const PMUInt32 inInitialState) {
  MF_Assert (reinterpret_cast <e_rezlock_map *> (inInfo) != NULL, "Dynamic cast error", 0, 0) ;
  AC_galgas_map_element * p = NULL ;
  e_rezlock_map * info = (e_rezlock_map *) inInfo ;
  macroMyNew (p, cElement (inKey, nextIndex (), * info, inInitialState)) ;
  return p ;
}

//---------------------------------------------------------------------------*

void GGS_rezlock_map::
assignInfo (AC_galgas_map_element * inPtr, void * inInfo) {
  MF_Assert (reinterpret_cast <cElement *> (inPtr) != NULL, "Dynamic cast error", 0, 0) ;
  MF_Assert (reinterpret_cast <e_rezlock_map *> (inInfo) != NULL, "Dynamic cast error", 0, 0) ;
  cElement * p = (cElement *) inPtr ;
  e_rezlock_map * info = (e_rezlock_map *) inInfo ;
  p->mInfo = * info ;
}

//---------------------------------------------------------------------------*

GGS_rezlock_map GGS_rezlock_map::
constructor_emptyMap (C_Compiler & /* inLexique */ COMMA_UNUSED_LOCATION_ARGS) {
  GGS_rezlock_map result ;
  macroMyNew (result.mSharedMapRoot, cMapRoot) ;
  return result ;
}

//---------------------------------------------------------------------------*

void GGS_rezlock_map::
enterIndex (const GGS_string & inKey,
            AC_galgas_index_core & outIndex) {
  e_rezlock_map info  ;
  internalEnterIndex (inKey,
                      (void *) & info,
                      outIndex) ;
}

//---------------------------------------------------------------------------*

GGS_bool GGS_rezlock_map::
operator_isEqual (const GGS_rezlock_map & inOperand) const {
  return GGS_bool (isBuilt () && inOperand.isBuilt (), isEqualToMap (inOperand)) ;
}

//---------------------------------------------------------------------------*

GGS_bool GGS_rezlock_map::
operator_isNotEqual (const GGS_rezlock_map & inOperand) const {
  return GGS_bool (isBuilt () && inOperand.isBuilt (), ! isEqualToMap (inOperand)) ;
}

//---------------------------------------------------------------------------*

void GGS_rezlock_map::
internalInsertForDuplication (AC_galgas_map_element * inPtr) {
  MF_Assert (reinterpret_cast <cElement *> (inPtr) != NULL, "Dynamic cast error", 0, 0) ;
  cElement * p = (cElement *) inPtr ;
  PMSInt32 attributeIndex = -1 ; // Unused here
  GGS_location existingKeyLocation ; // Unused here
  internalInsert (p->mKey, (void *) & p->mInfo, attributeIndex, existingKeyLocation, p->mIsDefined, p->mCurrentState) ;
}

//---------------------------------------------------------------------------*

void GGS_rezlock_map::
removeElement (C_Compiler & inLexique,
                const utf32 * inErrorMessage,
                const GGS_lstring & inKey,
                GGS_uint64 & outParameter0,
                GGS_luint * outIndex
                COMMA_LOCATION_ARGS) {
  AC_galgas_map_element * removedElement = NULL ;
  PMSInt32 elementID = - 1 ;
  if (isBuilt () && inKey.isBuilt ()) {
    removedElement = internalRemove (inKey) ;
    if (removedElement == NULL) {
      inLexique.semanticErrorUsingPerCentK (inKey.string (), inKey, inErrorMessage COMMA_THERE) ;
      outParameter0.drop () ;
    }else{
      cElement * ptr = (cElement *) removedElement ;
      elementID = ptr->mID ;
      outParameter0 = ptr->mInfo.time ;
    }
  }
  if (outIndex != NULL) {
    * outIndex = GGS_luint (GGS_uint (elementID >= 0, (PMUInt32) elementID), inKey) ;
  }
  macroMyDelete (removedElement) ;
}

//---------------------------------------------------------------------------*

void GGS_rezlock_map::
insertElement (C_Compiler & inLexique,
               const PMUInt32 inInitialState,
               const utf32 * inErrorMessage,
               const GGS_lstring & inKey,
               const GGS_uint64 & inParameter0,
               GGS_luint * outIndex
               COMMA_LOCATION_ARGS) {
  PMSInt32 elementID = - 1 ;
  if (isBuilt ()
   && inParameter0.isBuilt ()
   && inKey.isBuilt ()) {
    insulateMap (THERE) ;
    e_rezlock_map info  ;
    info.time = inParameter0 ;
    GGS_location existingKeyLocation ;
    internalInsert (inKey, (void *) & info, elementID, existingKeyLocation, true, inInitialState) ;
    if (elementID < 0) {
      emitInsertMapSemanticErrorMessage (inLexique, inKey, inErrorMessage, existingKeyLocation COMMA_THERE) ;
    }
  }
  if (outIndex != NULL) {
    * outIndex = GGS_luint (GGS_uint (elementID >= 0, (PMUInt32) elementID), inKey) ;
  }
}

//---------------------------------------------------------------------------*

void GGS_rezlock_map::
searchElement (C_Compiler & inLexique,
               const PMUInt32 /* inActionIndex */,
               const utf32 * inErrorMessage,
               const GGS_lstring & inKey,
               GGS_uint64   & outParameter0,
               GGS_luint * outIndex
               COMMA_LOCATION_ARGS) const {
  cElement * node = NULL  ;
  if (isBuilt () && inKey.isBuilt ()) {
    AC_galgas_map_element * p = internal_search (inKey.string ()) ;
    MF_Assert ((p == NULL) || (reinterpret_cast <cElement *> (p) != NULL), "Dynamic cast error", 0, 0) ;
    node = (cElement *) p ;
    if (node == NULL) {
      inLexique.semanticErrorUsingPerCentK (inKey.string (), inKey, inErrorMessage COMMA_THERE) ;
    }
  }
  if (node == NULL) {
    outParameter0.drop () ;
    if (outIndex != NULL) {
      outIndex->drop () ;
    }
  }else{
    outParameter0 = node->mInfo.time ;
    if (outIndex != NULL) {
      * outIndex = GGS_luint (GGS_uint (true, (PMUInt32) node->mID), inKey) ;
    }
  }
}

//---------------------------------------------------------------------------*

const utf32 GGS_rezlock_map::kSearchMessage_get [] = {
  TO_UNICODE ('R'),
  TO_UNICODE ('e'),
  TO_UNICODE ('s'),
  TO_UNICODE ('o'),
  TO_UNICODE ('u'),
  TO_UNICODE ('r'),
  TO_UNICODE ('c'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('%'),
  TO_UNICODE ('K'),
  TO_UNICODE (' '),
  TO_UNICODE ('i'),
  TO_UNICODE ('s'),
  TO_UNICODE (' '),
  TO_UNICODE ('n'),
  TO_UNICODE ('o'),
  TO_UNICODE ('t'),
  TO_UNICODE (' '),
  TO_UNICODE ('d'),
  TO_UNICODE ('e'),
  TO_UNICODE ('f'),
  TO_UNICODE ('i'),
  TO_UNICODE ('n'),
  TO_UNICODE ('e'),
  TO_UNICODE ('d'),
  TO_UNICODE (0)
} ;

//---------------------------------------------------------------------------*

void GGS_rezlock_map::
method_get (C_Compiler & inLexique,
                                const GGS_lstring & inKey,
                                GGS_uint64   & outParameter0 COMMA_LOCATION_ARGS) const {
  searchElement (inLexique,
                 0,
                 kSearchMessage_get,
                 inKey,
                 outParameter0,
                 NULL
                 COMMA_THERE) ;
}

//---------------------------------------------------------------------------*

const utf32 GGS_rezlock_map::kRemoveMessage_del [] = {
  TO_UNICODE ('R'),
  TO_UNICODE ('e'),
  TO_UNICODE ('s'),
  TO_UNICODE ('o'),
  TO_UNICODE ('u'),
  TO_UNICODE ('r'),
  TO_UNICODE ('c'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('%'),
  TO_UNICODE ('K'),
  TO_UNICODE (' '),
  TO_UNICODE ('i'),
  TO_UNICODE ('s'),
  TO_UNICODE (' '),
  TO_UNICODE ('n'),
  TO_UNICODE ('o'),
  TO_UNICODE ('t'),
  TO_UNICODE (' '),
  TO_UNICODE ('d'),
  TO_UNICODE ('e'),
  TO_UNICODE ('f'),
  TO_UNICODE ('i'),
  TO_UNICODE ('n'),
  TO_UNICODE ('e'),
  TO_UNICODE ('d'),
  TO_UNICODE (0)
} ;

//---------------------------------------------------------------------------*

void GGS_rezlock_map::
modifier_del (C_Compiler & inLexique,
                                const GGS_lstring & inKey,
                                GGS_uint64 & outParameter0 COMMA_LOCATION_ARGS) {
  removeElement (inLexique,
                  kRemoveMessage_del,
                  inKey,
                  outParameter0,
                  NULL
                  COMMA_THERE) ;
}

//---------------------------------------------------------------------------*

const utf32 GGS_rezlock_map::kInsertMessage_put [] = {
  TO_UNICODE ('R'),
  TO_UNICODE ('e'),
  TO_UNICODE ('s'),
  TO_UNICODE ('o'),
  TO_UNICODE ('u'),
  TO_UNICODE ('r'),
  TO_UNICODE ('c'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('%'),
  TO_UNICODE ('K'),
  TO_UNICODE (' '),
  TO_UNICODE ('i'),
  TO_UNICODE ('s'),
  TO_UNICODE (' '),
  TO_UNICODE ('a'),
  TO_UNICODE ('l'),
  TO_UNICODE ('r'),
  TO_UNICODE ('e'),
  TO_UNICODE ('a'),
  TO_UNICODE ('d'),
  TO_UNICODE ('y'),
  TO_UNICODE (' '),
  TO_UNICODE ('d'),
  TO_UNICODE ('e'),
  TO_UNICODE ('f'),
  TO_UNICODE ('i'),
  TO_UNICODE ('n'),
  TO_UNICODE ('e'),
  TO_UNICODE ('d'),
  TO_UNICODE (' '),
  TO_UNICODE ('i'),
  TO_UNICODE ('n'),
  TO_UNICODE (' '),
  TO_UNICODE ('%'),
  TO_UNICODE ('L'),
  TO_UNICODE (0)
} ;

//---------------------------------------------------------------------------*

void GGS_rezlock_map::
modifier_put (C_Compiler & inLexique,
                                const GGS_lstring & inKey,
                                const GGS_uint64 & inParameter0 COMMA_LOCATION_ARGS) {
  insertElement (inLexique,
                 0,
                 kInsertMessage_put,
                 inKey,
                 inParameter0,
                NULL
                COMMA_THERE) ;
}

//---------------------------------------------------------------------------*

GGS_rezlock_map GGS_rezlock_map::
constructor_mapWithMapToOverride (C_Compiler & /* inLexique */,
                                  const GGS_rezlock_map & inMapToOverride
                                  COMMA_UNUSED_LOCATION_ARGS) {
  GGS_rezlock_map result ; // Not Built
  if (inMapToOverride.mSharedMapRoot != NULL) {
    macroValidPointer (inMapToOverride.mSharedMapRoot) ;
    macroMyNew (result.mSharedMapRoot, cMapRoot) ;
    result.mSharedMapRoot->mNextMap = inMapToOverride.mSharedMapRoot ;
    inMapToOverride.mSharedMapRoot->mReferenceCount ++ ;
    result.mSharedMapRoot->mSequenceNumber = inMapToOverride.mSharedMapRoot->mSequenceNumber ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_rezlock_map GGS_rezlock_map::
reader_overriddenMap (C_Compiler & /* inLexique */
                      COMMA_UNUSED_LOCATION_ARGS) const {
  GGS_rezlock_map result ; // Not Built
  if (mSharedMapRoot != NULL) {
    macroValidPointer (mSharedMapRoot) ;
    result.mSharedMapRoot = mSharedMapRoot->mNextMap ;
    if (result.mSharedMapRoot != NULL) {
      macroValidPointer (result.mSharedMapRoot) ;
      result.mSharedMapRoot->mReferenceCount ++ ;
    }else{
      macroMyNew (result.mSharedMapRoot, cMapRoot) ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_string GGS_rezlock_map::
reader_description (const PMSInt32 inIndentation) const {
  C_String s ;
  s << "<map @rezlock_map " ;
  if (isBuilt ()) {
    s.appendSigned (count ()) ;
    s << " object" << ((count () > 1) ? "s " : " ") ;
    cMapRoot * mapRoot = mSharedMapRoot ;
    PMSInt32 level = 0 ;
    while (mapRoot != NULL) {
      if (level > 0) {
        s << "\n" ;
        s.writeStringMultiple ("| ", inIndentation) ;
        s << "------- level " << cStringWithSigned (level) ;
      }
      macroValidPointer (mapRoot) ;
      cElement * p = (cElement *) mapRoot->mFirstItem ;
      PMSInt32 elementID = 0 ;
      while (p != NULL) {
        macroValidPointer (p) ;
        p->appendForMapDescription (elementID, s, inIndentation) ;
        p = p->nextObject () ;
        elementID ++ ;
      }
      mapRoot = mapRoot->mNextMap ;
      level ++ ;
    }
  }else{
    s << "not built" ;
  }
  s << "\n" ;
  s.writeStringMultiple ("| ", inIndentation) ;
  s << ">" ;
  return GGS_string (true, s) ;
}

//---------------------------------------------------------------------------*

/* const */ GGS_uint64  & GGS_rezlock_map::cEnumerator::_time (LOCATION_ARGS) const {
  return ((cElement *) mObjectArray (mCurrentIndex COMMA_THERE))->mInfo.time ;
}

//---------------------------------------------------------------------------*

GGS_object GGS_rezlock_map::reader_object (void) const {
  GGS_object result ;
  if (isBuilt ()) {
    GGS_rezlock_map * p = NULL ;
    macroMyNew (p, GGS_rezlock_map (*this)) ;
    result = GGS_object (p) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_rezlock_map GGS_rezlock_map::castFromObject (C_Compiler & inLexique,
                                   const GGS_object & inObject,
                                   const GGS_location & inErrorLocation
                                   COMMA_LOCATION_ARGS) {
  GGS_rezlock_map result ;
  const GGS__root * embeddedObject = inObject.embeddedObject () ;
  if (NULL != embeddedObject) {
    const GGS_rezlock_map * p = dynamic_cast <const GGS_rezlock_map *> (embeddedObject) ;
    if (NULL != p) {
      result = * p ;
    }else{
      castFromObjectErrorSignaling (inLexique, inErrorLocation, & kTypeDescriptor_GGS_rezlock_map, embeddedObject COMMA_THERE) ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*

const C_galgas_type_descriptorEX * GGS_rezlock_map::typeDescriptor (void) const {
  return & kTypeDescriptor_GGS_rezlock_map ;
}

//---------------------------------------------------------------------------*

GGS_rezlock_map GGS_rezlock_map::constructor_mapWithKeyAndValue (C_Compiler & inLexique,
                                             const GGS_lstring & inKey,
                                             const GGS_uint64 & inValue0
                                             COMMA_LOCATION_ARGS) {
  GGS_rezlock_map result = constructor_emptyMap (inLexique COMMA_THERE) ;
  result.insertElement (inLexique,
                        0,
                        NULL,
                        inKey,
                        inValue0,
                        NULL
                        COMMA_THERE) ;
  return result ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                Implementation of routine "gen_rez_table"                  *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_gen_rez_table (C_Compiler & inLexique,
                                GGS_rezlock_map   var_cas_rezlocks,
                                GGS_resource_map   var_cas_rez,
                                GGS_uint64   var_cas_tpn,
                                GGS_string & var_cas_table
                        COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_gen_rez_table at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  var_cas_table = GGS_string ("") ;
  GGS_uint  var_cas_i = GGS_uint (0U) ;
  {
    GGS_resource_map::cEnumerator enumerator_853 (var_cas_rez, true) ;
    const GGS_resource_map::cElement * operand_853 = NULL ;
    while (((operand_853 = enumerator_853.nextObject ()))) {
      macroValidPointer (operand_853) ;
      const GGS_bool cond_1064 = var_cas_rezlocks.reader_hasKey (operand_853->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (29))) ;
      if (cond_1064.isBuiltAndTrue ()) {
        GGS_uint64  var_cas_time ;
        if (var_cas_rezlocks.isBuilt ()) {
          var_cas_rezlocks (HERE)->method_get (inLexique, operand_853->mKey, var_cas_time COMMA_SOURCE_FILE_AT_LINE (31)) ;
        }
        var_cas_table.appendCString ("    ") ;
        var_cas_table.dotAssign_operation (var_cas_time.divide_operation (inLexique, var_cas_tpn COMMA_SOURCE_FILE_AT_LINE (32)).reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (32))) ;
      }else if (cond_1064.isBuiltAndFalse ()) {
        var_cas_table.appendCString ("    0") ;
      }
      const GGS_bool cond_1190 = (var_cas_i).operator_strictInf (var_cas_rez.reader_count ().substract_operation (inLexique, GGS_uint (1U) COMMA_SOURCE_FILE_AT_LINE (36))) ;
      if (cond_1190.isBuiltAndTrue ()) {
        var_cas_table.appendCString (",\n") ;
      }else if (cond_1190.isBuiltAndFalse ()) {
        var_cas_table.appendCString ("\n") ;
      }
      var_cas_i.increment_operation (inLexique COMMA_SOURCE_FILE_AT_LINE (41)) ;
    }
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_gen_rez_table\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//                         class 'cPtr_timing_prot'                          *
//                                                                           *
//---------------------------------------------------------------------------*

cPtr_timing_prot::
cPtr_timing_prot (const GGS_location & argument_0
                                COMMA_LOCATION_ARGS)
:cPtr__AC_galgas_class (THERE),
location (argument_0) {
}

//---------------------------------------------------------------------------*

#ifndef DO_NOT_GENERATE_CHECKINGS
  cPtr_timing_prot * GGS_timing_prot::
  operator () (LOCATION_ARGS) const {
    macroValidObjectThere (mPointer, cPtr_timing_prot) ;
    return (cPtr_timing_prot *) mPointer ;
  }
#endif

//---------------------------------------------------------------------------*

void cPtr_timing_prot::
appendForDescription (C_String & ioString,
                      const PMSInt32 inIndentation) const {
  ioString << "->@timing_prot:"
           << location.reader_description (inIndentation + 1) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                              Class message                                *
//                                                                           *
//---------------------------------------------------------------------------*

const char * cPtr_timing_prot::
instanceMessage (void) const {
  return "" ;
}

//---------------------------------------------------------------------------*

const char * cPtr_timing_prot::
_static_message (void) {
  return "" ;
}

//---------------------------------------------------------------------------*

C_galgas_class_inspector _gInspectorFor_timing_prot (& typeid (cPtr_timing_prot), NULL, "") ;

//---------------------------------------------------------------------------*

AC_galgasClassRunTimeInformationEX * cPtr_timing_prot::galgasRTTI (void) const {
  return & gClassInfoFor__timing_prot ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                      GALGAS class 'GGS_timing_prot'                       *
//                                                                           *
//---------------------------------------------------------------------------*

const C_galgas_type_descriptorEX kTypeDescriptor_GGS_timing_prot ("timing_prot", true, NULL) ;

//---------------------------------------------------------------------------*

GGS_timing_prot::
GGS_timing_prot (const cPtr__AC_galgas_class * inPointer) {
  macroAssignObject (mPointer, (cPtr__AC_galgas_class *) inPointer) ;
}

//---------------------------------------------------------------------------*

GGS_timing_prot::
GGS_timing_prot (cPtr__AC_galgas_class & inObject) {
  macroAssignObject (mPointer, & inObject) ;
}

//---------------------------------------------------------------------------*

//--- castFrom class method (implements cast expression)
GGS_timing_prot GGS_timing_prot::
castFrom (C_Compiler & inLexique,
           cPtr__AC_galgas_class * inPointer,
           const bool inUseKindOfClass,
           const GGS_location & inErrorLocation
           COMMA_LOCATION_ARGS) {
  GGS_timing_prot result ;
  if (inPointer != NULL) {
    macroValidPointer (inPointer) ;
    const bool ok = inUseKindOfClass
      ? (dynamic_cast <cPtr_timing_prot *> (inPointer) != NULL)
      : (typeid (cPtr_timing_prot) == typeid (*inPointer)) ;
    if (ok) {
      result = GGS_timing_prot (inPointer) ;
    }else{
      inErrorLocation.signalCastError (inLexique,
                                       & typeid (cPtr_timing_prot),
                                       inUseKindOfClass,
                                       inPointer->instanceMessage ()
                                       COMMA_THERE) ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_location  GGS_timing_prot::
reader_location (C_Compiler & /* inLexique */ COMMA_UNUSED_LOCATION_ARGS) const {
  GGS_location   result ;
  if (mPointer != NULL) {
    macroValidPointer (mPointer) ;
    MF_Assert (dynamic_cast <cPtr_timing_prot *> (mPointer) != NULL,
               "dynamic cast error", 0, 0) ;
    result = ((cPtr_timing_prot *) mPointer)->location ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

const char * GGS_timing_prot::actualTypeName (void) const {
  return "timing_prot" ;
}

//---------------------------------------------------------------------------*

AC_galgasClassRunTimeInformationEX * GGS_timing_prot::galgasObjectRunTimeInfo (void) const {
  AC_galgasClassRunTimeInformationEX * result = NULL ;
  if (mPointer != NULL) {
    result = mPointer->galgasRTTI () ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

C_galgasRootClassRunTimeInformationEX gClassInfoFor__timing_prot ("timing_prot", & kTypeDescriptor_GGS_timing_prot) ;

//---------------------------------------------------------------------------*

GGS_object GGS_timing_prot::reader_object (void) const {
  GGS_object result ;
  if (isBuilt ()) {
    GGS_timing_prot * p = NULL ;
    macroMyNew (p, GGS_timing_prot (*this)) ;
    result = GGS_object (p) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_timing_prot GGS_timing_prot::castFromObject (C_Compiler & inLexique,
                                   const GGS_object & inObject,
                                   const GGS_location & inErrorLocation
                                   COMMA_LOCATION_ARGS) {
  GGS_timing_prot result ;
  const GGS__root * embeddedObject = inObject.embeddedObject () ;
  if (NULL != embeddedObject) {
    const GGS_timing_prot * p = dynamic_cast <const GGS_timing_prot *> (embeddedObject) ;
    if (NULL != p) {
      result = * p ;
    }else{
      castFromObjectErrorSignaling (inLexique, inErrorLocation, & kTypeDescriptor_GGS_timing_prot, embeddedObject COMMA_THERE) ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*

const C_galgas_type_descriptorEX * GGS_timing_prot::typeDescriptor (void) const {
  return & kTypeDescriptor_GGS_timing_prot ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                      class 'cPtr_void_timing_prot'                        *
//                                                                           *
//---------------------------------------------------------------------------*

cPtr_void_timing_prot::
cPtr_void_timing_prot (const GGS_location & argument_0
                                COMMA_LOCATION_ARGS)
:cPtr_timing_prot (argument_0 COMMA_THERE) {
}

//---------------------------------------------------------------------------*

#ifndef DO_NOT_GENERATE_CHECKINGS
  cPtr_void_timing_prot * GGS_void_timing_prot::
  operator () (LOCATION_ARGS) const {
    macroValidObjectThere (mPointer, cPtr_void_timing_prot) ;
    return (cPtr_void_timing_prot *) mPointer ;
  }
#endif

//---------------------------------------------------------------------------*

bool cPtr_void_timing_prot::
isEqualToObject (const cPtr__AC_galgas_class * inOperand) const {
  bool equal = typeid (this) == typeid (inOperand) ;
  if (equal) {
    const cPtr_void_timing_prot * ptr = dynamic_cast <const cPtr_void_timing_prot *> (inOperand) ;
    macroValidPointer (ptr) ;
    equal = location.operator_isEqual (ptr->location).boolValue () ;
  }
  return equal ;
}

//---------------------------------------------------------------------------*

void cPtr_void_timing_prot::
method_generate (C_Compiler & /* inLexique */,
                                GGS_config  /* var_cas_cfg */,
                                GGS_string& var_cas_result,
                                GGS_string& var_cas_st_name,
                                GGS_string /* var_cas_name */,
                                GGS_resource_map  /* var_cas_rez */ COMMA_UNUSED_LOCATION_ARGS) const {
  var_cas_result = GGS_string ("") ;
  var_cas_st_name = GGS_string ("NULL") ;
}

//---------------------------------------------------------------------------*

void cPtr_void_timing_prot::
appendForDescription (C_String & ioString,
                      const PMSInt32 inIndentation) const {
  ioString << "->@void_timing_prot:"
           << location.reader_description (inIndentation + 1) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                              Class message                                *
//                                                                           *
//---------------------------------------------------------------------------*

const char * cPtr_void_timing_prot::
instanceMessage (void) const {
  return "" ;
}

//---------------------------------------------------------------------------*

const char * cPtr_void_timing_prot::
_static_message (void) {
  return "" ;
}

//---------------------------------------------------------------------------*

C_galgas_class_inspector _gInspectorFor_void_timing_prot (& typeid (cPtr_void_timing_prot), & typeid (cPtr_timing_prot), "") ;

//---------------------------------------------------------------------------*

AC_galgasClassRunTimeInformationEX * cPtr_void_timing_prot::galgasRTTI (void) const {
  return & gClassInfoFor__void_timing_prot ;
}

//---------------------------------------------------------------------------*

cPtr__AC_galgas_class * cPtr_void_timing_prot::makeClone (void) const {
  cPtr__AC_galgas_class * result = NULL ;
  macroMyNew (result, cPtr_void_timing_prot (location COMMA_HERE)) ;
  return result ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                   GALGAS class 'GGS_void_timing_prot'                     *
//                                                                           *
//---------------------------------------------------------------------------*

const C_galgas_type_descriptorEX kTypeDescriptor_GGS_void_timing_prot ("void_timing_prot", true, & kTypeDescriptor_GGS_timing_prot) ;

//---------------------------------------------------------------------------*

GGS_void_timing_prot::
GGS_void_timing_prot (const cPtr__AC_galgas_class * inPointer) {
  macroAssignObject (mPointer, (cPtr__AC_galgas_class *) inPointer) ;
}

//---------------------------------------------------------------------------*

GGS_void_timing_prot::
GGS_void_timing_prot (cPtr__AC_galgas_class & inObject) {
  macroAssignObject (mPointer, & inObject) ;
}

//---------------------------------------------------------------------------*

//--- castFrom class method (implements cast expression)
GGS_void_timing_prot GGS_void_timing_prot::
castFrom (C_Compiler & inLexique,
           cPtr__AC_galgas_class * inPointer,
           const bool inUseKindOfClass,
           const GGS_location & inErrorLocation
           COMMA_LOCATION_ARGS) {
  GGS_void_timing_prot result ;
  if (inPointer != NULL) {
    macroValidPointer (inPointer) ;
    const bool ok = inUseKindOfClass
      ? (dynamic_cast <cPtr_void_timing_prot *> (inPointer) != NULL)
      : (typeid (cPtr_void_timing_prot) == typeid (*inPointer)) ;
    if (ok) {
      result = GGS_void_timing_prot (inPointer) ;
    }else{
      inErrorLocation.signalCastError (inLexique,
                                       & typeid (cPtr_void_timing_prot),
                                       inUseKindOfClass,
                                       inPointer->instanceMessage ()
                                       COMMA_THERE) ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_void_timing_prot GGS_void_timing_prot::
constructor_new (C_Compiler & /* inLexique */,
                 const GGS_location & argument_0
                                COMMA_LOCATION_ARGS) {
  GGS_void_timing_prot result ;
  macroMyNew (result.mPointer, cPtr_void_timing_prot (argument_0 COMMA_THERE)) ;
  macroRetainObject (result.mPointer) ;
  return result ;
}

//---------------------------------------------------------------------------*

const char * GGS_void_timing_prot::actualTypeName (void) const {
  return "void_timing_prot" ;
}

//---------------------------------------------------------------------------*

C_galgasClassRunTimeInformationEX gClassInfoFor__void_timing_prot ("void_timing_prot", gClassInfoFor__timing_prot, & kTypeDescriptor_GGS_void_timing_prot) ;

//---------------------------------------------------------------------------*

GGS_object GGS_void_timing_prot::reader_object (void) const {
  GGS_object result ;
  if (isBuilt ()) {
    GGS_void_timing_prot * p = NULL ;
    macroMyNew (p, GGS_void_timing_prot (*this)) ;
    result = GGS_object (p) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_void_timing_prot GGS_void_timing_prot::castFromObject (C_Compiler & inLexique,
                                   const GGS_object & inObject,
                                   const GGS_location & inErrorLocation
                                   COMMA_LOCATION_ARGS) {
  GGS_void_timing_prot result ;
  const GGS__root * embeddedObject = inObject.embeddedObject () ;
  if (NULL != embeddedObject) {
    const GGS_void_timing_prot * p = dynamic_cast <const GGS_void_timing_prot *> (embeddedObject) ;
    if (NULL != p) {
      result = * p ;
    }else{
      castFromObjectErrorSignaling (inLexique, inErrorLocation, & kTypeDescriptor_GGS_void_timing_prot, embeddedObject COMMA_THERE) ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*

const C_galgas_type_descriptorEX * GGS_void_timing_prot::typeDescriptor (void) const {
  return & kTypeDescriptor_GGS_void_timing_prot ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                      class 'cPtr_false_timing_prot'                       *
//                                                                           *
//---------------------------------------------------------------------------*

cPtr_false_timing_prot::
cPtr_false_timing_prot (const GGS_location & argument_0
                                COMMA_LOCATION_ARGS)
:cPtr_timing_prot (argument_0 COMMA_THERE) {
}

//---------------------------------------------------------------------------*

#ifndef DO_NOT_GENERATE_CHECKINGS
  cPtr_false_timing_prot * GGS_false_timing_prot::
  operator () (LOCATION_ARGS) const {
    macroValidObjectThere (mPointer, cPtr_false_timing_prot) ;
    return (cPtr_false_timing_prot *) mPointer ;
  }
#endif

//---------------------------------------------------------------------------*

bool cPtr_false_timing_prot::
isEqualToObject (const cPtr__AC_galgas_class * inOperand) const {
  bool equal = typeid (this) == typeid (inOperand) ;
  if (equal) {
    const cPtr_false_timing_prot * ptr = dynamic_cast <const cPtr_false_timing_prot *> (inOperand) ;
    macroValidPointer (ptr) ;
    equal = location.operator_isEqual (ptr->location).boolValue () ;
  }
  return equal ;
}

//---------------------------------------------------------------------------*

void cPtr_false_timing_prot::
method_generate (C_Compiler & /* inLexique */,
                                GGS_config  /* var_cas_cfg */,
                                GGS_string& var_cas_result,
                                GGS_string& var_cas_st_name,
                                GGS_string /* var_cas_name */,
                                GGS_resource_map  /* var_cas_rez */ COMMA_UNUSED_LOCATION_ARGS) const {
  var_cas_result = GGS_string ("") ;
  var_cas_st_name = GGS_string ("NULL") ;
}

//---------------------------------------------------------------------------*

void cPtr_false_timing_prot::
appendForDescription (C_String & ioString,
                      const PMSInt32 inIndentation) const {
  ioString << "->@false_timing_prot:"
           << location.reader_description (inIndentation + 1) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                              Class message                                *
//                                                                           *
//---------------------------------------------------------------------------*

const char * cPtr_false_timing_prot::
instanceMessage (void) const {
  return "" ;
}

//---------------------------------------------------------------------------*

const char * cPtr_false_timing_prot::
_static_message (void) {
  return "" ;
}

//---------------------------------------------------------------------------*

C_galgas_class_inspector _gInspectorFor_false_timing_prot (& typeid (cPtr_false_timing_prot), & typeid (cPtr_timing_prot), "") ;

//---------------------------------------------------------------------------*

AC_galgasClassRunTimeInformationEX * cPtr_false_timing_prot::galgasRTTI (void) const {
  return & gClassInfoFor__false_timing_prot ;
}

//---------------------------------------------------------------------------*

cPtr__AC_galgas_class * cPtr_false_timing_prot::makeClone (void) const {
  cPtr__AC_galgas_class * result = NULL ;
  macroMyNew (result, cPtr_false_timing_prot (location COMMA_HERE)) ;
  return result ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                   GALGAS class 'GGS_false_timing_prot'                    *
//                                                                           *
//---------------------------------------------------------------------------*

const C_galgas_type_descriptorEX kTypeDescriptor_GGS_false_timing_prot ("false_timing_prot", true, & kTypeDescriptor_GGS_timing_prot) ;

//---------------------------------------------------------------------------*

GGS_false_timing_prot::
GGS_false_timing_prot (const cPtr__AC_galgas_class * inPointer) {
  macroAssignObject (mPointer, (cPtr__AC_galgas_class *) inPointer) ;
}

//---------------------------------------------------------------------------*

GGS_false_timing_prot::
GGS_false_timing_prot (cPtr__AC_galgas_class & inObject) {
  macroAssignObject (mPointer, & inObject) ;
}

//---------------------------------------------------------------------------*

//--- castFrom class method (implements cast expression)
GGS_false_timing_prot GGS_false_timing_prot::
castFrom (C_Compiler & inLexique,
           cPtr__AC_galgas_class * inPointer,
           const bool inUseKindOfClass,
           const GGS_location & inErrorLocation
           COMMA_LOCATION_ARGS) {
  GGS_false_timing_prot result ;
  if (inPointer != NULL) {
    macroValidPointer (inPointer) ;
    const bool ok = inUseKindOfClass
      ? (dynamic_cast <cPtr_false_timing_prot *> (inPointer) != NULL)
      : (typeid (cPtr_false_timing_prot) == typeid (*inPointer)) ;
    if (ok) {
      result = GGS_false_timing_prot (inPointer) ;
    }else{
      inErrorLocation.signalCastError (inLexique,
                                       & typeid (cPtr_false_timing_prot),
                                       inUseKindOfClass,
                                       inPointer->instanceMessage ()
                                       COMMA_THERE) ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_false_timing_prot GGS_false_timing_prot::
constructor_new (C_Compiler & /* inLexique */,
                 const GGS_location & argument_0
                                COMMA_LOCATION_ARGS) {
  GGS_false_timing_prot result ;
  macroMyNew (result.mPointer, cPtr_false_timing_prot (argument_0 COMMA_THERE)) ;
  macroRetainObject (result.mPointer) ;
  return result ;
}

//---------------------------------------------------------------------------*

const char * GGS_false_timing_prot::actualTypeName (void) const {
  return "false_timing_prot" ;
}

//---------------------------------------------------------------------------*

C_galgasClassRunTimeInformationEX gClassInfoFor__false_timing_prot ("false_timing_prot", gClassInfoFor__timing_prot, & kTypeDescriptor_GGS_false_timing_prot) ;

//---------------------------------------------------------------------------*

GGS_object GGS_false_timing_prot::reader_object (void) const {
  GGS_object result ;
  if (isBuilt ()) {
    GGS_false_timing_prot * p = NULL ;
    macroMyNew (p, GGS_false_timing_prot (*this)) ;
    result = GGS_object (p) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_false_timing_prot GGS_false_timing_prot::castFromObject (C_Compiler & inLexique,
                                   const GGS_object & inObject,
                                   const GGS_location & inErrorLocation
                                   COMMA_LOCATION_ARGS) {
  GGS_false_timing_prot result ;
  const GGS__root * embeddedObject = inObject.embeddedObject () ;
  if (NULL != embeddedObject) {
    const GGS_false_timing_prot * p = dynamic_cast <const GGS_false_timing_prot *> (embeddedObject) ;
    if (NULL != p) {
      result = * p ;
    }else{
      castFromObjectErrorSignaling (inLexique, inErrorLocation, & kTypeDescriptor_GGS_false_timing_prot, embeddedObject COMMA_THERE) ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*

const C_galgas_type_descriptorEX * GGS_false_timing_prot::typeDescriptor (void) const {
  return & kTypeDescriptor_GGS_false_timing_prot ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                      class 'cPtr_timing_prot_task'                        *
//                                                                           *
//---------------------------------------------------------------------------*

cPtr_timing_prot_task::
cPtr_timing_prot_task (const GGS_location & argument_0,
                                const GGS_basic_type & argument_1,
                                const GGS_basic_type & argument_2,
                                const GGS_basic_type & argument_3,
                                const GGS_basic_type & argument_4,
                                const GGS_rezlock_map & argument_5
                                COMMA_LOCATION_ARGS)
:cPtr_timing_prot (argument_0 COMMA_THERE),
exe_budget (argument_1),
time_frame (argument_2),
os_it_lock (argument_3),
all_it_lock (argument_4),
rezlocks (argument_5) {
}

//---------------------------------------------------------------------------*

#ifndef DO_NOT_GENERATE_CHECKINGS
  cPtr_timing_prot_task * GGS_timing_prot_task::
  operator () (LOCATION_ARGS) const {
    macroValidObjectThere (mPointer, cPtr_timing_prot_task) ;
    return (cPtr_timing_prot_task *) mPointer ;
  }
#endif

//---------------------------------------------------------------------------*

bool cPtr_timing_prot_task::
isEqualToObject (const cPtr__AC_galgas_class * inOperand) const {
  bool equal = typeid (this) == typeid (inOperand) ;
  if (equal) {
    const cPtr_timing_prot_task * ptr = dynamic_cast <const cPtr_timing_prot_task *> (inOperand) ;
    macroValidPointer (ptr) ;
    equal = location.operator_isEqual (ptr->location).boolValue ()
         && exe_budget.operator_isEqual (ptr->exe_budget).boolValue ()
         && time_frame.operator_isEqual (ptr->time_frame).boolValue ()
         && os_it_lock.operator_isEqual (ptr->os_it_lock).boolValue ()
         && all_it_lock.operator_isEqual (ptr->all_it_lock).boolValue ()
         && rezlocks.operator_isEqual (ptr->rezlocks).boolValue () ;
  }
  return equal ;
}

//---------------------------------------------------------------------------*

void cPtr_timing_prot_task::
method_generate (C_Compiler & inLexique,
                                GGS_config  var_cas_cfg,
                                GGS_string& var_cas_result,
                                GGS_string& var_cas_st_name,
                                GGS_string var_cas_name,
                                GGS_resource_map  var_cas_rez COMMA_UNUSED_LOCATION_ARGS) const {
  GGS_uint64  var_cas_tpn = GGS_uint64 (1ULL) ;
  const GGS_bool cond_2850 = var_cas_cfg.reader_hasKey (GGS_string ("wd_ticks_per_ns")) ;
  if (cond_2850.isBuiltAndTrue ()) {
    GGS_basic_type  var_cas_val ;
    if (var_cas_cfg.isBuilt ()) {
      var_cas_cfg (HERE)->method_get (inLexique, GGS_lstring ::constructor_new (inLexique, GGS_string ("wd_ticks_per_ns"), GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (98)), var_cas_val COMMA_SOURCE_FILE_AT_LINE (98)) ;
    }
    { const GGS_basic_type _var_2831 = var_cas_val ; // CAST instruction
      if (_var_2831.getPtr () != NULL) {
        macroValidPointer (_var_2831.getPtr ()) ;
        if (typeid (cPtr_uint64_class) == typeid (* (_var_2831.getPtr ()))) {
          const GGS_uint64_class var_cas_ui (_var_2831.getPtr ()) ;
          var_cas_tpn = var_cas_ui.reader_value (inLexique COMMA_SOURCE_FILE_AT_LINE (100)) ;
        }else{
        }
      }
    }
  }
  var_cas_result = function_template_string (inLexique, GGS_string ("code"), GGS_string ("timing_protection") COMMA_SOURCE_FILE_AT_LINE (104)) ;
  { const GGS_basic_type _var_3108 = exe_budget ; // CAST instruction
    if (_var_3108.getPtr () != NULL) {
      macroValidPointer (_var_3108.getPtr ()) ;
      if (typeid (cPtr_uint64_class) == typeid (* (_var_3108.getPtr ()))) {
        const GGS_uint64_class var_cas_eb (_var_3108.getPtr ()) ;
        var_cas_result = var_cas_result.reader_stringByReplacingStringByString (inLexique, GGS_string ("$EXE_BUDGET$"), var_cas_eb.reader_value (inLexique COMMA_SOURCE_FILE_AT_LINE (108)).divide_operation (inLexique, var_cas_tpn COMMA_SOURCE_FILE_AT_LINE (108)).reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (108)) COMMA_SOURCE_FILE_AT_LINE (108)) ;
      }else{
      }
    }
  }
  { const GGS_basic_type _var_3301 = time_frame ; // CAST instruction
    if (_var_3301.getPtr () != NULL) {
      macroValidPointer (_var_3301.getPtr ()) ;
      if (typeid (cPtr_uint64_class) == typeid (* (_var_3301.getPtr ()))) {
        const GGS_uint64_class var_cas_tf (_var_3301.getPtr ()) ;
        var_cas_result = var_cas_result.reader_stringByReplacingStringByString (inLexique, GGS_string ("$TIME_FRAME$"), var_cas_tf.reader_value (inLexique COMMA_SOURCE_FILE_AT_LINE (112)).divide_operation (inLexique, var_cas_tpn COMMA_SOURCE_FILE_AT_LINE (112)).reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (112)) COMMA_SOURCE_FILE_AT_LINE (112)) ;
      }else{
      }
    }
  }
  { const GGS_basic_type _var_3496 = os_it_lock ; // CAST instruction
    if (_var_3496.getPtr () != NULL) {
      macroValidPointer (_var_3496.getPtr ()) ;
      if (typeid (cPtr_uint64_class) == typeid (* (_var_3496.getPtr ()))) {
        const GGS_uint64_class var_cas_oil (_var_3496.getPtr ()) ;
        var_cas_result = var_cas_result.reader_stringByReplacingStringByString (inLexique, GGS_string ("$OS_IT_LOCK$"), var_cas_oil.reader_value (inLexique COMMA_SOURCE_FILE_AT_LINE (116)).divide_operation (inLexique, var_cas_tpn COMMA_SOURCE_FILE_AT_LINE (116)).reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (116)) COMMA_SOURCE_FILE_AT_LINE (116)) ;
      }else{
      }
    }
  }
  { const GGS_basic_type _var_3692 = all_it_lock ; // CAST instruction
    if (_var_3692.getPtr () != NULL) {
      macroValidPointer (_var_3692.getPtr ()) ;
      if (typeid (cPtr_uint64_class) == typeid (* (_var_3692.getPtr ()))) {
        const GGS_uint64_class var_cas_ail (_var_3692.getPtr ()) ;
        var_cas_result = var_cas_result.reader_stringByReplacingStringByString (inLexique, GGS_string ("$ALL_IT_LOCK$"), var_cas_ail.reader_value (inLexique COMMA_SOURCE_FILE_AT_LINE (120)).divide_operation (inLexique, var_cas_tpn COMMA_SOURCE_FILE_AT_LINE (120)).reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (120)) COMMA_SOURCE_FILE_AT_LINE (120)) ;
      }else{
      }
    }
  }
  var_cas_st_name = ((GGS_string ("task_")).operator_concat (var_cas_name)).operator_concat (GGS_string ("_timing_prot")) ;
  var_cas_result = var_cas_result.reader_stringByReplacingStringByString (inLexique, GGS_string ("$TIMING_PROT$"), var_cas_st_name COMMA_SOURCE_FILE_AT_LINE (124)) ;
  GGS_string var_cas_table_name = ((GGS_string ("task_")).operator_concat (var_cas_name)).operator_concat (GGS_string ("_rez_lock_time")) ;
  GGS_string var_cas_table = GGS_string ("") ;
  ::routine_gen_rez_table (inLexique,  rezlocks,  var_cas_rez,  var_cas_tpn,  var_cas_table COMMA_SOURCE_FILE_AT_LINE (128)) ;
  const GGS_bool cond_4140 = (var_cas_rez.reader_count ()).operator_strictSup (GGS_uint (0U)) ;
  if (cond_4140.isBuiltAndTrue ()) {
    var_cas_table = ((((((GGS_string ("tpl_time ")).operator_concat (var_cas_table_name)).operator_concat (GGS_string ("["))).operator_concat (var_cas_rez.reader_count ().reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (131)))).operator_concat (GGS_string ("] = {\n"))).operator_concat (var_cas_table)).operator_concat (GGS_string ("};")) ;
  }
  var_cas_result = var_cas_result.reader_stringByReplacingStringByString (inLexique, GGS_string ("$LOCK_TIME_TABLE$"), var_cas_table COMMA_SOURCE_FILE_AT_LINE (134)) ;
  const GGS_bool cond_4377 = (var_cas_rez.reader_count ()).operator_strictSup (GGS_uint (0U)) ;
  if (cond_4377.isBuiltAndTrue ()) {
    var_cas_result = var_cas_result.reader_stringByReplacingStringByString (inLexique, GGS_string ("$REZ_LOCK_TIME$"), var_cas_table_name COMMA_SOURCE_FILE_AT_LINE (137)) ;
  }else if (cond_4377.isBuiltAndFalse ()) {
    var_cas_result = var_cas_result.reader_stringByReplacingStringByString (inLexique, GGS_string ("$REZ_LOCK_TIME$"), GGS_string ("NULL") COMMA_SOURCE_FILE_AT_LINE (139)) ;
  }
  var_cas_st_name = (GGS_string ("&")).operator_concat (var_cas_st_name) ;
}

//---------------------------------------------------------------------------*

void cPtr_timing_prot_task::
appendForDescription (C_String & ioString,
                      const PMSInt32 inIndentation) const {
  ioString << "->@timing_prot_task:"
           << location.reader_description (inIndentation + 1)
           << exe_budget.reader_description (inIndentation + 1)
           << time_frame.reader_description (inIndentation + 1)
           << os_it_lock.reader_description (inIndentation + 1)
           << all_it_lock.reader_description (inIndentation + 1)
           << rezlocks.reader_description (inIndentation + 1) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                              Class message                                *
//                                                                           *
//---------------------------------------------------------------------------*

const char * cPtr_timing_prot_task::
instanceMessage (void) const {
  return "" ;
}

//---------------------------------------------------------------------------*

const char * cPtr_timing_prot_task::
_static_message (void) {
  return "" ;
}

//---------------------------------------------------------------------------*

C_galgas_class_inspector _gInspectorFor_timing_prot_task (& typeid (cPtr_timing_prot_task), & typeid (cPtr_timing_prot), "") ;

//---------------------------------------------------------------------------*

AC_galgasClassRunTimeInformationEX * cPtr_timing_prot_task::galgasRTTI (void) const {
  return & gClassInfoFor__timing_prot_task ;
}

//---------------------------------------------------------------------------*

cPtr__AC_galgas_class * cPtr_timing_prot_task::makeClone (void) const {
  cPtr__AC_galgas_class * result = NULL ;
  macroMyNew (result, cPtr_timing_prot_task (location, exe_budget, time_frame, os_it_lock, all_it_lock, rezlocks COMMA_HERE)) ;
  return result ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                   GALGAS class 'GGS_timing_prot_task'                     *
//                                                                           *
//---------------------------------------------------------------------------*

const C_galgas_type_descriptorEX kTypeDescriptor_GGS_timing_prot_task ("timing_prot_task", true, & kTypeDescriptor_GGS_timing_prot) ;

//---------------------------------------------------------------------------*

GGS_timing_prot_task::
GGS_timing_prot_task (const cPtr__AC_galgas_class * inPointer) {
  macroAssignObject (mPointer, (cPtr__AC_galgas_class *) inPointer) ;
}

//---------------------------------------------------------------------------*

GGS_timing_prot_task::
GGS_timing_prot_task (cPtr__AC_galgas_class & inObject) {
  macroAssignObject (mPointer, & inObject) ;
}

//---------------------------------------------------------------------------*

//--- castFrom class method (implements cast expression)
GGS_timing_prot_task GGS_timing_prot_task::
castFrom (C_Compiler & inLexique,
           cPtr__AC_galgas_class * inPointer,
           const bool inUseKindOfClass,
           const GGS_location & inErrorLocation
           COMMA_LOCATION_ARGS) {
  GGS_timing_prot_task result ;
  if (inPointer != NULL) {
    macroValidPointer (inPointer) ;
    const bool ok = inUseKindOfClass
      ? (dynamic_cast <cPtr_timing_prot_task *> (inPointer) != NULL)
      : (typeid (cPtr_timing_prot_task) == typeid (*inPointer)) ;
    if (ok) {
      result = GGS_timing_prot_task (inPointer) ;
    }else{
      inErrorLocation.signalCastError (inLexique,
                                       & typeid (cPtr_timing_prot_task),
                                       inUseKindOfClass,
                                       inPointer->instanceMessage ()
                                       COMMA_THERE) ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_timing_prot_task GGS_timing_prot_task::
constructor_new (C_Compiler & /* inLexique */,
                 const GGS_location & argument_0,
                 const GGS_basic_type & argument_1,
                 const GGS_basic_type & argument_2,
                 const GGS_basic_type & argument_3,
                 const GGS_basic_type & argument_4,
                 const GGS_rezlock_map & argument_5
                                COMMA_LOCATION_ARGS) {
  GGS_timing_prot_task result ;
  macroMyNew (result.mPointer, cPtr_timing_prot_task (argument_0,
                                argument_1,
                                argument_2,
                                argument_3,
                                argument_4,
                                argument_5 COMMA_THERE)) ;
  macroRetainObject (result.mPointer) ;
  return result ;
}

//---------------------------------------------------------------------------*

GGS_basic_type  GGS_timing_prot_task::
reader_exe_budget (C_Compiler & /* inLexique */ COMMA_UNUSED_LOCATION_ARGS) const {
  GGS_basic_type   result ;
  if (mPointer != NULL) {
    macroValidPointer (mPointer) ;
    MF_Assert (dynamic_cast <cPtr_timing_prot_task *> (mPointer) != NULL,
               "dynamic cast error", 0, 0) ;
    result = ((cPtr_timing_prot_task *) mPointer)->exe_budget ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_basic_type  GGS_timing_prot_task::
reader_time_frame (C_Compiler & /* inLexique */ COMMA_UNUSED_LOCATION_ARGS) const {
  GGS_basic_type   result ;
  if (mPointer != NULL) {
    macroValidPointer (mPointer) ;
    MF_Assert (dynamic_cast <cPtr_timing_prot_task *> (mPointer) != NULL,
               "dynamic cast error", 0, 0) ;
    result = ((cPtr_timing_prot_task *) mPointer)->time_frame ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_basic_type  GGS_timing_prot_task::
reader_os_it_lock (C_Compiler & /* inLexique */ COMMA_UNUSED_LOCATION_ARGS) const {
  GGS_basic_type   result ;
  if (mPointer != NULL) {
    macroValidPointer (mPointer) ;
    MF_Assert (dynamic_cast <cPtr_timing_prot_task *> (mPointer) != NULL,
               "dynamic cast error", 0, 0) ;
    result = ((cPtr_timing_prot_task *) mPointer)->os_it_lock ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_basic_type  GGS_timing_prot_task::
reader_all_it_lock (C_Compiler & /* inLexique */ COMMA_UNUSED_LOCATION_ARGS) const {
  GGS_basic_type   result ;
  if (mPointer != NULL) {
    macroValidPointer (mPointer) ;
    MF_Assert (dynamic_cast <cPtr_timing_prot_task *> (mPointer) != NULL,
               "dynamic cast error", 0, 0) ;
    result = ((cPtr_timing_prot_task *) mPointer)->all_it_lock ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_rezlock_map  GGS_timing_prot_task::
reader_rezlocks (C_Compiler & /* inLexique */ COMMA_UNUSED_LOCATION_ARGS) const {
  GGS_rezlock_map   result ;
  if (mPointer != NULL) {
    macroValidPointer (mPointer) ;
    MF_Assert (dynamic_cast <cPtr_timing_prot_task *> (mPointer) != NULL,
               "dynamic cast error", 0, 0) ;
    result = ((cPtr_timing_prot_task *) mPointer)->rezlocks ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

const char * GGS_timing_prot_task::actualTypeName (void) const {
  return "timing_prot_task" ;
}

//---------------------------------------------------------------------------*

C_galgasClassRunTimeInformationEX gClassInfoFor__timing_prot_task ("timing_prot_task", gClassInfoFor__timing_prot, & kTypeDescriptor_GGS_timing_prot_task) ;

//---------------------------------------------------------------------------*

GGS_object GGS_timing_prot_task::reader_object (void) const {
  GGS_object result ;
  if (isBuilt ()) {
    GGS_timing_prot_task * p = NULL ;
    macroMyNew (p, GGS_timing_prot_task (*this)) ;
    result = GGS_object (p) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_timing_prot_task GGS_timing_prot_task::castFromObject (C_Compiler & inLexique,
                                   const GGS_object & inObject,
                                   const GGS_location & inErrorLocation
                                   COMMA_LOCATION_ARGS) {
  GGS_timing_prot_task result ;
  const GGS__root * embeddedObject = inObject.embeddedObject () ;
  if (NULL != embeddedObject) {
    const GGS_timing_prot_task * p = dynamic_cast <const GGS_timing_prot_task *> (embeddedObject) ;
    if (NULL != p) {
      result = * p ;
    }else{
      castFromObjectErrorSignaling (inLexique, inErrorLocation, & kTypeDescriptor_GGS_timing_prot_task, embeddedObject COMMA_THERE) ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*

const C_galgas_type_descriptorEX * GGS_timing_prot_task::typeDescriptor (void) const {
  return & kTypeDescriptor_GGS_timing_prot_task ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                       class 'cPtr_timing_prot_isr'                        *
//                                                                           *
//---------------------------------------------------------------------------*

cPtr_timing_prot_isr::
cPtr_timing_prot_isr (const GGS_location & argument_0,
                                const GGS_basic_type & argument_1,
                                const GGS_basic_type & argument_2,
                                const GGS_basic_type & argument_3,
                                const GGS_basic_type & argument_4,
                                const GGS_rezlock_map & argument_5
                                COMMA_LOCATION_ARGS)
:cPtr_timing_prot (argument_0 COMMA_THERE),
exe_time (argument_1),
time_frame (argument_2),
os_it_lock (argument_3),
all_it_lock (argument_4),
rezlocks (argument_5) {
}

//---------------------------------------------------------------------------*

#ifndef DO_NOT_GENERATE_CHECKINGS
  cPtr_timing_prot_isr * GGS_timing_prot_isr::
  operator () (LOCATION_ARGS) const {
    macroValidObjectThere (mPointer, cPtr_timing_prot_isr) ;
    return (cPtr_timing_prot_isr *) mPointer ;
  }
#endif

//---------------------------------------------------------------------------*

bool cPtr_timing_prot_isr::
isEqualToObject (const cPtr__AC_galgas_class * inOperand) const {
  bool equal = typeid (this) == typeid (inOperand) ;
  if (equal) {
    const cPtr_timing_prot_isr * ptr = dynamic_cast <const cPtr_timing_prot_isr *> (inOperand) ;
    macroValidPointer (ptr) ;
    equal = location.operator_isEqual (ptr->location).boolValue ()
         && exe_time.operator_isEqual (ptr->exe_time).boolValue ()
         && time_frame.operator_isEqual (ptr->time_frame).boolValue ()
         && os_it_lock.operator_isEqual (ptr->os_it_lock).boolValue ()
         && all_it_lock.operator_isEqual (ptr->all_it_lock).boolValue ()
         && rezlocks.operator_isEqual (ptr->rezlocks).boolValue () ;
  }
  return equal ;
}

//---------------------------------------------------------------------------*

void cPtr_timing_prot_isr::
method_generate (C_Compiler & inLexique,
                                GGS_config  var_cas_cfg,
                                GGS_string& var_cas_result,
                                GGS_string& var_cas_st_name,
                                GGS_string var_cas_name,
                                GGS_resource_map  var_cas_rez COMMA_UNUSED_LOCATION_ARGS) const {
  GGS_uint64  var_cas_tpn = GGS_uint64 (1ULL) ;
  const GGS_bool cond_5204 = var_cas_cfg.reader_hasKey (GGS_string ("wd_ticks_per_ns")) ;
  if (cond_5204.isBuiltAndTrue ()) {
    GGS_basic_type  var_cas_val ;
    if (var_cas_cfg.isBuilt ()) {
      var_cas_cfg (HERE)->method_get (inLexique, GGS_lstring ::constructor_new (inLexique, GGS_string ("wd_ticks_per_ns"), GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (163)), var_cas_val COMMA_SOURCE_FILE_AT_LINE (163)) ;
    }
    { const GGS_basic_type _var_5185 = var_cas_val ; // CAST instruction
      if (_var_5185.getPtr () != NULL) {
        macroValidPointer (_var_5185.getPtr ()) ;
        if (typeid (cPtr_uint64_class) == typeid (* (_var_5185.getPtr ()))) {
          const GGS_uint64_class var_cas_ui (_var_5185.getPtr ()) ;
          var_cas_tpn = var_cas_ui.reader_value (inLexique COMMA_SOURCE_FILE_AT_LINE (165)) ;
        }else{
        }
      }
    }
  }
  var_cas_result = function_template_string (inLexique, GGS_string ("code"), GGS_string ("timing_protection") COMMA_SOURCE_FILE_AT_LINE (169)) ;
  { const GGS_basic_type _var_5460 = exe_time ; // CAST instruction
    if (_var_5460.getPtr () != NULL) {
      macroValidPointer (_var_5460.getPtr ()) ;
      if (typeid (cPtr_uint64_class) == typeid (* (_var_5460.getPtr ()))) {
        const GGS_uint64_class var_cas_et (_var_5460.getPtr ()) ;
        var_cas_result = var_cas_result.reader_stringByReplacingStringByString (inLexique, GGS_string ("$EXE_BUDGET$"), var_cas_et.reader_value (inLexique COMMA_SOURCE_FILE_AT_LINE (173)).divide_operation (inLexique, var_cas_tpn COMMA_SOURCE_FILE_AT_LINE (173)).reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (173)) COMMA_SOURCE_FILE_AT_LINE (173)) ;
      }else{
      }
    }
  }
  { const GGS_basic_type _var_5653 = time_frame ; // CAST instruction
    if (_var_5653.getPtr () != NULL) {
      macroValidPointer (_var_5653.getPtr ()) ;
      if (typeid (cPtr_uint64_class) == typeid (* (_var_5653.getPtr ()))) {
        const GGS_uint64_class var_cas_tf (_var_5653.getPtr ()) ;
        var_cas_result = var_cas_result.reader_stringByReplacingStringByString (inLexique, GGS_string ("$TIME_FRAME$"), var_cas_tf.reader_value (inLexique COMMA_SOURCE_FILE_AT_LINE (177)).divide_operation (inLexique, var_cas_tpn COMMA_SOURCE_FILE_AT_LINE (177)).reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (177)) COMMA_SOURCE_FILE_AT_LINE (177)) ;
      }else{
      }
    }
  }
  { const GGS_basic_type _var_5848 = os_it_lock ; // CAST instruction
    if (_var_5848.getPtr () != NULL) {
      macroValidPointer (_var_5848.getPtr ()) ;
      if (typeid (cPtr_uint64_class) == typeid (* (_var_5848.getPtr ()))) {
        const GGS_uint64_class var_cas_oil (_var_5848.getPtr ()) ;
        var_cas_result = var_cas_result.reader_stringByReplacingStringByString (inLexique, GGS_string ("$OS_IT_LOCK$"), var_cas_oil.reader_value (inLexique COMMA_SOURCE_FILE_AT_LINE (181)).divide_operation (inLexique, var_cas_tpn COMMA_SOURCE_FILE_AT_LINE (181)).reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (181)) COMMA_SOURCE_FILE_AT_LINE (181)) ;
      }else{
      }
    }
  }
  { const GGS_basic_type _var_6044 = all_it_lock ; // CAST instruction
    if (_var_6044.getPtr () != NULL) {
      macroValidPointer (_var_6044.getPtr ()) ;
      if (typeid (cPtr_uint64_class) == typeid (* (_var_6044.getPtr ()))) {
        const GGS_uint64_class var_cas_ail (_var_6044.getPtr ()) ;
        var_cas_result = var_cas_result.reader_stringByReplacingStringByString (inLexique, GGS_string ("$ALL_IT_LOCK$"), var_cas_ail.reader_value (inLexique COMMA_SOURCE_FILE_AT_LINE (185)).divide_operation (inLexique, var_cas_tpn COMMA_SOURCE_FILE_AT_LINE (185)).reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (185)) COMMA_SOURCE_FILE_AT_LINE (185)) ;
      }else{
      }
    }
  }
  var_cas_st_name = ((GGS_string ("isr_")).operator_concat (var_cas_name)).operator_concat (GGS_string ("_timing_prot")) ;
  var_cas_result = var_cas_result.reader_stringByReplacingStringByString (inLexique, GGS_string ("$TIMING_PROT$"), var_cas_st_name COMMA_SOURCE_FILE_AT_LINE (189)) ;
  GGS_string var_cas_table_name = ((GGS_string ("isr_")).operator_concat (var_cas_name)).operator_concat (GGS_string ("_rez_lock_time")) ;
  GGS_string var_cas_table = GGS_string ("") ;
  ::routine_gen_rez_table (inLexique,  rezlocks,  var_cas_rez,  var_cas_tpn,  var_cas_table COMMA_SOURCE_FILE_AT_LINE (193)) ;
  const GGS_bool cond_6489 = (var_cas_rez.reader_count ()).operator_strictSup (GGS_uint (0U)) ;
  if (cond_6489.isBuiltAndTrue ()) {
    var_cas_table = ((((((GGS_string ("tpl_time ")).operator_concat (var_cas_table_name)).operator_concat (GGS_string ("["))).operator_concat (var_cas_rez.reader_count ().reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (196)))).operator_concat (GGS_string ("] = {\n"))).operator_concat (var_cas_table)).operator_concat (GGS_string ("};")) ;
  }
  var_cas_result = var_cas_result.reader_stringByReplacingStringByString (inLexique, GGS_string ("$LOCK_TIME_TABLE$"), var_cas_table COMMA_SOURCE_FILE_AT_LINE (199)) ;
  const GGS_bool cond_6726 = (var_cas_rez.reader_count ()).operator_strictSup (GGS_uint (0U)) ;
  if (cond_6726.isBuiltAndTrue ()) {
    var_cas_result = var_cas_result.reader_stringByReplacingStringByString (inLexique, GGS_string ("$REZ_LOCK_TIME$"), var_cas_table_name COMMA_SOURCE_FILE_AT_LINE (202)) ;
  }else if (cond_6726.isBuiltAndFalse ()) {
    var_cas_result = var_cas_result.reader_stringByReplacingStringByString (inLexique, GGS_string ("$REZ_LOCK_TIME$"), GGS_string ("NULL") COMMA_SOURCE_FILE_AT_LINE (204)) ;
  }
  var_cas_st_name = (GGS_string ("&")).operator_concat (var_cas_st_name) ;
}

//---------------------------------------------------------------------------*

void cPtr_timing_prot_isr::
appendForDescription (C_String & ioString,
                      const PMSInt32 inIndentation) const {
  ioString << "->@timing_prot_isr:"
           << location.reader_description (inIndentation + 1)
           << exe_time.reader_description (inIndentation + 1)
           << time_frame.reader_description (inIndentation + 1)
           << os_it_lock.reader_description (inIndentation + 1)
           << all_it_lock.reader_description (inIndentation + 1)
           << rezlocks.reader_description (inIndentation + 1) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                              Class message                                *
//                                                                           *
//---------------------------------------------------------------------------*

const char * cPtr_timing_prot_isr::
instanceMessage (void) const {
  return "" ;
}

//---------------------------------------------------------------------------*

const char * cPtr_timing_prot_isr::
_static_message (void) {
  return "" ;
}

//---------------------------------------------------------------------------*

C_galgas_class_inspector _gInspectorFor_timing_prot_isr (& typeid (cPtr_timing_prot_isr), & typeid (cPtr_timing_prot), "") ;

//---------------------------------------------------------------------------*

AC_galgasClassRunTimeInformationEX * cPtr_timing_prot_isr::galgasRTTI (void) const {
  return & gClassInfoFor__timing_prot_isr ;
}

//---------------------------------------------------------------------------*

cPtr__AC_galgas_class * cPtr_timing_prot_isr::makeClone (void) const {
  cPtr__AC_galgas_class * result = NULL ;
  macroMyNew (result, cPtr_timing_prot_isr (location, exe_time, time_frame, os_it_lock, all_it_lock, rezlocks COMMA_HERE)) ;
  return result ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                    GALGAS class 'GGS_timing_prot_isr'                     *
//                                                                           *
//---------------------------------------------------------------------------*

const C_galgas_type_descriptorEX kTypeDescriptor_GGS_timing_prot_isr ("timing_prot_isr", true, & kTypeDescriptor_GGS_timing_prot) ;

//---------------------------------------------------------------------------*

GGS_timing_prot_isr::
GGS_timing_prot_isr (const cPtr__AC_galgas_class * inPointer) {
  macroAssignObject (mPointer, (cPtr__AC_galgas_class *) inPointer) ;
}

//---------------------------------------------------------------------------*

GGS_timing_prot_isr::
GGS_timing_prot_isr (cPtr__AC_galgas_class & inObject) {
  macroAssignObject (mPointer, & inObject) ;
}

//---------------------------------------------------------------------------*

//--- castFrom class method (implements cast expression)
GGS_timing_prot_isr GGS_timing_prot_isr::
castFrom (C_Compiler & inLexique,
           cPtr__AC_galgas_class * inPointer,
           const bool inUseKindOfClass,
           const GGS_location & inErrorLocation
           COMMA_LOCATION_ARGS) {
  GGS_timing_prot_isr result ;
  if (inPointer != NULL) {
    macroValidPointer (inPointer) ;
    const bool ok = inUseKindOfClass
      ? (dynamic_cast <cPtr_timing_prot_isr *> (inPointer) != NULL)
      : (typeid (cPtr_timing_prot_isr) == typeid (*inPointer)) ;
    if (ok) {
      result = GGS_timing_prot_isr (inPointer) ;
    }else{
      inErrorLocation.signalCastError (inLexique,
                                       & typeid (cPtr_timing_prot_isr),
                                       inUseKindOfClass,
                                       inPointer->instanceMessage ()
                                       COMMA_THERE) ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_timing_prot_isr GGS_timing_prot_isr::
constructor_new (C_Compiler & /* inLexique */,
                 const GGS_location & argument_0,
                 const GGS_basic_type & argument_1,
                 const GGS_basic_type & argument_2,
                 const GGS_basic_type & argument_3,
                 const GGS_basic_type & argument_4,
                 const GGS_rezlock_map & argument_5
                                COMMA_LOCATION_ARGS) {
  GGS_timing_prot_isr result ;
  macroMyNew (result.mPointer, cPtr_timing_prot_isr (argument_0,
                                argument_1,
                                argument_2,
                                argument_3,
                                argument_4,
                                argument_5 COMMA_THERE)) ;
  macroRetainObject (result.mPointer) ;
  return result ;
}

//---------------------------------------------------------------------------*

GGS_basic_type  GGS_timing_prot_isr::
reader_exe_time (C_Compiler & /* inLexique */ COMMA_UNUSED_LOCATION_ARGS) const {
  GGS_basic_type   result ;
  if (mPointer != NULL) {
    macroValidPointer (mPointer) ;
    MF_Assert (dynamic_cast <cPtr_timing_prot_isr *> (mPointer) != NULL,
               "dynamic cast error", 0, 0) ;
    result = ((cPtr_timing_prot_isr *) mPointer)->exe_time ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_basic_type  GGS_timing_prot_isr::
reader_time_frame (C_Compiler & /* inLexique */ COMMA_UNUSED_LOCATION_ARGS) const {
  GGS_basic_type   result ;
  if (mPointer != NULL) {
    macroValidPointer (mPointer) ;
    MF_Assert (dynamic_cast <cPtr_timing_prot_isr *> (mPointer) != NULL,
               "dynamic cast error", 0, 0) ;
    result = ((cPtr_timing_prot_isr *) mPointer)->time_frame ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_basic_type  GGS_timing_prot_isr::
reader_os_it_lock (C_Compiler & /* inLexique */ COMMA_UNUSED_LOCATION_ARGS) const {
  GGS_basic_type   result ;
  if (mPointer != NULL) {
    macroValidPointer (mPointer) ;
    MF_Assert (dynamic_cast <cPtr_timing_prot_isr *> (mPointer) != NULL,
               "dynamic cast error", 0, 0) ;
    result = ((cPtr_timing_prot_isr *) mPointer)->os_it_lock ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_basic_type  GGS_timing_prot_isr::
reader_all_it_lock (C_Compiler & /* inLexique */ COMMA_UNUSED_LOCATION_ARGS) const {
  GGS_basic_type   result ;
  if (mPointer != NULL) {
    macroValidPointer (mPointer) ;
    MF_Assert (dynamic_cast <cPtr_timing_prot_isr *> (mPointer) != NULL,
               "dynamic cast error", 0, 0) ;
    result = ((cPtr_timing_prot_isr *) mPointer)->all_it_lock ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_rezlock_map  GGS_timing_prot_isr::
reader_rezlocks (C_Compiler & /* inLexique */ COMMA_UNUSED_LOCATION_ARGS) const {
  GGS_rezlock_map   result ;
  if (mPointer != NULL) {
    macroValidPointer (mPointer) ;
    MF_Assert (dynamic_cast <cPtr_timing_prot_isr *> (mPointer) != NULL,
               "dynamic cast error", 0, 0) ;
    result = ((cPtr_timing_prot_isr *) mPointer)->rezlocks ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

const char * GGS_timing_prot_isr::actualTypeName (void) const {
  return "timing_prot_isr" ;
}

//---------------------------------------------------------------------------*

C_galgasClassRunTimeInformationEX gClassInfoFor__timing_prot_isr ("timing_prot_isr", gClassInfoFor__timing_prot, & kTypeDescriptor_GGS_timing_prot_isr) ;

//---------------------------------------------------------------------------*

GGS_object GGS_timing_prot_isr::reader_object (void) const {
  GGS_object result ;
  if (isBuilt ()) {
    GGS_timing_prot_isr * p = NULL ;
    macroMyNew (p, GGS_timing_prot_isr (*this)) ;
    result = GGS_object (p) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_timing_prot_isr GGS_timing_prot_isr::castFromObject (C_Compiler & inLexique,
                                   const GGS_object & inObject,
                                   const GGS_location & inErrorLocation
                                   COMMA_LOCATION_ARGS) {
  GGS_timing_prot_isr result ;
  const GGS__root * embeddedObject = inObject.embeddedObject () ;
  if (NULL != embeddedObject) {
    const GGS_timing_prot_isr * p = dynamic_cast <const GGS_timing_prot_isr *> (embeddedObject) ;
    if (NULL != p) {
      result = * p ;
    }else{
      castFromObjectErrorSignaling (inLexique, inErrorLocation, & kTypeDescriptor_GGS_timing_prot_isr, embeddedObject COMMA_THERE) ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*

const C_galgas_type_descriptorEX * GGS_timing_prot_isr::typeDescriptor (void) const {
  return & kTypeDescriptor_GGS_timing_prot_isr ;
}

//---------------------------------------------------------------------------*

