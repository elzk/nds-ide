//---------------------------------------------------------------------------*
//                                                                           *
//                      File 'goil_types_counter.cpp'                        *
//                        Generated by version 2.0.0                         *
//                       july 7th, 2010, at 17h16'16"                        *
//                                                                           *
//---------------------------------------------------------------------------*

//--- START OF USER ZONE 1


//--- END OF USER ZONE 1

//---------------------------------------------------------------------------*

#include "version_libpm.h"
#if CURRENT_LIBPM_VERSION != 820
  #error "This file has been compiled with a version of GALGAS that uses libpm version 820, different than the current version (CURRENT_LIBPM_VERSION) of libpm"
#endif

//---------------------------------------------------------------------------*

#include <typeinfo>
#include "utilities/MF_MemoryControl.h"
#include "files/C_TextFileWrite.h"
#include "galgas/C_galgas_CLI_Options.h"
#include "goil_types_counter.h"

//---------------------------------------------------------------------------*

#ifndef DO_NOT_GENERATE_CHECKINGS
  #define SOURCE_FILE_AT_LINE(line) "goil_types_counter.gSemantics", line
  #define COMMA_SOURCE_FILE_AT_LINE(line) , SOURCE_FILE_AT_LINE(line)
#else
  #define SOURCE_FILE_AT_LINE(line) 
  #define COMMA_SOURCE_FILE_AT_LINE(line) 
#endif


//--- START OF USER ZONE 2


//--- END OF USER ZONE 2

//---------------------------------------------------------------------------*
//                                                                           *
//                       class 'cPtr_counter_driver'                         *
//                                                                           *
//---------------------------------------------------------------------------*

cPtr_counter_driver::
cPtr_counter_driver (const GGS_location & argument_0
                                COMMA_LOCATION_ARGS)
:cPtr__AC_galgas_class (THERE),
location (argument_0) {
}

//---------------------------------------------------------------------------*

#ifndef DO_NOT_GENERATE_CHECKINGS
  cPtr_counter_driver * GGS_counter_driver::
  operator () (LOCATION_ARGS) const {
    macroValidObjectThere (mPointer, cPtr_counter_driver) ;
    return (cPtr_counter_driver *) mPointer ;
  }
#endif

//---------------------------------------------------------------------------*

void cPtr_counter_driver::
appendForDescription (C_String & ioString,
                      const PMSInt32 inIndentation) const {
  ioString << "->@counter_driver:"
           << location.reader_description (inIndentation + 1) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                              Class message                                *
//                                                                           *
//---------------------------------------------------------------------------*

const char * cPtr_counter_driver::
instanceMessage (void) const {
  return "" ;
}

//---------------------------------------------------------------------------*

const char * cPtr_counter_driver::
_static_message (void) {
  return "" ;
}

//---------------------------------------------------------------------------*

C_galgas_class_inspector _gInspectorFor_counter_driver (& typeid (cPtr_counter_driver), NULL, "") ;

//---------------------------------------------------------------------------*

AC_galgasClassRunTimeInformationEX * cPtr_counter_driver::galgasRTTI (void) const {
  return & gClassInfoFor__counter_driver ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                    GALGAS class 'GGS_counter_driver'                      *
//                                                                           *
//---------------------------------------------------------------------------*

const C_galgas_type_descriptorEX kTypeDescriptor_GGS_counter_driver ("counter_driver", true, NULL) ;

//---------------------------------------------------------------------------*

GGS_counter_driver::
GGS_counter_driver (const cPtr__AC_galgas_class * inPointer) {
  macroAssignObject (mPointer, (cPtr__AC_galgas_class *) inPointer) ;
}

//---------------------------------------------------------------------------*

GGS_counter_driver::
GGS_counter_driver (cPtr__AC_galgas_class & inObject) {
  macroAssignObject (mPointer, & inObject) ;
}

//---------------------------------------------------------------------------*

//--- castFrom class method (implements cast expression)
GGS_counter_driver GGS_counter_driver::
castFrom (C_Compiler & inLexique,
           cPtr__AC_galgas_class * inPointer,
           const bool inUseKindOfClass,
           const GGS_location & inErrorLocation
           COMMA_LOCATION_ARGS) {
  GGS_counter_driver result ;
  if (inPointer != NULL) {
    macroValidPointer (inPointer) ;
    const bool ok = inUseKindOfClass
      ? (dynamic_cast <cPtr_counter_driver *> (inPointer) != NULL)
      : (typeid (cPtr_counter_driver) == typeid (*inPointer)) ;
    if (ok) {
      result = GGS_counter_driver (inPointer) ;
    }else{
      inErrorLocation.signalCastError (inLexique,
                                       & typeid (cPtr_counter_driver),
                                       inUseKindOfClass,
                                       inPointer->instanceMessage ()
                                       COMMA_THERE) ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_location  GGS_counter_driver::
reader_location (C_Compiler & /* inLexique */ COMMA_UNUSED_LOCATION_ARGS) const {
  GGS_location   result ;
  if (mPointer != NULL) {
    macroValidPointer (mPointer) ;
    MF_Assert (dynamic_cast <cPtr_counter_driver *> (mPointer) != NULL,
               "dynamic cast error", 0, 0) ;
    result = ((cPtr_counter_driver *) mPointer)->location ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

const char * GGS_counter_driver::actualTypeName (void) const {
  return "counter_driver" ;
}

//---------------------------------------------------------------------------*

AC_galgasClassRunTimeInformationEX * GGS_counter_driver::galgasObjectRunTimeInfo (void) const {
  AC_galgasClassRunTimeInformationEX * result = NULL ;
  if (mPointer != NULL) {
    result = mPointer->galgasRTTI () ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

C_galgasRootClassRunTimeInformationEX gClassInfoFor__counter_driver ("counter_driver", & kTypeDescriptor_GGS_counter_driver) ;

//---------------------------------------------------------------------------*

GGS_object GGS_counter_driver::reader_object (void) const {
  GGS_object result ;
  if (isBuilt ()) {
    GGS_counter_driver * p = NULL ;
    macroMyNew (p, GGS_counter_driver (*this)) ;
    result = GGS_object (p) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_counter_driver GGS_counter_driver::castFromObject (C_Compiler & inLexique,
                                   const GGS_object & inObject,
                                   const GGS_location & inErrorLocation
                                   COMMA_LOCATION_ARGS) {
  GGS_counter_driver result ;
  const GGS__root * embeddedObject = inObject.embeddedObject () ;
  if (NULL != embeddedObject) {
    const GGS_counter_driver * p = dynamic_cast <const GGS_counter_driver *> (embeddedObject) ;
    if (NULL != p) {
      result = * p ;
    }else{
      castFromObjectErrorSignaling (inLexique, inErrorLocation, & kTypeDescriptor_GGS_counter_driver, embeddedObject COMMA_THERE) ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*

const C_galgas_type_descriptorEX * GGS_counter_driver::typeDescriptor (void) const {
  return & kTypeDescriptor_GGS_counter_driver ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                         class 'cPtr_void_driver'                          *
//                                                                           *
//---------------------------------------------------------------------------*

cPtr_void_driver::
cPtr_void_driver (const GGS_location & argument_0
                                COMMA_LOCATION_ARGS)
:cPtr_counter_driver (argument_0 COMMA_THERE) {
}

//---------------------------------------------------------------------------*

#ifndef DO_NOT_GENERATE_CHECKINGS
  cPtr_void_driver * GGS_void_driver::
  operator () (LOCATION_ARGS) const {
    macroValidObjectThere (mPointer, cPtr_void_driver) ;
    return (cPtr_void_driver *) mPointer ;
  }
#endif

//---------------------------------------------------------------------------*

bool cPtr_void_driver::
isEqualToObject (const cPtr__AC_galgas_class * inOperand) const {
  bool equal = typeid (this) == typeid (inOperand) ;
  if (equal) {
    const cPtr_void_driver * ptr = dynamic_cast <const cPtr_void_driver *> (inOperand) ;
    macroValidPointer (ptr) ;
    equal = location.operator_isEqual (ptr->location).boolValue () ;
  }
  return equal ;
}

//---------------------------------------------------------------------------*

void cPtr_void_driver::
appendForDescription (C_String & ioString,
                      const PMSInt32 inIndentation) const {
  ioString << "->@void_driver:"
           << location.reader_description (inIndentation + 1) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                              Class message                                *
//                                                                           *
//---------------------------------------------------------------------------*

const char * cPtr_void_driver::
instanceMessage (void) const {
  return "" ;
}

//---------------------------------------------------------------------------*

const char * cPtr_void_driver::
_static_message (void) {
  return "" ;
}

//---------------------------------------------------------------------------*

C_galgas_class_inspector _gInspectorFor_void_driver (& typeid (cPtr_void_driver), & typeid (cPtr_counter_driver), "") ;

//---------------------------------------------------------------------------*

AC_galgasClassRunTimeInformationEX * cPtr_void_driver::galgasRTTI (void) const {
  return & gClassInfoFor__void_driver ;
}

//---------------------------------------------------------------------------*

cPtr__AC_galgas_class * cPtr_void_driver::makeClone (void) const {
  cPtr__AC_galgas_class * result = NULL ;
  macroMyNew (result, cPtr_void_driver (location COMMA_HERE)) ;
  return result ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                      GALGAS class 'GGS_void_driver'                       *
//                                                                           *
//---------------------------------------------------------------------------*

const C_galgas_type_descriptorEX kTypeDescriptor_GGS_void_driver ("void_driver", true, & kTypeDescriptor_GGS_counter_driver) ;

//---------------------------------------------------------------------------*

GGS_void_driver::
GGS_void_driver (const cPtr__AC_galgas_class * inPointer) {
  macroAssignObject (mPointer, (cPtr__AC_galgas_class *) inPointer) ;
}

//---------------------------------------------------------------------------*

GGS_void_driver::
GGS_void_driver (cPtr__AC_galgas_class & inObject) {
  macroAssignObject (mPointer, & inObject) ;
}

//---------------------------------------------------------------------------*

//--- castFrom class method (implements cast expression)
GGS_void_driver GGS_void_driver::
castFrom (C_Compiler & inLexique,
           cPtr__AC_galgas_class * inPointer,
           const bool inUseKindOfClass,
           const GGS_location & inErrorLocation
           COMMA_LOCATION_ARGS) {
  GGS_void_driver result ;
  if (inPointer != NULL) {
    macroValidPointer (inPointer) ;
    const bool ok = inUseKindOfClass
      ? (dynamic_cast <cPtr_void_driver *> (inPointer) != NULL)
      : (typeid (cPtr_void_driver) == typeid (*inPointer)) ;
    if (ok) {
      result = GGS_void_driver (inPointer) ;
    }else{
      inErrorLocation.signalCastError (inLexique,
                                       & typeid (cPtr_void_driver),
                                       inUseKindOfClass,
                                       inPointer->instanceMessage ()
                                       COMMA_THERE) ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_void_driver GGS_void_driver::
constructor_new (C_Compiler & /* inLexique */,
                 const GGS_location & argument_0
                                COMMA_LOCATION_ARGS) {
  GGS_void_driver result ;
  macroMyNew (result.mPointer, cPtr_void_driver (argument_0 COMMA_THERE)) ;
  macroRetainObject (result.mPointer) ;
  return result ;
}

//---------------------------------------------------------------------------*

const char * GGS_void_driver::actualTypeName (void) const {
  return "void_driver" ;
}

//---------------------------------------------------------------------------*

C_galgasClassRunTimeInformationEX gClassInfoFor__void_driver ("void_driver", gClassInfoFor__counter_driver, & kTypeDescriptor_GGS_void_driver) ;

//---------------------------------------------------------------------------*

GGS_object GGS_void_driver::reader_object (void) const {
  GGS_object result ;
  if (isBuilt ()) {
    GGS_void_driver * p = NULL ;
    macroMyNew (p, GGS_void_driver (*this)) ;
    result = GGS_object (p) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_void_driver GGS_void_driver::castFromObject (C_Compiler & inLexique,
                                   const GGS_object & inObject,
                                   const GGS_location & inErrorLocation
                                   COMMA_LOCATION_ARGS) {
  GGS_void_driver result ;
  const GGS__root * embeddedObject = inObject.embeddedObject () ;
  if (NULL != embeddedObject) {
    const GGS_void_driver * p = dynamic_cast <const GGS_void_driver *> (embeddedObject) ;
    if (NULL != p) {
      result = * p ;
    }else{
      castFromObjectErrorSignaling (inLexique, inErrorLocation, & kTypeDescriptor_GGS_void_driver, embeddedObject COMMA_THERE) ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*

const C_galgas_type_descriptorEX * GGS_void_driver::typeDescriptor (void) const {
  return & kTypeDescriptor_GGS_void_driver ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                     class 'cPtr_os_internal_driver'                       *
//                                                                           *
//---------------------------------------------------------------------------*

cPtr_os_internal_driver::
cPtr_os_internal_driver (const GGS_location & argument_0
                                COMMA_LOCATION_ARGS)
:cPtr_counter_driver (argument_0 COMMA_THERE) {
}

//---------------------------------------------------------------------------*

#ifndef DO_NOT_GENERATE_CHECKINGS
  cPtr_os_internal_driver * GGS_os_internal_driver::
  operator () (LOCATION_ARGS) const {
    macroValidObjectThere (mPointer, cPtr_os_internal_driver) ;
    return (cPtr_os_internal_driver *) mPointer ;
  }
#endif

//---------------------------------------------------------------------------*

bool cPtr_os_internal_driver::
isEqualToObject (const cPtr__AC_galgas_class * inOperand) const {
  bool equal = typeid (this) == typeid (inOperand) ;
  if (equal) {
    const cPtr_os_internal_driver * ptr = dynamic_cast <const cPtr_os_internal_driver *> (inOperand) ;
    macroValidPointer (ptr) ;
    equal = location.operator_isEqual (ptr->location).boolValue () ;
  }
  return equal ;
}

//---------------------------------------------------------------------------*

void cPtr_os_internal_driver::
appendForDescription (C_String & ioString,
                      const PMSInt32 inIndentation) const {
  ioString << "->@os_internal_driver:"
           << location.reader_description (inIndentation + 1) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                              Class message                                *
//                                                                           *
//---------------------------------------------------------------------------*

const char * cPtr_os_internal_driver::
instanceMessage (void) const {
  return "" ;
}

//---------------------------------------------------------------------------*

const char * cPtr_os_internal_driver::
_static_message (void) {
  return "" ;
}

//---------------------------------------------------------------------------*

C_galgas_class_inspector _gInspectorFor_os_internal_driver (& typeid (cPtr_os_internal_driver), & typeid (cPtr_counter_driver), "") ;

//---------------------------------------------------------------------------*

AC_galgasClassRunTimeInformationEX * cPtr_os_internal_driver::galgasRTTI (void) const {
  return & gClassInfoFor__os_internal_driver ;
}

//---------------------------------------------------------------------------*

cPtr__AC_galgas_class * cPtr_os_internal_driver::makeClone (void) const {
  cPtr__AC_galgas_class * result = NULL ;
  macroMyNew (result, cPtr_os_internal_driver (location COMMA_HERE)) ;
  return result ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                  GALGAS class 'GGS_os_internal_driver'                    *
//                                                                           *
//---------------------------------------------------------------------------*

const C_galgas_type_descriptorEX kTypeDescriptor_GGS_os_internal_driver ("os_internal_driver", true, & kTypeDescriptor_GGS_counter_driver) ;

//---------------------------------------------------------------------------*

GGS_os_internal_driver::
GGS_os_internal_driver (const cPtr__AC_galgas_class * inPointer) {
  macroAssignObject (mPointer, (cPtr__AC_galgas_class *) inPointer) ;
}

//---------------------------------------------------------------------------*

GGS_os_internal_driver::
GGS_os_internal_driver (cPtr__AC_galgas_class & inObject) {
  macroAssignObject (mPointer, & inObject) ;
}

//---------------------------------------------------------------------------*

//--- castFrom class method (implements cast expression)
GGS_os_internal_driver GGS_os_internal_driver::
castFrom (C_Compiler & inLexique,
           cPtr__AC_galgas_class * inPointer,
           const bool inUseKindOfClass,
           const GGS_location & inErrorLocation
           COMMA_LOCATION_ARGS) {
  GGS_os_internal_driver result ;
  if (inPointer != NULL) {
    macroValidPointer (inPointer) ;
    const bool ok = inUseKindOfClass
      ? (dynamic_cast <cPtr_os_internal_driver *> (inPointer) != NULL)
      : (typeid (cPtr_os_internal_driver) == typeid (*inPointer)) ;
    if (ok) {
      result = GGS_os_internal_driver (inPointer) ;
    }else{
      inErrorLocation.signalCastError (inLexique,
                                       & typeid (cPtr_os_internal_driver),
                                       inUseKindOfClass,
                                       inPointer->instanceMessage ()
                                       COMMA_THERE) ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_os_internal_driver GGS_os_internal_driver::
constructor_new (C_Compiler & /* inLexique */,
                 const GGS_location & argument_0
                                COMMA_LOCATION_ARGS) {
  GGS_os_internal_driver result ;
  macroMyNew (result.mPointer, cPtr_os_internal_driver (argument_0 COMMA_THERE)) ;
  macroRetainObject (result.mPointer) ;
  return result ;
}

//---------------------------------------------------------------------------*

const char * GGS_os_internal_driver::actualTypeName (void) const {
  return "os_internal_driver" ;
}

//---------------------------------------------------------------------------*

C_galgasClassRunTimeInformationEX gClassInfoFor__os_internal_driver ("os_internal_driver", gClassInfoFor__counter_driver, & kTypeDescriptor_GGS_os_internal_driver) ;

//---------------------------------------------------------------------------*

GGS_object GGS_os_internal_driver::reader_object (void) const {
  GGS_object result ;
  if (isBuilt ()) {
    GGS_os_internal_driver * p = NULL ;
    macroMyNew (p, GGS_os_internal_driver (*this)) ;
    result = GGS_object (p) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_os_internal_driver GGS_os_internal_driver::castFromObject (C_Compiler & inLexique,
                                   const GGS_object & inObject,
                                   const GGS_location & inErrorLocation
                                   COMMA_LOCATION_ARGS) {
  GGS_os_internal_driver result ;
  const GGS__root * embeddedObject = inObject.embeddedObject () ;
  if (NULL != embeddedObject) {
    const GGS_os_internal_driver * p = dynamic_cast <const GGS_os_internal_driver *> (embeddedObject) ;
    if (NULL != p) {
      result = * p ;
    }else{
      castFromObjectErrorSignaling (inLexique, inErrorLocation, & kTypeDescriptor_GGS_os_internal_driver, embeddedObject COMMA_THERE) ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*

const C_galgas_type_descriptorEX * GGS_os_internal_driver::typeDescriptor (void) const {
  return & kTypeDescriptor_GGS_os_internal_driver ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                         class 'cPtr_gpt_driver'                           *
//                                                                           *
//---------------------------------------------------------------------------*

cPtr_gpt_driver::
cPtr_gpt_driver (const GGS_location & argument_0,
                                const GGS_basic_type & argument_1,
                                const GGS_lstring & argument_2
                                COMMA_LOCATION_ARGS)
:cPtr_counter_driver (argument_0 COMMA_THERE),
ns_per_hw_tick (argument_1),
gpt_channel_name (argument_2) {
}

//---------------------------------------------------------------------------*

#ifndef DO_NOT_GENERATE_CHECKINGS
  cPtr_gpt_driver * GGS_gpt_driver::
  operator () (LOCATION_ARGS) const {
    macroValidObjectThere (mPointer, cPtr_gpt_driver) ;
    return (cPtr_gpt_driver *) mPointer ;
  }
#endif

//---------------------------------------------------------------------------*

bool cPtr_gpt_driver::
isEqualToObject (const cPtr__AC_galgas_class * inOperand) const {
  bool equal = typeid (this) == typeid (inOperand) ;
  if (equal) {
    const cPtr_gpt_driver * ptr = dynamic_cast <const cPtr_gpt_driver *> (inOperand) ;
    macroValidPointer (ptr) ;
    equal = location.operator_isEqual (ptr->location).boolValue ()
         && ns_per_hw_tick.operator_isEqual (ptr->ns_per_hw_tick).boolValue ()
         && gpt_channel_name.operator_isEqual (ptr->gpt_channel_name).boolValue () ;
  }
  return equal ;
}

//---------------------------------------------------------------------------*

void cPtr_gpt_driver::
appendForDescription (C_String & ioString,
                      const PMSInt32 inIndentation) const {
  ioString << "->@gpt_driver:"
           << location.reader_description (inIndentation + 1)
           << ns_per_hw_tick.reader_description (inIndentation + 1)
           << gpt_channel_name.reader_description (inIndentation + 1) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                              Class message                                *
//                                                                           *
//---------------------------------------------------------------------------*

const char * cPtr_gpt_driver::
instanceMessage (void) const {
  return "" ;
}

//---------------------------------------------------------------------------*

const char * cPtr_gpt_driver::
_static_message (void) {
  return "" ;
}

//---------------------------------------------------------------------------*

C_galgas_class_inspector _gInspectorFor_gpt_driver (& typeid (cPtr_gpt_driver), & typeid (cPtr_counter_driver), "") ;

//---------------------------------------------------------------------------*

AC_galgasClassRunTimeInformationEX * cPtr_gpt_driver::galgasRTTI (void) const {
  return & gClassInfoFor__gpt_driver ;
}

//---------------------------------------------------------------------------*

cPtr__AC_galgas_class * cPtr_gpt_driver::makeClone (void) const {
  cPtr__AC_galgas_class * result = NULL ;
  macroMyNew (result, cPtr_gpt_driver (location, ns_per_hw_tick, gpt_channel_name COMMA_HERE)) ;
  return result ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                      GALGAS class 'GGS_gpt_driver'                        *
//                                                                           *
//---------------------------------------------------------------------------*

const C_galgas_type_descriptorEX kTypeDescriptor_GGS_gpt_driver ("gpt_driver", true, & kTypeDescriptor_GGS_counter_driver) ;

//---------------------------------------------------------------------------*

GGS_gpt_driver::
GGS_gpt_driver (const cPtr__AC_galgas_class * inPointer) {
  macroAssignObject (mPointer, (cPtr__AC_galgas_class *) inPointer) ;
}

//---------------------------------------------------------------------------*

GGS_gpt_driver::
GGS_gpt_driver (cPtr__AC_galgas_class & inObject) {
  macroAssignObject (mPointer, & inObject) ;
}

//---------------------------------------------------------------------------*

//--- castFrom class method (implements cast expression)
GGS_gpt_driver GGS_gpt_driver::
castFrom (C_Compiler & inLexique,
           cPtr__AC_galgas_class * inPointer,
           const bool inUseKindOfClass,
           const GGS_location & inErrorLocation
           COMMA_LOCATION_ARGS) {
  GGS_gpt_driver result ;
  if (inPointer != NULL) {
    macroValidPointer (inPointer) ;
    const bool ok = inUseKindOfClass
      ? (dynamic_cast <cPtr_gpt_driver *> (inPointer) != NULL)
      : (typeid (cPtr_gpt_driver) == typeid (*inPointer)) ;
    if (ok) {
      result = GGS_gpt_driver (inPointer) ;
    }else{
      inErrorLocation.signalCastError (inLexique,
                                       & typeid (cPtr_gpt_driver),
                                       inUseKindOfClass,
                                       inPointer->instanceMessage ()
                                       COMMA_THERE) ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_gpt_driver GGS_gpt_driver::
constructor_new (C_Compiler & /* inLexique */,
                 const GGS_location & argument_0,
                 const GGS_basic_type & argument_1,
                 const GGS_lstring & argument_2
                                COMMA_LOCATION_ARGS) {
  GGS_gpt_driver result ;
  macroMyNew (result.mPointer, cPtr_gpt_driver (argument_0,
                                argument_1,
                                argument_2 COMMA_THERE)) ;
  macroRetainObject (result.mPointer) ;
  return result ;
}

//---------------------------------------------------------------------------*

GGS_basic_type  GGS_gpt_driver::
reader_ns_per_hw_tick (C_Compiler & /* inLexique */ COMMA_UNUSED_LOCATION_ARGS) const {
  GGS_basic_type   result ;
  if (mPointer != NULL) {
    macroValidPointer (mPointer) ;
    MF_Assert (dynamic_cast <cPtr_gpt_driver *> (mPointer) != NULL,
               "dynamic cast error", 0, 0) ;
    result = ((cPtr_gpt_driver *) mPointer)->ns_per_hw_tick ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_lstring  GGS_gpt_driver::
reader_gpt_channel_name (C_Compiler & /* inLexique */ COMMA_UNUSED_LOCATION_ARGS) const {
  GGS_lstring   result ;
  if (mPointer != NULL) {
    macroValidPointer (mPointer) ;
    MF_Assert (dynamic_cast <cPtr_gpt_driver *> (mPointer) != NULL,
               "dynamic cast error", 0, 0) ;
    result = ((cPtr_gpt_driver *) mPointer)->gpt_channel_name ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

const char * GGS_gpt_driver::actualTypeName (void) const {
  return "gpt_driver" ;
}

//---------------------------------------------------------------------------*

C_galgasClassRunTimeInformationEX gClassInfoFor__gpt_driver ("gpt_driver", gClassInfoFor__counter_driver, & kTypeDescriptor_GGS_gpt_driver) ;

//---------------------------------------------------------------------------*

GGS_object GGS_gpt_driver::reader_object (void) const {
  GGS_object result ;
  if (isBuilt ()) {
    GGS_gpt_driver * p = NULL ;
    macroMyNew (p, GGS_gpt_driver (*this)) ;
    result = GGS_object (p) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_gpt_driver GGS_gpt_driver::castFromObject (C_Compiler & inLexique,
                                   const GGS_object & inObject,
                                   const GGS_location & inErrorLocation
                                   COMMA_LOCATION_ARGS) {
  GGS_gpt_driver result ;
  const GGS__root * embeddedObject = inObject.embeddedObject () ;
  if (NULL != embeddedObject) {
    const GGS_gpt_driver * p = dynamic_cast <const GGS_gpt_driver *> (embeddedObject) ;
    if (NULL != p) {
      result = * p ;
    }else{
      castFromObjectErrorSignaling (inLexique, inErrorLocation, & kTypeDescriptor_GGS_gpt_driver, embeddedObject COMMA_THERE) ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*

const C_galgas_type_descriptorEX * GGS_gpt_driver::typeDescriptor (void) const {
  return & kTypeDescriptor_GGS_gpt_driver ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                    Element of list '@time_constants'                      *
//                                                                           *
//---------------------------------------------------------------------------*

elementOf_GGS_time_constants::
elementOf_GGS_time_constants (const GGS_basic_type & argument_0,
                                const GGS_lstring & argument_1
                                COMMA_LOCATION_ARGS) :
AC_GGS_list::cListElement (THERE),
ns (argument_0),
const_name (argument_1) {
}

//---------------------------------------------------------------------------*

bool elementOf_GGS_time_constants::
isEqualToObject (const cListElement * inOperand) const {
  bool equal = inOperand == this ;
  if (! equal) {
    const elementOf_GGS_time_constants * ptr = dynamic_cast <const elementOf_GGS_time_constants *> (inOperand) ;
    macroValidPointer (ptr) ;
    equal = ns.operator_isEqual (ptr->ns).boolValue ()
         && const_name.operator_isEqual (ptr->const_name).boolValue () ;
  }
  return equal ;
}

//---------------------------------------------------------------------------*

void elementOf_GGS_time_constants::
appendForDescription (C_String & ioString,
                      const PMSInt32 inIndentation) const {
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "|-" ;
  ioString << ns.reader_description (inIndentation) ;
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "|-" ;
  ioString << const_name.reader_description (inIndentation) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                          List '@time_constants'                           *
//                                                                           *
//---------------------------------------------------------------------------*

const C_galgas_type_descriptorEX kTypeDescriptor_GGS_time_constants ("time_constants", false, NULL) ;

//---------------------------------------------------------------------------*

void GGS_time_constants::
internalAppendValues (const GGS_basic_type & argument_0,
                    const GGS_lstring & argument_1
                    COMMA_LOCATION_ARGS) {
  cElement * newElement = (cElement *) NULL ;
  macroMyNew (newElement, cElement (argument_0,
                                argument_1
                                COMMA_THERE)) ;
  macroRetainObject (newElement) ;
  internalAppendItem (newElement) ;
}

//---------------------------------------------------------------------------*

void GGS_time_constants::
internalPrependValues (const GGS_basic_type & argument_0,
                    const GGS_lstring & argument_1
                    COMMA_LOCATION_ARGS) {
  cElement * newElement = (cElement *) NULL ;
  macroMyNew (newElement, cElement (argument_0,
                                argument_1
                                COMMA_THERE)) ;
  macroRetainObject (newElement) ;
  internalPrependItem (newElement) ;
}

//---------------------------------------------------------------------------*

void GGS_time_constants::
addAssign_operation (const GGS_basic_type & argument_0,
                                const GGS_lstring & argument_1) {
  if (isBuilt ()&& argument_0.isBuilt ()&& argument_1.isBuilt ()) {
    insulateList () ;
    internalAppendValues (argument_0,
                                argument_1
                                COMMA_HERE) ;
  }
}

//---------------------------------------------------------------------------*

GGS_time_constants GGS_time_constants::
operator_concat (const GGS_time_constants & inOperand) const {
  GGS_time_constants result = * this ;
  result.dotAssign_operation (inOperand) ;
  return result ;
}

//---------------------------------------------------------------------------*

void GGS_time_constants::
dotAssign_operation (const GGS_time_constants inOperand) {
  if (isBuilt () && inOperand.isBuilt ()) {
    if (count () == 0) {
      * this = inOperand ;
    }else{
      if (inOperand.count () > 0) {
        insulateList () ;
        elementOf_GGS_time_constants * p = inOperand.firstObject () ;
        while (p != NULL) {
          macroValidPointer (p) ;
          GGS_basic_type  p_0 = p->ns ;
          GGS_lstring  p_1 = p->const_name ;
          internalAppendValues (p_0, p_1 COMMA_HERE) ;
          p = p->nextObject () ;
        }
      }
    }
  }
}

//---------------------------------------------------------------------------*

void GGS_time_constants::
modifier_prependValue (C_Compiler & /* inLexique */,
                     const GGS_basic_type & argument_0,
                     const GGS_lstring & argument_1
                     COMMA_UNUSED_LOCATION_ARGS) {
  if (isBuilt ()) {
    insulateList () ;
    internalPrependValues (argument_0,
                                argument_1
                                COMMA_HERE) ;
  }
}

//---------------------------------------------------------------------------*

void GGS_time_constants::
insulateList (void) {
  if (isShared ()) {
    cElement * ptr = firstObject () ;
    alloc () ;
    while (ptr != NULL) {
      macroValidPointer (ptr) ;
      internalAppendValues (ptr->ns,
                                ptr->const_name
                                COMMA_HERE) ;
      ptr = ptr->nextObject () ;
    }
  }
}

//---------------------------------------------------------------------------*

GGS_time_constants  GGS_time_constants::
constructor_emptyList (void) {
  GGS_time_constants result ;
  result.alloc () ;
  return result ;
}

//---------------------------------------------------------------------------*

GGS_time_constants  GGS_time_constants::
constructor_listWithValue (const GGS_basic_type & argument_0,
                                const GGS_lstring & argument_1) {
  GGS_time_constants result ;
  result.alloc () ;
  result.addAssign_operation (argument_0, argument_1) ;
  return result ;
}

//---------------------------------------------------------------------------*

void GGS_time_constants::
internalSubListWithRange (GGS_time_constants & ioList,
                          const PMSInt32 inFirstIndex,
                          const PMSInt32 inCount) const {
  ioList.alloc () ;
  if (inCount > 0) {
    cElement * ptr = firstObject () ;
    for (PMSInt32 i=0 ; i<inFirstIndex ; i++) {
      macroValidPointer (ptr) ;
      ptr = ptr->nextObject () ;
    }
    for (PMSInt32 i=0 ; i<inCount ; i++) {
      macroValidPointer (ptr) ;
      ioList.addAssign_operation (ptr->ns, ptr->const_name) ;
      ptr = ptr->nextObject () ;
    }
  }
}

//---------------------------------------------------------------------------*

GGS_time_constants GGS_time_constants::
reader_subListWithRange (C_Compiler & inLexique,
                         const GGS_uint & inFirstIndex,
                         const GGS_uint & inCount
                         COMMA_LOCATION_ARGS) const {
  GGS_time_constants result ;
  if (isBuilt () && inFirstIndex.isBuilt () && inCount.isBuilt ()) {
    const PMSInt32 firstIndex = (PMSInt32) inFirstIndex.uintValue () ;
    const PMSInt32 rangeCount = (PMSInt32) inCount.uintValue () ;
    if ((firstIndex + rangeCount) > count ()) {
      inLexique.onTheFlyRunTimeError ("'subListWithRange' method invoked with upper bound greater than list object count" COMMA_THERE) ;
    }else{
      internalSubListWithRange (result, firstIndex, rangeCount) ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_time_constants GGS_time_constants::
reader_subListFromIndex (C_Compiler & inLexique,
                         const GGS_uint & inIndex
                         COMMA_LOCATION_ARGS) const {
  GGS_time_constants result ;
  if (isBuilt () && inIndex.isBuilt ()) {
    const PMSInt32 startIndex = (PMSInt32) inIndex.uintValue () ;
    if (startIndex > count ()) {
      inLexique.onTheFlyRunTimeError ("'subListFromIndex' method invoked with start index greater than list object count" COMMA_THERE) ;
    }else{
      internalSubListWithRange (result, startIndex, count () - startIndex) ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_string GGS_time_constants::
reader_description (const PMSInt32 inIndentation) const {
  return performDescription ("@time_constants", inIndentation) ;
}

//---------------------------------------------------------------------------*

void GGS_time_constants::
method_first (C_Compiler & inLexique,
              GGS_basic_type & _out_0,
              GGS_lstring & _out_1
              COMMA_LOCATION_ARGS) const {
  cElement * ptr = NULL ;
  if (isBuilt ()) {
    ptr = firstObject () ;
    if (ptr == NULL) {
      inLexique.onTheFlyRunTimeError ("'first' method invoked on an empty list" COMMA_THERE) ;
    }
  }
  if (ptr != NULL) {
    _out_0 = ptr->ns ;
    _out_1 = ptr->const_name ;
  }else{
    _out_0.drop () ;
    _out_1.drop () ;
  }
}

//---------------------------------------------------------------------------*

void GGS_time_constants::
method_last (C_Compiler & inLexique,
             GGS_basic_type & _out_0,
             GGS_lstring & _out_1
             COMMA_LOCATION_ARGS) const {
  cElement * ptr = NULL ;
  if (isBuilt ()) {
    ptr = lastObject () ;
    if (ptr == NULL) {
      inLexique.onTheFlyRunTimeError ("'last' method invoked on an empty list" COMMA_THERE) ;
    }
  }
  if (ptr != NULL) {
    _out_0 = ptr->ns ;
    _out_1 = ptr->const_name ;
  }else{
    _out_0.drop () ;
    _out_1.drop () ;
  }
}

//---------------------------------------------------------------------------*

void GGS_time_constants::
modifier_popFirst (C_Compiler & inLexique,
                 GGS_basic_type & _out_0,
                 GGS_lstring & _out_1
                 COMMA_LOCATION_ARGS) {
  cElement * ptr = NULL ;
  if (isBuilt ()) {
    ptr = firstObject () ;
    if (ptr == NULL) {
      inLexique.onTheFlyRunTimeError ("'popFirst' modifier invoked on an empty list" COMMA_THERE) ;
    }
  }
  if (ptr != NULL) {
    _out_0 = ptr->ns ;
    _out_1 = ptr->const_name ;
    insulateList () ;
    internalRemoveFirst () ;
  }else{
    _out_0.drop () ;
    _out_1.drop () ;
  }
}

//---------------------------------------------------------------------------*

void GGS_time_constants::
modifier_popLast (C_Compiler & inLexique,
                GGS_basic_type & _out_0,
                GGS_lstring & _out_1
                COMMA_LOCATION_ARGS) {
  cElement * ptr = NULL ;
  if (isBuilt ()) {
    ptr = lastObject () ;
    if (ptr == NULL) {
      inLexique.onTheFlyRunTimeError ("'popLast' modifier invoked on an empty list" COMMA_THERE) ;
    }
  }
  if (ptr != NULL) {
    _out_0 = ptr->ns ;
    _out_1 = ptr->const_name ;
    insulateList () ;
    internalRemoveLast () ;
  }else{
    _out_0.drop () ;
    _out_1.drop () ;
  }
}

//---------------------------------------------------------------------------*

GGS_basic_type  GGS_time_constants::
reader_nsAtIndex (C_Compiler & inLexique, const GGS_uint & inIndex COMMA_LOCATION_ARGS) const {
  GGS_basic_type  result ;
  if (isBuilt () && inIndex.isBuilt ()) {
    cElement * object = (cElement *) objectAtIndex (inLexique, inIndex.uintValue () COMMA_THERE) ;
    if (object != NULL) {
      result = object->ns ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_lstring  GGS_time_constants::
reader_const_nameAtIndex (C_Compiler & inLexique, const GGS_uint & inIndex COMMA_LOCATION_ARGS) const {
  GGS_lstring  result ;
  if (isBuilt () && inIndex.isBuilt ()) {
    cElement * object = (cElement *) objectAtIndex (inLexique, inIndex.uintValue () COMMA_THERE) ;
    if (object != NULL) {
      result = object->const_name ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*

void GGS_time_constants::
modifier_setNsAtIndex (C_Compiler & inLexique,
                              const GGS_basic_type  & inObject,
                              const GGS_uint & inIndex
                              COMMA_LOCATION_ARGS) const {
  if (isBuilt () && inIndex.isBuilt ()) {
    cElement * object = (cElement *) objectAtIndex (inLexique, inIndex.uintValue () COMMA_THERE) ;
    if (object != NULL) {
      object->ns = inObject ;
    }
  }
}

//---------------------------------------------------------------------------*

void GGS_time_constants::
modifier_setConst_nameAtIndex (C_Compiler & inLexique,
                              const GGS_lstring  & inObject,
                              const GGS_uint & inIndex
                              COMMA_LOCATION_ARGS) const {
  if (isBuilt () && inIndex.isBuilt ()) {
    cElement * object = (cElement *) objectAtIndex (inLexique, inIndex.uintValue () COMMA_THERE) ;
    if (object != NULL) {
      object->const_name = inObject ;
    }
  }
}

//---------------------------------------------------------------------------*

/* const */ GGS_basic_type  & GGS_time_constants::cEnumerator::_ns (LOCATION_ARGS) const {
  macroValidPointerThere (mCurrentEnumeratedObject) ;
  return ((/* const */ cElement *) mCurrentEnumeratedObject)->ns ;
}

//---------------------------------------------------------------------------*

/* const */ GGS_lstring  & GGS_time_constants::cEnumerator::_const_name (LOCATION_ARGS) const {
  macroValidPointerThere (mCurrentEnumeratedObject) ;
  return ((/* const */ cElement *) mCurrentEnumeratedObject)->const_name ;
}

//---------------------------------------------------------------------------*

GGS_object GGS_time_constants::reader_object (void) const {
  GGS_object result ;
  if (isBuilt ()) {
    GGS_time_constants * p = NULL ;
    macroMyNew (p, GGS_time_constants (*this)) ;
    result = GGS_object (p) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_time_constants GGS_time_constants::castFromObject (C_Compiler & inLexique,
                                   const GGS_object & inObject,
                                   const GGS_location & inErrorLocation
                                   COMMA_LOCATION_ARGS) {
  GGS_time_constants result ;
  const GGS__root * embeddedObject = inObject.embeddedObject () ;
  if (NULL != embeddedObject) {
    const GGS_time_constants * p = dynamic_cast <const GGS_time_constants *> (embeddedObject) ;
    if (NULL != p) {
      result = * p ;
    }else{
      castFromObjectErrorSignaling (inLexique, inErrorLocation, & kTypeDescriptor_GGS_time_constants, embeddedObject COMMA_THERE) ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*

const C_galgas_type_descriptorEX * GGS_time_constants::typeDescriptor (void) const {
  return & kTypeDescriptor_GGS_time_constants ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                        class 'cPtr_counter_type'                          *
//                                                                           *
//---------------------------------------------------------------------------*

cPtr_counter_type::
cPtr_counter_type (const GGS_location & argument_0
                                COMMA_LOCATION_ARGS)
:cPtr__AC_galgas_class (THERE),
location (argument_0) {
}

//---------------------------------------------------------------------------*

#ifndef DO_NOT_GENERATE_CHECKINGS
  cPtr_counter_type * GGS_counter_type::
  operator () (LOCATION_ARGS) const {
    macroValidObjectThere (mPointer, cPtr_counter_type) ;
    return (cPtr_counter_type *) mPointer ;
  }
#endif

//---------------------------------------------------------------------------*

void cPtr_counter_type::
appendForDescription (C_String & ioString,
                      const PMSInt32 inIndentation) const {
  ioString << "->@counter_type:"
           << location.reader_description (inIndentation + 1) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                              Class message                                *
//                                                                           *
//---------------------------------------------------------------------------*

const char * cPtr_counter_type::
instanceMessage (void) const {
  return "" ;
}

//---------------------------------------------------------------------------*

const char * cPtr_counter_type::
_static_message (void) {
  return "" ;
}

//---------------------------------------------------------------------------*

C_galgas_class_inspector _gInspectorFor_counter_type (& typeid (cPtr_counter_type), NULL, "") ;

//---------------------------------------------------------------------------*

AC_galgasClassRunTimeInformationEX * cPtr_counter_type::galgasRTTI (void) const {
  return & gClassInfoFor__counter_type ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                     GALGAS class 'GGS_counter_type'                       *
//                                                                           *
//---------------------------------------------------------------------------*

const C_galgas_type_descriptorEX kTypeDescriptor_GGS_counter_type ("counter_type", true, NULL) ;

//---------------------------------------------------------------------------*

GGS_counter_type::
GGS_counter_type (const cPtr__AC_galgas_class * inPointer) {
  macroAssignObject (mPointer, (cPtr__AC_galgas_class *) inPointer) ;
}

//---------------------------------------------------------------------------*

GGS_counter_type::
GGS_counter_type (cPtr__AC_galgas_class & inObject) {
  macroAssignObject (mPointer, & inObject) ;
}

//---------------------------------------------------------------------------*

//--- castFrom class method (implements cast expression)
GGS_counter_type GGS_counter_type::
castFrom (C_Compiler & inLexique,
           cPtr__AC_galgas_class * inPointer,
           const bool inUseKindOfClass,
           const GGS_location & inErrorLocation
           COMMA_LOCATION_ARGS) {
  GGS_counter_type result ;
  if (inPointer != NULL) {
    macroValidPointer (inPointer) ;
    const bool ok = inUseKindOfClass
      ? (dynamic_cast <cPtr_counter_type *> (inPointer) != NULL)
      : (typeid (cPtr_counter_type) == typeid (*inPointer)) ;
    if (ok) {
      result = GGS_counter_type (inPointer) ;
    }else{
      inErrorLocation.signalCastError (inLexique,
                                       & typeid (cPtr_counter_type),
                                       inUseKindOfClass,
                                       inPointer->instanceMessage ()
                                       COMMA_THERE) ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_location  GGS_counter_type::
reader_location (C_Compiler & /* inLexique */ COMMA_UNUSED_LOCATION_ARGS) const {
  GGS_location   result ;
  if (mPointer != NULL) {
    macroValidPointer (mPointer) ;
    MF_Assert (dynamic_cast <cPtr_counter_type *> (mPointer) != NULL,
               "dynamic cast error", 0, 0) ;
    result = ((cPtr_counter_type *) mPointer)->location ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

const char * GGS_counter_type::actualTypeName (void) const {
  return "counter_type" ;
}

//---------------------------------------------------------------------------*

AC_galgasClassRunTimeInformationEX * GGS_counter_type::galgasObjectRunTimeInfo (void) const {
  AC_galgasClassRunTimeInformationEX * result = NULL ;
  if (mPointer != NULL) {
    result = mPointer->galgasRTTI () ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

C_galgasRootClassRunTimeInformationEX gClassInfoFor__counter_type ("counter_type", & kTypeDescriptor_GGS_counter_type) ;

//---------------------------------------------------------------------------*

GGS_object GGS_counter_type::reader_object (void) const {
  GGS_object result ;
  if (isBuilt ()) {
    GGS_counter_type * p = NULL ;
    macroMyNew (p, GGS_counter_type (*this)) ;
    result = GGS_object (p) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_counter_type GGS_counter_type::castFromObject (C_Compiler & inLexique,
                                   const GGS_object & inObject,
                                   const GGS_location & inErrorLocation
                                   COMMA_LOCATION_ARGS) {
  GGS_counter_type result ;
  const GGS__root * embeddedObject = inObject.embeddedObject () ;
  if (NULL != embeddedObject) {
    const GGS_counter_type * p = dynamic_cast <const GGS_counter_type *> (embeddedObject) ;
    if (NULL != p) {
      result = * p ;
    }else{
      castFromObjectErrorSignaling (inLexique, inErrorLocation, & kTypeDescriptor_GGS_counter_type, embeddedObject COMMA_THERE) ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*

const C_galgas_type_descriptorEX * GGS_counter_type::typeDescriptor (void) const {
  return & kTypeDescriptor_GGS_counter_type ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                        class 'cPtr_void_counter'                          *
//                                                                           *
//---------------------------------------------------------------------------*

cPtr_void_counter::
cPtr_void_counter (const GGS_location & argument_0
                                COMMA_LOCATION_ARGS)
:cPtr_counter_type (argument_0 COMMA_THERE) {
}

//---------------------------------------------------------------------------*

#ifndef DO_NOT_GENERATE_CHECKINGS
  cPtr_void_counter * GGS_void_counter::
  operator () (LOCATION_ARGS) const {
    macroValidObjectThere (mPointer, cPtr_void_counter) ;
    return (cPtr_void_counter *) mPointer ;
  }
#endif

//---------------------------------------------------------------------------*

bool cPtr_void_counter::
isEqualToObject (const cPtr__AC_galgas_class * inOperand) const {
  bool equal = typeid (this) == typeid (inOperand) ;
  if (equal) {
    const cPtr_void_counter * ptr = dynamic_cast <const cPtr_void_counter *> (inOperand) ;
    macroValidPointer (ptr) ;
    equal = location.operator_isEqual (ptr->location).boolValue () ;
  }
  return equal ;
}

//---------------------------------------------------------------------------*

void cPtr_void_counter::
appendForDescription (C_String & ioString,
                      const PMSInt32 inIndentation) const {
  ioString << "->@void_counter:"
           << location.reader_description (inIndentation + 1) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                              Class message                                *
//                                                                           *
//---------------------------------------------------------------------------*

const char * cPtr_void_counter::
instanceMessage (void) const {
  return "" ;
}

//---------------------------------------------------------------------------*

const char * cPtr_void_counter::
_static_message (void) {
  return "" ;
}

//---------------------------------------------------------------------------*

C_galgas_class_inspector _gInspectorFor_void_counter (& typeid (cPtr_void_counter), & typeid (cPtr_counter_type), "") ;

//---------------------------------------------------------------------------*

AC_galgasClassRunTimeInformationEX * cPtr_void_counter::galgasRTTI (void) const {
  return & gClassInfoFor__void_counter ;
}

//---------------------------------------------------------------------------*

cPtr__AC_galgas_class * cPtr_void_counter::makeClone (void) const {
  cPtr__AC_galgas_class * result = NULL ;
  macroMyNew (result, cPtr_void_counter (location COMMA_HERE)) ;
  return result ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                     GALGAS class 'GGS_void_counter'                       *
//                                                                           *
//---------------------------------------------------------------------------*

const C_galgas_type_descriptorEX kTypeDescriptor_GGS_void_counter ("void_counter", true, & kTypeDescriptor_GGS_counter_type) ;

//---------------------------------------------------------------------------*

GGS_void_counter::
GGS_void_counter (const cPtr__AC_galgas_class * inPointer) {
  macroAssignObject (mPointer, (cPtr__AC_galgas_class *) inPointer) ;
}

//---------------------------------------------------------------------------*

GGS_void_counter::
GGS_void_counter (cPtr__AC_galgas_class & inObject) {
  macroAssignObject (mPointer, & inObject) ;
}

//---------------------------------------------------------------------------*

//--- castFrom class method (implements cast expression)
GGS_void_counter GGS_void_counter::
castFrom (C_Compiler & inLexique,
           cPtr__AC_galgas_class * inPointer,
           const bool inUseKindOfClass,
           const GGS_location & inErrorLocation
           COMMA_LOCATION_ARGS) {
  GGS_void_counter result ;
  if (inPointer != NULL) {
    macroValidPointer (inPointer) ;
    const bool ok = inUseKindOfClass
      ? (dynamic_cast <cPtr_void_counter *> (inPointer) != NULL)
      : (typeid (cPtr_void_counter) == typeid (*inPointer)) ;
    if (ok) {
      result = GGS_void_counter (inPointer) ;
    }else{
      inErrorLocation.signalCastError (inLexique,
                                       & typeid (cPtr_void_counter),
                                       inUseKindOfClass,
                                       inPointer->instanceMessage ()
                                       COMMA_THERE) ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_void_counter GGS_void_counter::
constructor_new (C_Compiler & /* inLexique */,
                 const GGS_location & argument_0
                                COMMA_LOCATION_ARGS) {
  GGS_void_counter result ;
  macroMyNew (result.mPointer, cPtr_void_counter (argument_0 COMMA_THERE)) ;
  macroRetainObject (result.mPointer) ;
  return result ;
}

//---------------------------------------------------------------------------*

const char * GGS_void_counter::actualTypeName (void) const {
  return "void_counter" ;
}

//---------------------------------------------------------------------------*

C_galgasClassRunTimeInformationEX gClassInfoFor__void_counter ("void_counter", gClassInfoFor__counter_type, & kTypeDescriptor_GGS_void_counter) ;

//---------------------------------------------------------------------------*

GGS_object GGS_void_counter::reader_object (void) const {
  GGS_object result ;
  if (isBuilt ()) {
    GGS_void_counter * p = NULL ;
    macroMyNew (p, GGS_void_counter (*this)) ;
    result = GGS_object (p) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_void_counter GGS_void_counter::castFromObject (C_Compiler & inLexique,
                                   const GGS_object & inObject,
                                   const GGS_location & inErrorLocation
                                   COMMA_LOCATION_ARGS) {
  GGS_void_counter result ;
  const GGS__root * embeddedObject = inObject.embeddedObject () ;
  if (NULL != embeddedObject) {
    const GGS_void_counter * p = dynamic_cast <const GGS_void_counter *> (embeddedObject) ;
    if (NULL != p) {
      result = * p ;
    }else{
      castFromObjectErrorSignaling (inLexique, inErrorLocation, & kTypeDescriptor_GGS_void_counter, embeddedObject COMMA_THERE) ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*

const C_galgas_type_descriptorEX * GGS_void_counter::typeDescriptor (void) const {
  return & kTypeDescriptor_GGS_void_counter ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                      class 'cPtr_software_counter'                        *
//                                                                           *
//---------------------------------------------------------------------------*

cPtr_software_counter::
cPtr_software_counter (const GGS_location & argument_0
                                COMMA_LOCATION_ARGS)
:cPtr_counter_type (argument_0 COMMA_THERE) {
}

//---------------------------------------------------------------------------*

#ifndef DO_NOT_GENERATE_CHECKINGS
  cPtr_software_counter * GGS_software_counter::
  operator () (LOCATION_ARGS) const {
    macroValidObjectThere (mPointer, cPtr_software_counter) ;
    return (cPtr_software_counter *) mPointer ;
  }
#endif

//---------------------------------------------------------------------------*

bool cPtr_software_counter::
isEqualToObject (const cPtr__AC_galgas_class * inOperand) const {
  bool equal = typeid (this) == typeid (inOperand) ;
  if (equal) {
    const cPtr_software_counter * ptr = dynamic_cast <const cPtr_software_counter *> (inOperand) ;
    macroValidPointer (ptr) ;
    equal = location.operator_isEqual (ptr->location).boolValue () ;
  }
  return equal ;
}

//---------------------------------------------------------------------------*

void cPtr_software_counter::
appendForDescription (C_String & ioString,
                      const PMSInt32 inIndentation) const {
  ioString << "->@software_counter:"
           << location.reader_description (inIndentation + 1) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                              Class message                                *
//                                                                           *
//---------------------------------------------------------------------------*

const char * cPtr_software_counter::
instanceMessage (void) const {
  return "" ;
}

//---------------------------------------------------------------------------*

const char * cPtr_software_counter::
_static_message (void) {
  return "" ;
}

//---------------------------------------------------------------------------*

C_galgas_class_inspector _gInspectorFor_software_counter (& typeid (cPtr_software_counter), & typeid (cPtr_counter_type), "") ;

//---------------------------------------------------------------------------*

AC_galgasClassRunTimeInformationEX * cPtr_software_counter::galgasRTTI (void) const {
  return & gClassInfoFor__software_counter ;
}

//---------------------------------------------------------------------------*

cPtr__AC_galgas_class * cPtr_software_counter::makeClone (void) const {
  cPtr__AC_galgas_class * result = NULL ;
  macroMyNew (result, cPtr_software_counter (location COMMA_HERE)) ;
  return result ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                   GALGAS class 'GGS_software_counter'                     *
//                                                                           *
//---------------------------------------------------------------------------*

const C_galgas_type_descriptorEX kTypeDescriptor_GGS_software_counter ("software_counter", true, & kTypeDescriptor_GGS_counter_type) ;

//---------------------------------------------------------------------------*

GGS_software_counter::
GGS_software_counter (const cPtr__AC_galgas_class * inPointer) {
  macroAssignObject (mPointer, (cPtr__AC_galgas_class *) inPointer) ;
}

//---------------------------------------------------------------------------*

GGS_software_counter::
GGS_software_counter (cPtr__AC_galgas_class & inObject) {
  macroAssignObject (mPointer, & inObject) ;
}

//---------------------------------------------------------------------------*

//--- castFrom class method (implements cast expression)
GGS_software_counter GGS_software_counter::
castFrom (C_Compiler & inLexique,
           cPtr__AC_galgas_class * inPointer,
           const bool inUseKindOfClass,
           const GGS_location & inErrorLocation
           COMMA_LOCATION_ARGS) {
  GGS_software_counter result ;
  if (inPointer != NULL) {
    macroValidPointer (inPointer) ;
    const bool ok = inUseKindOfClass
      ? (dynamic_cast <cPtr_software_counter *> (inPointer) != NULL)
      : (typeid (cPtr_software_counter) == typeid (*inPointer)) ;
    if (ok) {
      result = GGS_software_counter (inPointer) ;
    }else{
      inErrorLocation.signalCastError (inLexique,
                                       & typeid (cPtr_software_counter),
                                       inUseKindOfClass,
                                       inPointer->instanceMessage ()
                                       COMMA_THERE) ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_software_counter GGS_software_counter::
constructor_new (C_Compiler & /* inLexique */,
                 const GGS_location & argument_0
                                COMMA_LOCATION_ARGS) {
  GGS_software_counter result ;
  macroMyNew (result.mPointer, cPtr_software_counter (argument_0 COMMA_THERE)) ;
  macroRetainObject (result.mPointer) ;
  return result ;
}

//---------------------------------------------------------------------------*

const char * GGS_software_counter::actualTypeName (void) const {
  return "software_counter" ;
}

//---------------------------------------------------------------------------*

C_galgasClassRunTimeInformationEX gClassInfoFor__software_counter ("software_counter", gClassInfoFor__counter_type, & kTypeDescriptor_GGS_software_counter) ;

//---------------------------------------------------------------------------*

GGS_object GGS_software_counter::reader_object (void) const {
  GGS_object result ;
  if (isBuilt ()) {
    GGS_software_counter * p = NULL ;
    macroMyNew (p, GGS_software_counter (*this)) ;
    result = GGS_object (p) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_software_counter GGS_software_counter::castFromObject (C_Compiler & inLexique,
                                   const GGS_object & inObject,
                                   const GGS_location & inErrorLocation
                                   COMMA_LOCATION_ARGS) {
  GGS_software_counter result ;
  const GGS__root * embeddedObject = inObject.embeddedObject () ;
  if (NULL != embeddedObject) {
    const GGS_software_counter * p = dynamic_cast <const GGS_software_counter *> (embeddedObject) ;
    if (NULL != p) {
      result = * p ;
    }else{
      castFromObjectErrorSignaling (inLexique, inErrorLocation, & kTypeDescriptor_GGS_software_counter, embeddedObject COMMA_THERE) ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*

const C_galgas_type_descriptorEX * GGS_software_counter::typeDescriptor (void) const {
  return & kTypeDescriptor_GGS_software_counter ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                      class 'cPtr_hardware_counter'                        *
//                                                                           *
//---------------------------------------------------------------------------*

cPtr_hardware_counter::
cPtr_hardware_counter (const GGS_location & argument_0,
                                const GGS_counter_driver & argument_1,
                                const GGS_time_constants & argument_2
                                COMMA_LOCATION_ARGS)
:cPtr_counter_type (argument_0 COMMA_THERE),
driver (argument_1),
time_consts (argument_2) {
}

//---------------------------------------------------------------------------*

#ifndef DO_NOT_GENERATE_CHECKINGS
  cPtr_hardware_counter * GGS_hardware_counter::
  operator () (LOCATION_ARGS) const {
    macroValidObjectThere (mPointer, cPtr_hardware_counter) ;
    return (cPtr_hardware_counter *) mPointer ;
  }
#endif

//---------------------------------------------------------------------------*

bool cPtr_hardware_counter::
isEqualToObject (const cPtr__AC_galgas_class * inOperand) const {
  bool equal = typeid (this) == typeid (inOperand) ;
  if (equal) {
    const cPtr_hardware_counter * ptr = dynamic_cast <const cPtr_hardware_counter *> (inOperand) ;
    macroValidPointer (ptr) ;
    equal = location.operator_isEqual (ptr->location).boolValue ()
         && driver.operator_isEqual (ptr->driver).boolValue ()
         && time_consts.operator_isEqual (ptr->time_consts).boolValue () ;
  }
  return equal ;
}

//---------------------------------------------------------------------------*

void cPtr_hardware_counter::
appendForDescription (C_String & ioString,
                      const PMSInt32 inIndentation) const {
  ioString << "->@hardware_counter:"
           << location.reader_description (inIndentation + 1)
           << driver.reader_description (inIndentation + 1)
           << time_consts.reader_description (inIndentation + 1) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                              Class message                                *
//                                                                           *
//---------------------------------------------------------------------------*

const char * cPtr_hardware_counter::
instanceMessage (void) const {
  return "" ;
}

//---------------------------------------------------------------------------*

const char * cPtr_hardware_counter::
_static_message (void) {
  return "" ;
}

//---------------------------------------------------------------------------*

C_galgas_class_inspector _gInspectorFor_hardware_counter (& typeid (cPtr_hardware_counter), & typeid (cPtr_counter_type), "") ;

//---------------------------------------------------------------------------*

AC_galgasClassRunTimeInformationEX * cPtr_hardware_counter::galgasRTTI (void) const {
  return & gClassInfoFor__hardware_counter ;
}

//---------------------------------------------------------------------------*

cPtr__AC_galgas_class * cPtr_hardware_counter::makeClone (void) const {
  cPtr__AC_galgas_class * result = NULL ;
  macroMyNew (result, cPtr_hardware_counter (location, driver, time_consts COMMA_HERE)) ;
  return result ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                   GALGAS class 'GGS_hardware_counter'                     *
//                                                                           *
//---------------------------------------------------------------------------*

const C_galgas_type_descriptorEX kTypeDescriptor_GGS_hardware_counter ("hardware_counter", true, & kTypeDescriptor_GGS_counter_type) ;

//---------------------------------------------------------------------------*

GGS_hardware_counter::
GGS_hardware_counter (const cPtr__AC_galgas_class * inPointer) {
  macroAssignObject (mPointer, (cPtr__AC_galgas_class *) inPointer) ;
}

//---------------------------------------------------------------------------*

GGS_hardware_counter::
GGS_hardware_counter (cPtr__AC_galgas_class & inObject) {
  macroAssignObject (mPointer, & inObject) ;
}

//---------------------------------------------------------------------------*

//--- castFrom class method (implements cast expression)
GGS_hardware_counter GGS_hardware_counter::
castFrom (C_Compiler & inLexique,
           cPtr__AC_galgas_class * inPointer,
           const bool inUseKindOfClass,
           const GGS_location & inErrorLocation
           COMMA_LOCATION_ARGS) {
  GGS_hardware_counter result ;
  if (inPointer != NULL) {
    macroValidPointer (inPointer) ;
    const bool ok = inUseKindOfClass
      ? (dynamic_cast <cPtr_hardware_counter *> (inPointer) != NULL)
      : (typeid (cPtr_hardware_counter) == typeid (*inPointer)) ;
    if (ok) {
      result = GGS_hardware_counter (inPointer) ;
    }else{
      inErrorLocation.signalCastError (inLexique,
                                       & typeid (cPtr_hardware_counter),
                                       inUseKindOfClass,
                                       inPointer->instanceMessage ()
                                       COMMA_THERE) ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_hardware_counter GGS_hardware_counter::
constructor_new (C_Compiler & /* inLexique */,
                 const GGS_location & argument_0,
                 const GGS_counter_driver & argument_1,
                 const GGS_time_constants & argument_2
                                COMMA_LOCATION_ARGS) {
  GGS_hardware_counter result ;
  macroMyNew (result.mPointer, cPtr_hardware_counter (argument_0,
                                argument_1,
                                argument_2 COMMA_THERE)) ;
  macroRetainObject (result.mPointer) ;
  return result ;
}

//---------------------------------------------------------------------------*

GGS_counter_driver  GGS_hardware_counter::
reader_driver (C_Compiler & /* inLexique */ COMMA_UNUSED_LOCATION_ARGS) const {
  GGS_counter_driver   result ;
  if (mPointer != NULL) {
    macroValidPointer (mPointer) ;
    MF_Assert (dynamic_cast <cPtr_hardware_counter *> (mPointer) != NULL,
               "dynamic cast error", 0, 0) ;
    result = ((cPtr_hardware_counter *) mPointer)->driver ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_time_constants  GGS_hardware_counter::
reader_time_consts (C_Compiler & /* inLexique */ COMMA_UNUSED_LOCATION_ARGS) const {
  GGS_time_constants   result ;
  if (mPointer != NULL) {
    macroValidPointer (mPointer) ;
    MF_Assert (dynamic_cast <cPtr_hardware_counter *> (mPointer) != NULL,
               "dynamic cast error", 0, 0) ;
    result = ((cPtr_hardware_counter *) mPointer)->time_consts ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

const char * GGS_hardware_counter::actualTypeName (void) const {
  return "hardware_counter" ;
}

//---------------------------------------------------------------------------*

C_galgasClassRunTimeInformationEX gClassInfoFor__hardware_counter ("hardware_counter", gClassInfoFor__counter_type, & kTypeDescriptor_GGS_hardware_counter) ;

//---------------------------------------------------------------------------*

GGS_object GGS_hardware_counter::reader_object (void) const {
  GGS_object result ;
  if (isBuilt ()) {
    GGS_hardware_counter * p = NULL ;
    macroMyNew (p, GGS_hardware_counter (*this)) ;
    result = GGS_object (p) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_hardware_counter GGS_hardware_counter::castFromObject (C_Compiler & inLexique,
                                   const GGS_object & inObject,
                                   const GGS_location & inErrorLocation
                                   COMMA_LOCATION_ARGS) {
  GGS_hardware_counter result ;
  const GGS__root * embeddedObject = inObject.embeddedObject () ;
  if (NULL != embeddedObject) {
    const GGS_hardware_counter * p = dynamic_cast <const GGS_hardware_counter *> (embeddedObject) ;
    if (NULL != p) {
      result = * p ;
    }else{
      castFromObjectErrorSignaling (inLexique, inErrorLocation, & kTypeDescriptor_GGS_hardware_counter, embeddedObject COMMA_THERE) ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*

const C_galgas_type_descriptorEX * GGS_hardware_counter::typeDescriptor (void) const {
  return & kTypeDescriptor_GGS_hardware_counter ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                         class 'cPtr_counter_obj'                          *
//                                                                           *
//---------------------------------------------------------------------------*

cPtr_counter_obj::
cPtr_counter_obj (const GGS_lstring & argument_0,
                                const GGS_basic_type & argument_1,
                                const GGS_basic_type & argument_2,
                                const GGS_basic_type & argument_3,
                                const GGS_lstring & argument_4,
                                const GGS_lstringlist & argument_5,
                                const GGS_counter_type & argument_6,
                                const GGS_lstring & argument_7
                                COMMA_LOCATION_ARGS)
:cPtr_oil_obj (argument_0 COMMA_THERE),
max_allowed_value (argument_1),
ticks_per_base (argument_2),
min_cycle (argument_3),
source (argument_4),
acc_apps (argument_5),
type (argument_6),
unit (argument_7) {
}

//---------------------------------------------------------------------------*

#ifndef DO_NOT_GENERATE_CHECKINGS
  cPtr_counter_obj * GGS_counter_obj::
  operator () (LOCATION_ARGS) const {
    macroValidObjectThere (mPointer, cPtr_counter_obj) ;
    return (cPtr_counter_obj *) mPointer ;
  }
#endif

//---------------------------------------------------------------------------*

bool cPtr_counter_obj::
isEqualToObject (const cPtr__AC_galgas_class * inOperand) const {
  bool equal = typeid (this) == typeid (inOperand) ;
  if (equal) {
    const cPtr_counter_obj * ptr = dynamic_cast <const cPtr_counter_obj *> (inOperand) ;
    macroValidPointer (ptr) ;
    equal = desc.operator_isEqual (ptr->desc).boolValue ()
         && max_allowed_value.operator_isEqual (ptr->max_allowed_value).boolValue ()
         && ticks_per_base.operator_isEqual (ptr->ticks_per_base).boolValue ()
         && min_cycle.operator_isEqual (ptr->min_cycle).boolValue ()
         && source.operator_isEqual (ptr->source).boolValue ()
         && acc_apps.operator_isEqual (ptr->acc_apps).boolValue ()
         && type.operator_isEqual (ptr->type).boolValue ()
         && unit.operator_isEqual (ptr->unit).boolValue () ;
  }
  return equal ;
}

//---------------------------------------------------------------------------*

void cPtr_counter_obj::
appendForDescription (C_String & ioString,
                      const PMSInt32 inIndentation) const {
  ioString << "->@counter_obj:"
           << desc.reader_description (inIndentation + 1)
           << max_allowed_value.reader_description (inIndentation + 1)
           << ticks_per_base.reader_description (inIndentation + 1)
           << min_cycle.reader_description (inIndentation + 1)
           << source.reader_description (inIndentation + 1)
           << acc_apps.reader_description (inIndentation + 1)
           << type.reader_description (inIndentation + 1)
           << unit.reader_description (inIndentation + 1) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                              Class message                                *
//                                                                           *
//---------------------------------------------------------------------------*

const char * cPtr_counter_obj::
instanceMessage (void) const {
  return "" ;
}

//---------------------------------------------------------------------------*

const char * cPtr_counter_obj::
_static_message (void) {
  return "" ;
}

//---------------------------------------------------------------------------*

C_galgas_class_inspector _gInspectorFor_counter_obj (& typeid (cPtr_counter_obj), & typeid (cPtr_oil_obj), "") ;

//---------------------------------------------------------------------------*

AC_galgasClassRunTimeInformationEX * cPtr_counter_obj::galgasRTTI (void) const {
  return & gClassInfoFor__counter_obj ;
}

//---------------------------------------------------------------------------*

cPtr__AC_galgas_class * cPtr_counter_obj::makeClone (void) const {
  cPtr__AC_galgas_class * result = NULL ;
  macroMyNew (result, cPtr_counter_obj (desc, max_allowed_value, ticks_per_base, min_cycle, source, acc_apps, type, unit COMMA_HERE)) ;
  return result ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                      GALGAS class 'GGS_counter_obj'                       *
//                                                                           *
//---------------------------------------------------------------------------*

const C_galgas_type_descriptorEX kTypeDescriptor_GGS_counter_obj ("counter_obj", true, & kTypeDescriptor_GGS_oil_obj) ;

//---------------------------------------------------------------------------*

GGS_counter_obj::
GGS_counter_obj (const cPtr__AC_galgas_class * inPointer) {
  macroAssignObject (mPointer, (cPtr__AC_galgas_class *) inPointer) ;
}

//---------------------------------------------------------------------------*

GGS_counter_obj::
GGS_counter_obj (cPtr__AC_galgas_class & inObject) {
  macroAssignObject (mPointer, & inObject) ;
}

//---------------------------------------------------------------------------*

//--- castFrom class method (implements cast expression)
GGS_counter_obj GGS_counter_obj::
castFrom (C_Compiler & inLexique,
           cPtr__AC_galgas_class * inPointer,
           const bool inUseKindOfClass,
           const GGS_location & inErrorLocation
           COMMA_LOCATION_ARGS) {
  GGS_counter_obj result ;
  if (inPointer != NULL) {
    macroValidPointer (inPointer) ;
    const bool ok = inUseKindOfClass
      ? (dynamic_cast <cPtr_counter_obj *> (inPointer) != NULL)
      : (typeid (cPtr_counter_obj) == typeid (*inPointer)) ;
    if (ok) {
      result = GGS_counter_obj (inPointer) ;
    }else{
      inErrorLocation.signalCastError (inLexique,
                                       & typeid (cPtr_counter_obj),
                                       inUseKindOfClass,
                                       inPointer->instanceMessage ()
                                       COMMA_THERE) ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_counter_obj GGS_counter_obj::
constructor_new (C_Compiler & /* inLexique */,
                 const GGS_lstring & argument_0,
                 const GGS_basic_type & argument_1,
                 const GGS_basic_type & argument_2,
                 const GGS_basic_type & argument_3,
                 const GGS_lstring & argument_4,
                 const GGS_lstringlist & argument_5,
                 const GGS_counter_type & argument_6,
                 const GGS_lstring & argument_7
                                COMMA_LOCATION_ARGS) {
  GGS_counter_obj result ;
  macroMyNew (result.mPointer, cPtr_counter_obj (argument_0,
                                argument_1,
                                argument_2,
                                argument_3,
                                argument_4,
                                argument_5,
                                argument_6,
                                argument_7 COMMA_THERE)) ;
  macroRetainObject (result.mPointer) ;
  return result ;
}

//---------------------------------------------------------------------------*

GGS_basic_type  GGS_counter_obj::
reader_max_allowed_value (C_Compiler & /* inLexique */ COMMA_UNUSED_LOCATION_ARGS) const {
  GGS_basic_type   result ;
  if (mPointer != NULL) {
    macroValidPointer (mPointer) ;
    MF_Assert (dynamic_cast <cPtr_counter_obj *> (mPointer) != NULL,
               "dynamic cast error", 0, 0) ;
    result = ((cPtr_counter_obj *) mPointer)->max_allowed_value ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_basic_type  GGS_counter_obj::
reader_ticks_per_base (C_Compiler & /* inLexique */ COMMA_UNUSED_LOCATION_ARGS) const {
  GGS_basic_type   result ;
  if (mPointer != NULL) {
    macroValidPointer (mPointer) ;
    MF_Assert (dynamic_cast <cPtr_counter_obj *> (mPointer) != NULL,
               "dynamic cast error", 0, 0) ;
    result = ((cPtr_counter_obj *) mPointer)->ticks_per_base ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_basic_type  GGS_counter_obj::
reader_min_cycle (C_Compiler & /* inLexique */ COMMA_UNUSED_LOCATION_ARGS) const {
  GGS_basic_type   result ;
  if (mPointer != NULL) {
    macroValidPointer (mPointer) ;
    MF_Assert (dynamic_cast <cPtr_counter_obj *> (mPointer) != NULL,
               "dynamic cast error", 0, 0) ;
    result = ((cPtr_counter_obj *) mPointer)->min_cycle ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_lstring  GGS_counter_obj::
reader_source (C_Compiler & /* inLexique */ COMMA_UNUSED_LOCATION_ARGS) const {
  GGS_lstring   result ;
  if (mPointer != NULL) {
    macroValidPointer (mPointer) ;
    MF_Assert (dynamic_cast <cPtr_counter_obj *> (mPointer) != NULL,
               "dynamic cast error", 0, 0) ;
    result = ((cPtr_counter_obj *) mPointer)->source ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_lstringlist  GGS_counter_obj::
reader_acc_apps (C_Compiler & /* inLexique */ COMMA_UNUSED_LOCATION_ARGS) const {
  GGS_lstringlist   result ;
  if (mPointer != NULL) {
    macroValidPointer (mPointer) ;
    MF_Assert (dynamic_cast <cPtr_counter_obj *> (mPointer) != NULL,
               "dynamic cast error", 0, 0) ;
    result = ((cPtr_counter_obj *) mPointer)->acc_apps ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_counter_type  GGS_counter_obj::
reader_type (C_Compiler & /* inLexique */ COMMA_UNUSED_LOCATION_ARGS) const {
  GGS_counter_type   result ;
  if (mPointer != NULL) {
    macroValidPointer (mPointer) ;
    MF_Assert (dynamic_cast <cPtr_counter_obj *> (mPointer) != NULL,
               "dynamic cast error", 0, 0) ;
    result = ((cPtr_counter_obj *) mPointer)->type ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_lstring  GGS_counter_obj::
reader_unit (C_Compiler & /* inLexique */ COMMA_UNUSED_LOCATION_ARGS) const {
  GGS_lstring   result ;
  if (mPointer != NULL) {
    macroValidPointer (mPointer) ;
    MF_Assert (dynamic_cast <cPtr_counter_obj *> (mPointer) != NULL,
               "dynamic cast error", 0, 0) ;
    result = ((cPtr_counter_obj *) mPointer)->unit ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

void GGS_counter_obj::
modifier_setMax_allowed_value (C_Compiler & /* inLexique */, const GGS_basic_type & inValue COMMA_UNUSED_LOCATION_ARGS) {
  if ((mPointer != NULL) && inValue.isBuilt ()) {
    macroValidPointer (mPointer) ;
    if (mPointer->retainCount () > 1) {
      cPtr_counter_obj * clone = dynamic_cast <cPtr_counter_obj *> (mPointer->makeClone ()) ;
      macroValidPointer (clone) ;
      macroAssignObject (mPointer, clone) ;
    }
    ((cPtr_counter_obj *) mPointer)->max_allowed_value = inValue ;
  }
}

//---------------------------------------------------------------------------*

void GGS_counter_obj::
modifier_setTicks_per_base (C_Compiler & /* inLexique */, const GGS_basic_type & inValue COMMA_UNUSED_LOCATION_ARGS) {
  if ((mPointer != NULL) && inValue.isBuilt ()) {
    macroValidPointer (mPointer) ;
    if (mPointer->retainCount () > 1) {
      cPtr_counter_obj * clone = dynamic_cast <cPtr_counter_obj *> (mPointer->makeClone ()) ;
      macroValidPointer (clone) ;
      macroAssignObject (mPointer, clone) ;
    }
    ((cPtr_counter_obj *) mPointer)->ticks_per_base = inValue ;
  }
}

//---------------------------------------------------------------------------*

void GGS_counter_obj::
modifier_setMin_cycle (C_Compiler & /* inLexique */, const GGS_basic_type & inValue COMMA_UNUSED_LOCATION_ARGS) {
  if ((mPointer != NULL) && inValue.isBuilt ()) {
    macroValidPointer (mPointer) ;
    if (mPointer->retainCount () > 1) {
      cPtr_counter_obj * clone = dynamic_cast <cPtr_counter_obj *> (mPointer->makeClone ()) ;
      macroValidPointer (clone) ;
      macroAssignObject (mPointer, clone) ;
    }
    ((cPtr_counter_obj *) mPointer)->min_cycle = inValue ;
  }
}

//---------------------------------------------------------------------------*

void GGS_counter_obj::
modifier_setAcc_apps (C_Compiler & /* inLexique */, const GGS_lstringlist & inValue COMMA_UNUSED_LOCATION_ARGS) {
  if ((mPointer != NULL) && inValue.isBuilt ()) {
    macroValidPointer (mPointer) ;
    if (mPointer->retainCount () > 1) {
      cPtr_counter_obj * clone = dynamic_cast <cPtr_counter_obj *> (mPointer->makeClone ()) ;
      macroValidPointer (clone) ;
      macroAssignObject (mPointer, clone) ;
    }
    ((cPtr_counter_obj *) mPointer)->acc_apps = inValue ;
  }
}

//---------------------------------------------------------------------------*

const char * GGS_counter_obj::actualTypeName (void) const {
  return "counter_obj" ;
}

//---------------------------------------------------------------------------*

C_galgasClassRunTimeInformationEX gClassInfoFor__counter_obj ("counter_obj", gClassInfoFor__oil_obj, & kTypeDescriptor_GGS_counter_obj) ;

//---------------------------------------------------------------------------*

GGS_object GGS_counter_obj::reader_object (void) const {
  GGS_object result ;
  if (isBuilt ()) {
    GGS_counter_obj * p = NULL ;
    macroMyNew (p, GGS_counter_obj (*this)) ;
    result = GGS_object (p) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_counter_obj GGS_counter_obj::castFromObject (C_Compiler & inLexique,
                                   const GGS_object & inObject,
                                   const GGS_location & inErrorLocation
                                   COMMA_LOCATION_ARGS) {
  GGS_counter_obj result ;
  const GGS__root * embeddedObject = inObject.embeddedObject () ;
  if (NULL != embeddedObject) {
    const GGS_counter_obj * p = dynamic_cast <const GGS_counter_obj *> (embeddedObject) ;
    if (NULL != p) {
      result = * p ;
    }else{
      castFromObjectErrorSignaling (inLexique, inErrorLocation, & kTypeDescriptor_GGS_counter_obj, embeddedObject COMMA_THERE) ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*

const C_galgas_type_descriptorEX * GGS_counter_obj::typeDescriptor (void) const {
  return & kTypeDescriptor_GGS_counter_obj ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                          class 'e_counter_map'                            *
//                                                                           *
//---------------------------------------------------------------------------*

e_counter_map::e_counter_map (void) :
counter () {
}

//---------------------------------------------------------------------------*
//                                                                           *
//                         class map '@counter_map'                          *
//                                                                           *
//---------------------------------------------------------------------------*

const C_galgas_type_descriptorEX kTypeDescriptor_GGS_counter_map ("counter_map", false, NULL) ;

//---------------------------------------------------------------------------*

elementOf_GGS_counter_map::
elementOf_GGS_counter_map (const GGS_lstring & inKey,
              const PMSInt32 inIndex,
              const e_counter_map & inInfo,
              const PMUInt32 inInitialState) :
AC_galgas_map_element (inKey, inIndex, inInitialState),
mInfo (inInfo) {
}

//---------------------------------------------------------------------------*

void elementOf_GGS_counter_map::
appendForMapDescription (const PMSInt32 inElementIndex,
                         C_String & ioString,
                         const PMSInt32 inIndentation) const {
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "|-key " ;
  ioString.appendSigned (inElementIndex) ;
  ioString << ":" << mKey.reader_description (inIndentation + 1) ;
  ioString << (mIsDefined ? "" : "(not solved)") ;
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "|-value " ;
  ioString.appendSigned (inElementIndex) ;
  ioString << ":" << mInfo.counter.reader_description (inIndentation + 1) ;
}

//---------------------------------------------------------------------------*

bool elementOf_GGS_counter_map::
isEqualToMapElement (const AC_galgas_map_element * inOperand) const {
  const elementOf_GGS_counter_map * ptr = dynamic_cast <const elementOf_GGS_counter_map *> (inOperand) ;
  macroValidPointer (ptr) ;
  return (mInfo.counter.operator_isEqual (ptr->mInfo.counter)).boolValue () ;
}

//---------------------------------------------------------------------------*

AC_galgas_map_element * GGS_counter_map::
new_element (const GGS_lstring & inKey, void * inInfo, const PMUInt32 inInitialState) {
  MF_Assert (reinterpret_cast <e_counter_map *> (inInfo) != NULL, "Dynamic cast error", 0, 0) ;
  AC_galgas_map_element * p = NULL ;
  e_counter_map * info = (e_counter_map *) inInfo ;
  macroMyNew (p, cElement (inKey, nextIndex (), * info, inInitialState)) ;
  return p ;
}

//---------------------------------------------------------------------------*

void GGS_counter_map::
assignInfo (AC_galgas_map_element * inPtr, void * inInfo) {
  MF_Assert (reinterpret_cast <cElement *> (inPtr) != NULL, "Dynamic cast error", 0, 0) ;
  MF_Assert (reinterpret_cast <e_counter_map *> (inInfo) != NULL, "Dynamic cast error", 0, 0) ;
  cElement * p = (cElement *) inPtr ;
  e_counter_map * info = (e_counter_map *) inInfo ;
  p->mInfo = * info ;
}

//---------------------------------------------------------------------------*

GGS_counter_map GGS_counter_map::
constructor_emptyMap (C_Compiler & /* inLexique */ COMMA_UNUSED_LOCATION_ARGS) {
  GGS_counter_map result ;
  macroMyNew (result.mSharedMapRoot, cMapRoot) ;
  return result ;
}

//---------------------------------------------------------------------------*

void GGS_counter_map::
enterIndex (const GGS_string & inKey,
            AC_galgas_index_core & outIndex) {
  e_counter_map info  ;
  internalEnterIndex (inKey,
                      (void *) & info,
                      outIndex) ;
}

//---------------------------------------------------------------------------*

GGS_bool GGS_counter_map::
operator_isEqual (const GGS_counter_map & inOperand) const {
  return GGS_bool (isBuilt () && inOperand.isBuilt (), isEqualToMap (inOperand)) ;
}

//---------------------------------------------------------------------------*

GGS_bool GGS_counter_map::
operator_isNotEqual (const GGS_counter_map & inOperand) const {
  return GGS_bool (isBuilt () && inOperand.isBuilt (), ! isEqualToMap (inOperand)) ;
}

//---------------------------------------------------------------------------*

void GGS_counter_map::
internalInsertForDuplication (AC_galgas_map_element * inPtr) {
  MF_Assert (reinterpret_cast <cElement *> (inPtr) != NULL, "Dynamic cast error", 0, 0) ;
  cElement * p = (cElement *) inPtr ;
  PMSInt32 attributeIndex = -1 ; // Unused here
  GGS_location existingKeyLocation ; // Unused here
  internalInsert (p->mKey, (void *) & p->mInfo, attributeIndex, existingKeyLocation, p->mIsDefined, p->mCurrentState) ;
}

//---------------------------------------------------------------------------*

void GGS_counter_map::
removeElement (C_Compiler & inLexique,
                const utf32 * inErrorMessage,
                const GGS_lstring & inKey,
                GGS_counter_obj & outParameter0,
                GGS_luint * outIndex
                COMMA_LOCATION_ARGS) {
  AC_galgas_map_element * removedElement = NULL ;
  PMSInt32 elementID = - 1 ;
  if (isBuilt () && inKey.isBuilt ()) {
    removedElement = internalRemove (inKey) ;
    if (removedElement == NULL) {
      inLexique.semanticErrorUsingPerCentK (inKey.string (), inKey, inErrorMessage COMMA_THERE) ;
      outParameter0.drop () ;
    }else{
      cElement * ptr = (cElement *) removedElement ;
      elementID = ptr->mID ;
      outParameter0 = ptr->mInfo.counter ;
    }
  }
  if (outIndex != NULL) {
    * outIndex = GGS_luint (GGS_uint (elementID >= 0, (PMUInt32) elementID), inKey) ;
  }
  macroMyDelete (removedElement) ;
}

//---------------------------------------------------------------------------*

void GGS_counter_map::
insertElement (C_Compiler & inLexique,
               const PMUInt32 inInitialState,
               const utf32 * inErrorMessage,
               const GGS_lstring & inKey,
               const GGS_counter_obj & inParameter0,
               GGS_luint * outIndex
               COMMA_LOCATION_ARGS) {
  PMSInt32 elementID = - 1 ;
  if (isBuilt ()
   && inParameter0.isBuilt ()
   && inKey.isBuilt ()) {
    insulateMap (THERE) ;
    e_counter_map info  ;
    info.counter = inParameter0 ;
    GGS_location existingKeyLocation ;
    internalInsert (inKey, (void *) & info, elementID, existingKeyLocation, true, inInitialState) ;
    if (elementID < 0) {
      emitInsertMapSemanticErrorMessage (inLexique, inKey, inErrorMessage, existingKeyLocation COMMA_THERE) ;
    }
  }
  if (outIndex != NULL) {
    * outIndex = GGS_luint (GGS_uint (elementID >= 0, (PMUInt32) elementID), inKey) ;
  }
}

//---------------------------------------------------------------------------*

void GGS_counter_map::
searchElement (C_Compiler & inLexique,
               const PMUInt32 /* inActionIndex */,
               const utf32 * inErrorMessage,
               const GGS_lstring & inKey,
               GGS_counter_obj   & outParameter0,
               GGS_luint * outIndex
               COMMA_LOCATION_ARGS) const {
  cElement * node = NULL  ;
  if (isBuilt () && inKey.isBuilt ()) {
    AC_galgas_map_element * p = internal_search (inKey.string ()) ;
    MF_Assert ((p == NULL) || (reinterpret_cast <cElement *> (p) != NULL), "Dynamic cast error", 0, 0) ;
    node = (cElement *) p ;
    if (node == NULL) {
      inLexique.semanticErrorUsingPerCentK (inKey.string (), inKey, inErrorMessage COMMA_THERE) ;
    }
  }
  if (node == NULL) {
    outParameter0.drop () ;
    if (outIndex != NULL) {
      outIndex->drop () ;
    }
  }else{
    outParameter0 = node->mInfo.counter ;
    if (outIndex != NULL) {
      * outIndex = GGS_luint (GGS_uint (true, (PMUInt32) node->mID), inKey) ;
    }
  }
}

//---------------------------------------------------------------------------*

const utf32 GGS_counter_map::kSearchMessage_getCounter [] = {
  TO_UNICODE ('C'),
  TO_UNICODE ('o'),
  TO_UNICODE ('u'),
  TO_UNICODE ('n'),
  TO_UNICODE ('t'),
  TO_UNICODE ('e'),
  TO_UNICODE ('r'),
  TO_UNICODE (' '),
  TO_UNICODE ('%'),
  TO_UNICODE ('K'),
  TO_UNICODE (' '),
  TO_UNICODE ('i'),
  TO_UNICODE ('s'),
  TO_UNICODE (' '),
  TO_UNICODE ('n'),
  TO_UNICODE ('o'),
  TO_UNICODE ('t'),
  TO_UNICODE (' '),
  TO_UNICODE ('d'),
  TO_UNICODE ('e'),
  TO_UNICODE ('f'),
  TO_UNICODE ('i'),
  TO_UNICODE ('n'),
  TO_UNICODE ('e'),
  TO_UNICODE ('d'),
  TO_UNICODE (0)
} ;

//---------------------------------------------------------------------------*

void GGS_counter_map::
method_getCounter (C_Compiler & inLexique,
                                const GGS_lstring & inKey,
                                GGS_counter_obj   & outParameter0 COMMA_LOCATION_ARGS) const {
  searchElement (inLexique,
                 0,
                 kSearchMessage_getCounter,
                 inKey,
                 outParameter0,
                 NULL
                 COMMA_THERE) ;
}

//---------------------------------------------------------------------------*

const utf32 GGS_counter_map::kRemoveMessage_del [] = {
  TO_UNICODE ('C'),
  TO_UNICODE ('o'),
  TO_UNICODE ('u'),
  TO_UNICODE ('n'),
  TO_UNICODE ('t'),
  TO_UNICODE ('e'),
  TO_UNICODE ('r'),
  TO_UNICODE (' '),
  TO_UNICODE ('%'),
  TO_UNICODE ('K'),
  TO_UNICODE (' '),
  TO_UNICODE ('i'),
  TO_UNICODE ('s'),
  TO_UNICODE (' '),
  TO_UNICODE ('n'),
  TO_UNICODE ('o'),
  TO_UNICODE ('t'),
  TO_UNICODE (' '),
  TO_UNICODE ('d'),
  TO_UNICODE ('e'),
  TO_UNICODE ('f'),
  TO_UNICODE ('i'),
  TO_UNICODE ('n'),
  TO_UNICODE ('e'),
  TO_UNICODE ('d'),
  TO_UNICODE (0)
} ;

//---------------------------------------------------------------------------*

void GGS_counter_map::
modifier_del (C_Compiler & inLexique,
                                const GGS_lstring & inKey,
                                GGS_counter_obj & outParameter0 COMMA_LOCATION_ARGS) {
  removeElement (inLexique,
                  kRemoveMessage_del,
                  inKey,
                  outParameter0,
                  NULL
                  COMMA_THERE) ;
}

//---------------------------------------------------------------------------*

const utf32 GGS_counter_map::kInsertMessage_put [] = {
  TO_UNICODE ('C'),
  TO_UNICODE ('o'),
  TO_UNICODE ('u'),
  TO_UNICODE ('n'),
  TO_UNICODE ('t'),
  TO_UNICODE ('e'),
  TO_UNICODE ('r'),
  TO_UNICODE (' '),
  TO_UNICODE ('%'),
  TO_UNICODE ('K'),
  TO_UNICODE (' '),
  TO_UNICODE ('i'),
  TO_UNICODE ('s'),
  TO_UNICODE (' '),
  TO_UNICODE ('d'),
  TO_UNICODE ('u'),
  TO_UNICODE ('p'),
  TO_UNICODE ('l'),
  TO_UNICODE ('i'),
  TO_UNICODE ('c'),
  TO_UNICODE ('a'),
  TO_UNICODE ('t'),
  TO_UNICODE ('e'),
  TO_UNICODE ('d'),
  TO_UNICODE (' '),
  TO_UNICODE ('i'),
  TO_UNICODE ('n'),
  TO_UNICODE (' '),
  TO_UNICODE ('%'),
  TO_UNICODE ('L'),
  TO_UNICODE (0)
} ;

//---------------------------------------------------------------------------*

void GGS_counter_map::
modifier_put (C_Compiler & inLexique,
                                const GGS_lstring & inKey,
                                const GGS_counter_obj & inParameter0 COMMA_LOCATION_ARGS) {
  insertElement (inLexique,
                 0,
                 kInsertMessage_put,
                 inKey,
                 inParameter0,
                NULL
                COMMA_THERE) ;
}

//---------------------------------------------------------------------------*

GGS_counter_map GGS_counter_map::
constructor_mapWithMapToOverride (C_Compiler & /* inLexique */,
                                  const GGS_counter_map & inMapToOverride
                                  COMMA_UNUSED_LOCATION_ARGS) {
  GGS_counter_map result ; // Not Built
  if (inMapToOverride.mSharedMapRoot != NULL) {
    macroValidPointer (inMapToOverride.mSharedMapRoot) ;
    macroMyNew (result.mSharedMapRoot, cMapRoot) ;
    result.mSharedMapRoot->mNextMap = inMapToOverride.mSharedMapRoot ;
    inMapToOverride.mSharedMapRoot->mReferenceCount ++ ;
    result.mSharedMapRoot->mSequenceNumber = inMapToOverride.mSharedMapRoot->mSequenceNumber ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_counter_map GGS_counter_map::
reader_overriddenMap (C_Compiler & /* inLexique */
                      COMMA_UNUSED_LOCATION_ARGS) const {
  GGS_counter_map result ; // Not Built
  if (mSharedMapRoot != NULL) {
    macroValidPointer (mSharedMapRoot) ;
    result.mSharedMapRoot = mSharedMapRoot->mNextMap ;
    if (result.mSharedMapRoot != NULL) {
      macroValidPointer (result.mSharedMapRoot) ;
      result.mSharedMapRoot->mReferenceCount ++ ;
    }else{
      macroMyNew (result.mSharedMapRoot, cMapRoot) ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_string GGS_counter_map::
reader_description (const PMSInt32 inIndentation) const {
  C_String s ;
  s << "<map @counter_map " ;
  if (isBuilt ()) {
    s.appendSigned (count ()) ;
    s << " object" << ((count () > 1) ? "s " : " ") ;
    cMapRoot * mapRoot = mSharedMapRoot ;
    PMSInt32 level = 0 ;
    while (mapRoot != NULL) {
      if (level > 0) {
        s << "\n" ;
        s.writeStringMultiple ("| ", inIndentation) ;
        s << "------- level " << cStringWithSigned (level) ;
      }
      macroValidPointer (mapRoot) ;
      cElement * p = (cElement *) mapRoot->mFirstItem ;
      PMSInt32 elementID = 0 ;
      while (p != NULL) {
        macroValidPointer (p) ;
        p->appendForMapDescription (elementID, s, inIndentation) ;
        p = p->nextObject () ;
        elementID ++ ;
      }
      mapRoot = mapRoot->mNextMap ;
      level ++ ;
    }
  }else{
    s << "not built" ;
  }
  s << "\n" ;
  s.writeStringMultiple ("| ", inIndentation) ;
  s << ">" ;
  return GGS_string (true, s) ;
}

//---------------------------------------------------------------------------*

/* const */ GGS_counter_obj  & GGS_counter_map::cEnumerator::_counter (LOCATION_ARGS) const {
  return ((cElement *) mObjectArray (mCurrentIndex COMMA_THERE))->mInfo.counter ;
}

//---------------------------------------------------------------------------*

GGS_object GGS_counter_map::reader_object (void) const {
  GGS_object result ;
  if (isBuilt ()) {
    GGS_counter_map * p = NULL ;
    macroMyNew (p, GGS_counter_map (*this)) ;
    result = GGS_object (p) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_counter_map GGS_counter_map::castFromObject (C_Compiler & inLexique,
                                   const GGS_object & inObject,
                                   const GGS_location & inErrorLocation
                                   COMMA_LOCATION_ARGS) {
  GGS_counter_map result ;
  const GGS__root * embeddedObject = inObject.embeddedObject () ;
  if (NULL != embeddedObject) {
    const GGS_counter_map * p = dynamic_cast <const GGS_counter_map *> (embeddedObject) ;
    if (NULL != p) {
      result = * p ;
    }else{
      castFromObjectErrorSignaling (inLexique, inErrorLocation, & kTypeDescriptor_GGS_counter_map, embeddedObject COMMA_THERE) ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*

const C_galgas_type_descriptorEX * GGS_counter_map::typeDescriptor (void) const {
  return & kTypeDescriptor_GGS_counter_map ;
}

//---------------------------------------------------------------------------*

GGS_counter_map GGS_counter_map::constructor_mapWithKeyAndValue (C_Compiler & inLexique,
                                             const GGS_lstring & inKey,
                                             const GGS_counter_obj & inValue0
                                             COMMA_LOCATION_ARGS) {
  GGS_counter_map result = constructor_emptyMap (inLexique COMMA_THERE) ;
  result.insertElement (inLexique,
                        0,
                        NULL,
                        inKey,
                        inValue0,
                        NULL
                        COMMA_THERE) ;
  return result ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                   Element of list '@counter_by_source'                    *
//                                                                           *
//---------------------------------------------------------------------------*

elementOf_GGS_counter_by_source::
elementOf_GGS_counter_by_source (const GGS_string& argument_0,
                                const GGS_lstring & argument_1,
                                const GGS_counter_obj & argument_2):
source (argument_0),
name (argument_1),
counter (argument_2) {
}

//---------------------------------------------------------------------------*

bool elementOf_GGS_counter_by_source::
isEqualToObject (const cSortedListElement * inOperand) const {
  bool equal = inOperand == this ;
  if (! equal) {
    const elementOf_GGS_counter_by_source * ptr = dynamic_cast <const elementOf_GGS_counter_by_source *> (inOperand) ;
    macroValidPointer (ptr) ;
    equal = source.operator_isEqual (ptr->source).boolValue ()
         && name.operator_isEqual (ptr->name).boolValue ()
         && counter.operator_isEqual (ptr->counter).boolValue () ;
  }
  return equal ;
}

//---------------------------------------------------------------------------*

PMSInt32 elementOf_GGS_counter_by_source::
compareForSorting (const cSortedListElement * inOperand) const {
  const elementOf_GGS_counter_by_source * operand = (const elementOf_GGS_counter_by_source *) inOperand ;
  PMSInt32 result = - source.genericObjectCompare (operand->source) ;
  return result ;
}

//---------------------------------------------------------------------------*

void elementOf_GGS_counter_by_source::
appendForDescription (C_String & ioString,
                      const PMSInt32 inIndentation) const {
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "|-" ;
  ioString << source.reader_description (inIndentation) ;
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "|-" ;
  ioString << name.reader_description (inIndentation) ;
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "|-" ;
  ioString << counter.reader_description (inIndentation) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                     Sorted list '@counter_by_source'                      *
//                                                                           *
//---------------------------------------------------------------------------*

const C_galgas_type_descriptorEX kTypeDescriptor_GGS_counter_by_source ("counter_by_source", false, NULL) ;

//---------------------------------------------------------------------------*

GGS_counter_by_source::GGS_counter_by_source (void): AC_GGS_sortedlist () { // Default Constructor
}

//---------------------------------------------------------------------------*

GGS_counter_by_source::
GGS_counter_by_source (const GGS_counter_by_source & inSource): AC_GGS_sortedlist (inSource) {
}

//---------------------------------------------------------------------------*

GGS_bool GGS_counter_by_source::
operator_isEqual (const GGS_counter_by_source & inOperand) const {
  return GGS_bool (isBuilt () && inOperand.isBuilt (), isEqualToList (inOperand)) ;
}

//---------------------------------------------------------------------------*

GGS_bool GGS_counter_by_source::
operator_isNotEqual (const GGS_counter_by_source & inOperand) const {
  return GGS_bool (isBuilt () && inOperand.isBuilt (), ! isEqualToList (inOperand)) ;
}

//---------------------------------------------------------------------------*

void GGS_counter_by_source::
internalAppendValues (const GGS_string& argument_0,
                    const GGS_lstring & argument_1,
                    const GGS_counter_obj & argument_2) {
  cElement * newElement = (cElement *) NULL ;
  macroMyNew (newElement, cElement (argument_0,
                                argument_1,
                                argument_2)) ;
  internalAppendItem (newElement) ;
}

//---------------------------------------------------------------------------*

void GGS_counter_by_source::
addAssign_operation (const GGS_string& argument_0,
                                const GGS_lstring & argument_1,
                                const GGS_counter_obj & argument_2) {
  if (isBuilt ()) {
    insulateList () ;
    internalAppendValues (argument_0,
                                argument_1,
                                argument_2) ;
  }
}

//---------------------------------------------------------------------------*

GGS_counter_by_source GGS_counter_by_source::
operator_concat (const GGS_counter_by_source & inOperand) const {
  GGS_counter_by_source result = * this ;
  result.dotAssign_operation (inOperand) ;
  return result ;
}

//---------------------------------------------------------------------------*

void GGS_counter_by_source::
dotAssign_operation (const GGS_counter_by_source inOperand) {
  if (isBuilt () && inOperand.isBuilt ()) {
    if (count () == 0) {
      *this = inOperand ;
    }else{
      if (inOperand.count () > 0) {
        insulateList () ;
        elementOf_GGS_counter_by_source * p = inOperand.firstObject () ;
        while (p != NULL) {
          macroValidPointer (p) ;
          GGS_string p_0 = p->source ;
          GGS_lstring  p_1 = p->name ;
          GGS_counter_obj  p_2 = p->counter ;
          internalAppendValues (p_0, p_1, p_2) ;
          p = p->nextObject () ;
        }
      }
    }
  }
}

//---------------------------------------------------------------------------*

void GGS_counter_by_source::
insulateList (void) {
  if (isShared ()) {
    cElement * ptr = firstObject () ;
    alloc () ;
    while (ptr != NULL) {
      macroValidPointer (ptr) ;
      internalAppendValues (ptr->source,
                                ptr->name,
                                ptr->counter) ;
      ptr = ptr->nextObject () ;
    }
  }
}

//---------------------------------------------------------------------------*

GGS_counter_by_source  GGS_counter_by_source::
constructor_emptySortedList (void) {
  GGS_counter_by_source result ;
  result.alloc () ;
  return result ;
}

//---------------------------------------------------------------------------*

GGS_counter_by_source  GGS_counter_by_source::
constructor_sortedListWithValue (const GGS_string& argument_0,
                           const GGS_lstring & argument_1,
                           const GGS_counter_obj & argument_2) {
  GGS_counter_by_source result ;
  result.alloc () ;
  result.addAssign_operation (argument_0, argument_1, argument_2) ;
  return result ;
}

//---------------------------------------------------------------------------*

GGS_string GGS_counter_by_source::
reader_description (const PMSInt32 inIndentation) const {
  return performDescription ("@counter_by_source", inIndentation) ;
}

//---------------------------------------------------------------------------*

void GGS_counter_by_source::
method_smallest (C_Compiler & inLexique,
                 GGS_string& _out_0,
                 GGS_lstring & _out_1,
                 GGS_counter_obj & _out_2
                 COMMA_LOCATION_ARGS) const {
  cElement * ptr = NULL ;
  if (isBuilt ()) {
    ptr = firstObject () ;
    if (ptr == NULL) {
      inLexique.onTheFlyRunTimeError ("'first' method invoked on an empty list" COMMA_THERE) ;
    }
  }
  if (ptr != NULL) {
    _out_0 = ptr->source ;
    _out_1 = ptr->name ;
    _out_2 = ptr->counter ;
  }else{
    _out_0.drop () ;
    _out_1.drop () ;
    _out_2.drop () ;
  }
}

//---------------------------------------------------------------------------*

void GGS_counter_by_source::
method_greatest (C_Compiler & inLexique,
             GGS_string& _out_0,
             GGS_lstring & _out_1,
             GGS_counter_obj & _out_2
             COMMA_LOCATION_ARGS) const {
  cElement * ptr = NULL ;
  if (isBuilt ()) {
    ptr = lastObject () ;
    if (ptr == NULL) {
      inLexique.onTheFlyRunTimeError ("'greatest' method invoked on an empty list" COMMA_THERE) ;
    }
  }
  if (ptr != NULL) {
    _out_0 = ptr->source ;
    _out_1 = ptr->name ;
    _out_2 = ptr->counter ;
  }else{
    _out_0.drop () ;
    _out_1.drop () ;
    _out_2.drop () ;
  }
}

//---------------------------------------------------------------------------*

void GGS_counter_by_source::
modifier_popSmallest (C_Compiler & inLexique,
                 GGS_string& _out_0,
                 GGS_lstring & _out_1,
                 GGS_counter_obj & _out_2
                 COMMA_LOCATION_ARGS) {
  cElement * ptr = NULL ;
  if (isBuilt ()) {
    ptr = firstObject () ;
    if (ptr == NULL) {
      inLexique.onTheFlyRunTimeError ("'popSmallest' modifier invoked on an empty list" COMMA_THERE) ;
    }
  }
  if (ptr != NULL) {
    _out_0 = ptr->source ;
    _out_1 = ptr->name ;
    _out_2 = ptr->counter ;
    insulateList () ;
    _internalRemoveSmallest () ;
  }else{
    _out_0.drop () ;
    _out_1.drop () ;
    _out_2.drop () ;
  }
}

//---------------------------------------------------------------------------*

void GGS_counter_by_source::
modifier_popGreatest (C_Compiler & inLexique,
                GGS_string& _out_0,
                GGS_lstring & _out_1,
                GGS_counter_obj & _out_2
                COMMA_LOCATION_ARGS) {
  cElement * ptr = NULL ;
  if (isBuilt ()) {
    ptr = lastObject () ;
    if (ptr == NULL) {
      inLexique.onTheFlyRunTimeError ("'popGreatest' modifier invoked on an empty list" COMMA_THERE) ;
    }
  }
  if (ptr != NULL) {
    _out_0 = ptr->source ;
    _out_1 = ptr->name ;
    _out_2 = ptr->counter ;
    insulateList () ;
    _internalRemoveGreatest () ;
  }else{
    _out_0.drop () ;
    _out_1.drop () ;
    _out_2.drop () ;
  }
}

//---------------------------------------------------------------------------*

/* const */ GGS_string & GGS_counter_by_source::cEnumerator::_source (LOCATION_ARGS) const {
  macroValidPointerThere (mCurrentEnumeratedObject) ;
  return ((/* const */ cElement *) mCurrentEnumeratedObject)->source ;
}

//---------------------------------------------------------------------------*

/* const */ GGS_lstring  & GGS_counter_by_source::cEnumerator::_name (LOCATION_ARGS) const {
  macroValidPointerThere (mCurrentEnumeratedObject) ;
  return ((/* const */ cElement *) mCurrentEnumeratedObject)->name ;
}

//---------------------------------------------------------------------------*

/* const */ GGS_counter_obj  & GGS_counter_by_source::cEnumerator::_counter (LOCATION_ARGS) const {
  macroValidPointerThere (mCurrentEnumeratedObject) ;
  return ((/* const */ cElement *) mCurrentEnumeratedObject)->counter ;
}

//---------------------------------------------------------------------------*

GGS_object GGS_counter_by_source::reader_object (void) const {
  GGS_object result ;
  if (isBuilt ()) {
    GGS_counter_by_source * p = NULL ;
    macroMyNew (p, GGS_counter_by_source (*this)) ;
    result = GGS_object (p) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_counter_by_source GGS_counter_by_source::castFromObject (C_Compiler & inLexique,
                                   const GGS_object & inObject,
                                   const GGS_location & inErrorLocation
                                   COMMA_LOCATION_ARGS) {
  GGS_counter_by_source result ;
  const GGS__root * embeddedObject = inObject.embeddedObject () ;
  if (NULL != embeddedObject) {
    const GGS_counter_by_source * p = dynamic_cast <const GGS_counter_by_source *> (embeddedObject) ;
    if (NULL != p) {
      result = * p ;
    }else{
      castFromObjectErrorSignaling (inLexique, inErrorLocation, & kTypeDescriptor_GGS_counter_by_source, embeddedObject COMMA_THERE) ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*

const C_galgas_type_descriptorEX * GGS_counter_by_source::typeDescriptor (void) const {
  return & kTypeDescriptor_GGS_counter_by_source ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//               Implementation of function "maxAllowedValue"                *
//                                                                           *
//---------------------------------------------------------------------------*

GGS_uint64  function_maxAllowedValue (C_Compiler & inLexique,
                                const GGS_counter_obj   var_cas_counter COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER function_maxAllowedValue at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  GGS_uint64  var_cas_value ;
  var_cas_value = GGS_uint64 (0ULL) ;
  { const GGS_basic_type _var_1744 = var_cas_counter.reader_max_allowed_value (inLexique COMMA_SOURCE_FILE_AT_LINE (70)) ; // CAST instruction
    if (_var_1744.getPtr () != NULL) {
      macroValidPointer (_var_1744.getPtr ()) ;
      if (typeid (cPtr_uint32_class) == typeid (* (_var_1744.getPtr ()))) {
        const GGS_uint32_class var_cas_max (_var_1744.getPtr ()) ;
        var_cas_value = var_cas_max.reader_value (inLexique COMMA_SOURCE_FILE_AT_LINE (71)).reader_uint64 (inLexique COMMA_SOURCE_FILE_AT_LINE (71)) ;
      }else{
        var_cas_counter.reader_max_allowed_value (inLexique COMMA_SOURCE_FILE_AT_LINE (72)).reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (72)).reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("internal, wrong type for MAXALLOWEDVALUE") COMMA_SOURCE_FILE_AT_LINE (73)) ;
      }
    }
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE function_maxAllowedValue\n") ;
  #endif
  return var_cas_value ;
}

//---------------------------------------------------------------------------*

static GGS_object functionForGenericCall_maxAllowedValue (C_Compiler & inLexique,
                           const GGS_objectlist & inEffectiveParameterArray,
                           const GGS_location & inErrorLocation
                           COMMA_LOCATION_ARGS) {
  const GGS_counter_obj  arg_0 = GGS_counter_obj ::castFromObject (inLexique, inEffectiveParameterArray.reader_mValueAtIndex (inLexique, GGS_uint (0) COMMA_THERE), inErrorLocation COMMA_THERE) ;
  const GGS_uint64  result = function_maxAllowedValue (inLexique,
                            arg_0
                            COMMA_THERE) ;
  return result.reader_object () ;
}

//---------------------------------------------------------------------------*

static const C_galgas_type_descriptorEX *
kArgumentTypeList_maxAllowedValue [1] = {& kTypeDescriptor_GGS_counter_obj } ;

const C_galgas_function_descriptorEX
kFunction_descriptor_maxAllowedValue ("maxAllowedValue",
                              functionForGenericCall_maxAllowedValue,
                              & kTypeDescriptor_GGS_uint64 ,
                              1,
                              kArgumentTypeList_maxAllowedValue) ;

//---------------------------------------------------------------------------*
//                                                                           *
//                  Implementation of function "minCycle"                    *
//                                                                           *
//---------------------------------------------------------------------------*

GGS_uint64  function_minCycle (C_Compiler & inLexique,
                                const GGS_counter_obj   var_cas_counter COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER function_minCycle at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  GGS_uint64  var_cas_value ;
  var_cas_value = GGS_uint64 (0ULL) ;
  { const GGS_basic_type _var_2019 = var_cas_counter.reader_min_cycle (inLexique COMMA_SOURCE_FILE_AT_LINE (78)) ; // CAST instruction
    if (_var_2019.getPtr () != NULL) {
      macroValidPointer (_var_2019.getPtr ()) ;
      if (typeid (cPtr_uint32_class) == typeid (* (_var_2019.getPtr ()))) {
        const GGS_uint32_class var_cas_min (_var_2019.getPtr ()) ;
        var_cas_value = var_cas_min.reader_value (inLexique COMMA_SOURCE_FILE_AT_LINE (79)).reader_uint64 (inLexique COMMA_SOURCE_FILE_AT_LINE (79)) ;
      }else{
        var_cas_counter.reader_min_cycle (inLexique COMMA_SOURCE_FILE_AT_LINE (80)).reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (80)).reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("internal, wrong type for MINCYCLE") COMMA_SOURCE_FILE_AT_LINE (81)) ;
      }
    }
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE function_minCycle\n") ;
  #endif
  return var_cas_value ;
}

//---------------------------------------------------------------------------*

static GGS_object functionForGenericCall_minCycle (C_Compiler & inLexique,
                           const GGS_objectlist & inEffectiveParameterArray,
                           const GGS_location & inErrorLocation
                           COMMA_LOCATION_ARGS) {
  const GGS_counter_obj  arg_0 = GGS_counter_obj ::castFromObject (inLexique, inEffectiveParameterArray.reader_mValueAtIndex (inLexique, GGS_uint (0) COMMA_THERE), inErrorLocation COMMA_THERE) ;
  const GGS_uint64  result = function_minCycle (inLexique,
                            arg_0
                            COMMA_THERE) ;
  return result.reader_object () ;
}

//---------------------------------------------------------------------------*

static const C_galgas_type_descriptorEX *
kArgumentTypeList_minCycle [1] = {& kTypeDescriptor_GGS_counter_obj } ;

const C_galgas_function_descriptorEX
kFunction_descriptor_minCycle ("minCycle",
                              functionForGenericCall_minCycle,
                              & kTypeDescriptor_GGS_uint64 ,
                              1,
                              kArgumentTypeList_minCycle) ;

//---------------------------------------------------------------------------*
//                                                                           *
//                Implementation of function "ticksPerBase"                  *
//                                                                           *
//---------------------------------------------------------------------------*

GGS_uint64  function_ticksPerBase (C_Compiler & inLexique,
                                const GGS_counter_obj   var_cas_counter COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER function_ticksPerBase at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  GGS_uint64  var_cas_value ;
  var_cas_value = GGS_uint64 (0ULL) ;
  { const GGS_basic_type _var_2316 = var_cas_counter.reader_ticks_per_base (inLexique COMMA_SOURCE_FILE_AT_LINE (86)) ; // CAST instruction
    if (_var_2316.getPtr () != NULL) {
      macroValidPointer (_var_2316.getPtr ()) ;
      if (typeid (cPtr_uint32_class) == typeid (* (_var_2316.getPtr ()))) {
        const GGS_uint32_class var_cas_ticks (_var_2316.getPtr ()) ;
        var_cas_value = var_cas_ticks.reader_value (inLexique COMMA_SOURCE_FILE_AT_LINE (87)).reader_uint64 (inLexique COMMA_SOURCE_FILE_AT_LINE (87)) ;
      }else{
        var_cas_counter.reader_ticks_per_base (inLexique COMMA_SOURCE_FILE_AT_LINE (88)).reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (88)).reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("internal, wrong type for TICKSPERBASE") COMMA_SOURCE_FILE_AT_LINE (89)) ;
      }
    }
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE function_ticksPerBase\n") ;
  #endif
  return var_cas_value ;
}

//---------------------------------------------------------------------------*

static GGS_object functionForGenericCall_ticksPerBase (C_Compiler & inLexique,
                           const GGS_objectlist & inEffectiveParameterArray,
                           const GGS_location & inErrorLocation
                           COMMA_LOCATION_ARGS) {
  const GGS_counter_obj  arg_0 = GGS_counter_obj ::castFromObject (inLexique, inEffectiveParameterArray.reader_mValueAtIndex (inLexique, GGS_uint (0) COMMA_THERE), inErrorLocation COMMA_THERE) ;
  const GGS_uint64  result = function_ticksPerBase (inLexique,
                            arg_0
                            COMMA_THERE) ;
  return result.reader_object () ;
}

//---------------------------------------------------------------------------*

static const C_galgas_type_descriptorEX *
kArgumentTypeList_ticksPerBase [1] = {& kTypeDescriptor_GGS_counter_obj } ;

const C_galgas_function_descriptorEX
kFunction_descriptor_ticksPerBase ("ticksPerBase",
                              functionForGenericCall_ticksPerBase,
                              & kTypeDescriptor_GGS_uint64 ,
                              1,
                              kArgumentTypeList_ticksPerBase) ;

//---------------------------------------------------------------------------*

