//---------------------------------------------------------------------------*
//                                                                           *
//                File 'goil_template_expression_parser.cpp'                 *
//                        Generated by version 1.9.9                         *
//                     january 28th, 2010, at 15h58'31"                      *
//                                                                           *
//---------------------------------------------------------------------------*

//--- START OF USER ZONE 1


//--- END OF USER ZONE 1

//---------------------------------------------------------------------------*

#include "version_libpm.h"
#if LIBPM_VERSION != 647
  #error "This file has been compiled with a version of GALGAS different than the version of libpm"
#endif

//---------------------------------------------------------------------------*

#include <typeinfo>
#include "utilities/MF_MemoryControl.h"
#include "files/C_TextFileWrite.h"
#include "galgas/C_galgas_CLI_Options.h"
#include "goil_template_expression_parser.h"

//---------------------------------------------------------------------------*

#ifndef DO_NOT_GENERATE_CHECKINGS
  #define SOURCE_FILE_AT_LINE(line) "goil_template_expression_parser.ggs", line
  #define COMMA_SOURCE_FILE_AT_LINE(line) , SOURCE_FILE_AT_LINE(line)
#else
  #define SOURCE_FILE_AT_LINE(line) 
  #define COMMA_SOURCE_FILE_AT_LINE(line) 
#endif


//--- START OF USER ZONE 2


//--- END OF USER ZONE 2

//---------------------------------------------------------------------------*
//                                                                           *
//         Implementation of routine "matchAndOperatorForTemplate"           *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_matchAndOperatorForTemplate (C_Compiler & inLexique,
                                const GGS_goilTemplateType  var_cas_inLeftExpressionType,
                                const GGS_goilTemplateType  var_cas_inRightExpressionType,
                                GGS_goilTemplateType & var_cas_outResultType COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_matchAndOperatorForTemplate at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  if (var_cas_inLeftExpressionType.isBuilt () && var_cas_inRightExpressionType.isBuilt ()) {
    if ((var_cas_inLeftExpressionType.enumValue () == GGS_goilTemplateType::enum_boolType) && (var_cas_inRightExpressionType.enumValue () == GGS_goilTemplateType::enum_boolType)) {
      var_cas_outResultType = var_cas_inLeftExpressionType ;
    }else{
      if ((var_cas_inLeftExpressionType.enumValue () == GGS_goilTemplateType::enum_unsignedType) && (var_cas_inRightExpressionType.enumValue () == GGS_goilTemplateType::enum_unsignedType)) {
        var_cas_outResultType = var_cas_inLeftExpressionType ;
      }else{
        GGS_location (inLexique).reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((((GGS_string ("operand type error : (")).operator_concat (var_cas_inLeftExpressionType.reader_messageGoilTemplateType (inLexique COMMA_SOURCE_FILE_AT_LINE (112)))).operator_concat (GGS_string (" & "))).operator_concat (var_cas_inRightExpressionType.reader_messageGoilTemplateType (inLexique COMMA_SOURCE_FILE_AT_LINE (113)))).operator_concat (GGS_string (") is not valid")) COMMA_SOURCE_FILE_AT_LINE (115)) ;
        var_cas_outResultType.drop () ;
      }
    }
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_matchAndOperatorForTemplate\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//          Implementation of routine "matchOrOperatorForTemplate"           *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_matchOrOperatorForTemplate (C_Compiler & inLexique,
                                const GGS_goilTemplateType  var_cas_inLeftExpressionType,
                                const GGS_goilTemplateType  var_cas_inRightExpressionType,
                                GGS_goilTemplateType & var_cas_outResultType COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_matchOrOperatorForTemplate at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  if (var_cas_inLeftExpressionType.isBuilt () && var_cas_inRightExpressionType.isBuilt ()) {
    if ((var_cas_inLeftExpressionType.enumValue () == GGS_goilTemplateType::enum_boolType) && (var_cas_inRightExpressionType.enumValue () == GGS_goilTemplateType::enum_boolType)) {
      var_cas_outResultType = var_cas_inLeftExpressionType ;
    }else{
      if ((var_cas_inLeftExpressionType.enumValue () == GGS_goilTemplateType::enum_unsignedType) && (var_cas_inRightExpressionType.enumValue () == GGS_goilTemplateType::enum_unsignedType)) {
        var_cas_outResultType = var_cas_inLeftExpressionType ;
      }else{
        GGS_location (inLexique).reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((((GGS_string ("operand type error : (")).operator_concat (var_cas_inLeftExpressionType.reader_messageGoilTemplateType (inLexique COMMA_SOURCE_FILE_AT_LINE (135)))).operator_concat (GGS_string (" | "))).operator_concat (var_cas_inRightExpressionType.reader_messageGoilTemplateType (inLexique COMMA_SOURCE_FILE_AT_LINE (136)))).operator_concat (GGS_string (") is not valid")) COMMA_SOURCE_FILE_AT_LINE (138)) ;
        var_cas_outResultType.drop () ;
      }
    }
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_matchOrOperatorForTemplate\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//         Implementation of routine "matchXorOperatorForTemplate"           *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_matchXorOperatorForTemplate (C_Compiler & inLexique,
                                const GGS_goilTemplateType  var_cas_inLeftExpressionType,
                                const GGS_goilTemplateType  var_cas_inRightExpressionType,
                                GGS_goilTemplateType & var_cas_outResultType COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_matchXorOperatorForTemplate at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  if (var_cas_inLeftExpressionType.isBuilt () && var_cas_inRightExpressionType.isBuilt ()) {
    if ((var_cas_inLeftExpressionType.enumValue () == GGS_goilTemplateType::enum_boolType) && (var_cas_inRightExpressionType.enumValue () == GGS_goilTemplateType::enum_boolType)) {
      var_cas_outResultType = var_cas_inLeftExpressionType ;
    }else{
      if ((var_cas_inLeftExpressionType.enumValue () == GGS_goilTemplateType::enum_unsignedType) && (var_cas_inRightExpressionType.enumValue () == GGS_goilTemplateType::enum_unsignedType)) {
        var_cas_outResultType = var_cas_inLeftExpressionType ;
      }else{
        GGS_location (inLexique).reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((((GGS_string ("operand type error : (")).operator_concat (var_cas_inLeftExpressionType.reader_messageGoilTemplateType (inLexique COMMA_SOURCE_FILE_AT_LINE (158)))).operator_concat (GGS_string (" | "))).operator_concat (var_cas_inRightExpressionType.reader_messageGoilTemplateType (inLexique COMMA_SOURCE_FILE_AT_LINE (159)))).operator_concat (GGS_string (") is not valid")) COMMA_SOURCE_FILE_AT_LINE (161)) ;
        var_cas_outResultType.drop () ;
      }
    }
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_matchXorOperatorForTemplate\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//         Implementation of routine "checkNotOperatorForTemplate"           *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_checkNotOperatorForTemplate (C_Compiler & inLexique,
                                const GGS_goilTemplateType  var_cas_inOperandType,
                                GGS_goilTemplateType & var_cas_outResultType COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_checkNotOperatorForTemplate at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  const GGS_bool cond_7195 = (var_cas_inOperandType).operator_isNotEqual (GGS_goilTemplateType::constructor_boolType (inLexique COMMA_HERE)) ;
  if (cond_7195.isBuiltAndTrue ()) {
    GGS_location (inLexique).reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((GGS_string ("the 'not' operator is not defined for an ")).operator_concat (var_cas_inOperandType.reader_messageGoilTemplateType (inLexique COMMA_SOURCE_FILE_AT_LINE (176)))).operator_concat (GGS_string (" type")) COMMA_SOURCE_FILE_AT_LINE (177)) ;
  }
  var_cas_outResultType = var_cas_inOperandType ;
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_checkNotOperatorForTemplate\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//    Implementation of routine "checkBitComplementOperatorForTemplate"      *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_checkBitComplementOperatorForTemplate (C_Compiler & inLexique,
                                const GGS_goilTemplateType  var_cas_inOperandType,
                                GGS_goilTemplateType & var_cas_outResultType COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_checkBitComplementOperatorForTemplate at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  var_cas_outResultType = var_cas_inOperandType ;
  const GGS_bool cond_7971 = (var_cas_inOperandType).operator_isNotEqual (GGS_goilTemplateType::constructor_unsignedType (inLexique COMMA_HERE)) ;
  if (cond_7971.isBuiltAndTrue ()) {
    GGS_location (inLexique).reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((GGS_string ("the ~ operator is not defined for an ")).operator_concat (var_cas_inOperandType.reader_messageGoilTemplateType (inLexique COMMA_SOURCE_FILE_AT_LINE (194)))).operator_concat (GGS_string (" type")) COMMA_SOURCE_FILE_AT_LINE (195)) ;
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_checkBitComplementOperatorForTemplate\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//      Implementation of routine "comparison_types_checkForTemplate"        *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_comparison_types_checkForTemplate (C_Compiler & inLexique,
                                const GGS_goilTemplateType  var_cas_inLeftExpressionType,
                                const GGS_goilTemplateType  var_cas_inRightExpressionType COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_comparison_types_checkForTemplate at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  if (var_cas_inLeftExpressionType.isBuilt () && var_cas_inRightExpressionType.isBuilt ()) {
    if ((var_cas_inLeftExpressionType.enumValue () == GGS_goilTemplateType::enum_boolType) && (var_cas_inRightExpressionType.enumValue () == GGS_goilTemplateType::enum_boolType)) {
    }else{
      if ((var_cas_inLeftExpressionType.enumValue () == GGS_goilTemplateType::enum_unsignedType) && (var_cas_inRightExpressionType.enumValue () == GGS_goilTemplateType::enum_unsignedType)) {
      }else{
        if ((var_cas_inLeftExpressionType.enumValue () == GGS_goilTemplateType::enum_stringType) && (var_cas_inRightExpressionType.enumValue () == GGS_goilTemplateType::enum_stringType)) {
        }else{
          GGS_location (inLexique).reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((((GGS_string ("comparison between ")).operator_concat (var_cas_inLeftExpressionType.reader_messageGoilTemplateType (inLexique COMMA_SOURCE_FILE_AT_LINE (213)))).operator_concat (GGS_string (" and "))).operator_concat (var_cas_inRightExpressionType.reader_messageGoilTemplateType (inLexique COMMA_SOURCE_FILE_AT_LINE (214)))).operator_concat (GGS_string (" is not valid")) COMMA_SOURCE_FILE_AT_LINE (215)) ;
        }
      }
    }
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_comparison_types_checkForTemplate\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
// Implementation of routine "magnitude_comparison_types_checkForTemplate"   *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_magnitude_comparison_types_checkForTemplate (C_Compiler & inLexique,
                                const GGS_goilTemplateType  var_cas_inLeftExpressionType,
                                const GGS_goilTemplateType  var_cas_inRightExpressionType COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_magnitude_comparison_types_checkForTemplate at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  if (var_cas_inLeftExpressionType.isBuilt () && var_cas_inRightExpressionType.isBuilt ()) {
    if ((var_cas_inLeftExpressionType.enumValue () == GGS_goilTemplateType::enum_boolType) && (var_cas_inRightExpressionType.enumValue () == GGS_goilTemplateType::enum_boolType)) {
    }else{
      if ((var_cas_inLeftExpressionType.enumValue () == GGS_goilTemplateType::enum_unsignedType) && (var_cas_inRightExpressionType.enumValue () == GGS_goilTemplateType::enum_unsignedType)) {
      }else{
        if ((var_cas_inLeftExpressionType.enumValue () == GGS_goilTemplateType::enum_stringType) && (var_cas_inRightExpressionType.enumValue () == GGS_goilTemplateType::enum_stringType)) {
        }else{
          GGS_location (inLexique).reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((((GGS_string ("comparison between ")).operator_concat (var_cas_inLeftExpressionType.reader_messageGoilTemplateType (inLexique COMMA_SOURCE_FILE_AT_LINE (233)))).operator_concat (GGS_string (" and "))).operator_concat (var_cas_inRightExpressionType.reader_messageGoilTemplateType (inLexique COMMA_SOURCE_FILE_AT_LINE (234)))).operator_concat (GGS_string (" is not valid")) COMMA_SOURCE_FILE_AT_LINE (235)) ;
        }
      }
    }
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_magnitude_comparison_types_checkForTemplate\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//      Implementation of routine "left_shift_types_checkForTemplate"        *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_left_shift_types_checkForTemplate (C_Compiler & inLexique,
                                const GGS_goilTemplateType  var_cas_inLeftExpressionType,
                                const GGS_goilTemplateType  var_cas_inRightExpressionType,
                                GGS_goilTemplateType & var_cas_outResultType COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_left_shift_types_checkForTemplate at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  if (var_cas_inLeftExpressionType.isBuilt () && var_cas_inRightExpressionType.isBuilt ()) {
    if ((var_cas_inLeftExpressionType.enumValue () == GGS_goilTemplateType::enum_unsignedType) && (var_cas_inRightExpressionType.enumValue () == GGS_goilTemplateType::enum_unsignedType)) {
      var_cas_outResultType = var_cas_inLeftExpressionType ;
    }else{
      GGS_location (inLexique).reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((((GGS_string ("shift between ")).operator_concat (var_cas_inLeftExpressionType.reader_messageGoilTemplateType (inLexique COMMA_SOURCE_FILE_AT_LINE (253)))).operator_concat (GGS_string (" and "))).operator_concat (var_cas_inRightExpressionType.reader_messageGoilTemplateType (inLexique COMMA_SOURCE_FILE_AT_LINE (254)))).operator_concat (GGS_string (" is not valid")) COMMA_SOURCE_FILE_AT_LINE (257)) ;
      var_cas_outResultType.drop () ;
    }
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_left_shift_types_checkForTemplate\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//      Implementation of routine "right_shift_types_checkForTemplate"       *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_right_shift_types_checkForTemplate (C_Compiler & inLexique,
                                const GGS_goilTemplateType  var_cas_inLeftExpressionType,
                                const GGS_goilTemplateType  var_cas_inRightExpressionType,
                                GGS_goilTemplateType & var_cas_outResultType COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_right_shift_types_checkForTemplate at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  if (var_cas_inLeftExpressionType.isBuilt () && var_cas_inRightExpressionType.isBuilt ()) {
    if ((var_cas_inLeftExpressionType.enumValue () == GGS_goilTemplateType::enum_unsignedType) && (var_cas_inRightExpressionType.enumValue () == GGS_goilTemplateType::enum_unsignedType)) {
      var_cas_outResultType = var_cas_inLeftExpressionType ;
    }else{
      GGS_location (inLexique).reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((((GGS_string ("shift between ")).operator_concat (var_cas_inLeftExpressionType.reader_messageGoilTemplateType (inLexique COMMA_SOURCE_FILE_AT_LINE (271)))).operator_concat (GGS_string (" and "))).operator_concat (var_cas_inRightExpressionType.reader_messageGoilTemplateType (inLexique COMMA_SOURCE_FILE_AT_LINE (272)))).operator_concat (GGS_string (" is not valid")) COMMA_SOURCE_FILE_AT_LINE (275)) ;
      var_cas_outResultType.drop () ;
    }
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_right_shift_types_checkForTemplate\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//       Implementation of routine "addition_types_checkForTemplate"         *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_addition_types_checkForTemplate (C_Compiler & inLexique,
                                const GGS_goilTemplateType  var_cas_inLeftExpressionType,
                                const GGS_goilTemplateType  var_cas_inRightExpressionType,
                                GGS_goilTemplateType & var_cas_outResultType COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_addition_types_checkForTemplate at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  if (var_cas_inLeftExpressionType.isBuilt () && var_cas_inRightExpressionType.isBuilt ()) {
    if ((var_cas_inLeftExpressionType.enumValue () == GGS_goilTemplateType::enum_unsignedType) && (var_cas_inRightExpressionType.enumValue () == GGS_goilTemplateType::enum_unsignedType)) {
      var_cas_outResultType = var_cas_inLeftExpressionType ;
    }else{
      GGS_location (inLexique).reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((((GGS_string ("addition between ")).operator_concat (var_cas_inLeftExpressionType.reader_messageGoilTemplateType (inLexique COMMA_SOURCE_FILE_AT_LINE (293)))).operator_concat (GGS_string (" and "))).operator_concat (var_cas_inRightExpressionType.reader_messageGoilTemplateType (inLexique COMMA_SOURCE_FILE_AT_LINE (294)))).operator_concat (GGS_string (" is not valid")) COMMA_SOURCE_FILE_AT_LINE (297)) ;
      var_cas_outResultType.drop () ;
    }
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_addition_types_checkForTemplate\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//     Implementation of routine "concatenation_types_checkForTemplate"      *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_concatenation_types_checkForTemplate (C_Compiler & inLexique,
                                const GGS_goilTemplateType  var_cas_inLeftExpressionType,
                                const GGS_goilTemplateType  var_cas_inRightExpressionType,
                                GGS_goilTemplateType & var_cas_outResultType COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_concatenation_types_checkForTemplate at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  if (var_cas_inLeftExpressionType.isBuilt () && var_cas_inRightExpressionType.isBuilt ()) {
    if ((var_cas_inLeftExpressionType.enumValue () == GGS_goilTemplateType::enum_stringType) && (var_cas_inRightExpressionType.enumValue () == GGS_goilTemplateType::enum_stringType)) {
      var_cas_outResultType = var_cas_inLeftExpressionType ;
    }else{
      GGS_location (inLexique).reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((((GGS_string ("addition between ")).operator_concat (var_cas_inLeftExpressionType.reader_messageGoilTemplateType (inLexique COMMA_SOURCE_FILE_AT_LINE (315)))).operator_concat (GGS_string (" and "))).operator_concat (var_cas_inRightExpressionType.reader_messageGoilTemplateType (inLexique COMMA_SOURCE_FILE_AT_LINE (316)))).operator_concat (GGS_string (" is not valid")) COMMA_SOURCE_FILE_AT_LINE (319)) ;
      var_cas_outResultType.drop () ;
    }
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_concatenation_types_checkForTemplate\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//     Implementation of routine "substraction_types_checkForTemplate"       *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_substraction_types_checkForTemplate (C_Compiler & inLexique,
                                const GGS_goilTemplateType  var_cas_inLeftExpressionType,
                                const GGS_goilTemplateType  var_cas_inRightExpressionType,
                                GGS_goilTemplateType & var_cas_outResultType COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_substraction_types_checkForTemplate at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  if (var_cas_inLeftExpressionType.isBuilt () && var_cas_inRightExpressionType.isBuilt ()) {
    if ((var_cas_inLeftExpressionType.enumValue () == GGS_goilTemplateType::enum_unsignedType) && (var_cas_inRightExpressionType.enumValue () == GGS_goilTemplateType::enum_unsignedType)) {
      var_cas_outResultType = var_cas_inLeftExpressionType ;
    }else{
      GGS_location (inLexique).reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((((GGS_string ("substraction between ")).operator_concat (var_cas_inLeftExpressionType.reader_messageGoilTemplateType (inLexique COMMA_SOURCE_FILE_AT_LINE (337)))).operator_concat (GGS_string (" and "))).operator_concat (var_cas_inRightExpressionType.reader_messageGoilTemplateType (inLexique COMMA_SOURCE_FILE_AT_LINE (338)))).operator_concat (GGS_string (" is not valid")) COMMA_SOURCE_FILE_AT_LINE (341)) ;
      var_cas_outResultType.drop () ;
    }
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_substraction_types_checkForTemplate\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//       Implementation of routine "multiply_types_checkForTemplate"         *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_multiply_types_checkForTemplate (C_Compiler & inLexique,
                                const GGS_goilTemplateType  var_cas_inLeftExpressionType,
                                const GGS_goilTemplateType  var_cas_inRightExpressionType,
                                GGS_goilTemplateType & var_cas_outResultType COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_multiply_types_checkForTemplate at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  if (var_cas_inLeftExpressionType.isBuilt () && var_cas_inRightExpressionType.isBuilt ()) {
    if ((var_cas_inLeftExpressionType.enumValue () == GGS_goilTemplateType::enum_unsignedType) && (var_cas_inRightExpressionType.enumValue () == GGS_goilTemplateType::enum_unsignedType)) {
      var_cas_outResultType = var_cas_inLeftExpressionType ;
    }else{
      GGS_location (inLexique).reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((((GGS_string ("multiplication between ")).operator_concat (var_cas_inLeftExpressionType.reader_messageGoilTemplateType (inLexique COMMA_SOURCE_FILE_AT_LINE (359)))).operator_concat (GGS_string (" and "))).operator_concat (var_cas_inRightExpressionType.reader_messageGoilTemplateType (inLexique COMMA_SOURCE_FILE_AT_LINE (360)))).operator_concat (GGS_string (" is not valid")) COMMA_SOURCE_FILE_AT_LINE (363)) ;
      var_cas_outResultType.drop () ;
    }
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_multiply_types_checkForTemplate\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//        Implementation of routine "divide_types_checkForTemplate"          *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_divide_types_checkForTemplate (C_Compiler & inLexique,
                                const GGS_goilTemplateType  var_cas_inLeftExpressionType,
                                const GGS_goilTemplateType  var_cas_inRightExpressionType,
                                GGS_goilTemplateType & var_cas_outResultType COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_divide_types_checkForTemplate at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  if (var_cas_inLeftExpressionType.isBuilt () && var_cas_inRightExpressionType.isBuilt ()) {
    if ((var_cas_inLeftExpressionType.enumValue () == GGS_goilTemplateType::enum_unsignedType) && (var_cas_inRightExpressionType.enumValue () == GGS_goilTemplateType::enum_unsignedType)) {
      var_cas_outResultType = var_cas_inLeftExpressionType ;
    }else{
      GGS_location (inLexique).reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((((GGS_string ("division between ")).operator_concat (var_cas_inLeftExpressionType.reader_messageGoilTemplateType (inLexique COMMA_SOURCE_FILE_AT_LINE (381)))).operator_concat (GGS_string (" and "))).operator_concat (var_cas_inRightExpressionType.reader_messageGoilTemplateType (inLexique COMMA_SOURCE_FILE_AT_LINE (382)))).operator_concat (GGS_string (" is not valid")) COMMA_SOURCE_FILE_AT_LINE (385)) ;
      var_cas_outResultType.drop () ;
    }
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_divide_types_checkForTemplate\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//        Implementation of routine "modulo_types_checkForTemplate"          *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_modulo_types_checkForTemplate (C_Compiler & inLexique,
                                const GGS_goilTemplateType  var_cas_inLeftExpressionType,
                                const GGS_goilTemplateType  var_cas_inRightExpressionType,
                                GGS_goilTemplateType & var_cas_outResultType COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_modulo_types_checkForTemplate at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  if (var_cas_inLeftExpressionType.isBuilt () && var_cas_inRightExpressionType.isBuilt ()) {
    if ((var_cas_inLeftExpressionType.enumValue () == GGS_goilTemplateType::enum_unsignedType) && (var_cas_inRightExpressionType.enumValue () == GGS_goilTemplateType::enum_unsignedType)) {
      var_cas_outResultType = var_cas_inLeftExpressionType ;
    }else{
      GGS_location (inLexique).reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((((GGS_string ("modulo between ")).operator_concat (var_cas_inLeftExpressionType.reader_messageGoilTemplateType (inLexique COMMA_SOURCE_FILE_AT_LINE (403)))).operator_concat (GGS_string (" and "))).operator_concat (var_cas_inRightExpressionType.reader_messageGoilTemplateType (inLexique COMMA_SOURCE_FILE_AT_LINE (404)))).operator_concat (GGS_string (" is not valid")) COMMA_SOURCE_FILE_AT_LINE (407)) ;
      var_cas_outResultType.drop () ;
    }
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_modulo_types_checkForTemplate\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//            Implementation of function "argumentListSignature"             *
//                                                                           *
//---------------------------------------------------------------------------*

GGS_string function_argumentListSignature (C_Compiler & inLexique,
                                const GGS_goilTemplateExpressionList   var_cas_inParameterTypeList COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER function_argumentListSignature at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  GGS_string var_cas_outResult ;
  var_cas_outResult = GGS_string (" this method call has ") ;
  var_cas_outResult.dotAssign_operation (var_cas_inParameterTypeList.reader_length ().reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (421))) ;
  var_cas_outResult.appendCString (" argument") ;
  var_cas_outResult.dotAssign_operation ((((var_cas_inParameterTypeList.reader_length ()).operator_strictSup (GGS_uint (0U))).isBuiltAndTrue () ? (GGS_string ("s")) : (GGS_string ("")))) ;
  {
    GGS_goilTemplateExpressionList::cEnumerator enumerator_17648 (var_cas_inParameterTypeList, true) ;
    const GGS_goilTemplateExpressionList::cElement * operand_17648 = enumerator_17648.nextObject () ;
    if ((operand_17648 != NULL)) {
      var_cas_outResult.appendCString (": ") ;
      bool _foreach_loop_17648 ;
      do{
        macroValidPointer (operand_17648) ;
        var_cas_outResult.dotAssign_operation (operand_17648->mType.reader_messageGoilTemplateType (inLexique COMMA_SOURCE_FILE_AT_LINE (425))) ;
        operand_17648 = enumerator_17648.nextObject () ;
        _foreach_loop_17648 = ((operand_17648 != NULL)) ;
        if (_foreach_loop_17648) {
          var_cas_outResult.appendCString (", ") ;
        }
      }while (_foreach_loop_17648) ;
    }
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE function_argumentListSignature\n") ;
  #endif
  return var_cas_outResult ;
}

//---------------------------------------------------------------------------*

static GGS_object functionForGenericCall_argumentListSignature (C_Compiler & inLexique,
                           const GGS_objectlist & inEffectiveParameterArray,
                           const GGS_location & inErrorLocation
                           COMMA_LOCATION_ARGS) {
  const GGS_goilTemplateExpressionList  arg_0 = GGS_goilTemplateExpressionList ::castFromObject (inLexique, inEffectiveParameterArray.reader_mValueAtIndex (inLexique, GGS_uint (0) COMMA_THERE), inErrorLocation COMMA_THERE) ;
  const GGS_string result = function_argumentListSignature (inLexique,
                            arg_0
                            COMMA_THERE) ;
  return result.reader_object () ;
}

//---------------------------------------------------------------------------*

static const C_galgas_type_descriptorEX *
kArgumentTypeList_argumentListSignature [1] = {& kTypeDescriptor_GGS_goilTemplateExpressionList } ;

const C_galgas_function_descriptor
kFunction_descriptor_argumentListSignature ("argumentListSignature",
                              functionForGenericCall_argumentListSignature,
                              & kTypeDescriptor_GGS_string,
                              1,
                              kArgumentTypeList_argumentListSignature) ;

//---------------------------------------------------------------------------*
//                                                                           *
//         Implementation of routine "checkInvocationHasNoArgument"          *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_checkInvocationHasNoArgument (C_Compiler & inLexique,
                                const GGS_goilTemplateType  var_cas_inType,
                                const GGS_lstring   var_cas_inMethodName,
                                const GGS_goilTemplateExpressionList   var_cas_inParameterTypeList COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_checkInvocationHasNoArgument at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  const GGS_bool cond_18573 = (var_cas_inParameterTypeList.reader_length ()).operator_strictSup (GGS_uint (0U)) ;
  if (cond_18573.isBuiltAndTrue ()) {
    var_cas_inMethodName.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, (((((GGS_string ("calling '")).operator_concat (var_cas_inMethodName)).operator_concat (GGS_string ("' on a "))).operator_concat (var_cas_inType.reader_messageGoilTemplateType (inLexique COMMA_SOURCE_FILE_AT_LINE (443)))).operator_concat (GGS_string (" type requires no argument; "))).operator_concat (function_argumentListSignature (inLexique, var_cas_inParameterTypeList COMMA_SOURCE_FILE_AT_LINE (444))) COMMA_SOURCE_FILE_AT_LINE (445)) ;
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_checkInvocationHasNoArgument\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//           Implementation of routine "templateMethodInvocation"            *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_templateMethodInvocation (C_Compiler & inLexique,
                                const GGS_goilTemplateType  var_cas_inType,
                                const GGS_goilTemplateValue  var_cas_inValue,
                                const GGS_lstring   var_cas_inMethodName,
                                const GGS_goilTemplateExpressionList   var_cas_inParameterTypeList,
                                GGS_goilTemplateType & var_cas_outResultType,
                                GGS_goilTemplateValue & var_cas_outResultValue COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_templateMethodInvocation at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  switch (var_cas_inType.enumValue ()) {
  case GGS_goilTemplateType::enum_boolType:
    {
    const GGS_bool cond_19596 = (var_cas_inMethodName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (464))).operator_isEqual (GGS_string ("trueOrFalse")) ;
    if (cond_19596.isBuiltAndTrue ()) {
      ::routine_checkInvocationHasNoArgument (inLexique,  var_cas_inType,  var_cas_inMethodName,  var_cas_inParameterTypeList COMMA_SOURCE_FILE_AT_LINE (465)) ;
      var_cas_outResultType = GGS_goilTemplateType::constructor_stringType (inLexique COMMA_HERE) ;
      var_cas_outResultValue = function_valueWithString (inLexique, (((var_cas_inValue.reader_mUnsigned64Value (inLexique COMMA_SOURCE_FILE_AT_LINE (468))).operator_strictSup (GGS_uint64 (0ULL))).isBuiltAndTrue () ? (GGS_string ("true")) : (GGS_string ("false"))) COMMA_SOURCE_FILE_AT_LINE (467)) ;
    }else if (cond_19596.isBuiltAndFalse ()) {
      const GGS_bool cond_19901 = (var_cas_inMethodName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (470))).operator_isEqual (GGS_string ("yesOrNo")) ;
      if (cond_19901.isBuiltAndTrue ()) {
        ::routine_checkInvocationHasNoArgument (inLexique,  var_cas_inType,  var_cas_inMethodName,  var_cas_inParameterTypeList COMMA_SOURCE_FILE_AT_LINE (471)) ;
        var_cas_outResultType = GGS_goilTemplateType::constructor_stringType (inLexique COMMA_HERE) ;
        var_cas_outResultValue = function_valueWithString (inLexique, (((var_cas_inValue.reader_mUnsigned64Value (inLexique COMMA_SOURCE_FILE_AT_LINE (474))).operator_strictSup (GGS_uint64 (0ULL))).isBuiltAndTrue () ? (GGS_string ("yes")) : (GGS_string ("no"))) COMMA_SOURCE_FILE_AT_LINE (473)) ;
      }else if (cond_19901.isBuiltAndFalse ()) {
        const GGS_bool cond_20120 = (var_cas_inMethodName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (476))).operator_isEqual (GGS_string ("unsigned")) ;
        if (cond_20120.isBuiltAndTrue ()) {
          ::routine_checkInvocationHasNoArgument (inLexique,  var_cas_inType,  var_cas_inMethodName,  var_cas_inParameterTypeList COMMA_SOURCE_FILE_AT_LINE (477)) ;
          var_cas_outResultType = GGS_goilTemplateType::constructor_unsignedType (inLexique COMMA_HERE) ;
          var_cas_outResultValue = var_cas_inValue ;
        }else if (cond_20120.isBuiltAndFalse ()) {
          var_cas_inMethodName.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("this template method is not defined") COMMA_SOURCE_FILE_AT_LINE (482)) ;
          var_cas_outResultValue.drop () ;
          var_cas_outResultType.drop () ;
        }
      }
    }
    }
    break ;
  case GGS_goilTemplateType::enum_unsignedType:
    {
    const GGS_bool cond_20521 = (var_cas_inMethodName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (484))).operator_isEqual (GGS_string ("string")) ;
    if (cond_20521.isBuiltAndTrue ()) {
      ::routine_checkInvocationHasNoArgument (inLexique,  var_cas_inType,  var_cas_inMethodName,  var_cas_inParameterTypeList COMMA_SOURCE_FILE_AT_LINE (485)) ;
      var_cas_outResultType = GGS_goilTemplateType::constructor_stringType (inLexique COMMA_HERE) ;
      var_cas_outResultValue = function_valueWithString (inLexique, var_cas_inValue.reader_mUnsigned64Value (inLexique COMMA_SOURCE_FILE_AT_LINE (487)).reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (487)) COMMA_SOURCE_FILE_AT_LINE (487)) ;
    }else if (cond_20521.isBuiltAndFalse ()) {
      const GGS_bool cond_20789 = (var_cas_inMethodName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (488))).operator_isEqual (GGS_string ("hexString")) ;
      if (cond_20789.isBuiltAndTrue ()) {
        ::routine_checkInvocationHasNoArgument (inLexique,  var_cas_inType,  var_cas_inMethodName,  var_cas_inParameterTypeList COMMA_SOURCE_FILE_AT_LINE (489)) ;
        var_cas_outResultType = GGS_goilTemplateType::constructor_stringType (inLexique COMMA_HERE) ;
        var_cas_outResultValue = function_valueWithString (inLexique, var_cas_inValue.reader_mUnsigned64Value (inLexique COMMA_SOURCE_FILE_AT_LINE (491)).reader_hexString (inLexique COMMA_SOURCE_FILE_AT_LINE (491)) COMMA_SOURCE_FILE_AT_LINE (491)) ;
      }else if (cond_20789.isBuiltAndFalse ()) {
        var_cas_inMethodName.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("this template method is not defined") COMMA_SOURCE_FILE_AT_LINE (494)) ;
        var_cas_outResultValue.drop () ;
        var_cas_outResultType.drop () ;
      }
    }
    }
    break ;
  case GGS_goilTemplateType::enum_stringType:
    {
    const GGS_bool cond_21208 = (var_cas_inMethodName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (496))).operator_isEqual (GGS_string ("HTMLRepresentation")) ;
    if (cond_21208.isBuiltAndTrue ()) {
      ::routine_checkInvocationHasNoArgument (inLexique,  var_cas_inType,  var_cas_inMethodName,  var_cas_inParameterTypeList COMMA_SOURCE_FILE_AT_LINE (497)) ;
      var_cas_outResultType = GGS_goilTemplateType::constructor_stringType (inLexique COMMA_HERE) ;
      var_cas_outResultValue = function_valueWithString (inLexique, var_cas_inValue.reader_mStringValue (inLexique COMMA_SOURCE_FILE_AT_LINE (499)).reader_HTMLRepresentation () COMMA_SOURCE_FILE_AT_LINE (499)) ;
    }else if (cond_21208.isBuiltAndFalse ()) {
      const GGS_bool cond_21503 = (var_cas_inMethodName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (500))).operator_isEqual (GGS_string ("identifierRepresentation")) ;
      if (cond_21503.isBuiltAndTrue ()) {
        ::routine_checkInvocationHasNoArgument (inLexique,  var_cas_inType,  var_cas_inMethodName,  var_cas_inParameterTypeList COMMA_SOURCE_FILE_AT_LINE (501)) ;
        var_cas_outResultType = GGS_goilTemplateType::constructor_stringType (inLexique COMMA_HERE) ;
        var_cas_outResultValue = function_valueWithString (inLexique, var_cas_inValue.reader_mStringValue (inLexique COMMA_SOURCE_FILE_AT_LINE (503)).reader_identifierRepresentation () COMMA_SOURCE_FILE_AT_LINE (503)) ;
      }else if (cond_21503.isBuiltAndFalse ()) {
        const GGS_bool cond_21780 = (var_cas_inMethodName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (504))).operator_isEqual (GGS_string ("lowercaseString")) ;
        if (cond_21780.isBuiltAndTrue ()) {
          ::routine_checkInvocationHasNoArgument (inLexique,  var_cas_inType,  var_cas_inMethodName,  var_cas_inParameterTypeList COMMA_SOURCE_FILE_AT_LINE (505)) ;
          var_cas_outResultType = GGS_goilTemplateType::constructor_stringType (inLexique COMMA_HERE) ;
          var_cas_outResultValue = function_valueWithString (inLexique, var_cas_inValue.reader_mStringValue (inLexique COMMA_SOURCE_FILE_AT_LINE (507)).reader_lowercaseString () COMMA_SOURCE_FILE_AT_LINE (507)) ;
        }else if (cond_21780.isBuiltAndFalse ()) {
          const GGS_bool cond_22052 = (var_cas_inMethodName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (508))).operator_isEqual (GGS_string ("length")) ;
          if (cond_22052.isBuiltAndTrue ()) {
            ::routine_checkInvocationHasNoArgument (inLexique,  var_cas_inType,  var_cas_inMethodName,  var_cas_inParameterTypeList COMMA_SOURCE_FILE_AT_LINE (509)) ;
            var_cas_outResultType = GGS_goilTemplateType::constructor_unsignedType (inLexique COMMA_HERE) ;
            var_cas_outResultValue = function_valueWithUnsigned (inLexique, var_cas_inValue.reader_mStringValue (inLexique COMMA_SOURCE_FILE_AT_LINE (511)).reader_length ().reader_uint64 (inLexique COMMA_SOURCE_FILE_AT_LINE (511)) COMMA_SOURCE_FILE_AT_LINE (511)) ;
          }else if (cond_22052.isBuiltAndFalse ()) {
            const GGS_bool cond_22367 = (var_cas_inMethodName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (512))).operator_isEqual (GGS_string ("stringByCapitalizingFirstCharacter")) ;
            if (cond_22367.isBuiltAndTrue ()) {
              ::routine_checkInvocationHasNoArgument (inLexique,  var_cas_inType,  var_cas_inMethodName,  var_cas_inParameterTypeList COMMA_SOURCE_FILE_AT_LINE (513)) ;
              var_cas_outResultType = GGS_goilTemplateType::constructor_stringType (inLexique COMMA_HERE) ;
              var_cas_outResultValue = function_valueWithString (inLexique, var_cas_inValue.reader_mStringValue (inLexique COMMA_SOURCE_FILE_AT_LINE (515)).reader_stringByCapitalizingFirstCharacter () COMMA_SOURCE_FILE_AT_LINE (515)) ;
            }else if (cond_22367.isBuiltAndFalse ()) {
              const GGS_bool cond_22643 = (var_cas_inMethodName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (516))).operator_isEqual (GGS_string ("uppercaseString")) ;
              if (cond_22643.isBuiltAndTrue ()) {
                ::routine_checkInvocationHasNoArgument (inLexique,  var_cas_inType,  var_cas_inMethodName,  var_cas_inParameterTypeList COMMA_SOURCE_FILE_AT_LINE (517)) ;
                var_cas_outResultType = GGS_goilTemplateType::constructor_stringType (inLexique COMMA_HERE) ;
                var_cas_outResultValue = function_valueWithString (inLexique, var_cas_inValue.reader_mStringValue (inLexique COMMA_SOURCE_FILE_AT_LINE (519)).reader_uppercaseString () COMMA_SOURCE_FILE_AT_LINE (519)) ;
              }else if (cond_22643.isBuiltAndFalse ()) {
                var_cas_inMethodName.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("this template method is not defined") COMMA_SOURCE_FILE_AT_LINE (522)) ;
                var_cas_outResultValue.drop () ;
                var_cas_outResultType.drop () ;
              }
            }
          }
        }
      }
    }
    }
    break ;
  case GGS_goilTemplateType::enum_listType:
    {
    const GGS_bool cond_23049 = (var_cas_inMethodName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (524))).operator_isEqual (GGS_string ("length")) ;
    if (cond_23049.isBuiltAndTrue ()) {
      ::routine_checkInvocationHasNoArgument (inLexique,  var_cas_inType,  var_cas_inMethodName,  var_cas_inParameterTypeList COMMA_SOURCE_FILE_AT_LINE (525)) ;
      var_cas_outResultType = GGS_goilTemplateType::constructor_unsignedType (inLexique COMMA_HERE) ;
      var_cas_outResultValue = function_valueWithUnsigned (inLexique, var_cas_inValue.reader_mMapListValue (inLexique COMMA_SOURCE_FILE_AT_LINE (527)).reader_length ().reader_uint64 (inLexique COMMA_SOURCE_FILE_AT_LINE (527)) COMMA_SOURCE_FILE_AT_LINE (527)) ;
    }else if (cond_23049.isBuiltAndFalse ()) {
      var_cas_inMethodName.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("this template method is not defined") COMMA_SOURCE_FILE_AT_LINE (530)) ;
      var_cas_outResultValue.drop () ;
      var_cas_outResultType.drop () ;
    }
    }
    break ;
  case GGS_goilTemplateType::kNotBuilt:
    break ;
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_templateMethodInvocation\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//              Implementation of production rule 'expression'               *
//                                                                           *
//---------------------------------------------------------------------------*

void goil_template_expression_parser::
pr_expression_goil_template_expression_parser_540_17_ (goil_template_scanner & inLexique,
                                const GGS_string var_cas_inPrefix,
                                const GGS_string var_cas_inPath,
                                const GGS_string var_cas_inTemplateDirectory,
                                const GGS_goilTemplateVariableMap  var_cas_inVariableMap,
                                GGS_goilTemplateValue &var_cas_outValue,
                                GGS_goilTemplateType &var_cas_outResultType) {
  nt_relation_term_ (inLexique, var_cas_inPrefix, var_cas_inPath, var_cas_inTemplateDirectory, var_cas_inVariableMap, var_cas_outValue, var_cas_outResultType) ;
  { bool syntaxRepeat_0 = true ;
    while (syntaxRepeat_0) {
      switch (select_goil_template_expression_parser_0 (inLexique)) {
        case 2 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_template_scanner::goil_template_scanner_1__7C_) COMMA_HERE) ;
          GGS_goilTemplateValue var_cas_leftOperand = var_cas_outValue ;
          GGS_goilTemplateValue var_cas_rightOperand ;
          GGS_goilTemplateType var_cas_firstOperandType = var_cas_outResultType ;
          GGS_goilTemplateType var_cas_secondOperandType ;
          nt_relation_term_ (inLexique, var_cas_inPrefix, var_cas_inPath, var_cas_inTemplateDirectory, var_cas_inVariableMap, var_cas_rightOperand, var_cas_secondOperandType) ;
          var_cas_outValue.mUnsigned64Value = (var_cas_leftOperand.reader_mUnsigned64Value (inLexique COMMA_SOURCE_FILE_AT_LINE (571))).operator_or (var_cas_rightOperand.reader_mUnsigned64Value (inLexique COMMA_SOURCE_FILE_AT_LINE (571))) ;
          ::routine_matchOrOperatorForTemplate (inLexique,  var_cas_firstOperandType,  var_cas_secondOperandType,  var_cas_outResultType COMMA_SOURCE_FILE_AT_LINE (572)) ;
          } break ;
        case 3 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_template_scanner::goil_template_scanner_1__5E_) COMMA_HERE) ;
          GGS_goilTemplateValue var_cas_leftOperand = var_cas_outValue ;
          GGS_goilTemplateValue var_cas_rightOperand ;
          GGS_goilTemplateType var_cas_firstOperandType = var_cas_outResultType ;
          GGS_goilTemplateType var_cas_secondOperandType ;
          nt_relation_term_ (inLexique, var_cas_inPrefix, var_cas_inPath, var_cas_inTemplateDirectory, var_cas_inVariableMap, var_cas_rightOperand, var_cas_secondOperandType) ;
          var_cas_outValue.mUnsigned64Value = (var_cas_leftOperand.reader_mUnsigned64Value (inLexique COMMA_SOURCE_FILE_AT_LINE (591))).operator_xor (var_cas_rightOperand.reader_mUnsigned64Value (inLexique COMMA_SOURCE_FILE_AT_LINE (591))) ;
          ::routine_matchXorOperatorForTemplate (inLexique,  var_cas_firstOperandType,  var_cas_secondOperandType,  var_cas_outResultType COMMA_SOURCE_FILE_AT_LINE (592)) ;
          } break ;
        default :
          syntaxRepeat_0 = false ;
          break ;
      }
    }
  }
}

//---------------------------------------------------------------------------*

void goil_template_expression_parser::
pr_expression_goil_template_expression_parser_540_17_parse (goil_template_scanner & inLexique) {
  nt_relation_term_parse (inLexique) ;
  { bool syntaxRepeat_0 = true ;
    while (syntaxRepeat_0) {
      switch (select_goil_template_expression_parser_0 (inLexique)) {
        case 2 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_template_scanner::goil_template_scanner_1__7C_) COMMA_HERE) ;
          nt_relation_term_parse (inLexique) ;
          } break ;
        case 3 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_template_scanner::goil_template_scanner_1__5E_) COMMA_HERE) ;
          nt_relation_term_parse (inLexique) ;
          } break ;
        default :
          syntaxRepeat_0 = false ;
          break ;
      }
    }
  }
  GGS_lstring::constructor_retrieveAndResetTemplateString (inLexique COMMA_HERE) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//            Implementation of production rule 'relation_term'              *
//                                                                           *
//---------------------------------------------------------------------------*

void goil_template_expression_parser::
pr_relation_term_goil_template_expression_parser_606_20_ (goil_template_scanner & inLexique,
                                const GGS_string var_cas_inPrefix,
                                const GGS_string var_cas_inPath,
                                const GGS_string var_cas_inTemplateDirectory,
                                const GGS_goilTemplateVariableMap  var_cas_inVariableMap,
                                GGS_goilTemplateValue &var_cas_outValue,
                                GGS_goilTemplateType &var_cas_outResultType) {
  nt_relation_factor_ (inLexique, var_cas_inPrefix, var_cas_inPath, var_cas_inTemplateDirectory, var_cas_inVariableMap, var_cas_outValue, var_cas_outResultType) ;
  { bool syntaxRepeat_1 = true ;
    while (syntaxRepeat_1) {
      switch (select_goil_template_expression_parser_1 (inLexique)) {
        case 2 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_template_scanner::goil_template_scanner_1__26_) COMMA_HERE) ;
          GGS_goilTemplateValue var_cas_leftOperand = var_cas_outValue ;
          GGS_goilTemplateValue var_cas_rightOperand ;
          GGS_goilTemplateType var_cas_firstOperandType = var_cas_outResultType ;
          GGS_goilTemplateType var_cas_secondOperandType ;
          nt_relation_factor_ (inLexique, var_cas_inPrefix, var_cas_inPath, var_cas_inTemplateDirectory, var_cas_inVariableMap, var_cas_rightOperand, var_cas_secondOperandType) ;
          var_cas_outValue.mUnsigned64Value = (var_cas_leftOperand.reader_mUnsigned64Value (inLexique COMMA_SOURCE_FILE_AT_LINE (637))).operator_and (var_cas_rightOperand.reader_mUnsigned64Value (inLexique COMMA_SOURCE_FILE_AT_LINE (637))) ;
          ::routine_matchAndOperatorForTemplate (inLexique,  var_cas_firstOperandType,  var_cas_secondOperandType,  var_cas_outResultType COMMA_SOURCE_FILE_AT_LINE (638)) ;
          } break ;
        default :
          syntaxRepeat_1 = false ;
          break ;
      }
    }
  }
}

//---------------------------------------------------------------------------*

void goil_template_expression_parser::
pr_relation_term_goil_template_expression_parser_606_20_parse (goil_template_scanner & inLexique) {
  nt_relation_factor_parse (inLexique) ;
  { bool syntaxRepeat_1 = true ;
    while (syntaxRepeat_1) {
      switch (select_goil_template_expression_parser_1 (inLexique)) {
        case 2 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_template_scanner::goil_template_scanner_1__26_) COMMA_HERE) ;
          nt_relation_factor_parse (inLexique) ;
          } break ;
        default :
          syntaxRepeat_1 = false ;
          break ;
      }
    }
  }
  GGS_lstring::constructor_retrieveAndResetTemplateString (inLexique COMMA_HERE) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//           Implementation of production rule 'relation_factor'             *
//                                                                           *
//---------------------------------------------------------------------------*

void goil_template_expression_parser::
pr_relation_factor_goil_template_expression_parser_652_22_ (goil_template_scanner & inLexique,
                                const GGS_string var_cas_inPrefix,
                                const GGS_string var_cas_inPath,
                                const GGS_string var_cas_inTemplateDirectory,
                                const GGS_goilTemplateVariableMap  var_cas_inVariableMap,
                                GGS_goilTemplateValue &var_cas_outValue,
                                GGS_goilTemplateType &var_cas_outResultType) {
  nt_simple_expression_ (inLexique, var_cas_inPrefix, var_cas_inPath, var_cas_inTemplateDirectory, var_cas_inVariableMap, var_cas_outValue, var_cas_outResultType) ;
  switch (select_goil_template_expression_parser_2 (inLexique)) {
    case 1 : {
      } break ;
    case 2 : {
      inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_template_scanner::goil_template_scanner_1__3D__3D_) COMMA_HERE) ;
      GGS_goilTemplateValue var_cas_leftExpression = var_cas_outValue ;
      GGS_goilTemplateType var_cas_leftType = var_cas_outResultType ;
      GGS_goilTemplateValue var_cas_rightExpression ;
      GGS_goilTemplateType var_cas_rightType ;
      nt_simple_expression_ (inLexique, var_cas_inPrefix, var_cas_inPath, var_cas_inTemplateDirectory, var_cas_inVariableMap, var_cas_rightExpression, var_cas_rightType) ;
      ::routine_comparison_types_checkForTemplate (inLexique,  var_cas_leftType,  var_cas_rightType COMMA_SOURCE_FILE_AT_LINE (682)) ;
      GGS_bool var_cas_result ;
      switch (var_cas_leftType.enumValue ()) {
      case GGS_goilTemplateType::enum_boolType:
        {
        var_cas_result = (var_cas_leftExpression.reader_mUnsigned64Value (inLexique COMMA_SOURCE_FILE_AT_LINE (686))).operator_isEqual (var_cas_rightExpression.reader_mUnsigned64Value (inLexique COMMA_SOURCE_FILE_AT_LINE (686))) ;
        }
        break ;
      case GGS_goilTemplateType::enum_unsignedType:
        {
        var_cas_result = (var_cas_leftExpression.reader_mUnsigned64Value (inLexique COMMA_SOURCE_FILE_AT_LINE (688))).operator_isEqual (var_cas_rightExpression.reader_mUnsigned64Value (inLexique COMMA_SOURCE_FILE_AT_LINE (688))) ;
        }
        break ;
      case GGS_goilTemplateType::enum_listType:
      case GGS_goilTemplateType::enum_stringType:
        {
        var_cas_result = (var_cas_leftExpression.reader_mStringValue (inLexique COMMA_SOURCE_FILE_AT_LINE (690))).operator_isEqual (var_cas_rightExpression.reader_mStringValue (inLexique COMMA_SOURCE_FILE_AT_LINE (690))) ;
        }
        break ;
      case GGS_goilTemplateType::kNotBuilt:
        break ;
      }
      var_cas_outResultType = GGS_goilTemplateType::constructor_boolType (inLexique COMMA_HERE) ;
      var_cas_outValue.mUnsigned64Value = ((var_cas_result).isBuiltAndTrue () ? (GGS_uint64 (1ULL)) : (GGS_uint64 (0ULL))) ;
      } break ;
    case 3 : {
      inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_template_scanner::goil_template_scanner_1__21__3D_) COMMA_HERE) ;
      GGS_goilTemplateValue var_cas_leftExpression = var_cas_outValue ;
      GGS_goilTemplateType var_cas_leftType = var_cas_outResultType ;
      GGS_goilTemplateValue var_cas_rightExpression ;
      GGS_goilTemplateType var_cas_rightType ;
      nt_simple_expression_ (inLexique, var_cas_inPrefix, var_cas_inPath, var_cas_inTemplateDirectory, var_cas_inVariableMap, var_cas_rightExpression, var_cas_rightType) ;
      ::routine_comparison_types_checkForTemplate (inLexique,  var_cas_leftType,  var_cas_rightType COMMA_SOURCE_FILE_AT_LINE (708)) ;
      GGS_bool var_cas_result ;
      switch (var_cas_leftType.enumValue ()) {
      case GGS_goilTemplateType::enum_boolType:
        {
        var_cas_result = (var_cas_leftExpression.reader_mUnsigned64Value (inLexique COMMA_SOURCE_FILE_AT_LINE (712))).operator_isNotEqual (var_cas_rightExpression.reader_mUnsigned64Value (inLexique COMMA_SOURCE_FILE_AT_LINE (712))) ;
        }
        break ;
      case GGS_goilTemplateType::enum_unsignedType:
        {
        var_cas_result = (var_cas_leftExpression.reader_mUnsigned64Value (inLexique COMMA_SOURCE_FILE_AT_LINE (714))).operator_isNotEqual (var_cas_rightExpression.reader_mUnsigned64Value (inLexique COMMA_SOURCE_FILE_AT_LINE (714))) ;
        }
        break ;
      case GGS_goilTemplateType::enum_listType:
      case GGS_goilTemplateType::enum_stringType:
        {
        var_cas_result = (var_cas_leftExpression.reader_mStringValue (inLexique COMMA_SOURCE_FILE_AT_LINE (716))).operator_isNotEqual (var_cas_rightExpression.reader_mStringValue (inLexique COMMA_SOURCE_FILE_AT_LINE (716))) ;
        }
        break ;
      case GGS_goilTemplateType::kNotBuilt:
        break ;
      }
      var_cas_outResultType = GGS_goilTemplateType::constructor_boolType (inLexique COMMA_HERE) ;
      var_cas_outValue.mUnsigned64Value = ((var_cas_result).isBuiltAndTrue () ? (GGS_uint64 (1ULL)) : (GGS_uint64 (0ULL))) ;
      } break ;
    case 4 : {
      inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_template_scanner::goil_template_scanner_1__3C__3D_) COMMA_HERE) ;
      GGS_goilTemplateValue var_cas_leftExpression = var_cas_outValue ;
      GGS_goilTemplateType var_cas_leftType = var_cas_outResultType ;
      GGS_goilTemplateValue var_cas_rightExpression ;
      GGS_goilTemplateType var_cas_rightType ;
      nt_simple_expression_ (inLexique, var_cas_inPrefix, var_cas_inPath, var_cas_inTemplateDirectory, var_cas_inVariableMap, var_cas_rightExpression, var_cas_rightType) ;
      ::routine_magnitude_comparison_types_checkForTemplate (inLexique,  var_cas_leftType,  var_cas_rightType COMMA_SOURCE_FILE_AT_LINE (734)) ;
      GGS_bool var_cas_result ;
      switch (var_cas_leftType.enumValue ()) {
      case GGS_goilTemplateType::enum_boolType:
        {
        var_cas_result = (var_cas_leftExpression.reader_mUnsigned64Value (inLexique COMMA_SOURCE_FILE_AT_LINE (738))).operator_infOrEqual (var_cas_rightExpression.reader_mUnsigned64Value (inLexique COMMA_SOURCE_FILE_AT_LINE (738))) ;
        }
        break ;
      case GGS_goilTemplateType::enum_unsignedType:
        {
        var_cas_result = (var_cas_leftExpression.reader_mUnsigned64Value (inLexique COMMA_SOURCE_FILE_AT_LINE (740))).operator_infOrEqual (var_cas_rightExpression.reader_mUnsigned64Value (inLexique COMMA_SOURCE_FILE_AT_LINE (740))) ;
        }
        break ;
      case GGS_goilTemplateType::enum_listType:
      case GGS_goilTemplateType::enum_stringType:
        {
        var_cas_result = GGS_bool (false) ;
        }
        break ;
      case GGS_goilTemplateType::kNotBuilt:
        break ;
      }
      var_cas_outResultType = GGS_goilTemplateType::constructor_boolType (inLexique COMMA_HERE) ;
      var_cas_outValue.mUnsigned64Value = ((var_cas_result).isBuiltAndTrue () ? (GGS_uint64 (1ULL)) : (GGS_uint64 (0ULL))) ;
      } break ;
    case 5 : {
      inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_template_scanner::goil_template_scanner_1__3E__3D_) COMMA_HERE) ;
      GGS_goilTemplateValue var_cas_leftExpression = var_cas_outValue ;
      GGS_goilTemplateType var_cas_leftType = var_cas_outResultType ;
      GGS_goilTemplateValue var_cas_rightExpression ;
      GGS_goilTemplateType var_cas_rightType ;
      nt_simple_expression_ (inLexique, var_cas_inPrefix, var_cas_inPath, var_cas_inTemplateDirectory, var_cas_inVariableMap, var_cas_rightExpression, var_cas_rightType) ;
      ::routine_magnitude_comparison_types_checkForTemplate (inLexique,  var_cas_leftType,  var_cas_rightType COMMA_SOURCE_FILE_AT_LINE (760)) ;
      GGS_bool var_cas_result ;
      switch (var_cas_leftType.enumValue ()) {
      case GGS_goilTemplateType::enum_boolType:
        {
        var_cas_result = (var_cas_leftExpression.reader_mUnsigned64Value (inLexique COMMA_SOURCE_FILE_AT_LINE (764))).operator_supOrEqual (var_cas_rightExpression.reader_mUnsigned64Value (inLexique COMMA_SOURCE_FILE_AT_LINE (764))) ;
        }
        break ;
      case GGS_goilTemplateType::enum_unsignedType:
        {
        var_cas_result = (var_cas_leftExpression.reader_mUnsigned64Value (inLexique COMMA_SOURCE_FILE_AT_LINE (766))).operator_supOrEqual (var_cas_rightExpression.reader_mUnsigned64Value (inLexique COMMA_SOURCE_FILE_AT_LINE (766))) ;
        }
        break ;
      case GGS_goilTemplateType::enum_listType:
      case GGS_goilTemplateType::enum_stringType:
        {
        var_cas_result = GGS_bool (false) ;
        }
        break ;
      case GGS_goilTemplateType::kNotBuilt:
        break ;
      }
      var_cas_outResultType = GGS_goilTemplateType::constructor_boolType (inLexique COMMA_HERE) ;
      var_cas_outValue.mUnsigned64Value = ((var_cas_result).isBuiltAndTrue () ? (GGS_uint64 (1ULL)) : (GGS_uint64 (0ULL))) ;
      } break ;
    case 6 : {
      inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_template_scanner::goil_template_scanner_1__3E_) COMMA_HERE) ;
      GGS_goilTemplateValue var_cas_leftExpression = var_cas_outValue ;
      GGS_goilTemplateType var_cas_leftType = var_cas_outResultType ;
      GGS_goilTemplateValue var_cas_rightExpression ;
      GGS_goilTemplateType var_cas_rightType ;
      nt_simple_expression_ (inLexique, var_cas_inPrefix, var_cas_inPath, var_cas_inTemplateDirectory, var_cas_inVariableMap, var_cas_rightExpression, var_cas_rightType) ;
      ::routine_magnitude_comparison_types_checkForTemplate (inLexique,  var_cas_leftType,  var_cas_rightType COMMA_SOURCE_FILE_AT_LINE (786)) ;
      GGS_bool var_cas_result ;
      switch (var_cas_leftType.enumValue ()) {
      case GGS_goilTemplateType::enum_boolType:
        {
        var_cas_result = (var_cas_leftExpression.reader_mUnsigned64Value (inLexique COMMA_SOURCE_FILE_AT_LINE (790))).operator_strictSup (var_cas_rightExpression.reader_mUnsigned64Value (inLexique COMMA_SOURCE_FILE_AT_LINE (790))) ;
        }
        break ;
      case GGS_goilTemplateType::enum_unsignedType:
        {
        var_cas_result = (var_cas_leftExpression.reader_mUnsigned64Value (inLexique COMMA_SOURCE_FILE_AT_LINE (792))).operator_strictSup (var_cas_rightExpression.reader_mUnsigned64Value (inLexique COMMA_SOURCE_FILE_AT_LINE (792))) ;
        }
        break ;
      case GGS_goilTemplateType::enum_listType:
      case GGS_goilTemplateType::enum_stringType:
        {
        var_cas_result = GGS_bool (false) ;
        }
        break ;
      case GGS_goilTemplateType::kNotBuilt:
        break ;
      }
      var_cas_outResultType = GGS_goilTemplateType::constructor_boolType (inLexique COMMA_HERE) ;
      var_cas_outValue.mUnsigned64Value = ((var_cas_result).isBuiltAndTrue () ? (GGS_uint64 (1ULL)) : (GGS_uint64 (0ULL))) ;
      } break ;
    case 7 : {
      inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_template_scanner::goil_template_scanner_1__3C_) COMMA_HERE) ;
      GGS_goilTemplateValue var_cas_leftExpression = var_cas_outValue ;
      GGS_goilTemplateType var_cas_leftType = var_cas_outResultType ;
      GGS_goilTemplateValue var_cas_rightExpression ;
      GGS_goilTemplateType var_cas_rightType ;
      nt_simple_expression_ (inLexique, var_cas_inPrefix, var_cas_inPath, var_cas_inTemplateDirectory, var_cas_inVariableMap, var_cas_rightExpression, var_cas_rightType) ;
      ::routine_magnitude_comparison_types_checkForTemplate (inLexique,  var_cas_leftType,  var_cas_rightType COMMA_SOURCE_FILE_AT_LINE (812)) ;
      GGS_bool var_cas_result ;
      switch (var_cas_leftType.enumValue ()) {
      case GGS_goilTemplateType::enum_boolType:
        {
        var_cas_result = (var_cas_leftExpression.reader_mUnsigned64Value (inLexique COMMA_SOURCE_FILE_AT_LINE (816))).operator_strictInf (var_cas_rightExpression.reader_mUnsigned64Value (inLexique COMMA_SOURCE_FILE_AT_LINE (816))) ;
        }
        break ;
      case GGS_goilTemplateType::enum_unsignedType:
        {
        var_cas_result = (var_cas_leftExpression.reader_mUnsigned64Value (inLexique COMMA_SOURCE_FILE_AT_LINE (818))).operator_strictInf (var_cas_rightExpression.reader_mUnsigned64Value (inLexique COMMA_SOURCE_FILE_AT_LINE (818))) ;
        }
        break ;
      case GGS_goilTemplateType::enum_listType:
      case GGS_goilTemplateType::enum_stringType:
        {
        var_cas_result = GGS_bool (false) ;
        }
        break ;
      case GGS_goilTemplateType::kNotBuilt:
        break ;
      }
      var_cas_outResultType = GGS_goilTemplateType::constructor_boolType (inLexique COMMA_HERE) ;
      var_cas_outValue.mUnsigned64Value = ((var_cas_result).isBuiltAndTrue () ? (GGS_uint64 (1ULL)) : (GGS_uint64 (0ULL))) ;
      } break ;
    default :
      break ;
  }
}

//---------------------------------------------------------------------------*

void goil_template_expression_parser::
pr_relation_factor_goil_template_expression_parser_652_22_parse (goil_template_scanner & inLexique) {
  nt_simple_expression_parse (inLexique) ;
  switch (select_goil_template_expression_parser_2 (inLexique)) {
    case 1 : {
      } break ;
    case 2 : {
      inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_template_scanner::goil_template_scanner_1__3D__3D_) COMMA_HERE) ;
      nt_simple_expression_parse (inLexique) ;
      } break ;
    case 3 : {
      inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_template_scanner::goil_template_scanner_1__21__3D_) COMMA_HERE) ;
      nt_simple_expression_parse (inLexique) ;
      } break ;
    case 4 : {
      inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_template_scanner::goil_template_scanner_1__3C__3D_) COMMA_HERE) ;
      nt_simple_expression_parse (inLexique) ;
      } break ;
    case 5 : {
      inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_template_scanner::goil_template_scanner_1__3E__3D_) COMMA_HERE) ;
      nt_simple_expression_parse (inLexique) ;
      } break ;
    case 6 : {
      inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_template_scanner::goil_template_scanner_1__3E_) COMMA_HERE) ;
      nt_simple_expression_parse (inLexique) ;
      } break ;
    case 7 : {
      inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_template_scanner::goil_template_scanner_1__3C_) COMMA_HERE) ;
      nt_simple_expression_parse (inLexique) ;
      } break ;
    default :
      break ;
  }
  GGS_lstring::constructor_retrieveAndResetTemplateString (inLexique COMMA_HERE) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//          Implementation of production rule 'simple_expression'            *
//                                                                           *
//---------------------------------------------------------------------------*

void goil_template_expression_parser::
pr_simple_expression_goil_template_expression_parser_833_24_ (goil_template_scanner & inLexique,
                                const GGS_string var_cas_inPrefix,
                                const GGS_string var_cas_inPath,
                                const GGS_string var_cas_inTemplateDirectory,
                                const GGS_goilTemplateVariableMap  var_cas_inVariableMap,
                                GGS_goilTemplateValue &var_cas_outValue,
                                GGS_goilTemplateType &var_cas_outResultType) {
  nt_term_ (inLexique, var_cas_inPrefix, var_cas_inPath, var_cas_inTemplateDirectory, var_cas_inVariableMap, var_cas_outValue, var_cas_outResultType) ;
  { bool syntaxRepeat_3 = true ;
    while (syntaxRepeat_3) {
      switch (select_goil_template_expression_parser_3 (inLexique)) {
        case 2 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_template_scanner::goil_template_scanner_1__3C__3C_) COMMA_HERE) ;
          GGS_goilTemplateValue var_cas_leftExpression = var_cas_outValue ;
          GGS_goilTemplateType var_cas_leftType = var_cas_outResultType ;
          GGS_goilTemplateValue var_cas_rightExpression ;
          GGS_goilTemplateType var_cas_rightType ;
          nt_term_ (inLexique, var_cas_inPrefix, var_cas_inPath, var_cas_inTemplateDirectory, var_cas_inVariableMap, var_cas_rightExpression, var_cas_rightType) ;
          ::routine_left_shift_types_checkForTemplate (inLexique,  var_cas_leftType,  var_cas_rightType,  var_cas_outResultType COMMA_SOURCE_FILE_AT_LINE (864)) ;
          var_cas_outValue.mUnsigned64Value = var_cas_leftExpression.reader_mUnsigned64Value (inLexique COMMA_SOURCE_FILE_AT_LINE (865)).left_shift_operation (inLexique, var_cas_rightExpression.reader_mUnsigned64Value (inLexique COMMA_SOURCE_FILE_AT_LINE (865)).reader_uint (inLexique COMMA_SOURCE_FILE_AT_LINE (865)) COMMA_SOURCE_FILE_AT_LINE (865)) ;
          } break ;
        case 3 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_template_scanner::goil_template_scanner_1__3E__3E_) COMMA_HERE) ;
          GGS_goilTemplateValue var_cas_leftExpression = var_cas_outValue ;
          GGS_goilTemplateType var_cas_leftType = var_cas_outResultType ;
          GGS_goilTemplateValue var_cas_rightExpression ;
          GGS_goilTemplateType var_cas_rightType ;
          nt_term_ (inLexique, var_cas_inPrefix, var_cas_inPath, var_cas_inTemplateDirectory, var_cas_inVariableMap, var_cas_rightExpression, var_cas_rightType) ;
          ::routine_right_shift_types_checkForTemplate (inLexique,  var_cas_leftType,  var_cas_rightType,  var_cas_outResultType COMMA_SOURCE_FILE_AT_LINE (880)) ;
          var_cas_outValue.mUnsigned64Value = var_cas_leftExpression.reader_mUnsigned64Value (inLexique COMMA_SOURCE_FILE_AT_LINE (881)).right_shift_operation (inLexique, var_cas_rightExpression.reader_mUnsigned64Value (inLexique COMMA_SOURCE_FILE_AT_LINE (881)).reader_uint (inLexique COMMA_SOURCE_FILE_AT_LINE (881)) COMMA_SOURCE_FILE_AT_LINE (881)) ;
          } break ;
        case 4 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_template_scanner::goil_template_scanner_1__2B_) COMMA_HERE) ;
          GGS_goilTemplateValue var_cas_leftExpression = var_cas_outValue ;
          GGS_goilTemplateType var_cas_leftType = var_cas_outResultType ;
          GGS_goilTemplateValue var_cas_rightExpression ;
          GGS_goilTemplateType var_cas_rightType ;
          nt_term_ (inLexique, var_cas_inPrefix, var_cas_inPath, var_cas_inTemplateDirectory, var_cas_inVariableMap, var_cas_rightExpression, var_cas_rightType) ;
          ::routine_addition_types_checkForTemplate (inLexique,  var_cas_leftType,  var_cas_rightType,  var_cas_outResultType COMMA_SOURCE_FILE_AT_LINE (896)) ;
          var_cas_outValue.mUnsigned64Value = var_cas_leftExpression.reader_mUnsigned64Value (inLexique COMMA_SOURCE_FILE_AT_LINE (897)).add_operation (inLexique, var_cas_rightExpression.reader_mUnsigned64Value (inLexique COMMA_SOURCE_FILE_AT_LINE (897)) COMMA_SOURCE_FILE_AT_LINE (897)) ;
          } break ;
        case 5 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_template_scanner::goil_template_scanner_1__2E_) COMMA_HERE) ;
          GGS_goilTemplateValue var_cas_leftExpression = var_cas_outValue ;
          GGS_goilTemplateType var_cas_leftType = var_cas_outResultType ;
          GGS_goilTemplateValue var_cas_rightExpression ;
          GGS_goilTemplateType var_cas_rightType ;
          nt_term_ (inLexique, var_cas_inPrefix, var_cas_inPath, var_cas_inTemplateDirectory, var_cas_inVariableMap, var_cas_rightExpression, var_cas_rightType) ;
          ::routine_concatenation_types_checkForTemplate (inLexique,  var_cas_leftType,  var_cas_rightType,  var_cas_outResultType COMMA_SOURCE_FILE_AT_LINE (912)) ;
          var_cas_outValue.mStringValue = (var_cas_leftExpression.reader_mStringValue (inLexique COMMA_SOURCE_FILE_AT_LINE (913))).operator_concat (var_cas_rightExpression.reader_mStringValue (inLexique COMMA_SOURCE_FILE_AT_LINE (913))) ;
          } break ;
        case 6 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_template_scanner::goil_template_scanner_1__2D_) COMMA_HERE) ;
          GGS_goilTemplateValue var_cas_leftExpression = var_cas_outValue ;
          GGS_goilTemplateType var_cas_leftType = var_cas_outResultType ;
          GGS_goilTemplateValue var_cas_rightExpression ;
          GGS_goilTemplateType var_cas_rightType ;
          nt_term_ (inLexique, var_cas_inPrefix, var_cas_inPath, var_cas_inTemplateDirectory, var_cas_inVariableMap, var_cas_rightExpression, var_cas_rightType) ;
          ::routine_addition_types_checkForTemplate (inLexique,  var_cas_leftType,  var_cas_rightType,  var_cas_outResultType COMMA_SOURCE_FILE_AT_LINE (928)) ;
          var_cas_outValue.mUnsigned64Value = var_cas_leftExpression.reader_mUnsigned64Value (inLexique COMMA_SOURCE_FILE_AT_LINE (929)).substract_operation (inLexique, var_cas_rightExpression.reader_mUnsigned64Value (inLexique COMMA_SOURCE_FILE_AT_LINE (929)) COMMA_SOURCE_FILE_AT_LINE (929)) ;
          } break ;
        default :
          syntaxRepeat_3 = false ;
          break ;
      }
    }
  }
}

//---------------------------------------------------------------------------*

void goil_template_expression_parser::
pr_simple_expression_goil_template_expression_parser_833_24_parse (goil_template_scanner & inLexique) {
  nt_term_parse (inLexique) ;
  { bool syntaxRepeat_3 = true ;
    while (syntaxRepeat_3) {
      switch (select_goil_template_expression_parser_3 (inLexique)) {
        case 2 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_template_scanner::goil_template_scanner_1__3C__3C_) COMMA_HERE) ;
          nt_term_parse (inLexique) ;
          } break ;
        case 3 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_template_scanner::goil_template_scanner_1__3E__3E_) COMMA_HERE) ;
          nt_term_parse (inLexique) ;
          } break ;
        case 4 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_template_scanner::goil_template_scanner_1__2B_) COMMA_HERE) ;
          nt_term_parse (inLexique) ;
          } break ;
        case 5 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_template_scanner::goil_template_scanner_1__2E_) COMMA_HERE) ;
          nt_term_parse (inLexique) ;
          } break ;
        case 6 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_template_scanner::goil_template_scanner_1__2D_) COMMA_HERE) ;
          nt_term_parse (inLexique) ;
          } break ;
        default :
          syntaxRepeat_3 = false ;
          break ;
      }
    }
  }
  GGS_lstring::constructor_retrieveAndResetTemplateString (inLexique COMMA_HERE) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                 Implementation of production rule 'term'                  *
//                                                                           *
//---------------------------------------------------------------------------*

void goil_template_expression_parser::
pr_term_goil_template_expression_parser_939_11_ (goil_template_scanner & inLexique,
                                const GGS_string var_cas_inPrefix,
                                const GGS_string var_cas_inPath,
                                const GGS_string var_cas_inTemplateDirectory,
                                const GGS_goilTemplateVariableMap  var_cas_inVariableMap,
                                GGS_goilTemplateValue &var_cas_outValue,
                                GGS_goilTemplateType &var_cas_outResultType) {
  nt_factor_ (inLexique, var_cas_inPrefix, var_cas_inPath, var_cas_inTemplateDirectory, var_cas_inVariableMap, var_cas_outValue, var_cas_outResultType) ;
  { bool syntaxRepeat_4 = true ;
    while (syntaxRepeat_4) {
      switch (select_goil_template_expression_parser_4 (inLexique)) {
        case 2 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_template_scanner::goil_template_scanner_1__2A_) COMMA_HERE) ;
          GGS_goilTemplateValue var_cas_leftExpression = var_cas_outValue ;
          GGS_goilTemplateType var_cas_leftType = var_cas_outResultType ;
          GGS_goilTemplateValue var_cas_rightExpression ;
          GGS_goilTemplateType var_cas_rightType ;
          nt_factor_ (inLexique, var_cas_inPrefix, var_cas_inPath, var_cas_inTemplateDirectory, var_cas_inVariableMap, var_cas_rightExpression, var_cas_rightType) ;
          ::routine_multiply_types_checkForTemplate (inLexique,  var_cas_leftType,  var_cas_rightType,  var_cas_outResultType COMMA_SOURCE_FILE_AT_LINE (970)) ;
          var_cas_outValue.mUnsigned64Value = var_cas_leftExpression.reader_mUnsigned64Value (inLexique COMMA_SOURCE_FILE_AT_LINE (971)).multiply_operation (inLexique, var_cas_rightExpression.reader_mUnsigned64Value (inLexique COMMA_SOURCE_FILE_AT_LINE (971)) COMMA_SOURCE_FILE_AT_LINE (971)) ;
          } break ;
        case 3 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_template_scanner::goil_template_scanner_1__2F_) COMMA_HERE) ;
          GGS_goilTemplateValue var_cas_leftExpression = var_cas_outValue ;
          GGS_goilTemplateType var_cas_leftType = var_cas_outResultType ;
          GGS_goilTemplateValue var_cas_rightExpression ;
          GGS_goilTemplateType var_cas_rightType ;
          nt_factor_ (inLexique, var_cas_inPrefix, var_cas_inPath, var_cas_inTemplateDirectory, var_cas_inVariableMap, var_cas_rightExpression, var_cas_rightType) ;
          ::routine_divide_types_checkForTemplate (inLexique,  var_cas_leftType,  var_cas_rightType,  var_cas_outResultType COMMA_SOURCE_FILE_AT_LINE (986)) ;
          var_cas_outValue.mUnsigned64Value = var_cas_leftExpression.reader_mUnsigned64Value (inLexique COMMA_SOURCE_FILE_AT_LINE (987)).divide_operation (inLexique, var_cas_rightExpression.reader_mUnsigned64Value (inLexique COMMA_SOURCE_FILE_AT_LINE (987)) COMMA_SOURCE_FILE_AT_LINE (987)) ;
          } break ;
        case 4 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_template_scanner::goil_template_scanner_1_mod) COMMA_HERE) ;
          GGS_goilTemplateValue var_cas_leftExpression = var_cas_outValue ;
          GGS_goilTemplateType var_cas_leftType = var_cas_outResultType ;
          GGS_goilTemplateValue var_cas_rightExpression ;
          GGS_goilTemplateType var_cas_rightType ;
          nt_factor_ (inLexique, var_cas_inPrefix, var_cas_inPath, var_cas_inTemplateDirectory, var_cas_inVariableMap, var_cas_rightExpression, var_cas_rightType) ;
          ::routine_modulo_types_checkForTemplate (inLexique,  var_cas_leftType,  var_cas_rightType,  var_cas_outResultType COMMA_SOURCE_FILE_AT_LINE (1002)) ;
          var_cas_outValue.mUnsigned64Value = var_cas_leftExpression.reader_mUnsigned64Value (inLexique COMMA_SOURCE_FILE_AT_LINE (1003)).modulo_operation (inLexique, var_cas_rightExpression.reader_mUnsigned64Value (inLexique COMMA_SOURCE_FILE_AT_LINE (1003)) COMMA_SOURCE_FILE_AT_LINE (1003)) ;
          } break ;
        default :
          syntaxRepeat_4 = false ;
          break ;
      }
    }
  }
}

//---------------------------------------------------------------------------*

void goil_template_expression_parser::
pr_term_goil_template_expression_parser_939_11_parse (goil_template_scanner & inLexique) {
  nt_factor_parse (inLexique) ;
  { bool syntaxRepeat_4 = true ;
    while (syntaxRepeat_4) {
      switch (select_goil_template_expression_parser_4 (inLexique)) {
        case 2 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_template_scanner::goil_template_scanner_1__2A_) COMMA_HERE) ;
          nt_factor_parse (inLexique) ;
          } break ;
        case 3 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_template_scanner::goil_template_scanner_1__2F_) COMMA_HERE) ;
          nt_factor_parse (inLexique) ;
          } break ;
        case 4 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_template_scanner::goil_template_scanner_1_mod) COMMA_HERE) ;
          nt_factor_parse (inLexique) ;
          } break ;
        default :
          syntaxRepeat_4 = false ;
          break ;
      }
    }
  }
  GGS_lstring::constructor_retrieveAndResetTemplateString (inLexique COMMA_HERE) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                Implementation of production rule 'factor'                 *
//                                                                           *
//---------------------------------------------------------------------------*

void goil_template_expression_parser::
pr_factor_goil_template_expression_parser_1013_13_ (goil_template_scanner & inLexique,
                                const GGS_string var_cas_inPrefix,
                                const GGS_string var_cas_inPath,
                                const GGS_string var_cas_inTemplateDirectory,
                                const GGS_goilTemplateVariableMap  var_cas_inVariableMap,
                                GGS_goilTemplateValue &var_cas_outValue,
                                GGS_goilTemplateType &var_cas_outResultType) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_template_scanner::goil_template_scanner_1__28_) COMMA_HERE) ;
  nt_expression_ (inLexique, var_cas_inPrefix, var_cas_inPath, var_cas_inTemplateDirectory, var_cas_inVariableMap, var_cas_outValue, var_cas_outResultType) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_template_scanner::goil_template_scanner_1__29_) COMMA_HERE) ;
}

//---------------------------------------------------------------------------*

void goil_template_expression_parser::
pr_factor_goil_template_expression_parser_1013_13_parse (goil_template_scanner & inLexique) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_template_scanner::goil_template_scanner_1__28_) COMMA_HERE) ;
  nt_expression_parse (inLexique) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_template_scanner::goil_template_scanner_1__29_) COMMA_HERE) ;
  GGS_lstring::constructor_retrieveAndResetTemplateString (inLexique COMMA_HERE) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                Implementation of production rule 'factor'                 *
//                                                                           *
//---------------------------------------------------------------------------*

void goil_template_expression_parser::
pr_factor_goil_template_expression_parser_1039_13_ (goil_template_scanner & inLexique,
                                const GGS_string var_cas_inPrefix,
                                const GGS_string var_cas_inPath,
                                const GGS_string var_cas_inTemplateDirectory,
                                const GGS_goilTemplateVariableMap  var_cas_inVariableMap,
                                GGS_goilTemplateValue &var_cas_outValue,
                                GGS_goilTemplateType &var_cas_outResultType) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_template_scanner::goil_template_scanner_1_not) COMMA_HERE) ;
  GGS_goilTemplateValue var_cas_expression ;
  GGS_goilTemplateType var_cas_operandType ;
  nt_factor_ (inLexique, var_cas_inPrefix, var_cas_inPath, var_cas_inTemplateDirectory, var_cas_inVariableMap, var_cas_expression, var_cas_operandType) ;
  var_cas_outValue = GGS_goilTemplateValue::constructor_new (GGS_uint64 (1ULL).substract_operation (inLexique, var_cas_expression.reader_mUnsigned64Value (inLexique COMMA_SOURCE_FILE_AT_LINE (1059)) COMMA_SOURCE_FILE_AT_LINE (1059)), GGS_string (""), GGS_goilTemplateFieldMapList ::constructor_emptyList ()) ;
  ::routine_checkNotOperatorForTemplate (inLexique,  var_cas_operandType,  var_cas_outResultType COMMA_SOURCE_FILE_AT_LINE (1063)) ;
}

//---------------------------------------------------------------------------*

void goil_template_expression_parser::
pr_factor_goil_template_expression_parser_1039_13_parse (goil_template_scanner & inLexique) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_template_scanner::goil_template_scanner_1_not) COMMA_HERE) ;
  nt_factor_parse (inLexique) ;
  GGS_lstring::constructor_retrieveAndResetTemplateString (inLexique COMMA_HERE) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                Implementation of production rule 'factor'                 *
//                                                                           *
//---------------------------------------------------------------------------*

void goil_template_expression_parser::
pr_factor_goil_template_expression_parser_1072_13_ (goil_template_scanner & inLexique,
                                const GGS_string var_cas_inPrefix,
                                const GGS_string var_cas_inPath,
                                const GGS_string var_cas_inTemplateDirectory,
                                const GGS_goilTemplateVariableMap  var_cas_inVariableMap,
                                GGS_goilTemplateValue &var_cas_outValue,
                                GGS_goilTemplateType &var_cas_outResultType) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_template_scanner::goil_template_scanner_1__7E_) COMMA_HERE) ;
  GGS_goilTemplateValue var_cas_value ;
  GGS_goilTemplateType var_cas_operandType ;
  nt_factor_ (inLexique, var_cas_inPrefix, var_cas_inPath, var_cas_inTemplateDirectory, var_cas_inVariableMap, var_cas_value, var_cas_operandType) ;
  var_cas_outValue = GGS_goilTemplateValue::constructor_new ((var_cas_value.reader_mUnsigned64Value (inLexique COMMA_SOURCE_FILE_AT_LINE (1092))).operator_tilde (), GGS_string (""), GGS_goilTemplateFieldMapList ::constructor_emptyList ()) ;
  ::routine_checkBitComplementOperatorForTemplate (inLexique,  var_cas_operandType,  var_cas_outResultType COMMA_SOURCE_FILE_AT_LINE (1096)) ;
}

//---------------------------------------------------------------------------*

void goil_template_expression_parser::
pr_factor_goil_template_expression_parser_1072_13_parse (goil_template_scanner & inLexique) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_template_scanner::goil_template_scanner_1__7E_) COMMA_HERE) ;
  nt_factor_parse (inLexique) ;
  GGS_lstring::constructor_retrieveAndResetTemplateString (inLexique COMMA_HERE) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                Implementation of production rule 'factor'                 *
//                                                                           *
//---------------------------------------------------------------------------*

void goil_template_expression_parser::
pr_factor_goil_template_expression_parser_1105_13_ (goil_template_scanner & inLexique,
                                const GGS_string /* var_cas_inPrefix */,
                                const GGS_string /* var_cas_inPath */,
                                const GGS_string /* var_cas_inTemplateDirectory */,
                                const GGS_goilTemplateVariableMap  /* var_cas_inVariableMap */,
                                GGS_goilTemplateValue &var_cas_outValue,
                                GGS_goilTemplateType &var_cas_outResultType) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_template_scanner::goil_template_scanner_1_yes) COMMA_HERE) ;
  var_cas_outValue = GGS_goilTemplateValue::constructor_new (GGS_uint64 (1ULL), GGS_string (""), GGS_goilTemplateFieldMapList ::constructor_emptyList ()) ;
  var_cas_outResultType = GGS_goilTemplateType::constructor_boolType (inLexique COMMA_HERE) ;
}

//---------------------------------------------------------------------------*

void goil_template_expression_parser::
pr_factor_goil_template_expression_parser_1105_13_parse (goil_template_scanner & inLexique) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_template_scanner::goil_template_scanner_1_yes) COMMA_HERE) ;
  GGS_lstring::constructor_retrieveAndResetTemplateString (inLexique COMMA_HERE) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                Implementation of production rule 'factor'                 *
//                                                                           *
//---------------------------------------------------------------------------*

void goil_template_expression_parser::
pr_factor_goil_template_expression_parser_1128_13_ (goil_template_scanner & inLexique,
                                const GGS_string /* var_cas_inPrefix */,
                                const GGS_string /* var_cas_inPath */,
                                const GGS_string /* var_cas_inTemplateDirectory */,
                                const GGS_goilTemplateVariableMap  /* var_cas_inVariableMap */,
                                GGS_goilTemplateValue &var_cas_outValue,
                                GGS_goilTemplateType &var_cas_outResultType) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_template_scanner::goil_template_scanner_1_no) COMMA_HERE) ;
  var_cas_outValue = GGS_goilTemplateValue::constructor_new (GGS_uint64 (0ULL), GGS_string (""), GGS_goilTemplateFieldMapList ::constructor_emptyList ()) ;
  var_cas_outResultType = GGS_goilTemplateType::constructor_boolType (inLexique COMMA_HERE) ;
}

//---------------------------------------------------------------------------*

void goil_template_expression_parser::
pr_factor_goil_template_expression_parser_1128_13_parse (goil_template_scanner & inLexique) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_template_scanner::goil_template_scanner_1_no) COMMA_HERE) ;
  GGS_lstring::constructor_retrieveAndResetTemplateString (inLexique COMMA_HERE) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                Implementation of production rule 'factor'                 *
//                                                                           *
//---------------------------------------------------------------------------*

void goil_template_expression_parser::
pr_factor_goil_template_expression_parser_1151_13_ (goil_template_scanner & inLexique,
                                const GGS_string /* var_cas_inPrefix */,
                                const GGS_string /* var_cas_inPath */,
                                const GGS_string /* var_cas_inTemplateDirectory */,
                                const GGS_goilTemplateVariableMap  /* var_cas_inVariableMap */,
                                GGS_goilTemplateValue &var_cas_outValue,
                                GGS_goilTemplateType &var_cas_outResultType) {
  GGS_luint64  var_cas_literalInt ;
  inLexique.assignFromAttribute_uint64value (var_cas_literalInt) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_template_scanner::goil_template_scanner_1_unsigned_5F_literal_5F_integer_36__34_) COMMA_HERE) ;
  var_cas_outValue = GGS_goilTemplateValue::constructor_new (var_cas_literalInt.reader_uint64 (inLexique COMMA_SOURCE_FILE_AT_LINE (1162)), GGS_string (""), GGS_goilTemplateFieldMapList ::constructor_emptyList ()) ;
  var_cas_outResultType = GGS_goilTemplateType::constructor_unsignedType (inLexique COMMA_HERE) ;
}

//---------------------------------------------------------------------------*

void goil_template_expression_parser::
pr_factor_goil_template_expression_parser_1151_13_parse (goil_template_scanner & inLexique) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_template_scanner::goil_template_scanner_1_unsigned_5F_literal_5F_integer_36__34_) COMMA_HERE) ;
  GGS_lstring::constructor_retrieveAndResetTemplateString (inLexique COMMA_HERE) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                Implementation of production rule 'factor'                 *
//                                                                           *
//---------------------------------------------------------------------------*

void goil_template_expression_parser::
pr_factor_goil_template_expression_parser_1175_13_ (goil_template_scanner & inLexique,
                                const GGS_string /* var_cas_inPrefix */,
                                const GGS_string /* var_cas_inPath */,
                                const GGS_string /* var_cas_inTemplateDirectory */,
                                const GGS_goilTemplateVariableMap  /* var_cas_inVariableMap */,
                                GGS_goilTemplateValue &var_cas_outValue,
                                GGS_goilTemplateType &var_cas_outResultType) {
  GGS_lstring  var_cas_literalString ;
  inLexique.assignFromAttribute_a_string (var_cas_literalString) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_template_scanner::goil_template_scanner_1_string) COMMA_HERE) ;
  var_cas_outValue = GGS_goilTemplateValue::constructor_new (GGS_uint64 (0ULL), var_cas_literalString.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1186)), GGS_goilTemplateFieldMapList ::constructor_emptyList ()) ;
  var_cas_outResultType = GGS_goilTemplateType::constructor_stringType (inLexique COMMA_HERE) ;
}

//---------------------------------------------------------------------------*

void goil_template_expression_parser::
pr_factor_goil_template_expression_parser_1175_13_parse (goil_template_scanner & inLexique) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_template_scanner::goil_template_scanner_1_string) COMMA_HERE) ;
  GGS_lstring::constructor_retrieveAndResetTemplateString (inLexique COMMA_HERE) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                Implementation of production rule 'factor'                 *
//                                                                           *
//---------------------------------------------------------------------------*

void goil_template_expression_parser::
pr_factor_goil_template_expression_parser_1199_13_ (goil_template_scanner & inLexique,
                                const GGS_string var_cas_inPrefix,
                                const GGS_string var_cas_inPath,
                                const GGS_string var_cas_inTemplateDirectory,
                                const GGS_goilTemplateVariableMap  var_cas_inVariableMap,
                                GGS_goilTemplateValue &var_cas_outValue,
                                GGS_goilTemplateType &var_cas_outResultType) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_template_scanner::goil_template_scanner_1__5B_) COMMA_HERE) ;
  GGS_goilTemplateValue var_cas_expressionValue ;
  GGS_goilTemplateType var_cas_expressionType ;
  nt_expression_ (inLexique, var_cas_inPrefix, var_cas_inPath, var_cas_inTemplateDirectory, var_cas_inVariableMap, var_cas_expressionValue, var_cas_expressionType) ;
  GGS_lstring  var_cas_templateMethodName ;
  inLexique.assignFromAttribute_tokenString (var_cas_templateMethodName) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_template_scanner::goil_template_scanner_1_identifier) COMMA_HERE) ;
  GGS_goilTemplateExpressionList  var_cas_expressionList = GGS_goilTemplateExpressionList ::constructor_emptyList () ;
  switch (select_goil_template_expression_parser_5 (inLexique)) {
    case 1 : {
      } break ;
    case 2 : {
      inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_template_scanner::goil_template_scanner_1__3A_) COMMA_HERE) ;
      { bool syntaxRepeat_6 = true ;
        while (syntaxRepeat_6) {
            GGS_goilTemplateValue var_cas_expression ;
            GGS_goilTemplateType var_cas_resultType ;
            nt_expression_ (inLexique, var_cas_inPrefix, var_cas_inPath, var_cas_inTemplateDirectory, var_cas_inVariableMap, var_cas_expression, var_cas_resultType) ;
            var_cas_expressionList.addAssign_operation (var_cas_expression, var_cas_resultType) ;
          switch (select_goil_template_expression_parser_6 (inLexique)) {
            case 2 : {
              inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_template_scanner::goil_template_scanner_1__2C_) COMMA_HERE) ;
              } break ;
            default :
              syntaxRepeat_6 = false ;
              break ;
          }
        }
      }
      } break ;
    default :
      break ;
  }
  inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_template_scanner::goil_template_scanner_1__5D_) COMMA_HERE) ;
  ::routine_templateMethodInvocation (inLexique,  var_cas_expressionType,  var_cas_expressionValue,  var_cas_templateMethodName,  var_cas_expressionList,  var_cas_outResultType,  var_cas_outValue COMMA_SOURCE_FILE_AT_LINE (1245)) ;
}

//---------------------------------------------------------------------------*

void goil_template_expression_parser::
pr_factor_goil_template_expression_parser_1199_13_parse (goil_template_scanner & inLexique) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_template_scanner::goil_template_scanner_1__5B_) COMMA_HERE) ;
  nt_expression_parse (inLexique) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_template_scanner::goil_template_scanner_1_identifier) COMMA_HERE) ;
  switch (select_goil_template_expression_parser_5 (inLexique)) {
    case 1 : {
      } break ;
    case 2 : {
      inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_template_scanner::goil_template_scanner_1__3A_) COMMA_HERE) ;
      { bool syntaxRepeat_6 = true ;
        while (syntaxRepeat_6) {
            nt_expression_parse (inLexique) ;
          switch (select_goil_template_expression_parser_6 (inLexique)) {
            case 2 : {
              inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_template_scanner::goil_template_scanner_1__2C_) COMMA_HERE) ;
              } break ;
            default :
              syntaxRepeat_6 = false ;
              break ;
          }
        }
      }
      } break ;
    default :
      break ;
  }
  inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_template_scanner::goil_template_scanner_1__5D_) COMMA_HERE) ;
  GGS_lstring::constructor_retrieveAndResetTemplateString (inLexique COMMA_HERE) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                  Implementation of routine "typeError"                    *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_typeError (C_Compiler & inLexique,
                                const GGS_lstring   var_cas_inFunctionName,
                                const GGS_type  var_cas_inActualType,
                                const GGS_string  var_cas_inExpectedTypeName,
                                const GGS_uint   var_cas_inParameterIndex COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_typeError at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  GGS_string var_cas_m = ((((GGS_string ("the function requires the parameter ")).operator_concat (var_cas_inParameterIndex.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1269)))).operator_concat (GGS_string (" to be "))).operator_concat (var_cas_inExpectedTypeName)).operator_concat (GGS_string ("; its type is ")) ;
  const GGS_bool cond_46412 = (var_cas_inActualType).operator_isEqual (GGS_type  (& kTypeDescriptor_GGS_bool)) ;
  if (cond_46412.isBuiltAndTrue ()) {
    var_cas_m.appendCString ("boolean") ;
  }else if (cond_46412.isBuiltAndFalse ()) {
    const GGS_bool cond_46471 = (var_cas_inActualType).operator_isEqual (GGS_type  (& kTypeDescriptor_GGS_uint64)) ;
    if (cond_46471.isBuiltAndTrue ()) {
      var_cas_m.appendCString ("unsigned") ;
    }else if (cond_46471.isBuiltAndFalse ()) {
      const GGS_bool cond_46527 = (var_cas_inActualType).operator_isEqual (GGS_type  (& kTypeDescriptor_GGS_string)) ;
      if (cond_46527.isBuiltAndTrue ()) {
        var_cas_m.appendCString ("string") ;
      }else if (cond_46527.isBuiltAndFalse ()) {
        var_cas_m.appendCString ("a not allowed type") ;
      }
    }
  }
  var_cas_inFunctionName.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, var_cas_m COMMA_SOURCE_FILE_AT_LINE (1282)) ;
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_typeError\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//                Implementation of production rule 'factor'                 *
//                                                                           *
//---------------------------------------------------------------------------*

void goil_template_expression_parser::
pr_factor_goil_template_expression_parser_1286_13_ (goil_template_scanner & inLexique,
                                const GGS_string var_cas_inPrefix,
                                const GGS_string var_cas_inPath,
                                const GGS_string var_cas_inTemplateDirectory,
                                const GGS_goilTemplateVariableMap  var_cas_inVariableMap,
                                GGS_goilTemplateValue &var_cas_outValue,
                                GGS_goilTemplateType &var_cas_outResultType) {
  GGS_lstring  var_cas_functionOrVariableName ;
  inLexique.assignFromAttribute_tokenString (var_cas_functionOrVariableName) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_template_scanner::goil_template_scanner_1_identifier) COMMA_HERE) ;
  switch (select_goil_template_expression_parser_7 (inLexique)) {
    case 1 : {
      const GGS_goilTemplateVariableMap  temp_46995 = var_cas_inVariableMap ;
      if (temp_46995.isBuilt ()) {
        temp_46995 (HERE)->method_searchKey (inLexique, var_cas_functionOrVariableName, var_cas_outResultType, var_cas_outValue COMMA_SOURCE_FILE_AT_LINE (1297)) ;
      }
      } break ;
    case 2 : {
      GGS_function var_cas_f ;
      const GGS_bool cond_47320 = (GGS_function::constructor_isFunctionDefined (var_cas_functionOrVariableName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1301)))).operator_not () ;
      if (cond_47320.isBuiltAndTrue ()) {
        var_cas_functionOrVariableName.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((GGS_string ("there is no '")).operator_concat (var_cas_functionOrVariableName)).operator_concat (GGS_string ("' function defined in GOIL template language")) COMMA_SOURCE_FILE_AT_LINE (1303)) ;
        var_cas_f.drop () ;
      }else if (cond_47320.isBuiltAndFalse ()) {
        var_cas_f = GGS_function::constructor_functionWithName (var_cas_functionOrVariableName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1304))) ;
      }
      GGS_goilTemplateExpressionList  var_cas_actualArgumentList = GGS_goilTemplateExpressionList ::constructor_emptyList () ;
      inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_template_scanner::goil_template_scanner_1__28_) COMMA_HERE) ;
      { bool syntaxRepeat_8 = true ;
        while (syntaxRepeat_8) {
            GGS_goilTemplateValue var_cas_expression ;
            GGS_goilTemplateType var_cas_resultType ;
            nt_expression_ (inLexique, var_cas_inPrefix, var_cas_inPath, var_cas_inTemplateDirectory, var_cas_inVariableMap, var_cas_expression, var_cas_resultType) ;
            var_cas_actualArgumentList.addAssign_operation (var_cas_expression, var_cas_resultType) ;
          switch (select_goil_template_expression_parser_8 (inLexique)) {
            case 2 : {
              inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_template_scanner::goil_template_scanner_1__2C_) COMMA_HERE) ;
              } break ;
            default :
              syntaxRepeat_8 = false ;
              break ;
          }
        }
      }
      inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_template_scanner::goil_template_scanner_1__29_) COMMA_HERE) ;
      GGS_objectlist  var_cas_actualArgumentObjectList = GGS_objectlist ::constructor_emptyList () ;
      const GGS_typelist  var_cas_formalParameterList = var_cas_f.reader_formalParameterTypeList () ;
      const GGS_bool cond_48454 = (var_cas_formalParameterList.reader_length ()).operator_isNotEqual (var_cas_actualArgumentList.reader_length ()) ;
      if (cond_48454.isBuiltAndTrue ()) {
        var_cas_functionOrVariableName.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, (((((((GGS_string ("this function is invoked with ")).operator_concat (var_cas_actualArgumentList.reader_length ().reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1330)))).operator_concat (GGS_string (" parameter"))).operator_concat ((((var_cas_actualArgumentList.reader_length ()).operator_strictSup (GGS_uint (1U))).isBuiltAndTrue () ? (GGS_string ("s")) : (GGS_string (""))))).operator_concat (GGS_string (", but requires "))).operator_concat (var_cas_formalParameterList.reader_length ().reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1333)))).operator_concat (GGS_string (" parameter"))).operator_concat ((((var_cas_formalParameterList.reader_length ()).operator_strictSup (GGS_uint (1U))).isBuiltAndTrue () ? (GGS_string ("s")) : (GGS_string ("")))) COMMA_SOURCE_FILE_AT_LINE (1336)) ;
        var_cas_outValue.drop () ;
        var_cas_outResultType.drop () ;
      }else if (cond_48454.isBuiltAndFalse ()) {
        GGS_uint  var_cas_idx = GGS_uint (1U) ;
        {
          GGS_typelist::cEnumerator enumerator_48510 (var_cas_formalParameterList, true) ;
          const GGS_typelist::cElement * operand_48510 = NULL ;
          GGS_goilTemplateExpressionList::cEnumerator enumerator_48549 (var_cas_actualArgumentList, true) ;
          const GGS_goilTemplateExpressionList::cElement * operand_48549 = NULL ;
          while (((operand_48510 = enumerator_48510.nextObject ()))
              && ((operand_48549 = enumerator_48549.nextObject ()))) {
            macroValidPointer (operand_48510) ;
            macroValidPointer (operand_48549) ;
            switch (operand_48549->mType.enumValue ()) {
            case GGS_goilTemplateType::enum_boolType:
              {
              const GGS_bool cond_48757 = (operand_48510->mValue).operator_isNotEqual (GGS_type  (& kTypeDescriptor_GGS_bool)) ;
              if (cond_48757.isBuiltAndTrue ()) {
                ::routine_typeError (inLexique,  var_cas_functionOrVariableName,  operand_48510->mValue,  GGS_string ("boolean"),  var_cas_idx COMMA_SOURCE_FILE_AT_LINE (1342)) ;
              }
              var_cas_actualArgumentObjectList.addAssign_operation ((((operand_48549->mValue.reader_mUnsigned64Value (inLexique COMMA_SOURCE_FILE_AT_LINE (1344))).operator_isEqual (GGS_uint64 (0ULL))).isBuiltAndTrue () ? (GGS_bool (false)) : (GGS_bool (true))).reader_object ()) ;
              }
              break ;
            case GGS_goilTemplateType::enum_unsignedType:
              {
              const GGS_bool cond_49042 = (operand_48510->mValue).operator_isNotEqual (GGS_type  (& kTypeDescriptor_GGS_uint64)) ;
              if (cond_49042.isBuiltAndTrue ()) {
                ::routine_typeError (inLexique,  var_cas_functionOrVariableName,  operand_48510->mValue,  GGS_string ("unsigned"),  var_cas_idx COMMA_SOURCE_FILE_AT_LINE (1347)) ;
              }
              var_cas_actualArgumentObjectList.addAssign_operation (operand_48549->mValue.reader_mUnsigned64Value (inLexique COMMA_SOURCE_FILE_AT_LINE (1349)).reader_object ()) ;
              }
              break ;
            case GGS_goilTemplateType::enum_stringType:
              {
              const GGS_bool cond_49289 = (operand_48510->mValue).operator_isNotEqual (GGS_type  (& kTypeDescriptor_GGS_string)) ;
              if (cond_49289.isBuiltAndTrue ()) {
                ::routine_typeError (inLexique,  var_cas_functionOrVariableName,  operand_48510->mValue,  GGS_string ("string"),  var_cas_idx COMMA_SOURCE_FILE_AT_LINE (1352)) ;
              }
              var_cas_actualArgumentObjectList.addAssign_operation (operand_48549->mValue.reader_mStringValue (inLexique COMMA_SOURCE_FILE_AT_LINE (1354)).reader_object ()) ;
              }
              break ;
            case GGS_goilTemplateType::enum_listType:
              {
              ::routine_typeError (inLexique,  var_cas_functionOrVariableName,  operand_48510->mValue,  GGS_string ("string"),  var_cas_idx COMMA_SOURCE_FILE_AT_LINE (1356)) ;
              }
              break ;
            case GGS_goilTemplateType::kNotBuilt:
              break ;
            }
            var_cas_idx.increment_operation (inLexique COMMA_SOURCE_FILE_AT_LINE (1358)) ;
          }
        }
        var_cas_outResultType = GGS_goilTemplateType::constructor_unsignedType (inLexique COMMA_HERE) ;
        var_cas_outValue = GGS_goilTemplateValue::constructor_new (GGS_uint64 (0ULL), GGS_string (""), GGS_goilTemplateFieldMapList ::constructor_emptyList ()) ;
        const GGS_bool cond_50626 = (GGS_uint ::constructor_errorCount (inLexique COMMA_HERE)).operator_isEqual (GGS_uint (0U)) ;
        if (cond_50626.isBuiltAndTrue ()) {
          const GGS_object var_cas_result = var_cas_f.reader_invoke (inLexique, var_cas_actualArgumentObjectList, var_cas_functionOrVariableName.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (1363)) COMMA_SOURCE_FILE_AT_LINE (1363)) ;
          const GGS_bool cond_50053 = (var_cas_result.reader_objectDynamicType ()).operator_isEqual (GGS_type  (& kTypeDescriptor_GGS_uint64)) ;
          if (cond_50053.isBuiltAndTrue ()) {
            var_cas_outResultType = GGS_goilTemplateType::constructor_unsignedType (inLexique COMMA_HERE) ;
            var_cas_outValue.mUnsigned64Value = GGS_uint64::castFromObject (inLexique, var_cas_result, var_cas_functionOrVariableName COMMA_SOURCE_FILE_AT_LINE (1366)) ;
          }else if (cond_50053.isBuiltAndFalse ()) {
            const GGS_bool cond_50275 = (var_cas_result.reader_objectDynamicType ()).operator_isEqual (GGS_type  (& kTypeDescriptor_GGS_bool)) ;
            if (cond_50275.isBuiltAndTrue ()) {
              var_cas_outResultType = GGS_goilTemplateType::constructor_boolType (inLexique COMMA_HERE) ;
              var_cas_outValue.mUnsigned64Value = GGS_bool::castFromObject (inLexique, var_cas_result, var_cas_functionOrVariableName COMMA_SOURCE_FILE_AT_LINE (1369)).reader_uint64 (inLexique COMMA_SOURCE_FILE_AT_LINE (1369)) ;
            }else if (cond_50275.isBuiltAndFalse ()) {
              const GGS_bool cond_50489 = (var_cas_result.reader_objectDynamicType ()).operator_isEqual (GGS_type  (& kTypeDescriptor_GGS_string)) ;
              if (cond_50489.isBuiltAndTrue ()) {
                var_cas_outResultType = GGS_goilTemplateType::constructor_stringType (inLexique COMMA_HERE) ;
                var_cas_outValue.mStringValue = GGS_string::castFromObject (inLexique, var_cas_result, var_cas_functionOrVariableName COMMA_SOURCE_FILE_AT_LINE (1372)) ;
              }else if (cond_50489.isBuiltAndFalse ()) {
                var_cas_functionOrVariableName.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("this function does not return an unsigned, boolean or string value") COMMA_SOURCE_FILE_AT_LINE (1375)) ;
              }
            }
          }
        }
      }
      } break ;
    default :
      break ;
  }
}

//---------------------------------------------------------------------------*

void goil_template_expression_parser::
pr_factor_goil_template_expression_parser_1286_13_parse (goil_template_scanner & inLexique) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_template_scanner::goil_template_scanner_1_identifier) COMMA_HERE) ;
  switch (select_goil_template_expression_parser_7 (inLexique)) {
    case 1 : {
      } break ;
    case 2 : {
      inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_template_scanner::goil_template_scanner_1__28_) COMMA_HERE) ;
      { bool syntaxRepeat_8 = true ;
        while (syntaxRepeat_8) {
            nt_expression_parse (inLexique) ;
          switch (select_goil_template_expression_parser_8 (inLexique)) {
            case 2 : {
              inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_template_scanner::goil_template_scanner_1__2C_) COMMA_HERE) ;
              } break ;
            default :
              syntaxRepeat_8 = false ;
              break ;
          }
        }
      }
      inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_template_scanner::goil_template_scanner_1__29_) COMMA_HERE) ;
      } break ;
    default :
      break ;
  }
  GGS_lstring::constructor_retrieveAndResetTemplateString (inLexique COMMA_HERE) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                Implementation of production rule 'factor'                 *
//                                                                           *
//---------------------------------------------------------------------------*

void goil_template_expression_parser::
pr_factor_goil_template_expression_parser_1383_13_ (goil_template_scanner & inLexique,
                                const GGS_string var_cas_inPrefix,
                                const GGS_string var_cas_inPath,
                                const GGS_string var_cas_inTemplateDirectory,
                                const GGS_goilTemplateVariableMap  var_cas_inVariableMap,
                                GGS_goilTemplateValue &var_cas_outValue,
                                GGS_goilTemplateType &var_cas_outResultType) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_template_scanner::goil_template_scanner_1_exists) COMMA_HERE) ;
  GGS_lstring  var_cas_variableName ;
  inLexique.assignFromAttribute_tokenString (var_cas_variableName) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_template_scanner::goil_template_scanner_1_identifier) COMMA_HERE) ;
  switch (select_goil_template_expression_parser_9 (inLexique)) {
    case 1 : {
      inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_template_scanner::goil_template_scanner_1_default) COMMA_HERE) ;
      GGS_goilTemplateValue var_cas_expression ;
      GGS_goilTemplateType var_cas_resultType ;
      inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_template_scanner::goil_template_scanner_1__28_) COMMA_HERE) ;
      nt_expression_ (inLexique, var_cas_inPrefix, var_cas_inPath, var_cas_inTemplateDirectory, var_cas_inVariableMap, var_cas_expression, var_cas_resultType) ;
      inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_template_scanner::goil_template_scanner_1__29_) COMMA_HERE) ;
      const GGS_bool cond_51380 = var_cas_inVariableMap.reader_hasKey (var_cas_variableName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1406))) ;
      if (cond_51380.isBuiltAndTrue ()) {
        const GGS_goilTemplateVariableMap  temp_51332 = var_cas_inVariableMap ;
        if (temp_51332.isBuilt ()) {
          temp_51332 (HERE)->method_searchKey (inLexique, var_cas_variableName, var_cas_resultType, var_cas_expression COMMA_SOURCE_FILE_AT_LINE (1407)) ;
        }
      }
      var_cas_outValue = var_cas_expression ;
      var_cas_outResultType = var_cas_resultType ;
      } break ;
    case 2 : {
      const GGS_bool cond_51608 = var_cas_inVariableMap.reader_hasKey (var_cas_variableName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1412))) ;
      if (cond_51608.isBuiltAndTrue ()) {
        var_cas_outValue = GGS_goilTemplateValue::constructor_new (GGS_uint64 (1ULL), GGS_string (""), GGS_goilTemplateFieldMapList ::constructor_emptyList ()) ;
      }else if (cond_51608.isBuiltAndFalse ()) {
        var_cas_outValue = GGS_goilTemplateValue::constructor_new (GGS_uint64 (0ULL), GGS_string (""), GGS_goilTemplateFieldMapList ::constructor_emptyList ()) ;
      }
      var_cas_outResultType = GGS_goilTemplateType::constructor_boolType (inLexique COMMA_HERE) ;
      } break ;
    default :
      break ;
  }
}

//---------------------------------------------------------------------------*

void goil_template_expression_parser::
pr_factor_goil_template_expression_parser_1383_13_parse (goil_template_scanner & inLexique) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_template_scanner::goil_template_scanner_1_exists) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_template_scanner::goil_template_scanner_1_identifier) COMMA_HERE) ;
  switch (select_goil_template_expression_parser_9 (inLexique)) {
    case 1 : {
      inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_template_scanner::goil_template_scanner_1_default) COMMA_HERE) ;
      inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_template_scanner::goil_template_scanner_1__28_) COMMA_HERE) ;
      nt_expression_parse (inLexique) ;
      inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_template_scanner::goil_template_scanner_1__29_) COMMA_HERE) ;
      } break ;
    case 2 : {
      } break ;
    default :
      break ;
  }
  GGS_lstring::constructor_retrieveAndResetTemplateString (inLexique COMMA_HERE) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                Implementation of production rule 'factor'                 *
//                                                                           *
//---------------------------------------------------------------------------*

void goil_template_expression_parser::
pr_factor_goil_template_expression_parser_1423_13_ (goil_template_scanner & inLexique,
                                const GGS_string /* var_cas_inPrefix */,
                                const GGS_string /* var_cas_inPath */,
                                const GGS_string /* var_cas_inTemplateDirectory */,
                                const GGS_goilTemplateVariableMap  /* var_cas_inVariableMap */,
                                GGS_goilTemplateValue &var_cas_outValue,
                                GGS_goilTemplateType &var_cas_outResultType) {
  switch (select_goil_template_expression_parser_10 (inLexique)) {
    case 1 : {
      inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_template_scanner::goil_template_scanner_1_true) COMMA_HERE) ;
      var_cas_outValue = GGS_goilTemplateValue::constructor_new (GGS_uint64 (1ULL), GGS_string (""), GGS_goilTemplateFieldMapList ::constructor_emptyList ()) ;
      } break ;
    case 2 : {
      inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_template_scanner::goil_template_scanner_1_false) COMMA_HERE) ;
      var_cas_outValue = GGS_goilTemplateValue::constructor_new (GGS_uint64 (0ULL), GGS_string (""), GGS_goilTemplateFieldMapList ::constructor_emptyList ()) ;
      } break ;
    default :
      break ;
  }
  var_cas_outResultType = GGS_goilTemplateType::constructor_boolType (inLexique COMMA_HERE) ;
}

//---------------------------------------------------------------------------*

void goil_template_expression_parser::
pr_factor_goil_template_expression_parser_1423_13_parse (goil_template_scanner & inLexique) {
  switch (select_goil_template_expression_parser_10 (inLexique)) {
    case 1 : {
      inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_template_scanner::goil_template_scanner_1_true) COMMA_HERE) ;
      } break ;
    case 2 : {
      inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_template_scanner::goil_template_scanner_1_false) COMMA_HERE) ;
      } break ;
    default :
      break ;
  }
  GGS_lstring::constructor_retrieveAndResetTemplateString (inLexique COMMA_HERE) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                Implementation of production rule 'factor'                 *
//                                                                           *
//---------------------------------------------------------------------------*

void goil_template_expression_parser::
pr_factor_goil_template_expression_parser_1443_13_ (goil_template_scanner & inLexique,
                                const GGS_string /* var_cas_inPrefix */,
                                const GGS_string /* var_cas_inPath */,
                                const GGS_string /* var_cas_inTemplateDirectory */,
                                const GGS_goilTemplateVariableMap  /* var_cas_inVariableMap */,
                                GGS_goilTemplateValue &var_cas_outValue,
                                GGS_goilTemplateType &var_cas_outResultType) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_template_scanner::goil_template_scanner_1_emptylist) COMMA_HERE) ;
  var_cas_outValue = GGS_goilTemplateValue::constructor_new (GGS_uint64 (0ULL), GGS_string (""), GGS_goilTemplateFieldMapList ::constructor_emptyList ()) ;
  var_cas_outResultType = GGS_goilTemplateType::constructor_listType (inLexique COMMA_HERE) ;
}

//---------------------------------------------------------------------------*

void goil_template_expression_parser::
pr_factor_goil_template_expression_parser_1443_13_parse (goil_template_scanner & inLexique) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_template_scanner::goil_template_scanner_1_emptylist) COMMA_HERE) ;
  GGS_lstring::constructor_retrieveAndResetTemplateString (inLexique COMMA_HERE) ;
}

//---------------------------------------------------------------------------*

