//---------------------------------------------------------------------------*
//                                                                           *
//                        File 'resources_verif.cpp'                         *
//                        Generated by version 2.0.0                         *
//                       july 7th, 2010, at 17h16'14"                        *
//                                                                           *
//---------------------------------------------------------------------------*

//--- START OF USER ZONE 1


//--- END OF USER ZONE 1

//---------------------------------------------------------------------------*

#include "version_libpm.h"
#if CURRENT_LIBPM_VERSION != 820
  #error "This file has been compiled with a version of GALGAS that uses libpm version 820, different than the current version (CURRENT_LIBPM_VERSION) of libpm"
#endif

//---------------------------------------------------------------------------*

#include <typeinfo>
#include "utilities/MF_MemoryControl.h"
#include "files/C_TextFileWrite.h"
#include "galgas/C_galgas_CLI_Options.h"
#include "resources_verif.h"

//---------------------------------------------------------------------------*

#ifndef DO_NOT_GENERATE_CHECKINGS
  #define SOURCE_FILE_AT_LINE(line) "resources_verif.gSemantics", line
  #define COMMA_SOURCE_FILE_AT_LINE(line) , SOURCE_FILE_AT_LINE(line)
#else
  #define SOURCE_FILE_AT_LINE(line) 
  #define COMMA_SOURCE_FILE_AT_LINE(line) 
#endif


//--- START OF USER ZONE 2


//--- END OF USER ZONE 2

//---------------------------------------------------------------------------*
//                                                                           *
//            Implementation of routine "resources_well_formed"              *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_resources_well_formed (C_Compiler & inLexique,
                                const GGS_resource_map   var_cas_resources
                        COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_resources_well_formed at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  {
    GGS_resource_map::cEnumerator enumerator_913 (var_cas_resources, true) ;
    const GGS_resource_map::cElement * operand_913 = NULL ;
    while (((operand_913 = enumerator_913.nextObject ()))) {
      macroValidPointer (operand_913) ;
      { const GGS_resource_property_obj _var_1165 = operand_913->mInfo.resource.reader_property (inLexique COMMA_SOURCE_FILE_AT_LINE (47)) ; // CAST instruction
        if (_var_1165.getPtr () != NULL) {
          macroValidPointer (_var_1165.getPtr ()) ;
          if (typeid (cPtr_resource_property_void_obj) == typeid (* (_var_1165.getPtr ()))) {
            operand_913->mKey.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, (GGS_string ("RESOURCEPROPERTY attribute undefined for RESOURCE ")).operator_concat (operand_913->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (49))) COMMA_SOURCE_FILE_AT_LINE (50)) ;
          }else{
          }
        }
      }
    }
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_resources_well_formed\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//           Implementation of routine "resolve_linked_resources"            *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_resolve_linked_resources (C_Compiler & inLexique,
                                GGS_resource_map  & var_cas_resources
                        COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_resolve_linked_resources at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  GGS_resource_map  var_cas_resolved = GGS_resource_map ::constructor_emptyMap (inLexique COMMA_SOURCE_FILE_AT_LINE (69)) ;
  GGS_resource_map  var_cas_unresolved = var_cas_resources ;
  GGS_resource_map  var_cas_unresolved_next = GGS_resource_map ::constructor_emptyMap (inLexique COMMA_SOURCE_FILE_AT_LINE (71)) ;
  GGS_bool var_cas_first_loop = GGS_bool (true) ;
  GGS_uint _variant_4218 = var_cas_unresolved.reader_count ().substract_operation (inLexique, var_cas_unresolved_next.reader_count () COMMA_SOURCE_FILE_AT_LINE (74)).add_operation (inLexique, GGS_uint (1U) COMMA_SOURCE_FILE_AT_LINE (74)) ;
  GGS_bool _condition_4218 (_variant_4218.isBuilt (), true) ;
  while (_condition_4218.isBuiltAndTrue ()) {
    const GGS_bool cond_1817 = var_cas_first_loop ;
    if (cond_1817.isBuiltAndTrue ()) {
      var_cas_first_loop = GGS_bool (false) ;
    }else if (cond_1817.isBuiltAndFalse ()) {
      var_cas_unresolved = var_cas_unresolved_next ;
      var_cas_unresolved_next = GGS_resource_map ::constructor_emptyMap (inLexique COMMA_SOURCE_FILE_AT_LINE (78)) ;
    }
    _condition_4218 = (var_cas_unresolved.reader_count ()).operator_strictSup (GGS_uint (0U)) ;
    if (_condition_4218.isBuiltAndTrue ()) {
      if (_variant_4218.uintValue () == 0) {
        inLexique.onTheFlyRunTimeError ("loop variant error" COMMA_SOURCE_FILE_AT_LINE (133)) ;
        _condition_4218 = GGS_bool (false) ;
      }else{
        _variant_4218.decrement_operation (inLexique COMMA_HERE) ;
        {
          GGS_resource_map::cEnumerator enumerator_1978 (var_cas_unresolved, true) ;
          const GGS_resource_map::cElement * operand_1978 = NULL ;
          while (((operand_1978 = enumerator_1978.nextObject ()))) {
            macroValidPointer (operand_1978) ;
            GGS_resource_property_obj  var_cas_res_prop ;
            var_cas_res_prop = operand_1978->mInfo.resource.reader_property (inLexique COMMA_SOURCE_FILE_AT_LINE (84)) ;
            { const GGS_resource_property_obj _var_3925 = var_cas_res_prop ; // CAST instruction
              if (_var_3925.getPtr () != NULL) {
                macroValidPointer (_var_3925.getPtr ()) ;
                if (typeid (cPtr_resource_property_linked_obj) == typeid (* (_var_3925.getPtr ()))) {
                  const GGS_resource_property_linked_obj var_cas_rplo (_var_3925.getPtr ()) ;
                  const GGS_bool cond_3750 = var_cas_resolved.reader_hasKey (var_cas_rplo.reader_linked_resource (inLexique COMMA_SOURCE_FILE_AT_LINE (92)).reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (92))) ;
                  if (cond_3750.isBuiltAndTrue ()) {
                    GGS_resource_obj  var_cas_target_resource ;
                    GGS_resource_property_obj  var_cas_target_property ;
                    if (var_cas_resolved.isBuilt ()) {
                      var_cas_resolved (HERE)->method_get (inLexique, var_cas_rplo.reader_linked_resource (inLexique COMMA_SOURCE_FILE_AT_LINE (95)), var_cas_target_resource COMMA_SOURCE_FILE_AT_LINE (95)) ;
                    }
                    var_cas_target_property = var_cas_target_resource.reader_property (inLexique COMMA_SOURCE_FILE_AT_LINE (96)) ;
                    { const GGS_resource_property_obj _var_3654 = var_cas_target_property ; // CAST instruction
                      if (_var_3654.getPtr () != NULL) {
                        macroValidPointer (_var_3654.getPtr ()) ;
                        if (typeid (cPtr_resource_property_standard_obj) == typeid (* (_var_3654.getPtr ()))) {
                          var_cas_resolved.modifier_put (inLexique, operand_1978->mKey, operand_1978->mInfo.resource COMMA_SOURCE_FILE_AT_LINE (101)) ;
                        }else if (typeid (cPtr_resource_property_internal_obj) == typeid (* (_var_3654.getPtr ()))) {
                          var_cas_target_property.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (105)).reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, (((GGS_string ("RESOURCE ")).operator_concat (operand_1978->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (105)))).operator_concat (GGS_string (" is linked to INTERNAL RESOURCE "))).operator_concat (var_cas_rplo.reader_linked_resource (inLexique COMMA_SOURCE_FILE_AT_LINE (105)).reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (105))) COMMA_SOURCE_FILE_AT_LINE (108)) ;
                        }else if (typeid (cPtr_resource_property_linked_obj) == typeid (* (_var_3654.getPtr ()))) {
                          const GGS_resource_property_linked_obj var_cas_nrplo (_var_3654.getPtr ()) ;
                          GGS_resource_property_linked_obj  var_cas_resolved_prop = GGS_resource_property_linked_obj ::constructor_new (inLexique, var_cas_nrplo.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (110)), var_cas_nrplo.reader_linked_resource (inLexique COMMA_SOURCE_FILE_AT_LINE (110)) COMMA_SOURCE_FILE_AT_LINE (110)) ;
                          GGS_lstring  var_cas_resolved_desc = operand_1978->mInfo.resource.reader_desc (inLexique COMMA_SOURCE_FILE_AT_LINE (111)) ;
                          GGS_resource_obj  var_cas_resolved_res = GGS_resource_obj ::constructor_new (inLexique, var_cas_resolved_desc, var_cas_resolved_prop, operand_1978->mInfo.resource.reader_acc_apps (inLexique COMMA_SOURCE_FILE_AT_LINE (112)) COMMA_SOURCE_FILE_AT_LINE (112)) ;
                          var_cas_resolved.modifier_put (inLexique, operand_1978->mKey, var_cas_resolved_res COMMA_SOURCE_FILE_AT_LINE (113)) ;
                        }else{
                        }
                      }
                    }
                  }else if (cond_3750.isBuiltAndFalse ()) {
                    var_cas_unresolved_next.modifier_put (inLexique, operand_1978->mKey, operand_1978->mInfo.resource COMMA_SOURCE_FILE_AT_LINE (119)) ;
                  }
                }else{
                  var_cas_resolved.modifier_put (inLexique, operand_1978->mKey, operand_1978->mInfo.resource COMMA_SOURCE_FILE_AT_LINE (123)) ;
                }
              }
            }
          }
        }
        const GGS_bool cond_4208 = (var_cas_unresolved.reader_count ()).operator_isEqual (var_cas_unresolved_next.reader_count ()) ;
        if (cond_4208.isBuiltAndTrue ()) {
          GGS_location (inLexique).reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("Cycle detected in linked resource") COMMA_SOURCE_FILE_AT_LINE (129)) ;
          {
            GGS_resource_map::cEnumerator enumerator_4098 (var_cas_unresolved_next, true) ;
            const GGS_resource_map::cElement * operand_4098 = NULL ;
            while (((operand_4098 = enumerator_4098.nextObject ()))) {
              macroValidPointer (operand_4098) ;
              operand_4098->mKey.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("Involved in cycle") COMMA_SOURCE_FILE_AT_LINE (131)) ;
            }
          }
        }
      }
    }
  }
  var_cas_resources = var_cas_resolved ;
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_resolve_linked_resources\n") ;
  #endif
}

//---------------------------------------------------------------------------*

