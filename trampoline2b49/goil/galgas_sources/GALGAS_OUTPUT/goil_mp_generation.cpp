//---------------------------------------------------------------------------*
//                                                                           *
//                      File 'goil_mp_generation.cpp'                        *
//                 Generated by version GALGAS_BETA_VERSION                  *
//                     november 9th, 2009, at 20h11'34"                      *
//                                                                           *
//---------------------------------------------------------------------------*

//--- START OF USER ZONE 1


//--- END OF USER ZONE 1

//---------------------------------------------------------------------------*

#include "version_libpm.h"
#if LIBPM_VERSION != THE_LIBPM_VERSION
  #error "This file has been compiled with a version of GALGAS different than the version of libpm"
#endif

//---------------------------------------------------------------------------*

#include <typeinfo>
#include "utilities/MF_MemoryControl.h"
#include "files/C_TextFileWrite.h"
#include "galgas/C_galgas_CLI_Options.h"
#include "goil_mp_generation.h"

//---------------------------------------------------------------------------*

#ifndef DO_NOT_GENERATE_CHECKINGS
  #define SOURCE_FILE_AT_LINE(line) "goil_mp_generation.ggs", line
  #define COMMA_SOURCE_FILE_AT_LINE(line) , SOURCE_FILE_AT_LINE(line)
#else
  #define SOURCE_FILE_AT_LINE(line) 
  #define COMMA_SOURCE_FILE_AT_LINE(line) 
#endif


//--- START OF USER ZONE 2


//--- END OF USER ZONE 2

//---------------------------------------------------------------------------*
//                                                                           *
//                 Implementation of routine "generate_mp"                   *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_generate_mp (C_Compiler & inLexique,
                                GGS_task_map   var_cas_tasks,
                                GGS_isr_map   var_cas_isrs,
                                GGS_app_map   var_cas_apps,
                                GGS_string_map   var_cas_app_for_obj COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_generate_mp at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  GGS_string var_cas_tpl_mp ;
  GGS_string var_cas_dec = GGS_string ("") ;
  GGS_string var_cas_init = GGS_string ("") ;
  GGS_string var_cas_ext = GGS_string ("") ;
  ::routine_retrieveTemplateString (inLexique,  var_cas_tpl_mp,  GGS_string ("mp") COMMA_SOURCE_FILE_AT_LINE (49)) ;
  ::routine_doReplace (inLexique,  var_cas_tpl_mp,  GGS_string ("$TIMESTAMP$"),  GGS_string::constructor_stringWithCurrentDateTime (inLexique COMMA_HERE) COMMA_SOURCE_FILE_AT_LINE (50)) ;
  GGS_stringset  var_cas_known_osapp = GGS_stringset ::constructor_emptySet () ;
  {
    GGS_task_map::cEnumerator enumerator_1274 (var_cas_tasks, true) ;
    const GGS_task_map::cElement * operand_1274 = NULL ;
    while (((operand_1274 = enumerator_1274.nextObject ()))) {
      macroValidPointer (operand_1274) ;
      var_cas_dec.appendCString ("VAR(tpl_mem_prot_desc, OS_VAR) ") ;
      var_cas_dec.dotAssign_operation (operand_1274->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (55))) ;
      var_cas_dec.appendCString ("_mp_desc;\n") ;
      var_cas_ext.appendCString ("extern void *__SEG_START_TASK_") ;
      var_cas_ext.dotAssign_operation (operand_1274->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (56))) ;
      var_cas_ext.appendCString ("_VAR_RGN;\n") ;
      var_cas_ext.appendCString ("extern void *__SEG_END_TASK_") ;
      var_cas_ext.dotAssign_operation (operand_1274->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (57))) ;
      var_cas_ext.appendCString ("_VAR_RGN;\n") ;
      var_cas_ext.appendCString ("extern void *__SEG_START_TASK_") ;
      var_cas_ext.dotAssign_operation (operand_1274->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (58))) ;
      var_cas_ext.appendCString ("_STACK_RGN;\n") ;
      var_cas_ext.appendCString ("extern void *__SEG_END_TASK_") ;
      var_cas_ext.dotAssign_operation (operand_1274->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (59))) ;
      var_cas_ext.appendCString ("_STACK_RGN;\n") ;
      const GGS_bool cond_2070 = gOption_goil_5F_options_autosar_5F_on.value () ;
      if (cond_2070.isBuiltAndTrue ()) {
        const GGS_bool cond_2057 = (var_cas_app_for_obj.reader_count (inLexique COMMA_SOURCE_FILE_AT_LINE (61))).operator_strictSup (GGS_uint (0U)) ;
        if (cond_2057.isBuiltAndTrue ()) {
          GGS_string var_cas_app_name ;
          const GGS_string_map  temp_1778 = var_cas_app_for_obj ;
          if (temp_1778.isBuilt ()) {
            temp_1778 (HERE)->method_get (inLexique, operand_1274->mKey, var_cas_app_name COMMA_SOURCE_FILE_AT_LINE (63)) ;
          }
          const GGS_bool cond_2042 = (var_cas_known_osapp.reader_hasKey (inLexique, var_cas_app_name COMMA_SOURCE_FILE_AT_LINE (64))).operator_not () ;
          if (cond_2042.isBuiltAndTrue ()) {
            var_cas_ext.appendCString ("extern void *__SEG_START_APP_") ;
            var_cas_ext.dotAssign_operation (var_cas_app_name) ;
            var_cas_ext.appendCString ("_VAR_RGN;\n") ;
            var_cas_ext.appendCString ("extern void *__SEG_END_APP_") ;
            var_cas_ext.dotAssign_operation (var_cas_app_name) ;
            var_cas_ext.appendCString ("_VAR_RGN;\n") ;
            var_cas_known_osapp.addAssign_operation (var_cas_app_name) ;
          }
        }
      }
      var_cas_init.appendCString ("  ") ;
      var_cas_init.dotAssign_operation (operand_1274->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (71))) ;
      var_cas_init.appendCString ("_mp_desc.proc_var.start = __SEG_START_TASK_") ;
      var_cas_init.dotAssign_operation (operand_1274->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (71))) ;
      var_cas_init.appendCString ("_VAR_RGN;\n") ;
      var_cas_init.appendCString ("  ") ;
      var_cas_init.dotAssign_operation (operand_1274->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (72))) ;
      var_cas_init.appendCString ("_mp_desc.proc_var.end = __SEG_END_TASK_") ;
      var_cas_init.dotAssign_operation (operand_1274->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (72))) ;
      var_cas_init.appendCString ("_VAR_RGN;\n") ;
      var_cas_init.appendCString ("  ") ;
      var_cas_init.dotAssign_operation (operand_1274->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (73))) ;
      var_cas_init.appendCString ("_mp_desc.proc_stack.start = __SEG_START_TASK_") ;
      var_cas_init.dotAssign_operation (operand_1274->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (73))) ;
      var_cas_init.appendCString ("_STACK_RGN;\n") ;
      var_cas_init.appendCString ("  ") ;
      var_cas_init.dotAssign_operation (operand_1274->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (74))) ;
      var_cas_init.appendCString ("_mp_desc.proc_stack.end = __SEG_END_TASK_") ;
      var_cas_init.dotAssign_operation (operand_1274->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (74))) ;
      var_cas_init.appendCString ("_STACK_RGN;\n") ;
      const GGS_bool cond_2952 = gOption_goil_5F_options_autosar_5F_on.value () ;
      if (cond_2952.isBuiltAndTrue ()) {
        const GGS_bool cond_2939 = (var_cas_app_for_obj.reader_count (inLexique COMMA_SOURCE_FILE_AT_LINE (76))).operator_strictSup (GGS_uint (0U)) ;
        if (cond_2939.isBuiltAndTrue ()) {
          GGS_string var_cas_app_name ;
          const GGS_string_map  temp_2630 = var_cas_app_for_obj ;
          if (temp_2630.isBuilt ()) {
            temp_2630 (HERE)->method_get (inLexique, operand_1274->mKey, var_cas_app_name COMMA_SOURCE_FILE_AT_LINE (78)) ;
          }
          var_cas_init.appendCString ("#ifdef WITH_OSAPPLICATION\n") ;
          var_cas_init.appendCString ("  ") ;
          var_cas_init.dotAssign_operation (operand_1274->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (80))) ;
          var_cas_init.appendCString ("_mp_desc.osap_var.start = __SEG_START_APP_") ;
          var_cas_init.dotAssign_operation (var_cas_app_name) ;
          var_cas_init.appendCString ("_VAR_RGN;\n") ;
          var_cas_init.appendCString ("  ") ;
          var_cas_init.dotAssign_operation (operand_1274->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (81))) ;
          var_cas_init.appendCString ("_mp_desc.osap_var.end = __SEG_END_APP_") ;
          var_cas_init.dotAssign_operation (var_cas_app_name) ;
          var_cas_init.appendCString ("_VAR_RGN;\n") ;
          var_cas_init.appendCString ("#endif\n") ;
        }
      }
    }
  }
  {
    GGS_isr_map::cEnumerator enumerator_2989 (var_cas_isrs, true) ;
    const GGS_isr_map::cElement * operand_2989 = NULL ;
    while (((operand_2989 = enumerator_2989.nextObject ()))) {
      macroValidPointer (operand_2989) ;
      var_cas_dec.appendCString ("VAR(tpl_mem_prot_desc, OS_VAR) ") ;
      var_cas_dec.dotAssign_operation (operand_2989->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (88))) ;
      var_cas_dec.appendCString ("_mp_desc;\n") ;
      var_cas_ext.appendCString ("extern void *__SEG_START_ISR_") ;
      var_cas_ext.dotAssign_operation (operand_2989->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (89))) ;
      var_cas_ext.appendCString ("_VAR_RGN;\n") ;
      var_cas_ext.appendCString ("extern void *__SEG_END_ISR_") ;
      var_cas_ext.dotAssign_operation (operand_2989->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (90))) ;
      var_cas_ext.appendCString ("_VAR_RGN;\n") ;
      var_cas_ext.appendCString ("extern void *__SEG_START_ISR_") ;
      var_cas_ext.dotAssign_operation (operand_2989->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (91))) ;
      var_cas_ext.appendCString ("_STACK_RGN;\n") ;
      var_cas_ext.appendCString ("extern void *__SEG_END_ISR_") ;
      var_cas_ext.dotAssign_operation (operand_2989->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (92))) ;
      var_cas_ext.appendCString ("_STACK_RGN;\n") ;
      const GGS_bool cond_3781 = gOption_goil_5F_options_autosar_5F_on.value () ;
      if (cond_3781.isBuiltAndTrue ()) {
        const GGS_bool cond_3768 = (var_cas_app_for_obj.reader_count (inLexique COMMA_SOURCE_FILE_AT_LINE (94))).operator_strictSup (GGS_uint (0U)) ;
        if (cond_3768.isBuiltAndTrue ()) {
          GGS_string var_cas_app_name ;
          const GGS_string_map  temp_3489 = var_cas_app_for_obj ;
          if (temp_3489.isBuilt ()) {
            temp_3489 (HERE)->method_get (inLexique, operand_2989->mKey, var_cas_app_name COMMA_SOURCE_FILE_AT_LINE (96)) ;
          }
          const GGS_bool cond_3753 = (var_cas_known_osapp.reader_hasKey (inLexique, var_cas_app_name COMMA_SOURCE_FILE_AT_LINE (97))).operator_not () ;
          if (cond_3753.isBuiltAndTrue ()) {
            var_cas_ext.appendCString ("extern void *__SEG_START_APP_") ;
            var_cas_ext.dotAssign_operation (var_cas_app_name) ;
            var_cas_ext.appendCString ("_VAR_RGN;\n") ;
            var_cas_ext.appendCString ("extern void *__SEG_END_APP_") ;
            var_cas_ext.dotAssign_operation (var_cas_app_name) ;
            var_cas_ext.appendCString ("_VAR_RGN;\n") ;
            var_cas_known_osapp.addAssign_operation (var_cas_app_name) ;
          }
        }
      }
      var_cas_init.appendCString ("  ") ;
      var_cas_init.dotAssign_operation (operand_2989->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (104))) ;
      var_cas_init.appendCString ("_mp_desc.proc_var.start = __SEG_START_ISR_") ;
      var_cas_init.dotAssign_operation (operand_2989->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (104))) ;
      var_cas_init.appendCString ("_VAR_RGN;\n") ;
      var_cas_init.appendCString ("  ") ;
      var_cas_init.dotAssign_operation (operand_2989->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (105))) ;
      var_cas_init.appendCString ("_mp_desc.proc_var.end = __SEG_END_ISR_") ;
      var_cas_init.dotAssign_operation (operand_2989->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (105))) ;
      var_cas_init.appendCString ("_VAR_RGN;\n") ;
      var_cas_init.appendCString ("  ") ;
      var_cas_init.dotAssign_operation (operand_2989->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (106))) ;
      var_cas_init.appendCString ("_mp_desc.proc_stack.start = __SEG_START_ISR_") ;
      var_cas_init.dotAssign_operation (operand_2989->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (106))) ;
      var_cas_init.appendCString ("_STACK_RGN;\n") ;
      var_cas_init.appendCString ("  ") ;
      var_cas_init.dotAssign_operation (operand_2989->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (107))) ;
      var_cas_init.appendCString ("_mp_desc.proc_stack.end = __SEG_END_ISR_") ;
      var_cas_init.dotAssign_operation (operand_2989->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (107))) ;
      var_cas_init.appendCString ("_STACK_RGN;\n") ;
      const GGS_bool cond_4659 = gOption_goil_5F_options_autosar_5F_on.value () ;
      if (cond_4659.isBuiltAndTrue ()) {
        const GGS_bool cond_4646 = (var_cas_app_for_obj.reader_count (inLexique COMMA_SOURCE_FILE_AT_LINE (109))).operator_strictSup (GGS_uint (0U)) ;
        if (cond_4646.isBuiltAndTrue ()) {
          GGS_string var_cas_app_name ;
          const GGS_string_map  temp_4337 = var_cas_app_for_obj ;
          if (temp_4337.isBuilt ()) {
            temp_4337 (HERE)->method_get (inLexique, operand_2989->mKey, var_cas_app_name COMMA_SOURCE_FILE_AT_LINE (111)) ;
          }
          var_cas_init.appendCString ("#ifdef WITH_OSAPPLICATION\n") ;
          var_cas_init.appendCString ("  ") ;
          var_cas_init.dotAssign_operation (operand_2989->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (113))) ;
          var_cas_init.appendCString ("_mp_desc.osap_var.start = __SEG_START_APP_") ;
          var_cas_init.dotAssign_operation (var_cas_app_name) ;
          var_cas_init.appendCString ("_VAR_RGN;\n") ;
          var_cas_init.appendCString ("  ") ;
          var_cas_init.dotAssign_operation (operand_2989->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (114))) ;
          var_cas_init.appendCString ("_mp_desc.osap_var.end = __SEG_END_APP_") ;
          var_cas_init.dotAssign_operation (var_cas_app_name) ;
          var_cas_init.appendCString ("_VAR_RGN;\n") ;
          var_cas_init.appendCString ("#endif\n") ;
        }
      }
    }
  }
  GGS_tasks_by_type  var_cas_stasks = GGS_tasks_by_type ::constructor_emptySortedList () ;
  {
    GGS_task_map::cEnumerator enumerator_4793 (var_cas_tasks, true) ;
    const GGS_task_map::cElement * operand_4793 = NULL ;
    while (((operand_4793 = enumerator_4793.nextObject ()))) {
      macroValidPointer (operand_4793) ;
      const GGS_bool cond_4879 = (operand_4793->mInfo.task.reader_events (inLexique COMMA_SOURCE_FILE_AT_LINE (123)).reader_length (inLexique COMMA_SOURCE_FILE_AT_LINE (123))).operator_strictSup (GGS_uint (0U)) ;
      if (cond_4879.isBuiltAndTrue ()) {
        var_cas_stasks.addAssign_operation (GGS_uint (0U), operand_4793->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (124))) ;
      }else if (cond_4879.isBuiltAndFalse ()) {
        var_cas_stasks.addAssign_operation (GGS_uint (1U), operand_4793->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (126))) ;
      }
    }
  }
  GGS_string var_cas_mp_table = GGS_string ("CONSTP2VAR(tpl_mem_prot_desc, AUTOMATIC, OS_VAR) tpl_mp_table[TASK_COUNT + ISR_COUNT + 1] = {\n") ;
  {
    GGS_tasks_by_type::cEnumerator enumerator_5083 (var_cas_stasks, true) ;
    const GGS_tasks_by_type::cElement * operand_5083 = NULL ;
    while (((operand_5083 = enumerator_5083.nextObject ()))) {
      macroValidPointer (operand_5083) ;
      const GGS_bool cond_5657 = gOption_goil_5F_options_autosar_5F_on.value () ;
      if (cond_5657.isBuiltAndTrue ()) {
        const GGS_bool cond_5643 = (var_cas_app_for_obj.reader_count (inLexique COMMA_SOURCE_FILE_AT_LINE (135))).operator_strictSup (GGS_uint (0U)) ;
        if (cond_5643.isBuiltAndTrue ()) {
          GGS_string var_cas_app_name ;
          const GGS_string_map  temp_5327 = var_cas_app_for_obj ;
          if (temp_5327.isBuilt ()) {
            temp_5327 (HERE)->method_get (inLexique, GGS_lstring ::constructor_new (inLexique, operand_5083->name, GGS_location (inLexique) COMMA_HERE), var_cas_app_name COMMA_SOURCE_FILE_AT_LINE (137)) ;
          }
          GGS_app_obj  var_cas_app ;
          const GGS_app_map  temp_5409 = var_cas_apps ;
          if (temp_5409.isBuilt ()) {
            temp_5409 (HERE)->method_get (inLexique, GGS_lstring ::constructor_new (inLexique, var_cas_app_name, GGS_location (inLexique) COMMA_HERE), var_cas_app COMMA_SOURCE_FILE_AT_LINE (139)) ;
          }
          { const GGS_app_trusted_obj _var_5625 = var_cas_app.reader_trusted (inLexique COMMA_SOURCE_FILE_AT_LINE (140)) ; // CAST instruction
            if (_var_5625.getPtr () != NULL) {
              macroValidPointer (_var_5625.getPtr ()) ;
              if (typeid (cPtr_app_trusted_true) == typeid (* (_var_5625.getPtr ()))) {
                var_cas_mp_table.appendCString ("  NULL,\n") ;
              }else{
                var_cas_mp_table.appendCString ("  &") ;
                var_cas_mp_table.dotAssign_operation (operand_5083->name) ;
                var_cas_mp_table.appendCString ("_mp_desc,\n") ;
              }
            }
          }
        }
      }else if (cond_5657.isBuiltAndFalse ()) {
        var_cas_mp_table.appendCString ("  &") ;
        var_cas_mp_table.dotAssign_operation (operand_5083->name) ;
        var_cas_mp_table.appendCString ("_mp_desc,\n") ;
      }
    }
  }
  {
    GGS_isr_map::cEnumerator enumerator_5746 (var_cas_isrs, true) ;
    const GGS_isr_map::cElement * operand_5746 = NULL ;
    while (((operand_5746 = enumerator_5746.nextObject ()))) {
      macroValidPointer (operand_5746) ;
      var_cas_mp_table.appendCString ("  &") ;
      var_cas_mp_table.dotAssign_operation (operand_5746->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (154))) ;
      var_cas_mp_table.appendCString ("_mp_desc,\n") ;
    }
  }
  var_cas_mp_table.appendCString ("  NULL\n"
    "};") ;
  GGS_string var_cas_directory = function_project_name (inLexique COMMA_SOURCE_FILE_AT_LINE (158)) ;
  ::routine_doReplace (inLexique,  var_cas_tpl_mp,  GGS_string ("$APPLICATION$"),  var_cas_directory COMMA_SOURCE_FILE_AT_LINE (160)) ;
  ::routine_doReplace (inLexique,  var_cas_tpl_mp,  GGS_string ("$LINKER_SYM$"),  var_cas_ext COMMA_SOURCE_FILE_AT_LINE (161)) ;
  ::routine_doReplace (inLexique,  var_cas_tpl_mp,  GGS_string ("$REGION_DESC$"),  var_cas_dec COMMA_SOURCE_FILE_AT_LINE (162)) ;
  ::routine_doReplace (inLexique,  var_cas_tpl_mp,  GGS_string ("$INIT_CODE$"),  var_cas_init COMMA_SOURCE_FILE_AT_LINE (163)) ;
  ::routine_doReplace (inLexique,  var_cas_tpl_mp,  GGS_string ("$DESC_TABLE$"),  var_cas_mp_table COMMA_SOURCE_FILE_AT_LINE (164)) ;
  const GGS_bool cond_6337 = (GGS_uint ::constructor_errorCount (inLexique COMMA_HERE)).operator_isEqual (GGS_uint (0U)) ;
  if (cond_6337.isBuiltAndTrue ()) {
    const GGS_bool cond_6251 = gOption_galgas_5F_cli_5F_options_verbose_5F_output.value () ;
    if (cond_6251.isBuiltAndTrue ()) {
      inLexique.printMessage (GGS_string ("creating tpl_generated_mp.c\n") COMMA_SOURCE_FILE_AT_LINE (168)) ;
    }
    const GGS_string temp_6295 = var_cas_tpl_mp ;
    if (temp_6295.isBuilt ()) {
      temp_6295 (HERE)->method_makeDirectoryAndWriteToFile (inLexique, (var_cas_directory).operator_concat (GGS_string ("/tpl_generated_mp.c")) COMMA_SOURCE_FILE_AT_LINE (170)) ;
    }
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_generate_mp\n") ;
  #endif
}

//---------------------------------------------------------------------------*

