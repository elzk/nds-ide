//---------------------------------------------------------------------------*
//                                                                           *
//                       File 'goil_types_counter.h'                         *
//                        Generated by version 2.0.0                         *
//                       july 7th, 2010, at 17h16'16"                        *
//                                                                           *
//---------------------------------------------------------------------------*

//--- START OF USER ZONE 1


//--- END OF USER ZONE 1

#ifndef goil_types_counter_DEFINED
#define goil_types_counter_DEFINED

#include <string.h>

//---------------------------------------------------------------------------*

#include "galgas/GGS__header.h"

//---------------------------------------------------------------------------*

// Include imported semantics
#include "goil_basic_types.h"

//--- START OF USER ZONE 2


//--- END OF USER ZONE 2

//---------------------------------------------------------------------------*
//                                                                           *
//                          Class Predeclarations                            *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_counter_driver ;
class cPtr_counter_driver ;
class GGS_void_driver ;
class cPtr_void_driver ;
class GGS_os_internal_driver ;
class cPtr_os_internal_driver ;
class GGS_gpt_driver ;
class cPtr_gpt_driver ;
class GGS_time_constants ;
class GGS_counter_type ;
class cPtr_counter_type ;
class GGS_void_counter ;
class cPtr_void_counter ;
class GGS_software_counter ;
class cPtr_software_counter ;
class GGS_hardware_counter ;
class cPtr_hardware_counter ;
class GGS_counter_obj ;
class cPtr_counter_obj ;
class GGS_counter_map ;
class GGS_counter_by_source ;

//---------------------------------------------------------------------------*
//                                                                           *
//                    GALGAS class 'GGS_counter_driver'                      *
//                                                                           *
//---------------------------------------------------------------------------*

extern const C_galgas_type_descriptorEX kTypeDescriptor_GGS_counter_driver ;

//---------------------------------------------------------------------------*

class GGS_counter_driver : public AC_GGS_class {
//--- Default constructor
  public : inline GGS_counter_driver (void) :
  AC_GGS_class () {}

//--- Pointer assignment constructor
  public : GGS_counter_driver (const cPtr__AC_galgas_class * inPointer) ;

//--- Object assignment constructor
  public : GGS_counter_driver (cPtr__AC_galgas_class & inObject) ;

//--- castFrom class method (implements cast expression)
  public : static GGS_counter_driver
  castFrom (C_Compiler & inLexique,
             cPtr__AC_galgas_class * inPointer,
             const bool inUseKindOfClass,
             const GGS_location & inErrorLocation
             COMMA_LOCATION_ARGS) ;

//--- getPtr
  public : inline cPtr_counter_driver * getPtr (void) const {
    return (cPtr_counter_driver *) mPointer ;
  }

//--- 'description' reader
  public : virtual const char * actualTypeName (void) const ;

//--- Readers
  public : GGS_location  reader_location (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;

//--- Modifiers

//--- operator ()
  #ifndef DO_NOT_GENERATE_CHECKINGS
    public : cPtr_counter_driver * operator () (LOCATION_ARGS) const ;
  #else
    public : inline cPtr_counter_driver * operator () (LOCATION_ARGS) const {
      return (cPtr_counter_driver *) mPointer ;
    }
  #endif

//--- Galgas RTTI
AC_galgasClassRunTimeInformationEX * galgasObjectRunTimeInfo (void) const ;

//--- Introspection
  public : virtual const C_galgas_type_descriptorEX * typeDescriptor (void) const ;

  public : GGS_object reader_object (void) const ;

  public : static GGS_counter_driver castFromObject (C_Compiler & inLexique,
                                           const GGS_object & inObject,
                                           const GGS_location & inErrorLocation
                                           COMMA_LOCATION_ARGS) ;

} ;

//---------------------------------------------------------------------------*

extern C_galgasRootClassRunTimeInformationEX gClassInfoFor__counter_driver ;

//---------------------------------------------------------------------------*
//                                                                           *
//                      GALGAS class 'GGS_void_driver'                       *
//                                                                           *
//---------------------------------------------------------------------------*

extern const C_galgas_type_descriptorEX kTypeDescriptor_GGS_void_driver ;

//---------------------------------------------------------------------------*

class GGS_void_driver : public GGS_counter_driver {
//--- Default constructor
  public : inline GGS_void_driver (void) :
  GGS_counter_driver () {}

//--- Pointer assignment constructor
  public : GGS_void_driver (const cPtr__AC_galgas_class * inPointer) ;

//--- Object assignment constructor
  public : GGS_void_driver (cPtr__AC_galgas_class & inObject) ;

//--- castFrom class method (implements cast expression)
  public : static GGS_void_driver
  castFrom (C_Compiler & inLexique,
             cPtr__AC_galgas_class * inPointer,
             const bool inUseKindOfClass,
             const GGS_location & inErrorLocation
             COMMA_LOCATION_ARGS) ;

//--- 'new' constructor
  public : static GGS_void_driver constructor_new (C_Compiler & inLexique,
                                const GGS_location & argument_0
                                COMMA_LOCATION_ARGS) ;

//--- getPtr
  public : inline cPtr_void_driver * getPtr (void) const {
    return (cPtr_void_driver *) mPointer ;
  }

//--- 'description' reader
  public : virtual const char * actualTypeName (void) const ;

//--- Readers

//--- Modifiers

//--- operator ()
  #ifndef DO_NOT_GENERATE_CHECKINGS
    public : cPtr_void_driver * operator () (LOCATION_ARGS) const ;
  #else
    public : inline cPtr_void_driver * operator () (LOCATION_ARGS) const {
      return (cPtr_void_driver *) mPointer ;
    }
  #endif

//--- Introspection
  public : virtual const C_galgas_type_descriptorEX * typeDescriptor (void) const ;

  public : GGS_object reader_object (void) const ;

  public : static GGS_void_driver castFromObject (C_Compiler & inLexique,
                                           const GGS_object & inObject,
                                           const GGS_location & inErrorLocation
                                           COMMA_LOCATION_ARGS) ;

} ;

//---------------------------------------------------------------------------*

extern C_galgasClassRunTimeInformationEX gClassInfoFor__void_driver ;

//---------------------------------------------------------------------------*
//                                                                           *
//                  GALGAS class 'GGS_os_internal_driver'                    *
//                                                                           *
//---------------------------------------------------------------------------*

extern const C_galgas_type_descriptorEX kTypeDescriptor_GGS_os_internal_driver ;

//---------------------------------------------------------------------------*

class GGS_os_internal_driver : public GGS_counter_driver {
//--- Default constructor
  public : inline GGS_os_internal_driver (void) :
  GGS_counter_driver () {}

//--- Pointer assignment constructor
  public : GGS_os_internal_driver (const cPtr__AC_galgas_class * inPointer) ;

//--- Object assignment constructor
  public : GGS_os_internal_driver (cPtr__AC_galgas_class & inObject) ;

//--- castFrom class method (implements cast expression)
  public : static GGS_os_internal_driver
  castFrom (C_Compiler & inLexique,
             cPtr__AC_galgas_class * inPointer,
             const bool inUseKindOfClass,
             const GGS_location & inErrorLocation
             COMMA_LOCATION_ARGS) ;

//--- 'new' constructor
  public : static GGS_os_internal_driver constructor_new (C_Compiler & inLexique,
                                const GGS_location & argument_0
                                COMMA_LOCATION_ARGS) ;

//--- getPtr
  public : inline cPtr_os_internal_driver * getPtr (void) const {
    return (cPtr_os_internal_driver *) mPointer ;
  }

//--- 'description' reader
  public : virtual const char * actualTypeName (void) const ;

//--- Readers

//--- Modifiers

//--- operator ()
  #ifndef DO_NOT_GENERATE_CHECKINGS
    public : cPtr_os_internal_driver * operator () (LOCATION_ARGS) const ;
  #else
    public : inline cPtr_os_internal_driver * operator () (LOCATION_ARGS) const {
      return (cPtr_os_internal_driver *) mPointer ;
    }
  #endif

//--- Introspection
  public : virtual const C_galgas_type_descriptorEX * typeDescriptor (void) const ;

  public : GGS_object reader_object (void) const ;

  public : static GGS_os_internal_driver castFromObject (C_Compiler & inLexique,
                                           const GGS_object & inObject,
                                           const GGS_location & inErrorLocation
                                           COMMA_LOCATION_ARGS) ;

} ;

//---------------------------------------------------------------------------*

extern C_galgasClassRunTimeInformationEX gClassInfoFor__os_internal_driver ;

//---------------------------------------------------------------------------*
//                                                                           *
//                      GALGAS class 'GGS_gpt_driver'                        *
//                                                                           *
//---------------------------------------------------------------------------*

extern const C_galgas_type_descriptorEX kTypeDescriptor_GGS_gpt_driver ;

//---------------------------------------------------------------------------*

class GGS_gpt_driver : public GGS_counter_driver {
//--- Default constructor
  public : inline GGS_gpt_driver (void) :
  GGS_counter_driver () {}

//--- Pointer assignment constructor
  public : GGS_gpt_driver (const cPtr__AC_galgas_class * inPointer) ;

//--- Object assignment constructor
  public : GGS_gpt_driver (cPtr__AC_galgas_class & inObject) ;

//--- castFrom class method (implements cast expression)
  public : static GGS_gpt_driver
  castFrom (C_Compiler & inLexique,
             cPtr__AC_galgas_class * inPointer,
             const bool inUseKindOfClass,
             const GGS_location & inErrorLocation
             COMMA_LOCATION_ARGS) ;

//--- 'new' constructor
  public : static GGS_gpt_driver constructor_new (C_Compiler & inLexique,
                                const GGS_location & argument_0,
                                const GGS_basic_type & argument_1,
                                const GGS_lstring & argument_2
                                COMMA_LOCATION_ARGS) ;

//--- getPtr
  public : inline cPtr_gpt_driver * getPtr (void) const {
    return (cPtr_gpt_driver *) mPointer ;
  }

//--- 'description' reader
  public : virtual const char * actualTypeName (void) const ;

//--- Readers
  public : GGS_basic_type  reader_ns_per_hw_tick (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;
  public : GGS_lstring  reader_gpt_channel_name (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;

//--- Modifiers

//--- operator ()
  #ifndef DO_NOT_GENERATE_CHECKINGS
    public : cPtr_gpt_driver * operator () (LOCATION_ARGS) const ;
  #else
    public : inline cPtr_gpt_driver * operator () (LOCATION_ARGS) const {
      return (cPtr_gpt_driver *) mPointer ;
    }
  #endif

//--- Introspection
  public : virtual const C_galgas_type_descriptorEX * typeDescriptor (void) const ;

  public : GGS_object reader_object (void) const ;

  public : static GGS_gpt_driver castFromObject (C_Compiler & inLexique,
                                           const GGS_object & inObject,
                                           const GGS_location & inErrorLocation
                                           COMMA_LOCATION_ARGS) ;

} ;

//---------------------------------------------------------------------------*

extern C_galgasClassRunTimeInformationEX gClassInfoFor__gpt_driver ;

//---------------------------------------------------------------------------*
//                                                                           *
//                          list '@time_constants'                           *
//                                                                           *
//---------------------------------------------------------------------------*

class elementOf_GGS_time_constants ;

//---------------------------------------------------------------------------*

extern const C_galgas_type_descriptorEX kTypeDescriptor_GGS_time_constants ;

//---------------------------------------------------------------------------*

class GGS_time_constants : public AC_GGS_list {
  public : typedef elementOf_GGS_time_constants cElement ;

//--- Constructor 'emptyList'
  public : static GGS_time_constants constructor_emptyList (void) ;
  public : static GGS_time_constants constructor_listWithValue (const GGS_basic_type & argument_0,
                                const GGS_lstring & argument_1) ;
//--- Get sublist
  protected : void
  internalSubListWithRange (GGS_time_constants & ioList,
                            const PMSInt32 inFirstIndex,
                            const PMSInt32 inCount) const ;

  public : GGS_time_constants
  reader_subListWithRange (C_Compiler & inLexique,
                           const GGS_uint & inFirstIndex,
                           const GGS_uint & inCount
                           COMMA_LOCATION_ARGS) const ;

  public : GGS_time_constants
  reader_subListFromIndex (C_Compiler & inLexique,
                           const GGS_uint & inIndex
                           COMMA_LOCATION_ARGS) const ;

//--- Get first object
  public : inline cElement * firstObject (void) const {
    return (cElement *) internalFirstObject () ;
  }
//--- Get last object
  public : inline cElement * lastObject (void) const {
    return (cElement *) internalLastObject () ;
  }
//--- Operator () used for method call
  public : const GGS_time_constants * operator () (UNUSED_LOCATION_ARGS) const { return this ;} 
//--- Method 'first'
  public : void method_first (C_Compiler & inLexique,
                              GGS_basic_type & _out_0,
                              GGS_lstring & _out_1
                              COMMA_LOCATION_ARGS) const ;
//--- Method 'last'
  public : void method_last (C_Compiler & inLexique,
                             GGS_basic_type & _out_0,
                             GGS_lstring & _out_1
                             COMMA_LOCATION_ARGS) const ;
//--- Modifier 'popLast'
  public : void modifier_popLast (C_Compiler & inLexique,
                                GGS_basic_type & _out_0,
                                GGS_lstring & _out_1
                                COMMA_LOCATION_ARGS) ;
//--- Modifier 'popFirst'
  public : void modifier_popFirst (C_Compiler & inLexique,
                                 GGS_basic_type & _out_0,
                                 GGS_lstring & _out_1
                                 COMMA_LOCATION_ARGS) ;
//--- Handle '.=' operator
  public : void dotAssign_operation (const GGS_time_constants inOperand) ;

//--- Handling '+=' GALGAS operator
  public : void addAssign_operation (const GGS_basic_type & argument_0,
                                const GGS_lstring & argument_1) ;
//--- Handling '.' GALGAS operator
  public : GGS_time_constants operator_concat (const GGS_time_constants & inOperand) const ;
  public : void modifier_prependValue (C_Compiler & inLexique,
                                const GGS_basic_type & argument_0,
                                const GGS_lstring & argument_1
                                COMMA_LOCATION_ARGS) ;
//--- Internal Methods
  protected : void internalAppendValues (const GGS_basic_type & argument_0,
                                const GGS_lstring & argument_1
                                COMMA_LOCATION_ARGS) ;

  protected : void internalPrependValues (const GGS_basic_type & argument_0,
                                const GGS_lstring & argument_1
                                COMMA_LOCATION_ARGS) ;

//--- List Insulation
  protected : void insulateList (void) ;

//--- Reader 'description
  public : virtual GGS_string reader_description (const PMSInt32 inIndentation = 0) const ;

//--------------------------------- Direct Read Access
  public : GGS_basic_type 
  reader_nsAtIndex (C_Compiler & inLexique, const GGS_uint & inIndex COMMA_LOCATION_ARGS) const ;
  public : GGS_lstring 
  reader_const_nameAtIndex (C_Compiler & inLexique, const GGS_uint & inIndex COMMA_LOCATION_ARGS) const ;

//--------------------------------- Direct Write Access
  public : void
  modifier_setNsAtIndex (C_Compiler & inLexique,
                              const GGS_basic_type  & inObject,
                              const GGS_uint & inIndex
                              COMMA_LOCATION_ARGS) const ;
  public : void
  modifier_setConst_nameAtIndex (C_Compiler & inLexique,
                              const GGS_lstring  & inObject,
                              const GGS_uint & inIndex
                              COMMA_LOCATION_ARGS) const ;

//--- Introspection
  public : virtual const C_galgas_type_descriptorEX * typeDescriptor (void) const ;

  public : GGS_object reader_object (void) const ;

  public : static GGS_time_constants castFromObject (C_Compiler & inLexique,
                                           const GGS_object & inObject,
                                           const GGS_location & inErrorLocation
                                           COMMA_LOCATION_ARGS) ;

//--------------------------------- List Enumerator
  public : class cEnumerator : public cAbstractListEnumerator {
  //--- Constructor
    public : inline cEnumerator (const GGS_time_constants & inList,
                                 const bool inAscending) :
    cAbstractListEnumerator (inList, inAscending) {
    }
  //--- Iterator method
    public : inline cElement * nextObject (void) {
      return (cElement *) internalNextObject () ;
    }
    public : /* const */ GGS_basic_type   & _ns (LOCATION_ARGS) const ;
    public : /* const */ GGS_lstring   & _const_name (LOCATION_ARGS) const ;
  } ;

} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                     GALGAS class 'GGS_counter_type'                       *
//                                                                           *
//---------------------------------------------------------------------------*

extern const C_galgas_type_descriptorEX kTypeDescriptor_GGS_counter_type ;

//---------------------------------------------------------------------------*

class GGS_counter_type : public AC_GGS_class {
//--- Default constructor
  public : inline GGS_counter_type (void) :
  AC_GGS_class () {}

//--- Pointer assignment constructor
  public : GGS_counter_type (const cPtr__AC_galgas_class * inPointer) ;

//--- Object assignment constructor
  public : GGS_counter_type (cPtr__AC_galgas_class & inObject) ;

//--- castFrom class method (implements cast expression)
  public : static GGS_counter_type
  castFrom (C_Compiler & inLexique,
             cPtr__AC_galgas_class * inPointer,
             const bool inUseKindOfClass,
             const GGS_location & inErrorLocation
             COMMA_LOCATION_ARGS) ;

//--- getPtr
  public : inline cPtr_counter_type * getPtr (void) const {
    return (cPtr_counter_type *) mPointer ;
  }

//--- 'description' reader
  public : virtual const char * actualTypeName (void) const ;

//--- Readers
  public : GGS_location  reader_location (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;

//--- Modifiers

//--- operator ()
  #ifndef DO_NOT_GENERATE_CHECKINGS
    public : cPtr_counter_type * operator () (LOCATION_ARGS) const ;
  #else
    public : inline cPtr_counter_type * operator () (LOCATION_ARGS) const {
      return (cPtr_counter_type *) mPointer ;
    }
  #endif

//--- Galgas RTTI
AC_galgasClassRunTimeInformationEX * galgasObjectRunTimeInfo (void) const ;

//--- Introspection
  public : virtual const C_galgas_type_descriptorEX * typeDescriptor (void) const ;

  public : GGS_object reader_object (void) const ;

  public : static GGS_counter_type castFromObject (C_Compiler & inLexique,
                                           const GGS_object & inObject,
                                           const GGS_location & inErrorLocation
                                           COMMA_LOCATION_ARGS) ;

} ;

//---------------------------------------------------------------------------*

extern C_galgasRootClassRunTimeInformationEX gClassInfoFor__counter_type ;

//---------------------------------------------------------------------------*
//                                                                           *
//                     GALGAS class 'GGS_void_counter'                       *
//                                                                           *
//---------------------------------------------------------------------------*

extern const C_galgas_type_descriptorEX kTypeDescriptor_GGS_void_counter ;

//---------------------------------------------------------------------------*

class GGS_void_counter : public GGS_counter_type {
//--- Default constructor
  public : inline GGS_void_counter (void) :
  GGS_counter_type () {}

//--- Pointer assignment constructor
  public : GGS_void_counter (const cPtr__AC_galgas_class * inPointer) ;

//--- Object assignment constructor
  public : GGS_void_counter (cPtr__AC_galgas_class & inObject) ;

//--- castFrom class method (implements cast expression)
  public : static GGS_void_counter
  castFrom (C_Compiler & inLexique,
             cPtr__AC_galgas_class * inPointer,
             const bool inUseKindOfClass,
             const GGS_location & inErrorLocation
             COMMA_LOCATION_ARGS) ;

//--- 'new' constructor
  public : static GGS_void_counter constructor_new (C_Compiler & inLexique,
                                const GGS_location & argument_0
                                COMMA_LOCATION_ARGS) ;

//--- getPtr
  public : inline cPtr_void_counter * getPtr (void) const {
    return (cPtr_void_counter *) mPointer ;
  }

//--- 'description' reader
  public : virtual const char * actualTypeName (void) const ;

//--- Readers

//--- Modifiers

//--- operator ()
  #ifndef DO_NOT_GENERATE_CHECKINGS
    public : cPtr_void_counter * operator () (LOCATION_ARGS) const ;
  #else
    public : inline cPtr_void_counter * operator () (LOCATION_ARGS) const {
      return (cPtr_void_counter *) mPointer ;
    }
  #endif

//--- Introspection
  public : virtual const C_galgas_type_descriptorEX * typeDescriptor (void) const ;

  public : GGS_object reader_object (void) const ;

  public : static GGS_void_counter castFromObject (C_Compiler & inLexique,
                                           const GGS_object & inObject,
                                           const GGS_location & inErrorLocation
                                           COMMA_LOCATION_ARGS) ;

} ;

//---------------------------------------------------------------------------*

extern C_galgasClassRunTimeInformationEX gClassInfoFor__void_counter ;

//---------------------------------------------------------------------------*
//                                                                           *
//                   GALGAS class 'GGS_software_counter'                     *
//                                                                           *
//---------------------------------------------------------------------------*

extern const C_galgas_type_descriptorEX kTypeDescriptor_GGS_software_counter ;

//---------------------------------------------------------------------------*

class GGS_software_counter : public GGS_counter_type {
//--- Default constructor
  public : inline GGS_software_counter (void) :
  GGS_counter_type () {}

//--- Pointer assignment constructor
  public : GGS_software_counter (const cPtr__AC_galgas_class * inPointer) ;

//--- Object assignment constructor
  public : GGS_software_counter (cPtr__AC_galgas_class & inObject) ;

//--- castFrom class method (implements cast expression)
  public : static GGS_software_counter
  castFrom (C_Compiler & inLexique,
             cPtr__AC_galgas_class * inPointer,
             const bool inUseKindOfClass,
             const GGS_location & inErrorLocation
             COMMA_LOCATION_ARGS) ;

//--- 'new' constructor
  public : static GGS_software_counter constructor_new (C_Compiler & inLexique,
                                const GGS_location & argument_0
                                COMMA_LOCATION_ARGS) ;

//--- getPtr
  public : inline cPtr_software_counter * getPtr (void) const {
    return (cPtr_software_counter *) mPointer ;
  }

//--- 'description' reader
  public : virtual const char * actualTypeName (void) const ;

//--- Readers

//--- Modifiers

//--- operator ()
  #ifndef DO_NOT_GENERATE_CHECKINGS
    public : cPtr_software_counter * operator () (LOCATION_ARGS) const ;
  #else
    public : inline cPtr_software_counter * operator () (LOCATION_ARGS) const {
      return (cPtr_software_counter *) mPointer ;
    }
  #endif

//--- Introspection
  public : virtual const C_galgas_type_descriptorEX * typeDescriptor (void) const ;

  public : GGS_object reader_object (void) const ;

  public : static GGS_software_counter castFromObject (C_Compiler & inLexique,
                                           const GGS_object & inObject,
                                           const GGS_location & inErrorLocation
                                           COMMA_LOCATION_ARGS) ;

} ;

//---------------------------------------------------------------------------*

extern C_galgasClassRunTimeInformationEX gClassInfoFor__software_counter ;

//---------------------------------------------------------------------------*
//                                                                           *
//                   GALGAS class 'GGS_hardware_counter'                     *
//                                                                           *
//---------------------------------------------------------------------------*

extern const C_galgas_type_descriptorEX kTypeDescriptor_GGS_hardware_counter ;

//---------------------------------------------------------------------------*

class GGS_hardware_counter : public GGS_counter_type {
//--- Default constructor
  public : inline GGS_hardware_counter (void) :
  GGS_counter_type () {}

//--- Pointer assignment constructor
  public : GGS_hardware_counter (const cPtr__AC_galgas_class * inPointer) ;

//--- Object assignment constructor
  public : GGS_hardware_counter (cPtr__AC_galgas_class & inObject) ;

//--- castFrom class method (implements cast expression)
  public : static GGS_hardware_counter
  castFrom (C_Compiler & inLexique,
             cPtr__AC_galgas_class * inPointer,
             const bool inUseKindOfClass,
             const GGS_location & inErrorLocation
             COMMA_LOCATION_ARGS) ;

//--- 'new' constructor
  public : static GGS_hardware_counter constructor_new (C_Compiler & inLexique,
                                const GGS_location & argument_0,
                                const GGS_counter_driver & argument_1,
                                const GGS_time_constants & argument_2
                                COMMA_LOCATION_ARGS) ;

//--- getPtr
  public : inline cPtr_hardware_counter * getPtr (void) const {
    return (cPtr_hardware_counter *) mPointer ;
  }

//--- 'description' reader
  public : virtual const char * actualTypeName (void) const ;

//--- Readers
  public : GGS_counter_driver  reader_driver (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;
  public : GGS_time_constants  reader_time_consts (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;

//--- Modifiers

//--- operator ()
  #ifndef DO_NOT_GENERATE_CHECKINGS
    public : cPtr_hardware_counter * operator () (LOCATION_ARGS) const ;
  #else
    public : inline cPtr_hardware_counter * operator () (LOCATION_ARGS) const {
      return (cPtr_hardware_counter *) mPointer ;
    }
  #endif

//--- Introspection
  public : virtual const C_galgas_type_descriptorEX * typeDescriptor (void) const ;

  public : GGS_object reader_object (void) const ;

  public : static GGS_hardware_counter castFromObject (C_Compiler & inLexique,
                                           const GGS_object & inObject,
                                           const GGS_location & inErrorLocation
                                           COMMA_LOCATION_ARGS) ;

} ;

//---------------------------------------------------------------------------*

extern C_galgasClassRunTimeInformationEX gClassInfoFor__hardware_counter ;

//---------------------------------------------------------------------------*
//                                                                           *
//                      GALGAS class 'GGS_counter_obj'                       *
//                                                                           *
//---------------------------------------------------------------------------*

extern const C_galgas_type_descriptorEX kTypeDescriptor_GGS_counter_obj ;

//---------------------------------------------------------------------------*

class GGS_counter_obj : public GGS_oil_obj {
//--- Default constructor
  public : inline GGS_counter_obj (void) :
  GGS_oil_obj () {}

//--- Pointer assignment constructor
  public : GGS_counter_obj (const cPtr__AC_galgas_class * inPointer) ;

//--- Object assignment constructor
  public : GGS_counter_obj (cPtr__AC_galgas_class & inObject) ;

//--- castFrom class method (implements cast expression)
  public : static GGS_counter_obj
  castFrom (C_Compiler & inLexique,
             cPtr__AC_galgas_class * inPointer,
             const bool inUseKindOfClass,
             const GGS_location & inErrorLocation
             COMMA_LOCATION_ARGS) ;

//--- 'new' constructor
  public : static GGS_counter_obj constructor_new (C_Compiler & inLexique,
                                const GGS_lstring & argument_0,
                                const GGS_basic_type & argument_1,
                                const GGS_basic_type & argument_2,
                                const GGS_basic_type & argument_3,
                                const GGS_lstring & argument_4,
                                const GGS_lstringlist & argument_5,
                                const GGS_counter_type & argument_6,
                                const GGS_lstring & argument_7
                                COMMA_LOCATION_ARGS) ;

//--- getPtr
  public : inline cPtr_counter_obj * getPtr (void) const {
    return (cPtr_counter_obj *) mPointer ;
  }

//--- 'description' reader
  public : virtual const char * actualTypeName (void) const ;

//--- Readers
  public : GGS_basic_type  reader_max_allowed_value (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;
  public : GGS_basic_type  reader_ticks_per_base (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;
  public : GGS_basic_type  reader_min_cycle (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;
  public : GGS_lstring  reader_source (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;
  public : GGS_lstringlist  reader_acc_apps (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;
  public : GGS_counter_type  reader_type (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;
  public : GGS_lstring  reader_unit (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;

//--- Modifiers
  public : void modifier_setMax_allowed_value (C_Compiler & inLexique, const GGS_basic_type  & inValue COMMA_LOCATION_ARGS) ;
  public : void modifier_setTicks_per_base (C_Compiler & inLexique, const GGS_basic_type  & inValue COMMA_LOCATION_ARGS) ;
  public : void modifier_setMin_cycle (C_Compiler & inLexique, const GGS_basic_type  & inValue COMMA_LOCATION_ARGS) ;
  public : void modifier_setAcc_apps (C_Compiler & inLexique, const GGS_lstringlist  & inValue COMMA_LOCATION_ARGS) ;

//--- operator ()
  #ifndef DO_NOT_GENERATE_CHECKINGS
    public : cPtr_counter_obj * operator () (LOCATION_ARGS) const ;
  #else
    public : inline cPtr_counter_obj * operator () (LOCATION_ARGS) const {
      return (cPtr_counter_obj *) mPointer ;
    }
  #endif

//--- Introspection
  public : virtual const C_galgas_type_descriptorEX * typeDescriptor (void) const ;

  public : GGS_object reader_object (void) const ;

  public : static GGS_counter_obj castFromObject (C_Compiler & inLexique,
                                           const GGS_object & inObject,
                                           const GGS_location & inErrorLocation
                                           COMMA_LOCATION_ARGS) ;

} ;

//---------------------------------------------------------------------------*

extern C_galgasClassRunTimeInformationEX gClassInfoFor__counter_obj ;

//---------------------------------------------------------------------------*
//                                                                           *
//                            Map '@counter_map'                             *
//                                                                           *
//---------------------------------------------------------------------------*

class elementOf_GGS_counter_map ;

extern const C_galgas_type_descriptorEX kTypeDescriptor_GGS_counter_map ;

//---------------------------------------------------------------------------*

class GGS_counter_map : public AC_GGS_map {
//--- Element Class
  public : typedef elementOf_GGS_counter_map cElement ;

//--- Get pointers
  public : inline cElement * firstObject (void) const { return (cElement *) internalFirstObject () ; }
  public : inline cElement * lastObject (void) const { return (cElement *) internalLastObject () ; }

//--- Comparison methods
  public : GGS_bool operator_isEqual (const GGS_counter_map & inOperand) const ;
  public : GGS_bool operator_isNotEqual (const GGS_counter_map & inOperand) const ;

//--- Introspection
  public : virtual const C_galgas_type_descriptorEX * typeDescriptor (void) const ;

  public : GGS_object reader_object (void) const ;

  public : static GGS_counter_map castFromObject (C_Compiler & inLexique,
                                           const GGS_object & inObject,
                                           const GGS_location & inErrorLocation
                                           COMMA_LOCATION_ARGS) ;

//--- Create an element
  protected : virtual AC_galgas_map_element *
  new_element (const GGS_lstring & inKey, void * inInfo, const PMUInt32 inInitialState) ;

//--- Assign information to an existing element
  protected : virtual void
  assignInfo (AC_galgas_map_element * inPtr, void * inInfo) ;

//--- Enter an index
  public : void enterIndex (const GGS_string & inKey,
                            AC_galgas_index_core & outIndex) ;

//--- Get object pointer (for method call)
  public : inline GGS_counter_map * operator () (UNUSED_LOCATION_ARGS) { return this ; }
  public : inline const GGS_counter_map * operator () (UNUSED_LOCATION_ARGS) const { return this ; }

//--- 'emptyMap' constructor
  public : static GGS_counter_map constructor_emptyMap (C_Compiler & inLexique COMMA_LOCATION_ARGS) ;

//--- 'mapWithKeyAndValue' constructor
  public : static GGS_counter_map constructor_mapWithKeyAndValue (C_Compiler & inLexique,
                                             const GGS_lstring & inKey
,
                                             const GGS_counter_obj & inValue0
                                             COMMA_LOCATION_ARGS) ;

//--- Method used for duplicate a map
  protected : virtual void internalInsertForDuplication (AC_galgas_map_element * inPtr) ;

//--- Modifiers "set'Value'ForKey"

  public : static const utf32 kRemoveMessage_del [] ;

//--- 'del' Remove Modifier
  public : void modifier_del (C_Compiler & inLexique,
                                const GGS_lstring & inKey,
                                GGS_counter_obj & outParameter0 COMMA_LOCATION_ARGS) ;

  public : static const utf32 kInsertMessage_put [] ;

//--- 'put' Insert Modifier
  public : void modifier_put (C_Compiler & inLexique,
                                const GGS_lstring & inKey,
                                const GGS_counter_obj &  inParameter0 COMMA_LOCATION_ARGS) ;

  public : static const utf32 kSearchMessage_getCounter [] ;

//--- 'getCounter' Search Method
  public : void method_getCounter (C_Compiler & inLexique,
                                const GGS_lstring & inKey,
                                GGS_counter_obj   & outParameter0 COMMA_LOCATION_ARGS) const ;
//--- Internal method for removing an element
  protected : void removeElement (C_Compiler & inLexique,
                                   const utf32 * inErrorMessage,
                                   const GGS_lstring & inKey,
                                   GGS_counter_obj & outParameter0,
                                   GGS_luint * outIndex
                                   COMMA_LOCATION_ARGS) ;
//--- Internal method for inserting an element
  protected : void insertElement (C_Compiler & inLexique,
                                  const PMUInt32 inInitialState,
                                  const utf32 * inErrorMessage,
                                  const GGS_lstring & inKey,
                                   const GGS_counter_obj & inParameter0,
                                   GGS_luint * outIndex
                                   COMMA_LOCATION_ARGS) ;
//--- Internal method for searching for an element
  protected : void searchElement (C_Compiler & inLexique,
                                  const PMUInt32 inActionIndex,
                                  const utf32 * inErrorMessage,
                                  const GGS_lstring & inKey,
                                   GGS_counter_obj & outParameter0,
                                  GGS_luint * outIndex
                                  COMMA_LOCATION_ARGS) const ;
  public : virtual GGS_string reader_description (const PMSInt32 inIndentation = 0) const ;
  public : static GGS_counter_map constructor_mapWithMapToOverride (C_Compiler & inLexique,
                                            const GGS_counter_map & inMapToOverride
                                            COMMA_LOCATION_ARGS) ;
  public : GGS_counter_map reader_overriddenMap (C_Compiler & inLexique
                                            COMMA_LOCATION_ARGS) const ;

//--------------------------------- Key stringset (for map with an associated automaton)
//--------------------------------- Map Enumerator
  public : class cEnumerator : public cAbstractMapEnumerator {
  //--- Constructors
    public : inline cEnumerator (const GGS_counter_map & inMap,
                                 const bool inAscending) :
    cAbstractMapEnumerator (inMap, inAscending) {
    }
    public : inline cEnumerator (const GGS_counter_map & inMap) :
    cAbstractMapEnumerator (inMap) {
    }
  //--- Iterator method
    public : inline cElement * nextObject (void) {
      return (cElement *) internalNextObject () ;
    }
    public : /* const */ GGS_counter_obj   & _counter (LOCATION_ARGS) const ;
  } ;
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                     sorted list '@counter_by_source'                      *
//                                                                           *
//---------------------------------------------------------------------------*

class elementOf_GGS_counter_by_source ;
//---------------------------------------------------------------------------*

extern const C_galgas_type_descriptorEX kTypeDescriptor_GGS_counter_by_source ;

//---------------------------------------------------------------------------*


class GGS_counter_by_source : public AC_GGS_sortedlist {
  public : typedef elementOf_GGS_counter_by_source cElement ;
//--- Default Constructor
  public : GGS_counter_by_source (void) ;
//--- Copy Constructor
  public : GGS_counter_by_source (const GGS_counter_by_source & inSource) ;
//--- Comparison Operators
  public : GGS_bool operator_isEqual (const GGS_counter_by_source & inOperand) const ;
  public : GGS_bool operator_isNotEqual (const GGS_counter_by_source & inOperand) const ;
//--- Constructor 'emptySortedList'
  public : static GGS_counter_by_source constructor_emptySortedList (void) ;
  public : static GGS_counter_by_source constructor_sortedListWithValue (const GGS_string& argument_0,
                           const GGS_lstring & argument_1,
                           const GGS_counter_obj & argument_2) ;
//--- Get smallest object
  public : inline cElement * firstObject (void) const {
    return (cElement *) internalSmallestObject () ;
  }
//--- Get greatest object
  public : inline cElement * lastObject (void) const {
    return (cElement *) internalGreatestObject () ;
  }
//--- Operators () used for method call
  public : const GGS_counter_by_source * operator () (UNUSED_LOCATION_ARGS) const { return this ;} 
//--- Method 'smallest'
  public : void method_smallest (C_Compiler & inLexique,
                              GGS_string& _out_0,
                              GGS_lstring & _out_1,
                              GGS_counter_obj & _out_2
                              COMMA_LOCATION_ARGS) const ;
//--- Method 'greatest'
  public : void method_greatest (C_Compiler & inLexique,
                             GGS_string& _out_0,
                             GGS_lstring & _out_1,
                             GGS_counter_obj & _out_2
                             COMMA_LOCATION_ARGS) const ;
//--- Method 'popGreatest'
  public : void modifier_popGreatest (C_Compiler & inLexique,
                                GGS_string& _out_0,
                                GGS_lstring & _out_1,
                                GGS_counter_obj & _out_2
                                COMMA_LOCATION_ARGS) ;
//--- Modifier 'popSmallest'
  public : void modifier_popSmallest (C_Compiler & inLexique,
                                 GGS_string& _out_0,
                                 GGS_lstring & _out_1,
                                 GGS_counter_obj & _out_2
                                 COMMA_LOCATION_ARGS) ;
//--- Handle '.=' operator
  public : void dotAssign_operation (const GGS_counter_by_source inOperand) ;

//--- Handling '+=' GALGAS operator
  public : void addAssign_operation (const GGS_string& argument_0,
                                const GGS_lstring & argument_1,
                                const GGS_counter_obj & argument_2) ;
//--- Handling '.' GALGAS operator
  public : GGS_counter_by_source operator_concat (const GGS_counter_by_source & inOperand) const ;

//--- Internal Methods
  protected : void internalAppendValues (const GGS_string& argument_0,
                                const GGS_lstring & argument_1,
                                const GGS_counter_obj & argument_2) ;
//--- List Insulation
  protected : void insulateList (void) ;
//--- Reader 'description
  public : virtual GGS_string reader_description (const PMSInt32 inIndentation = 0) const ;
//--- Introspection
  public : virtual const C_galgas_type_descriptorEX * typeDescriptor (void) const ;

  public : GGS_object reader_object (void) const ;

  public : static GGS_counter_by_source castFromObject (C_Compiler & inLexique,
                                           const GGS_object & inObject,
                                           const GGS_location & inErrorLocation
                                           COMMA_LOCATION_ARGS) ;

//--------------------------------- Sorted List Enumerator
  public : class cEnumerator : public cAbstractSortedListEnumerator {
  //--- Constructor
    public : inline cEnumerator (const GGS_counter_by_source & inList,
                                 const bool inAscending) :
    cAbstractSortedListEnumerator (inList, inAscending) {
    }
  //--- Iterator method
    public : inline cElement * nextObject (void) {
      return (cElement *) internalNextObject () ;
    }
    public : /* const */ GGS_string & _source (LOCATION_ARGS) const ;
    public : /* const */ GGS_lstring  & _name (LOCATION_ARGS) const ;
    public : /* const */ GGS_counter_obj  & _counter (LOCATION_ARGS) const ;
  } ;
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                        Function 'maxAllowedValue'                         *
//                                                                           *
//---------------------------------------------------------------------------*

extern const C_galgas_function_descriptorEX kFunction_descriptor_maxAllowedValue ;

//---------------------------------------------------------------------------*

GGS_uint64  function_maxAllowedValue (C_Compiler &,
                                const GGS_counter_obj   COMMA_LOCATION_ARGS) ;

//---------------------------------------------------------------------------*
//                                                                           *
//                           Function 'minCycle'                             *
//                                                                           *
//---------------------------------------------------------------------------*

extern const C_galgas_function_descriptorEX kFunction_descriptor_minCycle ;

//---------------------------------------------------------------------------*

GGS_uint64  function_minCycle (C_Compiler &,
                                const GGS_counter_obj   COMMA_LOCATION_ARGS) ;

//---------------------------------------------------------------------------*
//                                                                           *
//                         Function 'ticksPerBase'                           *
//                                                                           *
//---------------------------------------------------------------------------*

extern const C_galgas_function_descriptorEX kFunction_descriptor_ticksPerBase ;

//---------------------------------------------------------------------------*

GGS_uint64  function_ticksPerBase (C_Compiler &,
                                const GGS_counter_obj   COMMA_LOCATION_ARGS) ;

//---------------------------------------------------------------------------*
//                                                                           *
//                   abstract class 'cPtr_counter_driver'                    *
//                                                                           *
//---------------------------------------------------------------------------*

class cPtr_counter_driver : public cPtr__AC_galgas_class {
//--- Constructor
  public : cPtr_counter_driver (const GGS_location & 
                                COMMA_LOCATION_ARGS) ;

//--- Attributes
  public : GGS_location  location ;
//--- Class message
  public : virtual const char * instanceMessage (void) const ;
  public : static const char * _static_message (void) ;

//--- Method for 'description' reader
  public : virtual void
  appendForDescription (C_String & ioString,
                        const PMSInt32 inIndentation) const ;

//--- Galgas RTTI
  public : virtual AC_galgasClassRunTimeInformationEX * galgasRTTI (void) const ;
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                    abstract class 'cPtr_void_driver'                      *
//                                                                           *
//---------------------------------------------------------------------------*

class cPtr_void_driver : public cPtr_counter_driver {
  private : typedef cPtr_counter_driver inherited ;
//--- Constructor
  public : cPtr_void_driver (const GGS_location & 
                                COMMA_LOCATION_ARGS) ;

//--- Attributes
//--- Class message
  public : virtual const char * instanceMessage (void) const ;
  public : static const char * _static_message (void) ;

//--- Method for 'description' reader
  public : virtual void
  appendForDescription (C_String & ioString,
                        const PMSInt32 inIndentation) const ;

//--- Comparison
  public : virtual bool
  isEqualToObject (const cPtr__AC_galgas_class * inOperand) const ;

//--- Galgas RTTI
  public : virtual AC_galgasClassRunTimeInformationEX * galgasRTTI (void) const ;

//--- Make clone
  public : virtual cPtr__AC_galgas_class * makeClone (void) const ;
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                 abstract class 'cPtr_os_internal_driver'                  *
//                                                                           *
//---------------------------------------------------------------------------*

class cPtr_os_internal_driver : public cPtr_counter_driver {
  private : typedef cPtr_counter_driver inherited ;
//--- Constructor
  public : cPtr_os_internal_driver (const GGS_location & 
                                COMMA_LOCATION_ARGS) ;

//--- Attributes
//--- Class message
  public : virtual const char * instanceMessage (void) const ;
  public : static const char * _static_message (void) ;

//--- Method for 'description' reader
  public : virtual void
  appendForDescription (C_String & ioString,
                        const PMSInt32 inIndentation) const ;

//--- Comparison
  public : virtual bool
  isEqualToObject (const cPtr__AC_galgas_class * inOperand) const ;

//--- Galgas RTTI
  public : virtual AC_galgasClassRunTimeInformationEX * galgasRTTI (void) const ;

//--- Make clone
  public : virtual cPtr__AC_galgas_class * makeClone (void) const ;
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                     abstract class 'cPtr_gpt_driver'                      *
//                                                                           *
//---------------------------------------------------------------------------*

class cPtr_gpt_driver : public cPtr_counter_driver {
  private : typedef cPtr_counter_driver inherited ;
//--- Constructor
  public : cPtr_gpt_driver (const GGS_location & ,
                                const GGS_basic_type & ,
                                const GGS_lstring & 
                                COMMA_LOCATION_ARGS) ;

//--- Attributes
  public : GGS_basic_type  ns_per_hw_tick ;
  public : GGS_lstring  gpt_channel_name ;
//--- Class message
  public : virtual const char * instanceMessage (void) const ;
  public : static const char * _static_message (void) ;

//--- Method for 'description' reader
  public : virtual void
  appendForDescription (C_String & ioString,
                        const PMSInt32 inIndentation) const ;

//--- Comparison
  public : virtual bool
  isEqualToObject (const cPtr__AC_galgas_class * inOperand) const ;

//--- Galgas RTTI
  public : virtual AC_galgasClassRunTimeInformationEX * galgasRTTI (void) const ;

//--- Make clone
  public : virtual cPtr__AC_galgas_class * makeClone (void) const ;
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                    Element of list '@time_constants'                      *
//                                                                           *
//---------------------------------------------------------------------------*

class elementOf_GGS_time_constants : public AC_GGS_list::cListElement {
//--- Attributes
  public : GGS_basic_type  ns ;
  public : GGS_lstring  const_name ;
//--- Constructor
  public : elementOf_GGS_time_constants (const GGS_basic_type & ,
                                const GGS_lstring & 
                                COMMA_LOCATION_ARGS) ;

//--- Access to next
  public : inline elementOf_GGS_time_constants * nextObject (void) const { return (elementOf_GGS_time_constants *) internalNextItem () ; }

//--- Access to previous
  public : inline elementOf_GGS_time_constants * previousObject (void) const { return (elementOf_GGS_time_constants *) internalPreviousItem () ; }

//--- Element comparison
  protected : virtual bool
  isEqualToObject (const cListElement * inOperand) const ;

//--- Method used for description
  public : virtual void
  appendForDescription (C_String & ioString,
                        const PMSInt32 inIndentation) const ;

//--- Friend class declaration
  friend class GGS_time_constants ;
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                    abstract class 'cPtr_counter_type'                     *
//                                                                           *
//---------------------------------------------------------------------------*

class cPtr_counter_type : public cPtr__AC_galgas_class {
//--- Constructor
  public : cPtr_counter_type (const GGS_location & 
                                COMMA_LOCATION_ARGS) ;

//--- Attributes
  public : GGS_location  location ;
//--- Class message
  public : virtual const char * instanceMessage (void) const ;
  public : static const char * _static_message (void) ;

//--- Method for 'description' reader
  public : virtual void
  appendForDescription (C_String & ioString,
                        const PMSInt32 inIndentation) const ;

//--- Galgas RTTI
  public : virtual AC_galgasClassRunTimeInformationEX * galgasRTTI (void) const ;
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                    abstract class 'cPtr_void_counter'                     *
//                                                                           *
//---------------------------------------------------------------------------*

class cPtr_void_counter : public cPtr_counter_type {
  private : typedef cPtr_counter_type inherited ;
//--- Constructor
  public : cPtr_void_counter (const GGS_location & 
                                COMMA_LOCATION_ARGS) ;

//--- Attributes
//--- Class message
  public : virtual const char * instanceMessage (void) const ;
  public : static const char * _static_message (void) ;

//--- Method for 'description' reader
  public : virtual void
  appendForDescription (C_String & ioString,
                        const PMSInt32 inIndentation) const ;

//--- Comparison
  public : virtual bool
  isEqualToObject (const cPtr__AC_galgas_class * inOperand) const ;

//--- Galgas RTTI
  public : virtual AC_galgasClassRunTimeInformationEX * galgasRTTI (void) const ;

//--- Make clone
  public : virtual cPtr__AC_galgas_class * makeClone (void) const ;
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                  abstract class 'cPtr_software_counter'                   *
//                                                                           *
//---------------------------------------------------------------------------*

class cPtr_software_counter : public cPtr_counter_type {
  private : typedef cPtr_counter_type inherited ;
//--- Constructor
  public : cPtr_software_counter (const GGS_location & 
                                COMMA_LOCATION_ARGS) ;

//--- Attributes
//--- Class message
  public : virtual const char * instanceMessage (void) const ;
  public : static const char * _static_message (void) ;

//--- Method for 'description' reader
  public : virtual void
  appendForDescription (C_String & ioString,
                        const PMSInt32 inIndentation) const ;

//--- Comparison
  public : virtual bool
  isEqualToObject (const cPtr__AC_galgas_class * inOperand) const ;

//--- Galgas RTTI
  public : virtual AC_galgasClassRunTimeInformationEX * galgasRTTI (void) const ;

//--- Make clone
  public : virtual cPtr__AC_galgas_class * makeClone (void) const ;
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                  abstract class 'cPtr_hardware_counter'                   *
//                                                                           *
//---------------------------------------------------------------------------*

class cPtr_hardware_counter : public cPtr_counter_type {
  private : typedef cPtr_counter_type inherited ;
//--- Constructor
  public : cPtr_hardware_counter (const GGS_location & ,
                                const GGS_counter_driver & ,
                                const GGS_time_constants & 
                                COMMA_LOCATION_ARGS) ;

//--- Attributes
  public : GGS_counter_driver  driver ;
  public : GGS_time_constants  time_consts ;
//--- Class message
  public : virtual const char * instanceMessage (void) const ;
  public : static const char * _static_message (void) ;

//--- Method for 'description' reader
  public : virtual void
  appendForDescription (C_String & ioString,
                        const PMSInt32 inIndentation) const ;

//--- Comparison
  public : virtual bool
  isEqualToObject (const cPtr__AC_galgas_class * inOperand) const ;

//--- Galgas RTTI
  public : virtual AC_galgasClassRunTimeInformationEX * galgasRTTI (void) const ;

//--- Make clone
  public : virtual cPtr__AC_galgas_class * makeClone (void) const ;
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                    abstract class 'cPtr_counter_obj'                      *
//                                                                           *
//---------------------------------------------------------------------------*

class cPtr_counter_obj : public cPtr_oil_obj {
  private : typedef cPtr_oil_obj inherited ;
//--- Constructor
  public : cPtr_counter_obj (const GGS_lstring & ,
                                const GGS_basic_type & ,
                                const GGS_basic_type & ,
                                const GGS_basic_type & ,
                                const GGS_lstring & ,
                                const GGS_lstringlist & ,
                                const GGS_counter_type & ,
                                const GGS_lstring & 
                                COMMA_LOCATION_ARGS) ;

//--- Attributes
  public : GGS_basic_type  max_allowed_value ;
  public : GGS_basic_type  ticks_per_base ;
  public : GGS_basic_type  min_cycle ;
  public : GGS_lstring  source ;
  public : GGS_lstringlist  acc_apps ;
  public : GGS_counter_type  type ;
  public : GGS_lstring  unit ;
//--- Class message
  public : virtual const char * instanceMessage (void) const ;
  public : static const char * _static_message (void) ;

//--- Method for 'description' reader
  public : virtual void
  appendForDescription (C_String & ioString,
                        const PMSInt32 inIndentation) const ;

//--- Comparison
  public : virtual bool
  isEqualToObject (const cPtr__AC_galgas_class * inOperand) const ;

//--- Galgas RTTI
  public : virtual AC_galgasClassRunTimeInformationEX * galgasRTTI (void) const ;

//--- Make clone
  public : virtual cPtr__AC_galgas_class * makeClone (void) const ;
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                      Element of map '@counter_map'                        *
//                                                                           *
//---------------------------------------------------------------------------*

class e_counter_map {
  public : GGS_counter_obj  counter ;

  public : e_counter_map (void) ;
} ;

//---------------------------------------------------------------------------*

class elementOf_GGS_counter_map : public AC_galgas_map_element {
//--- Constructor
  public : elementOf_GGS_counter_map (const GGS_lstring & inKey,
                                     const PMSInt32 inIndex,
                                     const e_counter_map & inInfo,
                                     const PMUInt32 inInitialState = 0) ;
//--- Get pointers
  public : inline elementOf_GGS_counter_map * nextObject (void) const { return (elementOf_GGS_counter_map *) mNextItem ; }
  public : inline elementOf_GGS_counter_map * infObject (void) const { return (elementOf_GGS_counter_map *) mInfPtr ; }
  public : inline elementOf_GGS_counter_map * supObject (void) const { return (elementOf_GGS_counter_map *) mSupPtr ; }
//--- Comparison
  protected : virtual bool isEqualToMapElement (const AC_galgas_map_element * inOperand) const ;
//--- Data member
  public : e_counter_map mInfo ;
//--- Method for 'description' reader
  public : void appendForMapDescription (const PMSInt32 inElementIndex,
                                         C_String & ioString,
                                         const PMSInt32 inIndentation) const ;
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//               Element of sorted list '@counter_by_source'                 *
//                                                                           *
//---------------------------------------------------------------------------*

class elementOf_GGS_counter_by_source : public AC_GGS_sortedlist::cSortedListElement {
//--- Attributes
  public : GGS_string source ;
  public : GGS_lstring  name ;
  public : GGS_counter_obj  counter ;
//--- Constructor
  public : elementOf_GGS_counter_by_source (const GGS_string& ,
                                const GGS_lstring & ,
                                const GGS_counter_obj & ) ;

//--- Access to next
  public : inline elementOf_GGS_counter_by_source * nextObject (void) const { return (elementOf_GGS_counter_by_source *) internalNextItem () ; }
//--- Access to previous
  public : inline elementOf_GGS_counter_by_source * previousObject (void) const { return (elementOf_GGS_counter_by_source *) internalPreviousItem () ; }
//--- Element comparison
  protected : virtual bool
  isEqualToObject (const cSortedListElement * inOperand) const ;
//--- Method used for sorting elements
  protected : virtual PMSInt32 compareForSorting (const cSortedListElement * inOperand) const ;
//--- Method used for description
  public : virtual void
  appendForDescription (C_String & ioString,
                        const PMSInt32 inIndentation) const ;
  friend class GGS_counter_by_source ;
} ;

//---------------------------------------------------------------------------*

#endif
