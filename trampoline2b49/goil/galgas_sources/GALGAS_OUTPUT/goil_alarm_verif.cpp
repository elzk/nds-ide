//---------------------------------------------------------------------------*
//                                                                           *
//                       File 'goil_alarm_verif.cpp'                         *
//                        Generated by version 2.0.0                         *
//                       july 7th, 2010, at 17h16'14"                        *
//                                                                           *
//---------------------------------------------------------------------------*

//--- START OF USER ZONE 1


//--- END OF USER ZONE 1

//---------------------------------------------------------------------------*

#include "version_libpm.h"
#if CURRENT_LIBPM_VERSION != 820
  #error "This file has been compiled with a version of GALGAS that uses libpm version 820, different than the current version (CURRENT_LIBPM_VERSION) of libpm"
#endif

//---------------------------------------------------------------------------*

#include <typeinfo>
#include "utilities/MF_MemoryControl.h"
#include "files/C_TextFileWrite.h"
#include "galgas/C_galgas_CLI_Options.h"
#include "goil_alarm_verif.h"

//---------------------------------------------------------------------------*

#ifndef DO_NOT_GENERATE_CHECKINGS
  #define SOURCE_FILE_AT_LINE(line) "goil_alarm_verif.gSemantics", line
  #define COMMA_SOURCE_FILE_AT_LINE(line) , SOURCE_FILE_AT_LINE(line)
#else
  #define SOURCE_FILE_AT_LINE(line) 
  #define COMMA_SOURCE_FILE_AT_LINE(line) 
#endif


//--- START OF USER ZONE 2


//--- END OF USER ZONE 2

//---------------------------------------------------------------------------*
//                                                                           *
//          Implementation of routine "counters_of_alarms_defined"           *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_counters_of_alarms_defined (C_Compiler & inLexique,
                                GGS_alarm_map   var_cas_alarms,
                                GGS_counter_map   var_cas_counters
                        COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_counters_of_alarms_defined at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  {
    GGS_alarm_map::cEnumerator enumerator_454 (var_cas_alarms, true) ;
    const GGS_alarm_map::cElement * operand_454 = NULL ;
    while (((operand_454 = enumerator_454.nextObject ()))) {
      macroValidPointer (operand_454) ;
      GGS_lstring  var_cas_counter = operand_454->mInfo.alarm.reader_counter_name (inLexique COMMA_SOURCE_FILE_AT_LINE (20)) ;
      const GGS_bool cond_763 = ((var_cas_counters.reader_hasKey (var_cas_counter.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (21)))).operator_not ()).operator_and ((var_cas_counter.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (21))).operator_isNotEqual (GGS_string ("SystemCounter"))) ;
      if (cond_763.isBuiltAndTrue ()) {
        var_cas_counter.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((GGS_string ("counter ")).operator_concat (var_cas_counter.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (22)))).operator_concat (GGS_string (" is not defined !")) COMMA_SOURCE_FILE_AT_LINE (23)) ;
      }else if (cond_763.isBuiltAndFalse ()) {
        { const GGS_autostart_obj _var_1976 = operand_454->mInfo.alarm.reader_autostart_params (inLexique COMMA_SOURCE_FILE_AT_LINE (29)) ; // CAST instruction
          if (_var_1976.getPtr () != NULL) {
            macroValidPointer (_var_1976.getPtr ()) ;
            if (typeid (cPtr_alarm_autostart_true) == typeid (* (_var_1976.getPtr ()))) {
              const GGS_alarm_autostart_true var_cas_a (_var_1976.getPtr ()) ;
              GGS_location  var_cas_alarm_loc = var_cas_a.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (31)) ;
              GGS_uint  var_cas_alarm_time = var_cas_a.reader_alarm_time (inLexique COMMA_SOURCE_FILE_AT_LINE (32)).reader_uint64 (inLexique COMMA_SOURCE_FILE_AT_LINE (32)).reader_uint (inLexique COMMA_SOURCE_FILE_AT_LINE (32)) ;
              GGS_uint  var_cas_cycle_time = var_cas_a.reader_cycle_time (inLexique COMMA_SOURCE_FILE_AT_LINE (33)).reader_uint64 (inLexique COMMA_SOURCE_FILE_AT_LINE (33)).reader_uint (inLexique COMMA_SOURCE_FILE_AT_LINE (33)) ;
              const GGS_bool cond_1490 = (var_cas_alarm_time).operator_isEqual (GGS_uint (0U)) ;
              if (cond_1490.isBuiltAndTrue ()) {
                const GGS_bool cond_1371 = (gOption_goil_5F_options_autosar_5F_on.reader_value ()).operator_isEqual (GGS_bool (true)) ;
                if (cond_1371.isBuiltAndTrue ()) {
                  var_cas_a.reader_alarm_time (inLexique COMMA_SOURCE_FILE_AT_LINE (38)).reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("ALARMTIME must be > 0") COMMA_SOURCE_FILE_AT_LINE (39)) ;
                }else if (cond_1371.isBuiltAndFalse ()) {
                  var_cas_a.reader_alarm_time (inLexique COMMA_SOURCE_FILE_AT_LINE (40)).reader_location (inLexique COMMA_HERE).signalGGSSemanticWarning (inLexique, GGS_string ("ALARMTIME equal to 0 has an undefined behavior") COMMA_SOURCE_FILE_AT_LINE (40)) ;
                }
              }
              GGS_counter_obj  var_cas_ct ;
              if (var_cas_counters.isBuilt ()) {
                var_cas_counters (HERE)->method_getCounter (inLexique, var_cas_counter, var_cas_ct COMMA_SOURCE_FILE_AT_LINE (45)) ;
              }
              { const GGS_basic_type _var_1954 = var_cas_ct.reader_max_allowed_value (inLexique COMMA_SOURCE_FILE_AT_LINE (46)) ; // CAST instruction
                if (_var_1954.getPtr () != NULL) {
                  macroValidPointer (_var_1954.getPtr ()) ;
                  if (typeid (cPtr_uint32_class) == typeid (* (_var_1954.getPtr ()))) {
                    const GGS_uint32_class var_cas_mc (_var_1954.getPtr ()) ;
                    const GGS_bool cond_1784 = (var_cas_alarm_time).operator_strictSup (var_cas_mc.reader_value (inLexique COMMA_SOURCE_FILE_AT_LINE (48))) ;
                    if (cond_1784.isBuiltAndTrue ()) {
                      var_cas_a.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (49)).reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("ALARMTIME is greater than counter MAXALLOWEDVALUE") COMMA_SOURCE_FILE_AT_LINE (50)) ;
                    }
                    const GGS_bool cond_1932 = (var_cas_cycle_time).operator_strictSup (var_cas_mc.reader_value (inLexique COMMA_SOURCE_FILE_AT_LINE (51))) ;
                    if (cond_1932.isBuiltAndTrue ()) {
                      var_cas_a.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (52)).reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("CYCLETIME is greater than counter MAXALLOWEDVALUE") COMMA_SOURCE_FILE_AT_LINE (53)) ;
                    }
                  }else{
                  }
                }
              }
            }else{
            }
          }
        }
      }
    }
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_counters_of_alarms_defined\n") ;
  #endif
}

//---------------------------------------------------------------------------*

