//---------------------------------------------------------------------------*
//                                                                           *
//                  File 'goil_semantic_verification.cpp'                    *
//                        Generated by version 2.0.0                         *
//                       july 7th, 2010, at 17h16'14"                        *
//                                                                           *
//---------------------------------------------------------------------------*

//--- START OF USER ZONE 1


//--- END OF USER ZONE 1

//---------------------------------------------------------------------------*

#include "version_libpm.h"
#if CURRENT_LIBPM_VERSION != 820
  #error "This file has been compiled with a version of GALGAS that uses libpm version 820, different than the current version (CURRENT_LIBPM_VERSION) of libpm"
#endif

//---------------------------------------------------------------------------*

#include <typeinfo>
#include "utilities/MF_MemoryControl.h"
#include "files/C_TextFileWrite.h"
#include "galgas/C_galgas_CLI_Options.h"
#include "goil_semantic_verification.h"

//---------------------------------------------------------------------------*

#ifndef DO_NOT_GENERATE_CHECKINGS
  #define SOURCE_FILE_AT_LINE(line) "goil_semantic_verification.gSemantics", line
  #define COMMA_SOURCE_FILE_AT_LINE(line) , SOURCE_FILE_AT_LINE(line)
#else
  #define SOURCE_FILE_AT_LINE(line) 
  #define COMMA_SOURCE_FILE_AT_LINE(line) 
#endif


//--- START OF USER ZONE 2


//--- END OF USER ZONE 2

//---------------------------------------------------------------------------*
//                                                                           *
//             Implementation of routine "counters_well_formed"              *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_counters_well_formed (C_Compiler & inLexique,
                                const GGS_counter_map   var_cas_counters
                        COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_counters_well_formed at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  {
    GGS_counter_map::cEnumerator enumerator_1448 (var_cas_counters, true) ;
    const GGS_counter_map::cElement * operand_1448 = NULL ;
    while (((operand_1448 = enumerator_1448.nextObject ()))) {
      macroValidPointer (operand_1448) ;
      { const GGS_basic_type _var_1693 = operand_1448->mInfo.counter.reader_max_allowed_value (inLexique COMMA_SOURCE_FILE_AT_LINE (46)) ; // CAST instruction
        if (_var_1693.getPtr () != NULL) {
          macroValidPointer (_var_1693.getPtr ()) ;
          if (typeid (cPtr_void) == typeid (* (_var_1693.getPtr ()))) {
            operand_1448->mKey.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (48)).reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, (GGS_string ("MAXALLOWEDVALUE attribute not defined for COUNTER ")).operator_concat (operand_1448->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (48))) COMMA_SOURCE_FILE_AT_LINE (49)) ;
          }else{
          }
        }
      }
      { const GGS_basic_type _var_1890 = operand_1448->mInfo.counter.reader_ticks_per_base (inLexique COMMA_SOURCE_FILE_AT_LINE (52)) ; // CAST instruction
        if (_var_1890.getPtr () != NULL) {
          macroValidPointer (_var_1890.getPtr ()) ;
          if (typeid (cPtr_void) == typeid (* (_var_1890.getPtr ()))) {
            operand_1448->mKey.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (54)).reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, (GGS_string ("TICKSPERBASE attribute not defined for COUNTER ")).operator_concat (operand_1448->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (54))) COMMA_SOURCE_FILE_AT_LINE (55)) ;
          }else{
          }
        }
      }
      { const GGS_basic_type _var_2078 = operand_1448->mInfo.counter.reader_min_cycle (inLexique COMMA_SOURCE_FILE_AT_LINE (58)) ; // CAST instruction
        if (_var_2078.getPtr () != NULL) {
          macroValidPointer (_var_2078.getPtr ()) ;
          if (typeid (cPtr_void) == typeid (* (_var_2078.getPtr ()))) {
            operand_1448->mKey.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (60)).reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, (GGS_string ("MINCYCLE attribute not defined for COUNTER ")).operator_concat (operand_1448->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (60))) COMMA_SOURCE_FILE_AT_LINE (61)) ;
          }else{
          }
        }
      }
    }
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_counters_well_formed\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//              Implementation of routine "alarms_well_formed"               *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_alarms_well_formed (C_Compiler & inLexique,
                                const GGS_alarm_map   var_cas_alarms
                        COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_alarms_well_formed at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  {
    GGS_alarm_map::cEnumerator enumerator_2392 (var_cas_alarms, true) ;
    const GGS_alarm_map::cElement * operand_2392 = NULL ;
    while (((operand_2392 = enumerator_2392.nextObject ()))) {
      macroValidPointer (operand_2392) ;
      const GGS_bool cond_2579 = (operand_2392->mInfo.alarm.reader_counter_name (inLexique COMMA_SOURCE_FILE_AT_LINE (84)).reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (84))).operator_isEqual (GGS_string ("")) ;
      if (cond_2579.isBuiltAndTrue ()) {
        operand_2392->mKey.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, (GGS_string ("COUNTER attribute undefined for ALARM ")).operator_concat (operand_2392->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (85))) COMMA_SOURCE_FILE_AT_LINE (86)) ;
      }
      { const GGS_action_obj _var_2752 = operand_2392->mInfo.alarm.reader_action_params (inLexique COMMA_SOURCE_FILE_AT_LINE (88)) ; // CAST instruction
        if (_var_2752.getPtr () != NULL) {
          macroValidPointer (_var_2752.getPtr ()) ;
          if (typeid (cPtr_void_action) == typeid (* (_var_2752.getPtr ()))) {
            operand_2392->mKey.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, (GGS_string ("ACTION attribute undefined for ALARM ")).operator_concat (operand_2392->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (90))) COMMA_SOURCE_FILE_AT_LINE (91)) ;
          }else{
          }
        }
      }
      { const GGS_autostart_obj _var_2928 = operand_2392->mInfo.alarm.reader_autostart_params (inLexique COMMA_SOURCE_FILE_AT_LINE (94)) ; // CAST instruction
        if (_var_2928.getPtr () != NULL) {
          macroValidPointer (_var_2928.getPtr ()) ;
          if (typeid (cPtr_autostart_void) == typeid (* (_var_2928.getPtr ()))) {
            operand_2392->mKey.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, (GGS_string ("AUTOSTART attribute undefined for ALARM ")).operator_concat (operand_2392->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (96))) COMMA_SOURCE_FILE_AT_LINE (97)) ;
          }else{
          }
        }
      }
    }
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_alarms_well_formed\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//              Implementation of routine "events_well_formed"               *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_events_well_formed (C_Compiler & inLexique,
                                const GGS_event_map   var_cas_events
                        COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_events_well_formed at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  {
    GGS_event_map::cEnumerator enumerator_3207 (var_cas_events, true) ;
    const GGS_event_map::cElement * operand_3207 = NULL ;
    while (((operand_3207 = enumerator_3207.nextObject ()))) {
      macroValidPointer (operand_3207) ;
      { const GGS_event_mask_obj _var_3486 = operand_3207->mInfo.event.reader_mask (inLexique COMMA_SOURCE_FILE_AT_LINE (117)) ; // CAST instruction
        if (_var_3486.getPtr () != NULL) {
          macroValidPointer (_var_3486.getPtr ()) ;
          if (typeid (cPtr_event_mask_void_obj) == typeid (* (_var_3486.getPtr ()))) {
            const GGS_event_mask_void_obj var_cas_mask (_var_3486.getPtr ()) ;
            operand_3207->mKey.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, (GGS_string ("MASK attribute undefined for EVENT ")).operator_concat (operand_3207->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (119))) COMMA_SOURCE_FILE_AT_LINE (120)) ;
            var_cas_mask.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (120)).reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("was previously defined here") COMMA_SOURCE_FILE_AT_LINE (121)) ;
          }else{
          }
        }
      }
    }
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_events_well_formed\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//Implementation of routine "all_events_and_resources_and_messages_defined_and_used"*
//                                                                           *
//---------------------------------------------------------------------------*

void routine_all_events_and_resources_and_messages_defined_and_used (C_Compiler & inLexique,
                                const GGS_root_obj   var_cas_cpu
                        COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_all_events_and_resources_and_messages_defined_and_used at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  GGS_task_map  var_cas_tasks = var_cas_cpu.reader_tasks (inLexique COMMA_SOURCE_FILE_AT_LINE (130)) ;
  GGS_isr_map  var_cas_isrs = var_cas_cpu.reader_isrs (inLexique COMMA_SOURCE_FILE_AT_LINE (131)) ;
  GGS_event_map  var_cas_events = var_cas_cpu.reader_events (inLexique COMMA_SOURCE_FILE_AT_LINE (132)) ;
  GGS_resource_map  var_cas_resources = var_cas_cpu.reader_resources (inLexique COMMA_SOURCE_FILE_AT_LINE (133)) ;
  GGS_message_map  var_cas_messages = var_cas_cpu.reader_messages (inLexique COMMA_SOURCE_FILE_AT_LINE (134)) ;
  GGS_stringset  var_cas_used_events = GGS_stringset ::constructor_emptySet () ;
  GGS_stringset  var_cas_used_resources = GGS_stringset ::constructor_emptySet () ;
  GGS_stringset  var_cas_used_messages = GGS_stringset ::constructor_emptySet () ;
  {
    GGS_task_map::cEnumerator enumerator_4002 (var_cas_tasks, true) ;
    const GGS_task_map::cElement * operand_4002 = NULL ;
    while (((operand_4002 = enumerator_4002.nextObject ()))) {
      macroValidPointer (operand_4002) ;
      GGS_lstringlist  var_cas_task_events ;
      var_cas_task_events = operand_4002->mInfo.task.reader_events (inLexique COMMA_SOURCE_FILE_AT_LINE (144)) ;
      {
        GGS_lstringlist::cEnumerator enumerator_4172 (var_cas_task_events, true) ;
        const GGS_lstringlist::cElement * operand_4172 = NULL ;
        while (((operand_4172 = enumerator_4172.nextObject ()))) {
          macroValidPointer (operand_4172) ;
          var_cas_used_events.addAssign_operation (operand_4172->mValue.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (146))) ;
          const GGS_bool cond_4379 = (var_cas_events.reader_hasKey (operand_4172->mValue.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (147)))).operator_not () ;
          if (cond_4379.isBuiltAndTrue ()) {
            operand_4172->mValue.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((GGS_string ("EVENT ")).operator_concat (operand_4172->mValue.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (148)))).operator_concat (GGS_string (" is not defined")) COMMA_SOURCE_FILE_AT_LINE (149)) ;
          }
        }
      }
      GGS_lstringlist  var_cas_task_resources ;
      var_cas_task_resources = operand_4002->mInfo.task.reader_resources (inLexique COMMA_SOURCE_FILE_AT_LINE (154)) ;
      {
        GGS_lstringlist::cEnumerator enumerator_4546 (var_cas_task_resources, true) ;
        const GGS_lstringlist::cElement * operand_4546 = NULL ;
        while (((operand_4546 = enumerator_4546.nextObject ()))) {
          macroValidPointer (operand_4546) ;
          var_cas_used_resources.addAssign_operation (operand_4546->mValue.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (156))) ;
          const GGS_bool cond_4752 = (var_cas_resources.reader_hasKey (operand_4546->mValue.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (157)))).operator_not () ;
          if (cond_4752.isBuiltAndTrue ()) {
            operand_4546->mValue.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((GGS_string ("RESOURCE ")).operator_concat (operand_4546->mValue.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (158)))).operator_concat (GGS_string (" is not defined")) COMMA_SOURCE_FILE_AT_LINE (159)) ;
          }
        }
      }
      GGS_lstringlist  var_cas_task_messages ;
      var_cas_task_messages = operand_4002->mInfo.task.reader_messages (inLexique COMMA_SOURCE_FILE_AT_LINE (164)) ;
      {
        GGS_lstringlist::cEnumerator enumerator_4914 (var_cas_task_messages, true) ;
        const GGS_lstringlist::cElement * operand_4914 = NULL ;
        while (((operand_4914 = enumerator_4914.nextObject ()))) {
          macroValidPointer (operand_4914) ;
          var_cas_used_messages.addAssign_operation (operand_4914->mValue.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (166))) ;
          const GGS_bool cond_5124 = (var_cas_messages.reader_hasKey (operand_4914->mValue.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (167)))).operator_not () ;
          if (cond_5124.isBuiltAndTrue ()) {
            operand_4914->mValue.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((GGS_string ("MESSAGE ")).operator_concat (operand_4914->mValue.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (168)))).operator_concat (GGS_string (" is not defined")) COMMA_SOURCE_FILE_AT_LINE (169)) ;
          }
        }
      }
    }
  }
  {
    GGS_isr_map::cEnumerator enumerator_5236 (var_cas_isrs, true) ;
    const GGS_isr_map::cElement * operand_5236 = NULL ;
    while (((operand_5236 = enumerator_5236.nextObject ()))) {
      macroValidPointer (operand_5236) ;
      GGS_lstringlist  var_cas_isr_resources = operand_5236->mInfo.isr.reader_resources (inLexique COMMA_SOURCE_FILE_AT_LINE (177)) ;
      {
        GGS_lstringlist::cEnumerator enumerator_5395 (var_cas_isr_resources, true) ;
        const GGS_lstringlist::cElement * operand_5395 = NULL ;
        while (((operand_5395 = enumerator_5395.nextObject ()))) {
          macroValidPointer (operand_5395) ;
          var_cas_used_resources.addAssign_operation (operand_5395->mValue.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (179))) ;
          const GGS_bool cond_5594 = (var_cas_resources.reader_hasKey (operand_5395->mValue.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (180)))).operator_not () ;
          if (cond_5594.isBuiltAndTrue ()) {
            operand_5236->mKey.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((GGS_string ("RESOURCE ")).operator_concat (operand_5395->mValue)).operator_concat (GGS_string (" is not defined")) COMMA_SOURCE_FILE_AT_LINE (182)) ;
          }
        }
      }
      GGS_lstringlist  var_cas_isr_messages ;
      var_cas_isr_messages = operand_5236->mInfo.isr.reader_messages (inLexique COMMA_SOURCE_FILE_AT_LINE (187)) ;
      {
        GGS_lstringlist::cEnumerator enumerator_5752 (var_cas_isr_messages, true) ;
        const GGS_lstringlist::cElement * operand_5752 = NULL ;
        while (((operand_5752 = enumerator_5752.nextObject ()))) {
          macroValidPointer (operand_5752) ;
          var_cas_used_messages.addAssign_operation (operand_5752->mValue.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (189))) ;
          const GGS_bool cond_5952 = (var_cas_messages.reader_hasKey (operand_5752->mValue.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (190)))).operator_not () ;
          if (cond_5952.isBuiltAndTrue ()) {
            operand_5236->mKey.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((GGS_string ("MESSAGE ")).operator_concat (operand_5752->mValue)).operator_concat (GGS_string (" is not defined")) COMMA_SOURCE_FILE_AT_LINE (192)) ;
          }
        }
      }
    }
  }
  {
    GGS_event_map::cEnumerator enumerator_6060 (var_cas_events, true) ;
    const GGS_event_map::cElement * operand_6060 = NULL ;
    while (((operand_6060 = enumerator_6060.nextObject ()))) {
      macroValidPointer (operand_6060) ;
      const GGS_bool cond_6236 = (var_cas_used_events.reader_hasKey (operand_6060->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (199)))).operator_not () ;
      if (cond_6236.isBuiltAndTrue ()) {
        operand_6060->mKey.reader_location (inLexique COMMA_HERE).signalGGSSemanticWarning (inLexique, ((GGS_string ("EVENT ")).operator_concat (operand_6060->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (200)))).operator_concat (GGS_string (" is defined but never used")) COMMA_SOURCE_FILE_AT_LINE (200)) ;
      }
    }
  }
  {
    GGS_resource_map::cEnumerator enumerator_6342 (var_cas_resources, true) ;
    const GGS_resource_map::cElement * operand_6342 = NULL ;
    while (((operand_6342 = enumerator_6342.nextObject ()))) {
      macroValidPointer (operand_6342) ;
      const GGS_bool cond_6516 = (var_cas_used_resources.reader_hasKey (operand_6342->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (206)))).operator_not () ;
      if (cond_6516.isBuiltAndTrue ()) {
        operand_6342->mKey.reader_location (inLexique COMMA_HERE).signalGGSSemanticWarning (inLexique, ((GGS_string ("RESOURCE ")).operator_concat (operand_6342->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (207)))).operator_concat (GGS_string (" is defined but never used")) COMMA_SOURCE_FILE_AT_LINE (207)) ;
      }
    }
  }
  {
    GGS_message_map::cEnumerator enumerator_6620 (var_cas_messages, true) ;
    const GGS_message_map::cElement * operand_6620 = NULL ;
    while (((operand_6620 = enumerator_6620.nextObject ()))) {
      macroValidPointer (operand_6620) ;
      const GGS_bool cond_6796 = (var_cas_used_messages.reader_hasKey (operand_6620->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (213)))).operator_not () ;
      if (cond_6796.isBuiltAndTrue ()) {
        operand_6620->mKey.reader_location (inLexique COMMA_HERE).signalGGSSemanticWarning (inLexique, ((GGS_string ("MESSAGE ")).operator_concat (operand_6620->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (214)))).operator_concat (GGS_string (" is defined but never used")) COMMA_SOURCE_FILE_AT_LINE (214)) ;
      }
    }
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_all_events_and_resources_and_messages_defined_and_used\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//          Implementation of routine "all_event_masks_different"            *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_all_event_masks_different (C_Compiler & inLexique,
                                GGS_event_map   var_cas_events
                        COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_all_event_masks_different at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  GGS_stringset  var_cas_defined_masks = GGS_stringset ::constructor_emptySet () ;
  {
    GGS_event_map::cEnumerator enumerator_6950 (var_cas_events, true) ;
    const GGS_event_map::cElement * operand_6950 = NULL ;
    while (((operand_6950 = enumerator_6950.nextObject ()))) {
      macroValidPointer (operand_6950) ;
      GGS_event_mask_obj  var_cas_mask ;
      var_cas_mask = operand_6950->mInfo.event.reader_mask (inLexique COMMA_SOURCE_FILE_AT_LINE (226)) ;
      { const GGS_event_mask_obj _var_7377 = var_cas_mask ; // CAST instruction
        if (_var_7377.getPtr () != NULL) {
          macroValidPointer (_var_7377.getPtr ()) ;
          if (typeid (cPtr_event_mask_user_obj) == typeid (* (_var_7377.getPtr ()))) {
            const GGS_event_mask_user_obj var_cas_m (_var_7377.getPtr ()) ;
            GGS_string var_cas_mask_in_string = var_cas_m.reader_mask (inLexique COMMA_SOURCE_FILE_AT_LINE (229)).reader_uint64 (inLexique COMMA_SOURCE_FILE_AT_LINE (229)).reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (229)) ;
            const GGS_bool cond_7298 = var_cas_defined_masks.reader_hasKey (var_cas_mask_in_string) ;
            if (cond_7298.isBuiltAndTrue ()) {
              operand_6950->mKey.reader_location (inLexique COMMA_HERE).signalGGSSemanticWarning (inLexique, ((GGS_string ("Mask ")).operator_concat (var_cas_mask_in_string)).operator_concat (GGS_string (" already used")) COMMA_SOURCE_FILE_AT_LINE (231)) ;
            }else if (cond_7298.isBuiltAndFalse ()) {
              var_cas_defined_masks.addAssign_operation (var_cas_mask_in_string) ;
            }
          }else{
          }
        }
      }
    }
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_all_event_masks_different\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//          Implementation of routine "all_alarm_actions_correct"            *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_all_alarm_actions_correct (C_Compiler & inLexique,
                                GGS_alarm_map   var_cas_alarms,
                                GGS_task_map   var_cas_tasks,
                                GGS_counter_map   var_cas_counters
                        COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_all_alarm_actions_correct at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  GGS_stringset  var_cas_defined_task_names ;
  var_cas_defined_task_names = var_cas_tasks.reader_allKeys (inLexique COMMA_SOURCE_FILE_AT_LINE (247)) ;
  {
    GGS_alarm_map::cEnumerator enumerator_7613 (var_cas_alarms, true) ;
    const GGS_alarm_map::cElement * operand_7613 = NULL ;
    while (((operand_7613 = enumerator_7613.nextObject ()))) {
      macroValidPointer (operand_7613) ;
      GGS_action_obj  var_cas_alarm_action ;
      var_cas_alarm_action = operand_7613->mInfo.alarm.reader_action_params (inLexique COMMA_SOURCE_FILE_AT_LINE (250)) ;
      { const GGS_action_obj _var_9468 = var_cas_alarm_action ; // CAST instruction
        if (_var_9468.getPtr () != NULL) {
          macroValidPointer (_var_9468.getPtr ()) ;
          if (typeid (cPtr_setevent_action) == typeid (* (_var_9468.getPtr ()))) {
            const GGS_setevent_action var_cas_act (_var_9468.getPtr ()) ;
            const GGS_bool cond_7972 = (var_cas_defined_task_names.reader_hasKey (var_cas_act.reader_task_name (inLexique COMMA_SOURCE_FILE_AT_LINE (253)).reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (253)))).operator_not () ;
            if (cond_7972.isBuiltAndTrue ()) {
              var_cas_act.reader_task_name (inLexique COMMA_SOURCE_FILE_AT_LINE (254)).reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((GGS_string ("TASK ")).operator_concat (var_cas_act.reader_task_name (inLexique COMMA_SOURCE_FILE_AT_LINE (254)).reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (254)))).operator_concat (GGS_string (" is never defined")) COMMA_SOURCE_FILE_AT_LINE (255)) ;
            }else if (cond_7972.isBuiltAndFalse ()) {
              GGS_task_obj  var_cas_task_data ;
              GGS_lstringlist  var_cas_known_events ;
              if (var_cas_tasks.isBuilt ()) {
                var_cas_tasks (HERE)->method_get (inLexique, var_cas_act.reader_task_name (inLexique COMMA_SOURCE_FILE_AT_LINE (258)), var_cas_task_data COMMA_SOURCE_FILE_AT_LINE (258)) ;
              }
              var_cas_known_events = var_cas_task_data.reader_events (inLexique COMMA_SOURCE_FILE_AT_LINE (259)) ;
              const GGS_bool cond_8344 = (var_cas_known_events.reader_length ()).operator_isEqual (GGS_uint (0U)) ;
              if (cond_8344.isBuiltAndTrue ()) {
                var_cas_act.reader_event_name (inLexique COMMA_SOURCE_FILE_AT_LINE (261)).reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((GGS_string ("An alarm can't set an Event to a basic task (Task ")).operator_concat (var_cas_act.reader_task_name (inLexique COMMA_SOURCE_FILE_AT_LINE (261)).reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (261)))).operator_concat (GGS_string (" is a basic task).")) COMMA_SOURCE_FILE_AT_LINE (262)) ;
              }
            }
          }else if (typeid (cPtr_activatetask_action) == typeid (* (_var_9468.getPtr ()))) {
            const GGS_activatetask_action var_cas_act (_var_9468.getPtr ()) ;
            const GGS_bool cond_8847 = (var_cas_defined_task_names.reader_hasKey (var_cas_act.reader_task_name (inLexique COMMA_SOURCE_FILE_AT_LINE (270)).reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (270)))).operator_not () ;
            if (cond_8847.isBuiltAndTrue ()) {
              var_cas_act.reader_task_name (inLexique COMMA_SOURCE_FILE_AT_LINE (271)).reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((GGS_string ("TASK ")).operator_concat (var_cas_act.reader_task_name (inLexique COMMA_SOURCE_FILE_AT_LINE (271)).reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (271)))).operator_concat (GGS_string (" is not defined")) COMMA_SOURCE_FILE_AT_LINE (272)) ;
            }
          }else if (typeid (cPtr_incrementcounter_action) == typeid (* (_var_9468.getPtr ()))) {
            const GGS_incrementcounter_action var_cas_act (_var_9468.getPtr ()) ;
            const GGS_bool cond_9325 = var_cas_counters.reader_hasKey (var_cas_act.reader_counter_name (inLexique COMMA_SOURCE_FILE_AT_LINE (274)).reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (274))) ;
            if (cond_9325.isBuiltAndTrue ()) {
              GGS_counter_obj  var_cas_cnt ;
              if (var_cas_counters.isBuilt ()) {
                var_cas_counters (HERE)->method_getCounter (inLexique, var_cas_act.reader_counter_name (inLexique COMMA_SOURCE_FILE_AT_LINE (276)), var_cas_cnt COMMA_SOURCE_FILE_AT_LINE (276)) ;
              }
              { const GGS_counter_type _var_9306 = var_cas_cnt.reader_type (inLexique COMMA_SOURCE_FILE_AT_LINE (277)) ; // CAST instruction
                if (_var_9306.getPtr () != NULL) {
                  macroValidPointer (_var_9306.getPtr ()) ;
                  if (typeid (cPtr_software_counter) == typeid (* (_var_9306.getPtr ()))) {
                  }else{
                    var_cas_act.reader_counter_name (inLexique COMMA_SOURCE_FILE_AT_LINE (280)).reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((GGS_string ("OS285 - It is impossible to increment a hardware counter (")).operator_concat (var_cas_act.reader_counter_name (inLexique COMMA_SOURCE_FILE_AT_LINE (280)).reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (280)))).operator_concat (GGS_string (" is not a software counter).")) COMMA_SOURCE_FILE_AT_LINE (281)) ;
                  }
                }
              }
            }else if (cond_9325.isBuiltAndFalse ()) {
              var_cas_act.reader_counter_name (inLexique COMMA_SOURCE_FILE_AT_LINE (283)).reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((GGS_string ("COUNTER ")).operator_concat (var_cas_act.reader_counter_name (inLexique COMMA_SOURCE_FILE_AT_LINE (283)).reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (283)))).operator_concat (GGS_string (" is never defined")) COMMA_SOURCE_FILE_AT_LINE (284)) ;
            }
          }else{
          }
        }
      }
    }
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_all_alarm_actions_correct\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//                  Implementation of routine "verify_all"                   *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_verify_all (C_Compiler & inLexique,
                                GGS_root_obj  & var_cas_cpu
                        COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_verify_all at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  ::routine_tasks_well_formed (inLexique,  var_cas_cpu.reader_tasks (inLexique COMMA_SOURCE_FILE_AT_LINE (300)) COMMA_SOURCE_FILE_AT_LINE (300)) ;
  ::routine_counters_well_formed (inLexique,  var_cas_cpu.reader_counters (inLexique COMMA_SOURCE_FILE_AT_LINE (301)) COMMA_SOURCE_FILE_AT_LINE (301)) ;
  ::routine_alarms_well_formed (inLexique,  var_cas_cpu.reader_alarms (inLexique COMMA_SOURCE_FILE_AT_LINE (302)) COMMA_SOURCE_FILE_AT_LINE (302)) ;
  ::routine_resources_well_formed (inLexique,  var_cas_cpu.reader_resources (inLexique COMMA_SOURCE_FILE_AT_LINE (303)) COMMA_SOURCE_FILE_AT_LINE (303)) ;
  ::routine_isrs_well_formed (inLexique,  var_cas_cpu.reader_isrs (inLexique COMMA_SOURCE_FILE_AT_LINE (304)) COMMA_SOURCE_FILE_AT_LINE (304)) ;
  ::routine_events_well_formed (inLexique,  var_cas_cpu.reader_events (inLexique COMMA_SOURCE_FILE_AT_LINE (305)) COMMA_SOURCE_FILE_AT_LINE (305)) ;
  ::routine_networkmessages_well_formed (inLexique,  var_cas_cpu.reader_net_messages (inLexique COMMA_SOURCE_FILE_AT_LINE (306)) COMMA_SOURCE_FILE_AT_LINE (306)) ;
  GGS_resource_map  var_cas_resources = var_cas_cpu.reader_resources (inLexique COMMA_SOURCE_FILE_AT_LINE (315)) ;
  ::routine_resolve_linked_resources (inLexique,  var_cas_resources COMMA_SOURCE_FILE_AT_LINE (316)) ;
  var_cas_cpu.modifier_setResources (inLexique, var_cas_resources COMMA_SOURCE_FILE_AT_LINE (317)) ;
  ::routine_all_events_and_resources_and_messages_defined_and_used (inLexique,  var_cas_cpu COMMA_SOURCE_FILE_AT_LINE (319)) ;
  ::routine_all_alarm_actions_correct (inLexique,  var_cas_cpu.reader_alarms (inLexique COMMA_SOURCE_FILE_AT_LINE (321)),  var_cas_cpu.reader_tasks (inLexique COMMA_SOURCE_FILE_AT_LINE (321)),  var_cas_cpu.reader_counters (inLexique COMMA_SOURCE_FILE_AT_LINE (321)) COMMA_SOURCE_FILE_AT_LINE (321)) ;
  ::routine_counters_of_alarms_defined (inLexique,  var_cas_cpu.reader_alarms (inLexique COMMA_SOURCE_FILE_AT_LINE (322)),  var_cas_cpu.reader_counters (inLexique COMMA_SOURCE_FILE_AT_LINE (322)) COMMA_SOURCE_FILE_AT_LINE (322)) ;
  ::routine_networkmessages_exist_and_ok (inLexique,  var_cas_cpu.reader_messages (inLexique COMMA_SOURCE_FILE_AT_LINE (323)),  var_cas_cpu.reader_net_messages (inLexique COMMA_SOURCE_FILE_AT_LINE (323)) COMMA_SOURCE_FILE_AT_LINE (323)) ;
  const GGS_bool cond_10885 = gOption_goil_5F_options_autosar_5F_on.reader_value () ;
  if (cond_10885.isBuiltAndTrue ()) {
    ::routine_schedule_tables_well_formed (inLexique,  var_cas_cpu.reader_scheduletables (inLexique COMMA_SOURCE_FILE_AT_LINE (327)),  var_cas_cpu COMMA_SOURCE_FILE_AT_LINE (327)) ;
    ::routine_schedule_tables_counters_exist_and_compatible (inLexique,  var_cas_cpu.reader_scheduletables (inLexique COMMA_SOURCE_FILE_AT_LINE (328)),  var_cas_cpu.reader_counters (inLexique COMMA_SOURCE_FILE_AT_LINE (328)) COMMA_SOURCE_FILE_AT_LINE (328)) ;
    ::routine_schedule_tables_tasks_and_events_exist (inLexique,  var_cas_cpu,  var_cas_cpu.reader_tasks (inLexique COMMA_SOURCE_FILE_AT_LINE (329)) COMMA_SOURCE_FILE_AT_LINE (329)) ;
    ::routine_apps_well_formed (inLexique,  var_cas_cpu COMMA_SOURCE_FILE_AT_LINE (330)) ;
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_verify_all\n") ;
  #endif
}

//---------------------------------------------------------------------------*

