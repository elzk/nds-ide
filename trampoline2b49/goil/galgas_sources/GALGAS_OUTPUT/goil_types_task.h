//---------------------------------------------------------------------------*
//                                                                           *
//                         File 'goil_types_task.h'                          *
//                        Generated by version 2.0.0                         *
//                       july 7th, 2010, at 17h16'16"                        *
//                                                                           *
//---------------------------------------------------------------------------*

//--- START OF USER ZONE 1


//--- END OF USER ZONE 1

#ifndef goil_types_task_DEFINED
#define goil_types_task_DEFINED

#include <string.h>

//---------------------------------------------------------------------------*

#include "galgas/GGS__header.h"

//---------------------------------------------------------------------------*

// Include imported semantics
#include "goil_basic_types.h"
#include "goil_types_timing_prot.h"

//--- START OF USER ZONE 2


//--- END OF USER ZONE 2

//---------------------------------------------------------------------------*
//                                                                           *
//                          Class Predeclarations                            *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_task_autostart_obj ;
class cPtr_task_autostart_obj ;
class GGS_task_autostart_void ;
class cPtr_task_autostart_void ;
class GGS_task_autostart_false ;
class cPtr_task_autostart_false ;
class GGS_task_autostart_true ;
class cPtr_task_autostart_true ;
class GGS_task_obj ;
class cPtr_task_obj ;
class GGS_task_map ;
class GGS_task_mask ;
class GGS_objs_by_prio ;
class GGS_tasks_by_type ;
class GGS_prio_list ;
class GGS_prio_map ;

//---------------------------------------------------------------------------*
//                                                                           *
//                  GALGAS class 'GGS_task_autostart_obj'                    *
//                                                                           *
//---------------------------------------------------------------------------*

extern const C_galgas_type_descriptorEX kTypeDescriptor_GGS_task_autostart_obj ;

//---------------------------------------------------------------------------*

class GGS_task_autostart_obj : public AC_GGS_class {
//--- Default constructor
  public : inline GGS_task_autostart_obj (void) :
  AC_GGS_class () {}

//--- Pointer assignment constructor
  public : GGS_task_autostart_obj (const cPtr__AC_galgas_class * inPointer) ;

//--- Object assignment constructor
  public : GGS_task_autostart_obj (cPtr__AC_galgas_class & inObject) ;

//--- castFrom class method (implements cast expression)
  public : static GGS_task_autostart_obj
  castFrom (C_Compiler & inLexique,
             cPtr__AC_galgas_class * inPointer,
             const bool inUseKindOfClass,
             const GGS_location & inErrorLocation
             COMMA_LOCATION_ARGS) ;

//--- getPtr
  public : inline cPtr_task_autostart_obj * getPtr (void) const {
    return (cPtr_task_autostart_obj *) mPointer ;
  }

//--- 'description' reader
  public : virtual const char * actualTypeName (void) const ;

//--- Readers
  public : GGS_location  reader_location (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;

//--- Modifiers

//--- operator ()
  #ifndef DO_NOT_GENERATE_CHECKINGS
    public : cPtr_task_autostart_obj * operator () (LOCATION_ARGS) const ;
  #else
    public : inline cPtr_task_autostart_obj * operator () (LOCATION_ARGS) const {
      return (cPtr_task_autostart_obj *) mPointer ;
    }
  #endif

//--- Galgas RTTI
AC_galgasClassRunTimeInformationEX * galgasObjectRunTimeInfo (void) const ;

//--- Introspection
  public : virtual const C_galgas_type_descriptorEX * typeDescriptor (void) const ;

  public : GGS_object reader_object (void) const ;

  public : static GGS_task_autostart_obj castFromObject (C_Compiler & inLexique,
                                           const GGS_object & inObject,
                                           const GGS_location & inErrorLocation
                                           COMMA_LOCATION_ARGS) ;

} ;

//---------------------------------------------------------------------------*

extern C_galgasRootClassRunTimeInformationEX gClassInfoFor__task_autostart_obj ;

//---------------------------------------------------------------------------*
//                                                                           *
//                  GALGAS class 'GGS_task_autostart_void'                   *
//                                                                           *
//---------------------------------------------------------------------------*

extern const C_galgas_type_descriptorEX kTypeDescriptor_GGS_task_autostart_void ;

//---------------------------------------------------------------------------*

class GGS_task_autostart_void : public GGS_task_autostart_obj {
//--- Default constructor
  public : inline GGS_task_autostart_void (void) :
  GGS_task_autostart_obj () {}

//--- Pointer assignment constructor
  public : GGS_task_autostart_void (const cPtr__AC_galgas_class * inPointer) ;

//--- Object assignment constructor
  public : GGS_task_autostart_void (cPtr__AC_galgas_class & inObject) ;

//--- castFrom class method (implements cast expression)
  public : static GGS_task_autostart_void
  castFrom (C_Compiler & inLexique,
             cPtr__AC_galgas_class * inPointer,
             const bool inUseKindOfClass,
             const GGS_location & inErrorLocation
             COMMA_LOCATION_ARGS) ;

//--- 'new' constructor
  public : static GGS_task_autostart_void constructor_new (C_Compiler & inLexique,
                                const GGS_location & argument_0
                                COMMA_LOCATION_ARGS) ;

//--- getPtr
  public : inline cPtr_task_autostart_void * getPtr (void) const {
    return (cPtr_task_autostart_void *) mPointer ;
  }

//--- 'description' reader
  public : virtual const char * actualTypeName (void) const ;

//--- Readers

//--- Modifiers

//--- operator ()
  #ifndef DO_NOT_GENERATE_CHECKINGS
    public : cPtr_task_autostart_void * operator () (LOCATION_ARGS) const ;
  #else
    public : inline cPtr_task_autostart_void * operator () (LOCATION_ARGS) const {
      return (cPtr_task_autostart_void *) mPointer ;
    }
  #endif

//--- Introspection
  public : virtual const C_galgas_type_descriptorEX * typeDescriptor (void) const ;

  public : GGS_object reader_object (void) const ;

  public : static GGS_task_autostart_void castFromObject (C_Compiler & inLexique,
                                           const GGS_object & inObject,
                                           const GGS_location & inErrorLocation
                                           COMMA_LOCATION_ARGS) ;

} ;

//---------------------------------------------------------------------------*

extern C_galgasClassRunTimeInformationEX gClassInfoFor__task_autostart_void ;

//---------------------------------------------------------------------------*
//                                                                           *
//                 GALGAS class 'GGS_task_autostart_false'                   *
//                                                                           *
//---------------------------------------------------------------------------*

extern const C_galgas_type_descriptorEX kTypeDescriptor_GGS_task_autostart_false ;

//---------------------------------------------------------------------------*

class GGS_task_autostart_false : public GGS_task_autostart_obj {
//--- Default constructor
  public : inline GGS_task_autostart_false (void) :
  GGS_task_autostart_obj () {}

//--- Pointer assignment constructor
  public : GGS_task_autostart_false (const cPtr__AC_galgas_class * inPointer) ;

//--- Object assignment constructor
  public : GGS_task_autostart_false (cPtr__AC_galgas_class & inObject) ;

//--- castFrom class method (implements cast expression)
  public : static GGS_task_autostart_false
  castFrom (C_Compiler & inLexique,
             cPtr__AC_galgas_class * inPointer,
             const bool inUseKindOfClass,
             const GGS_location & inErrorLocation
             COMMA_LOCATION_ARGS) ;

//--- 'new' constructor
  public : static GGS_task_autostart_false constructor_new (C_Compiler & inLexique,
                                const GGS_location & argument_0
                                COMMA_LOCATION_ARGS) ;

//--- getPtr
  public : inline cPtr_task_autostart_false * getPtr (void) const {
    return (cPtr_task_autostart_false *) mPointer ;
  }

//--- 'description' reader
  public : virtual const char * actualTypeName (void) const ;

//--- Readers

//--- Modifiers

//--- operator ()
  #ifndef DO_NOT_GENERATE_CHECKINGS
    public : cPtr_task_autostart_false * operator () (LOCATION_ARGS) const ;
  #else
    public : inline cPtr_task_autostart_false * operator () (LOCATION_ARGS) const {
      return (cPtr_task_autostart_false *) mPointer ;
    }
  #endif

//--- Introspection
  public : virtual const C_galgas_type_descriptorEX * typeDescriptor (void) const ;

  public : GGS_object reader_object (void) const ;

  public : static GGS_task_autostart_false castFromObject (C_Compiler & inLexique,
                                           const GGS_object & inObject,
                                           const GGS_location & inErrorLocation
                                           COMMA_LOCATION_ARGS) ;

} ;

//---------------------------------------------------------------------------*

extern C_galgasClassRunTimeInformationEX gClassInfoFor__task_autostart_false ;

//---------------------------------------------------------------------------*
//                                                                           *
//                  GALGAS class 'GGS_task_autostart_true'                   *
//                                                                           *
//---------------------------------------------------------------------------*

extern const C_galgas_type_descriptorEX kTypeDescriptor_GGS_task_autostart_true ;

//---------------------------------------------------------------------------*

class GGS_task_autostart_true : public GGS_task_autostart_obj {
//--- Default constructor
  public : inline GGS_task_autostart_true (void) :
  GGS_task_autostart_obj () {}

//--- Pointer assignment constructor
  public : GGS_task_autostart_true (const cPtr__AC_galgas_class * inPointer) ;

//--- Object assignment constructor
  public : GGS_task_autostart_true (cPtr__AC_galgas_class & inObject) ;

//--- castFrom class method (implements cast expression)
  public : static GGS_task_autostart_true
  castFrom (C_Compiler & inLexique,
             cPtr__AC_galgas_class * inPointer,
             const bool inUseKindOfClass,
             const GGS_location & inErrorLocation
             COMMA_LOCATION_ARGS) ;

//--- 'new' constructor
  public : static GGS_task_autostart_true constructor_new (C_Compiler & inLexique,
                                const GGS_location & argument_0,
                                const GGS_stringset & argument_1
                                COMMA_LOCATION_ARGS) ;

//--- getPtr
  public : inline cPtr_task_autostart_true * getPtr (void) const {
    return (cPtr_task_autostart_true *) mPointer ;
  }

//--- 'description' reader
  public : virtual const char * actualTypeName (void) const ;

//--- Readers
  public : GGS_stringset  reader_appmodes (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;

//--- Modifiers

//--- operator ()
  #ifndef DO_NOT_GENERATE_CHECKINGS
    public : cPtr_task_autostart_true * operator () (LOCATION_ARGS) const ;
  #else
    public : inline cPtr_task_autostart_true * operator () (LOCATION_ARGS) const {
      return (cPtr_task_autostart_true *) mPointer ;
    }
  #endif

//--- Introspection
  public : virtual const C_galgas_type_descriptorEX * typeDescriptor (void) const ;

  public : GGS_object reader_object (void) const ;

  public : static GGS_task_autostart_true castFromObject (C_Compiler & inLexique,
                                           const GGS_object & inObject,
                                           const GGS_location & inErrorLocation
                                           COMMA_LOCATION_ARGS) ;

} ;

//---------------------------------------------------------------------------*

extern C_galgasClassRunTimeInformationEX gClassInfoFor__task_autostart_true ;

//---------------------------------------------------------------------------*
//                                                                           *
//                       GALGAS class 'GGS_task_obj'                         *
//                                                                           *
//---------------------------------------------------------------------------*

extern const C_galgas_type_descriptorEX kTypeDescriptor_GGS_task_obj ;

//---------------------------------------------------------------------------*

class GGS_task_obj : public GGS_oil_obj {
//--- Default constructor
  public : inline GGS_task_obj (void) :
  GGS_oil_obj () {}

//--- Pointer assignment constructor
  public : GGS_task_obj (const cPtr__AC_galgas_class * inPointer) ;

//--- Object assignment constructor
  public : GGS_task_obj (cPtr__AC_galgas_class & inObject) ;

//--- castFrom class method (implements cast expression)
  public : static GGS_task_obj
  castFrom (C_Compiler & inLexique,
             cPtr__AC_galgas_class * inPointer,
             const bool inUseKindOfClass,
             const GGS_location & inErrorLocation
             COMMA_LOCATION_ARGS) ;

//--- 'new' constructor
  public : static GGS_task_obj constructor_new (C_Compiler & inLexique,
                                const GGS_lstring & argument_0,
                                const GGS_basic_type & argument_1,
                                const GGS_lstring & argument_2,
                                const GGS_basic_type & argument_3,
                                const GGS_task_autostart_obj & argument_4,
                                const GGS_lstringlist & argument_5,
                                const GGS_lstringlist & argument_6,
                                const GGS_lstringlist & argument_7,
                                const GGS_lstringlist & argument_8,
                                const GGS_timing_prot & argument_9,
                                const GGS_ident_map & argument_10
                                COMMA_LOCATION_ARGS) ;

//--- getPtr
  public : inline cPtr_task_obj * getPtr (void) const {
    return (cPtr_task_obj *) mPointer ;
  }

//--- 'description' reader
  public : virtual const char * actualTypeName (void) const ;

//--- Readers
  public : GGS_basic_type  reader_priority (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;
  public : GGS_lstring  reader_schedule (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;
  public : GGS_basic_type  reader_activation (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;
  public : GGS_task_autostart_obj  reader_autostart (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;
  public : GGS_lstringlist  reader_resources (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;
  public : GGS_lstringlist  reader_events (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;
  public : GGS_lstringlist  reader_messages (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;
  public : GGS_lstringlist  reader_acc_apps (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;
  public : GGS_timing_prot  reader_timing_prot (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;
  public : GGS_ident_map  reader_others (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;

//--- Modifiers
  public : void modifier_setPriority (C_Compiler & inLexique, const GGS_basic_type  & inValue COMMA_LOCATION_ARGS) ;
  public : void modifier_setSchedule (C_Compiler & inLexique, const GGS_lstring  & inValue COMMA_LOCATION_ARGS) ;
  public : void modifier_setActivation (C_Compiler & inLexique, const GGS_basic_type  & inValue COMMA_LOCATION_ARGS) ;
  public : void modifier_setAutostart (C_Compiler & inLexique, const GGS_task_autostart_obj  & inValue COMMA_LOCATION_ARGS) ;
  public : void modifier_setResources (C_Compiler & inLexique, const GGS_lstringlist  & inValue COMMA_LOCATION_ARGS) ;
  public : void modifier_setEvents (C_Compiler & inLexique, const GGS_lstringlist  & inValue COMMA_LOCATION_ARGS) ;
  public : void modifier_setMessages (C_Compiler & inLexique, const GGS_lstringlist  & inValue COMMA_LOCATION_ARGS) ;
  public : void modifier_setAcc_apps (C_Compiler & inLexique, const GGS_lstringlist  & inValue COMMA_LOCATION_ARGS) ;
  public : void modifier_setTiming_prot (C_Compiler & inLexique, const GGS_timing_prot  & inValue COMMA_LOCATION_ARGS) ;
  public : void modifier_setOthers (C_Compiler & inLexique, const GGS_ident_map  & inValue COMMA_LOCATION_ARGS) ;

//--- operator ()
  #ifndef DO_NOT_GENERATE_CHECKINGS
    public : cPtr_task_obj * operator () (LOCATION_ARGS) const ;
  #else
    public : inline cPtr_task_obj * operator () (LOCATION_ARGS) const {
      return (cPtr_task_obj *) mPointer ;
    }
  #endif

//--- Introspection
  public : virtual const C_galgas_type_descriptorEX * typeDescriptor (void) const ;

  public : GGS_object reader_object (void) const ;

  public : static GGS_task_obj castFromObject (C_Compiler & inLexique,
                                           const GGS_object & inObject,
                                           const GGS_location & inErrorLocation
                                           COMMA_LOCATION_ARGS) ;

} ;

//---------------------------------------------------------------------------*

extern C_galgasClassRunTimeInformationEX gClassInfoFor__task_obj ;

//---------------------------------------------------------------------------*
//                                                                           *
//                         Function 'void_task_obj'                          *
//                                                                           *
//---------------------------------------------------------------------------*

extern const C_galgas_function_descriptorEX kFunction_descriptor_void_task_obj ;

//---------------------------------------------------------------------------*

GGS_task_obj  function_void_task_obj (C_Compiler & COMMA_LOCATION_ARGS) ;

//---------------------------------------------------------------------------*
//                                                                           *
//                       Function 'default_task_obj'                         *
//                                                                           *
//---------------------------------------------------------------------------*

extern const C_galgas_function_descriptorEX kFunction_descriptor_default_task_obj ;

//---------------------------------------------------------------------------*

GGS_task_obj  function_default_task_obj (C_Compiler & COMMA_LOCATION_ARGS) ;

//---------------------------------------------------------------------------*
//                                                                           *
//                             Map '@task_map'                               *
//                                                                           *
//---------------------------------------------------------------------------*

class elementOf_GGS_task_map ;

extern const C_galgas_type_descriptorEX kTypeDescriptor_GGS_task_map ;

//---------------------------------------------------------------------------*

class GGS_task_map : public AC_GGS_map {
//--- Element Class
  public : typedef elementOf_GGS_task_map cElement ;

//--- Get pointers
  public : inline cElement * firstObject (void) const { return (cElement *) internalFirstObject () ; }
  public : inline cElement * lastObject (void) const { return (cElement *) internalLastObject () ; }

//--- Comparison methods
  public : GGS_bool operator_isEqual (const GGS_task_map & inOperand) const ;
  public : GGS_bool operator_isNotEqual (const GGS_task_map & inOperand) const ;

//--- Introspection
  public : virtual const C_galgas_type_descriptorEX * typeDescriptor (void) const ;

  public : GGS_object reader_object (void) const ;

  public : static GGS_task_map castFromObject (C_Compiler & inLexique,
                                           const GGS_object & inObject,
                                           const GGS_location & inErrorLocation
                                           COMMA_LOCATION_ARGS) ;

//--- Create an element
  protected : virtual AC_galgas_map_element *
  new_element (const GGS_lstring & inKey, void * inInfo, const PMUInt32 inInitialState) ;

//--- Assign information to an existing element
  protected : virtual void
  assignInfo (AC_galgas_map_element * inPtr, void * inInfo) ;

//--- Enter an index
  public : void enterIndex (const GGS_string & inKey,
                            AC_galgas_index_core & outIndex) ;

//--- Get object pointer (for method call)
  public : inline GGS_task_map * operator () (UNUSED_LOCATION_ARGS) { return this ; }
  public : inline const GGS_task_map * operator () (UNUSED_LOCATION_ARGS) const { return this ; }

//--- 'emptyMap' constructor
  public : static GGS_task_map constructor_emptyMap (C_Compiler & inLexique COMMA_LOCATION_ARGS) ;

//--- 'mapWithKeyAndValue' constructor
  public : static GGS_task_map constructor_mapWithKeyAndValue (C_Compiler & inLexique,
                                             const GGS_lstring & inKey
,
                                             const GGS_task_obj & inValue0
                                             COMMA_LOCATION_ARGS) ;

//--- Method used for duplicate a map
  protected : virtual void internalInsertForDuplication (AC_galgas_map_element * inPtr) ;

//--- Modifiers "set'Value'ForKey"

  public : static const utf32 kRemoveMessage_del [] ;

//--- 'del' Remove Modifier
  public : void modifier_del (C_Compiler & inLexique,
                                const GGS_lstring & inKey,
                                GGS_task_obj & outParameter0 COMMA_LOCATION_ARGS) ;

  public : static const utf32 kInsertMessage_put [] ;

//--- 'put' Insert Modifier
  public : void modifier_put (C_Compiler & inLexique,
                                const GGS_lstring & inKey,
                                const GGS_task_obj &  inParameter0 COMMA_LOCATION_ARGS) ;

  public : static const utf32 kSearchMessage_get [] ;

//--- 'get' Search Method
  public : void method_get (C_Compiler & inLexique,
                                const GGS_lstring & inKey,
                                GGS_task_obj   & outParameter0 COMMA_LOCATION_ARGS) const ;
//--- Internal method for removing an element
  protected : void removeElement (C_Compiler & inLexique,
                                   const utf32 * inErrorMessage,
                                   const GGS_lstring & inKey,
                                   GGS_task_obj & outParameter0,
                                   GGS_luint * outIndex
                                   COMMA_LOCATION_ARGS) ;
//--- Internal method for inserting an element
  protected : void insertElement (C_Compiler & inLexique,
                                  const PMUInt32 inInitialState,
                                  const utf32 * inErrorMessage,
                                  const GGS_lstring & inKey,
                                   const GGS_task_obj & inParameter0,
                                   GGS_luint * outIndex
                                   COMMA_LOCATION_ARGS) ;
//--- Internal method for searching for an element
  protected : void searchElement (C_Compiler & inLexique,
                                  const PMUInt32 inActionIndex,
                                  const utf32 * inErrorMessage,
                                  const GGS_lstring & inKey,
                                   GGS_task_obj & outParameter0,
                                  GGS_luint * outIndex
                                  COMMA_LOCATION_ARGS) const ;
  public : virtual GGS_string reader_description (const PMSInt32 inIndentation = 0) const ;
  public : static GGS_task_map constructor_mapWithMapToOverride (C_Compiler & inLexique,
                                            const GGS_task_map & inMapToOverride
                                            COMMA_LOCATION_ARGS) ;
  public : GGS_task_map reader_overriddenMap (C_Compiler & inLexique
                                            COMMA_LOCATION_ARGS) const ;

//--------------------------------- Key stringset (for map with an associated automaton)
//--------------------------------- Map Enumerator
  public : class cEnumerator : public cAbstractMapEnumerator {
  //--- Constructors
    public : inline cEnumerator (const GGS_task_map & inMap,
                                 const bool inAscending) :
    cAbstractMapEnumerator (inMap, inAscending) {
    }
    public : inline cEnumerator (const GGS_task_map & inMap) :
    cAbstractMapEnumerator (inMap) {
    }
  //--- Iterator method
    public : inline cElement * nextObject (void) {
      return (cElement *) internalNextObject () ;
    }
    public : /* const */ GGS_task_obj   & _task (LOCATION_ARGS) const ;
  } ;
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                             Map '@task_mask'                              *
//                                                                           *
//---------------------------------------------------------------------------*

class elementOf_GGS_task_mask ;

extern const C_galgas_type_descriptorEX kTypeDescriptor_GGS_task_mask ;

//---------------------------------------------------------------------------*

class GGS_task_mask : public AC_GGS_map {
//--- Element Class
  public : typedef elementOf_GGS_task_mask cElement ;

//--- Get pointers
  public : inline cElement * firstObject (void) const { return (cElement *) internalFirstObject () ; }
  public : inline cElement * lastObject (void) const { return (cElement *) internalLastObject () ; }

//--- Comparison methods
  public : GGS_bool operator_isEqual (const GGS_task_mask & inOperand) const ;
  public : GGS_bool operator_isNotEqual (const GGS_task_mask & inOperand) const ;

//--- Introspection
  public : virtual const C_galgas_type_descriptorEX * typeDescriptor (void) const ;

  public : GGS_object reader_object (void) const ;

  public : static GGS_task_mask castFromObject (C_Compiler & inLexique,
                                           const GGS_object & inObject,
                                           const GGS_location & inErrorLocation
                                           COMMA_LOCATION_ARGS) ;

//--- Create an element
  protected : virtual AC_galgas_map_element *
  new_element (const GGS_lstring & inKey, void * inInfo, const PMUInt32 inInitialState) ;

//--- Assign information to an existing element
  protected : virtual void
  assignInfo (AC_galgas_map_element * inPtr, void * inInfo) ;

//--- Enter an index
  public : void enterIndex (const GGS_string & inKey,
                            AC_galgas_index_core & outIndex) ;

//--- Get object pointer (for method call)
  public : inline GGS_task_mask * operator () (UNUSED_LOCATION_ARGS) { return this ; }
  public : inline const GGS_task_mask * operator () (UNUSED_LOCATION_ARGS) const { return this ; }

//--- 'emptyMap' constructor
  public : static GGS_task_mask constructor_emptyMap (C_Compiler & inLexique COMMA_LOCATION_ARGS) ;

//--- 'mapWithKeyAndValue' constructor
  public : static GGS_task_mask constructor_mapWithKeyAndValue (C_Compiler & inLexique,
                                             const GGS_lstring & inKey
,
                                             const GGS_uint64 & inValue0
                                             COMMA_LOCATION_ARGS) ;

//--- Method used for duplicate a map
  protected : virtual void internalInsertForDuplication (AC_galgas_map_element * inPtr) ;

//--- Modifiers "set'Value'ForKey"

  public : static const utf32 kRemoveMessage_del_mask [] ;

//--- 'del_mask' Remove Modifier
  public : void modifier_del_mask (C_Compiler & inLexique,
                                const GGS_lstring & inKey,
                                GGS_uint64 & outParameter0 COMMA_LOCATION_ARGS) ;

  public : static const utf32 kInsertMessage_insert_mask [] ;

//--- 'insert_mask' Insert Modifier
  public : void modifier_insert_mask (C_Compiler & inLexique,
                                const GGS_lstring & inKey,
                                const GGS_uint64 &  inParameter0 COMMA_LOCATION_ARGS) ;

  public : static const utf32 kSearchMessage_get_mask [] ;

//--- 'get_mask' Search Method
  public : void method_get_mask (C_Compiler & inLexique,
                                const GGS_lstring & inKey,
                                GGS_uint64   & outParameter0 COMMA_LOCATION_ARGS) const ;
//--- Internal method for removing an element
  protected : void removeElement (C_Compiler & inLexique,
                                   const utf32 * inErrorMessage,
                                   const GGS_lstring & inKey,
                                   GGS_uint64 & outParameter0,
                                   GGS_luint * outIndex
                                   COMMA_LOCATION_ARGS) ;
//--- Internal method for inserting an element
  protected : void insertElement (C_Compiler & inLexique,
                                  const PMUInt32 inInitialState,
                                  const utf32 * inErrorMessage,
                                  const GGS_lstring & inKey,
                                   const GGS_uint64 & inParameter0,
                                   GGS_luint * outIndex
                                   COMMA_LOCATION_ARGS) ;
//--- Internal method for searching for an element
  protected : void searchElement (C_Compiler & inLexique,
                                  const PMUInt32 inActionIndex,
                                  const utf32 * inErrorMessage,
                                  const GGS_lstring & inKey,
                                   GGS_uint64 & outParameter0,
                                  GGS_luint * outIndex
                                  COMMA_LOCATION_ARGS) const ;
  public : virtual GGS_string reader_description (const PMSInt32 inIndentation = 0) const ;
  public : static GGS_task_mask constructor_mapWithMapToOverride (C_Compiler & inLexique,
                                            const GGS_task_mask & inMapToOverride
                                            COMMA_LOCATION_ARGS) ;
  public : GGS_task_mask reader_overriddenMap (C_Compiler & inLexique
                                            COMMA_LOCATION_ARGS) const ;

//--------------------------------- Key stringset (for map with an associated automaton)
//--------------------------------- Map Enumerator
  public : class cEnumerator : public cAbstractMapEnumerator {
  //--- Constructors
    public : inline cEnumerator (const GGS_task_mask & inMap,
                                 const bool inAscending) :
    cAbstractMapEnumerator (inMap, inAscending) {
    }
    public : inline cEnumerator (const GGS_task_mask & inMap) :
    cAbstractMapEnumerator (inMap) {
    }
  //--- Iterator method
    public : inline cElement * nextObject (void) {
      return (cElement *) internalNextObject () ;
    }
    public : /* const */ GGS_uint64   & _mask (LOCATION_ARGS) const ;
  } ;
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                       sorted list '@objs_by_prio'                         *
//                                                                           *
//---------------------------------------------------------------------------*

class elementOf_GGS_objs_by_prio ;
//---------------------------------------------------------------------------*

extern const C_galgas_type_descriptorEX kTypeDescriptor_GGS_objs_by_prio ;

//---------------------------------------------------------------------------*


class GGS_objs_by_prio : public AC_GGS_sortedlist {
  public : typedef elementOf_GGS_objs_by_prio cElement ;
//--- Default Constructor
  public : GGS_objs_by_prio (void) ;
//--- Copy Constructor
  public : GGS_objs_by_prio (const GGS_objs_by_prio & inSource) ;
//--- Comparison Operators
  public : GGS_bool operator_isEqual (const GGS_objs_by_prio & inOperand) const ;
  public : GGS_bool operator_isNotEqual (const GGS_objs_by_prio & inOperand) const ;
//--- Constructor 'emptySortedList'
  public : static GGS_objs_by_prio constructor_emptySortedList (void) ;
  public : static GGS_objs_by_prio constructor_sortedListWithValue (const GGS_uint & argument_0,
                           const GGS_uint & argument_1,
                           const GGS_lstring & argument_2) ;
//--- Get smallest object
  public : inline cElement * firstObject (void) const {
    return (cElement *) internalSmallestObject () ;
  }
//--- Get greatest object
  public : inline cElement * lastObject (void) const {
    return (cElement *) internalGreatestObject () ;
  }
//--- Operators () used for method call
  public : const GGS_objs_by_prio * operator () (UNUSED_LOCATION_ARGS) const { return this ;} 
//--- Method 'smallest'
  public : void method_smallest (C_Compiler & inLexique,
                              GGS_uint & _out_0,
                              GGS_uint & _out_1,
                              GGS_lstring & _out_2
                              COMMA_LOCATION_ARGS) const ;
//--- Method 'greatest'
  public : void method_greatest (C_Compiler & inLexique,
                             GGS_uint & _out_0,
                             GGS_uint & _out_1,
                             GGS_lstring & _out_2
                             COMMA_LOCATION_ARGS) const ;
//--- Method 'popGreatest'
  public : void modifier_popGreatest (C_Compiler & inLexique,
                                GGS_uint & _out_0,
                                GGS_uint & _out_1,
                                GGS_lstring & _out_2
                                COMMA_LOCATION_ARGS) ;
//--- Modifier 'popSmallest'
  public : void modifier_popSmallest (C_Compiler & inLexique,
                                 GGS_uint & _out_0,
                                 GGS_uint & _out_1,
                                 GGS_lstring & _out_2
                                 COMMA_LOCATION_ARGS) ;
//--- Handle '.=' operator
  public : void dotAssign_operation (const GGS_objs_by_prio inOperand) ;

//--- Handling '+=' GALGAS operator
  public : void addAssign_operation (const GGS_uint & argument_0,
                                const GGS_uint & argument_1,
                                const GGS_lstring & argument_2) ;
//--- Handling '.' GALGAS operator
  public : GGS_objs_by_prio operator_concat (const GGS_objs_by_prio & inOperand) const ;

//--- Internal Methods
  protected : void internalAppendValues (const GGS_uint & argument_0,
                                const GGS_uint & argument_1,
                                const GGS_lstring & argument_2) ;
//--- List Insulation
  protected : void insulateList (void) ;
//--- Reader 'description
  public : virtual GGS_string reader_description (const PMSInt32 inIndentation = 0) const ;
//--- Introspection
  public : virtual const C_galgas_type_descriptorEX * typeDescriptor (void) const ;

  public : GGS_object reader_object (void) const ;

  public : static GGS_objs_by_prio castFromObject (C_Compiler & inLexique,
                                           const GGS_object & inObject,
                                           const GGS_location & inErrorLocation
                                           COMMA_LOCATION_ARGS) ;

//--------------------------------- Sorted List Enumerator
  public : class cEnumerator : public cAbstractSortedListEnumerator {
  //--- Constructor
    public : inline cEnumerator (const GGS_objs_by_prio & inList,
                                 const bool inAscending) :
    cAbstractSortedListEnumerator (inList, inAscending) {
    }
  //--- Iterator method
    public : inline cElement * nextObject (void) {
      return (cElement *) internalNextObject () ;
    }
    public : /* const */ GGS_uint  & _prio (LOCATION_ARGS) const ;
    public : /* const */ GGS_uint  & _act (LOCATION_ARGS) const ;
    public : /* const */ GGS_lstring  & _name (LOCATION_ARGS) const ;
  } ;
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                       sorted list '@tasks_by_type'                        *
//                                                                           *
//---------------------------------------------------------------------------*

class elementOf_GGS_tasks_by_type ;
//---------------------------------------------------------------------------*

extern const C_galgas_type_descriptorEX kTypeDescriptor_GGS_tasks_by_type ;

//---------------------------------------------------------------------------*


class GGS_tasks_by_type : public AC_GGS_sortedlist {
  public : typedef elementOf_GGS_tasks_by_type cElement ;
//--- Default Constructor
  public : GGS_tasks_by_type (void) ;
//--- Copy Constructor
  public : GGS_tasks_by_type (const GGS_tasks_by_type & inSource) ;
//--- Comparison Operators
  public : GGS_bool operator_isEqual (const GGS_tasks_by_type & inOperand) const ;
  public : GGS_bool operator_isNotEqual (const GGS_tasks_by_type & inOperand) const ;
//--- Constructor 'emptySortedList'
  public : static GGS_tasks_by_type constructor_emptySortedList (void) ;
  public : static GGS_tasks_by_type constructor_sortedListWithValue (const GGS_uint & argument_0,
                           const GGS_string& argument_1) ;
//--- Get smallest object
  public : inline cElement * firstObject (void) const {
    return (cElement *) internalSmallestObject () ;
  }
//--- Get greatest object
  public : inline cElement * lastObject (void) const {
    return (cElement *) internalGreatestObject () ;
  }
//--- Operators () used for method call
  public : const GGS_tasks_by_type * operator () (UNUSED_LOCATION_ARGS) const { return this ;} 
//--- Method 'smallest'
  public : void method_smallest (C_Compiler & inLexique,
                              GGS_uint & _out_0,
                              GGS_string& _out_1
                              COMMA_LOCATION_ARGS) const ;
//--- Method 'greatest'
  public : void method_greatest (C_Compiler & inLexique,
                             GGS_uint & _out_0,
                             GGS_string& _out_1
                             COMMA_LOCATION_ARGS) const ;
//--- Method 'popGreatest'
  public : void modifier_popGreatest (C_Compiler & inLexique,
                                GGS_uint & _out_0,
                                GGS_string& _out_1
                                COMMA_LOCATION_ARGS) ;
//--- Modifier 'popSmallest'
  public : void modifier_popSmallest (C_Compiler & inLexique,
                                 GGS_uint & _out_0,
                                 GGS_string& _out_1
                                 COMMA_LOCATION_ARGS) ;
//--- Handle '.=' operator
  public : void dotAssign_operation (const GGS_tasks_by_type inOperand) ;

//--- Handling '+=' GALGAS operator
  public : void addAssign_operation (const GGS_uint & argument_0,
                                const GGS_string& argument_1) ;
//--- Handling '.' GALGAS operator
  public : GGS_tasks_by_type operator_concat (const GGS_tasks_by_type & inOperand) const ;

//--- Internal Methods
  protected : void internalAppendValues (const GGS_uint & argument_0,
                                const GGS_string& argument_1) ;
//--- List Insulation
  protected : void insulateList (void) ;
//--- Reader 'description
  public : virtual GGS_string reader_description (const PMSInt32 inIndentation = 0) const ;
//--- Introspection
  public : virtual const C_galgas_type_descriptorEX * typeDescriptor (void) const ;

  public : GGS_object reader_object (void) const ;

  public : static GGS_tasks_by_type castFromObject (C_Compiler & inLexique,
                                           const GGS_object & inObject,
                                           const GGS_location & inErrorLocation
                                           COMMA_LOCATION_ARGS) ;

//--------------------------------- Sorted List Enumerator
  public : class cEnumerator : public cAbstractSortedListEnumerator {
  //--- Constructor
    public : inline cEnumerator (const GGS_tasks_by_type & inList,
                                 const bool inAscending) :
    cAbstractSortedListEnumerator (inList, inAscending) {
    }
  //--- Iterator method
    public : inline cElement * nextObject (void) {
      return (cElement *) internalNextObject () ;
    }
    public : /* const */ GGS_uint  & _type (LOCATION_ARGS) const ;
    public : /* const */ GGS_string & _name (LOCATION_ARGS) const ;
  } ;
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                            list '@prio_list'                              *
//                                                                           *
//---------------------------------------------------------------------------*

class elementOf_GGS_prio_list ;

//---------------------------------------------------------------------------*

extern const C_galgas_type_descriptorEX kTypeDescriptor_GGS_prio_list ;

//---------------------------------------------------------------------------*

class GGS_prio_list : public AC_GGS_list {
  public : typedef elementOf_GGS_prio_list cElement ;

//--- Constructor 'emptyList'
  public : static GGS_prio_list constructor_emptyList (void) ;
  public : static GGS_prio_list constructor_listWithValue (const GGS_uint & argument_0) ;
//--- Get sublist
  protected : void
  internalSubListWithRange (GGS_prio_list & ioList,
                            const PMSInt32 inFirstIndex,
                            const PMSInt32 inCount) const ;

  public : GGS_prio_list
  reader_subListWithRange (C_Compiler & inLexique,
                           const GGS_uint & inFirstIndex,
                           const GGS_uint & inCount
                           COMMA_LOCATION_ARGS) const ;

  public : GGS_prio_list
  reader_subListFromIndex (C_Compiler & inLexique,
                           const GGS_uint & inIndex
                           COMMA_LOCATION_ARGS) const ;

//--- Get first object
  public : inline cElement * firstObject (void) const {
    return (cElement *) internalFirstObject () ;
  }
//--- Get last object
  public : inline cElement * lastObject (void) const {
    return (cElement *) internalLastObject () ;
  }
//--- Operator () used for method call
  public : const GGS_prio_list * operator () (UNUSED_LOCATION_ARGS) const { return this ;} 
//--- Method 'first'
  public : void method_first (C_Compiler & inLexique,
                              GGS_uint & _out_0
                              COMMA_LOCATION_ARGS) const ;
//--- Method 'last'
  public : void method_last (C_Compiler & inLexique,
                             GGS_uint & _out_0
                             COMMA_LOCATION_ARGS) const ;
//--- Modifier 'popLast'
  public : void modifier_popLast (C_Compiler & inLexique,
                                GGS_uint & _out_0
                                COMMA_LOCATION_ARGS) ;
//--- Modifier 'popFirst'
  public : void modifier_popFirst (C_Compiler & inLexique,
                                 GGS_uint & _out_0
                                 COMMA_LOCATION_ARGS) ;
//--- Handle '.=' operator
  public : void dotAssign_operation (const GGS_prio_list inOperand) ;

//--- Handling '+=' GALGAS operator
  public : void addAssign_operation (const GGS_uint & argument_0) ;
//--- Handling '.' GALGAS operator
  public : GGS_prio_list operator_concat (const GGS_prio_list & inOperand) const ;
  public : void modifier_prependValue (C_Compiler & inLexique,
                                const GGS_uint & argument_0
                                COMMA_LOCATION_ARGS) ;
//--- Internal Methods
  protected : void internalAppendValues (const GGS_uint & argument_0
                                COMMA_LOCATION_ARGS) ;

  protected : void internalPrependValues (const GGS_uint & argument_0
                                COMMA_LOCATION_ARGS) ;

//--- List Insulation
  protected : void insulateList (void) ;

//--- Reader 'description
  public : virtual GGS_string reader_description (const PMSInt32 inIndentation = 0) const ;

//--------------------------------- Direct Read Access
  public : GGS_uint 
  reader_fifosizeAtIndex (C_Compiler & inLexique, const GGS_uint & inIndex COMMA_LOCATION_ARGS) const ;

//--------------------------------- Direct Write Access
  public : void
  modifier_setFifosizeAtIndex (C_Compiler & inLexique,
                              const GGS_uint  & inObject,
                              const GGS_uint & inIndex
                              COMMA_LOCATION_ARGS) const ;

//--- Introspection
  public : virtual const C_galgas_type_descriptorEX * typeDescriptor (void) const ;

  public : GGS_object reader_object (void) const ;

  public : static GGS_prio_list castFromObject (C_Compiler & inLexique,
                                           const GGS_object & inObject,
                                           const GGS_location & inErrorLocation
                                           COMMA_LOCATION_ARGS) ;

//--------------------------------- List Enumerator
  public : class cEnumerator : public cAbstractListEnumerator {
  //--- Constructor
    public : inline cEnumerator (const GGS_prio_list & inList,
                                 const bool inAscending) :
    cAbstractListEnumerator (inList, inAscending) {
    }
  //--- Iterator method
    public : inline cElement * nextObject (void) {
      return (cElement *) internalNextObject () ;
    }
    public : /* const */ GGS_uint   & _fifosize (LOCATION_ARGS) const ;
  } ;

} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                             Map '@prio_map'                               *
//                                                                           *
//---------------------------------------------------------------------------*

class elementOf_GGS_prio_map ;

extern const C_galgas_type_descriptorEX kTypeDescriptor_GGS_prio_map ;

//---------------------------------------------------------------------------*

class GGS_prio_map : public AC_GGS_map {
//--- Element Class
  public : typedef elementOf_GGS_prio_map cElement ;

//--- Get pointers
  public : inline cElement * firstObject (void) const { return (cElement *) internalFirstObject () ; }
  public : inline cElement * lastObject (void) const { return (cElement *) internalLastObject () ; }

//--- Comparison methods
  public : GGS_bool operator_isEqual (const GGS_prio_map & inOperand) const ;
  public : GGS_bool operator_isNotEqual (const GGS_prio_map & inOperand) const ;

//--- Introspection
  public : virtual const C_galgas_type_descriptorEX * typeDescriptor (void) const ;

  public : GGS_object reader_object (void) const ;

  public : static GGS_prio_map castFromObject (C_Compiler & inLexique,
                                           const GGS_object & inObject,
                                           const GGS_location & inErrorLocation
                                           COMMA_LOCATION_ARGS) ;

//--- Create an element
  protected : virtual AC_galgas_map_element *
  new_element (const GGS_lstring & inKey, void * inInfo, const PMUInt32 inInitialState) ;

//--- Assign information to an existing element
  protected : virtual void
  assignInfo (AC_galgas_map_element * inPtr, void * inInfo) ;

//--- Enter an index
  public : void enterIndex (const GGS_string & inKey,
                            AC_galgas_index_core & outIndex) ;

//--- Get object pointer (for method call)
  public : inline GGS_prio_map * operator () (UNUSED_LOCATION_ARGS) { return this ; }
  public : inline const GGS_prio_map * operator () (UNUSED_LOCATION_ARGS) const { return this ; }

//--- 'emptyMap' constructor
  public : static GGS_prio_map constructor_emptyMap (C_Compiler & inLexique COMMA_LOCATION_ARGS) ;

//--- 'mapWithKeyAndValue' constructor
  public : static GGS_prio_map constructor_mapWithKeyAndValue (C_Compiler & inLexique,
                                             const GGS_lstring & inKey
,
                                             const GGS_uint & inValue0,
                                             const GGS_uint & inValue1
                                             COMMA_LOCATION_ARGS) ;

//--- Method used for duplicate a map
  protected : virtual void internalInsertForDuplication (AC_galgas_map_element * inPtr) ;

//--- Modifiers "set'Value'ForKey"

  public : static const utf32 kInsertMessage_put [] ;

//--- 'put' Insert Modifier
  public : void modifier_put (C_Compiler & inLexique,
                                const GGS_lstring & inKey,
                                const GGS_uint &  inParameter0,
                                const GGS_uint &  inParameter1 COMMA_LOCATION_ARGS) ;

  public : static const utf32 kSearchMessage_get [] ;

//--- 'get' Search Method
  public : void method_get (C_Compiler & inLexique,
                                const GGS_lstring & inKey,
                                GGS_uint   & outParameter0,
                                GGS_uint   & outParameter1 COMMA_LOCATION_ARGS) const ;
//--- Internal method for inserting an element
  protected : void insertElement (C_Compiler & inLexique,
                                  const PMUInt32 inInitialState,
                                  const utf32 * inErrorMessage,
                                  const GGS_lstring & inKey,
                                   const GGS_uint & inParameter0,
                                   const GGS_uint & inParameter1,
                                   GGS_luint * outIndex
                                   COMMA_LOCATION_ARGS) ;
//--- Internal method for searching for an element
  protected : void searchElement (C_Compiler & inLexique,
                                  const PMUInt32 inActionIndex,
                                  const utf32 * inErrorMessage,
                                  const GGS_lstring & inKey,
                                   GGS_uint & outParameter0,
                                   GGS_uint & outParameter1,
                                  GGS_luint * outIndex
                                  COMMA_LOCATION_ARGS) const ;
  public : virtual GGS_string reader_description (const PMSInt32 inIndentation = 0) const ;
  public : static GGS_prio_map constructor_mapWithMapToOverride (C_Compiler & inLexique,
                                            const GGS_prio_map & inMapToOverride
                                            COMMA_LOCATION_ARGS) ;
  public : GGS_prio_map reader_overriddenMap (C_Compiler & inLexique
                                            COMMA_LOCATION_ARGS) const ;

//--------------------------------- Key stringset (for map with an associated automaton)
//--------------------------------- Map Enumerator
  public : class cEnumerator : public cAbstractMapEnumerator {
  //--- Constructors
    public : inline cEnumerator (const GGS_prio_map & inMap,
                                 const bool inAscending) :
    cAbstractMapEnumerator (inMap, inAscending) {
    }
    public : inline cEnumerator (const GGS_prio_map & inMap) :
    cAbstractMapEnumerator (inMap) {
    }
  //--- Iterator method
    public : inline cElement * nextObject (void) {
      return (cElement *) internalNextObject () ;
    }
    public : /* const */ GGS_uint   & _prio (LOCATION_ARGS) const ;
    public : /* const */ GGS_uint   & _act (LOCATION_ARGS) const ;
  } ;
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                 abstract class 'cPtr_task_autostart_obj'                  *
//                                                                           *
//---------------------------------------------------------------------------*

class cPtr_task_autostart_obj : public cPtr__AC_galgas_class {
//--- Constructor
  public : cPtr_task_autostart_obj (const GGS_location & 
                                COMMA_LOCATION_ARGS) ;

//--- Attributes
  public : GGS_location  location ;
//--- Class message
  public : virtual const char * instanceMessage (void) const ;
  public : static const char * _static_message (void) ;

//--- Method for 'description' reader
  public : virtual void
  appendForDescription (C_String & ioString,
                        const PMSInt32 inIndentation) const ;

//--- Galgas RTTI
  public : virtual AC_galgasClassRunTimeInformationEX * galgasRTTI (void) const ;
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                abstract class 'cPtr_task_autostart_void'                  *
//                                                                           *
//---------------------------------------------------------------------------*

class cPtr_task_autostart_void : public cPtr_task_autostart_obj {
  private : typedef cPtr_task_autostart_obj inherited ;
//--- Constructor
  public : cPtr_task_autostart_void (const GGS_location & 
                                COMMA_LOCATION_ARGS) ;

//--- Attributes
//--- Class message
  public : virtual const char * instanceMessage (void) const ;
  public : static const char * _static_message (void) ;

//--- Method for 'description' reader
  public : virtual void
  appendForDescription (C_String & ioString,
                        const PMSInt32 inIndentation) const ;

//--- Comparison
  public : virtual bool
  isEqualToObject (const cPtr__AC_galgas_class * inOperand) const ;

//--- Galgas RTTI
  public : virtual AC_galgasClassRunTimeInformationEX * galgasRTTI (void) const ;

//--- Make clone
  public : virtual cPtr__AC_galgas_class * makeClone (void) const ;
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                abstract class 'cPtr_task_autostart_false'                 *
//                                                                           *
//---------------------------------------------------------------------------*

class cPtr_task_autostart_false : public cPtr_task_autostart_obj {
  private : typedef cPtr_task_autostart_obj inherited ;
//--- Constructor
  public : cPtr_task_autostart_false (const GGS_location & 
                                COMMA_LOCATION_ARGS) ;

//--- Attributes
//--- Class message
  public : virtual const char * instanceMessage (void) const ;
  public : static const char * _static_message (void) ;

//--- Method for 'description' reader
  public : virtual void
  appendForDescription (C_String & ioString,
                        const PMSInt32 inIndentation) const ;

//--- Comparison
  public : virtual bool
  isEqualToObject (const cPtr__AC_galgas_class * inOperand) const ;

//--- Galgas RTTI
  public : virtual AC_galgasClassRunTimeInformationEX * galgasRTTI (void) const ;

//--- Make clone
  public : virtual cPtr__AC_galgas_class * makeClone (void) const ;
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                abstract class 'cPtr_task_autostart_true'                  *
//                                                                           *
//---------------------------------------------------------------------------*

class cPtr_task_autostart_true : public cPtr_task_autostart_obj {
  private : typedef cPtr_task_autostart_obj inherited ;
//--- Constructor
  public : cPtr_task_autostart_true (const GGS_location & ,
                                const GGS_stringset & 
                                COMMA_LOCATION_ARGS) ;

//--- Attributes
  public : GGS_stringset  appmodes ;
//--- Class message
  public : virtual const char * instanceMessage (void) const ;
  public : static const char * _static_message (void) ;

//--- Method for 'description' reader
  public : virtual void
  appendForDescription (C_String & ioString,
                        const PMSInt32 inIndentation) const ;

//--- Comparison
  public : virtual bool
  isEqualToObject (const cPtr__AC_galgas_class * inOperand) const ;

//--- Galgas RTTI
  public : virtual AC_galgasClassRunTimeInformationEX * galgasRTTI (void) const ;

//--- Make clone
  public : virtual cPtr__AC_galgas_class * makeClone (void) const ;
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                      abstract class 'cPtr_task_obj'                       *
//                                                                           *
//---------------------------------------------------------------------------*

class cPtr_task_obj : public cPtr_oil_obj {
  private : typedef cPtr_oil_obj inherited ;
//--- Constructor
  public : cPtr_task_obj (const GGS_lstring & ,
                                const GGS_basic_type & ,
                                const GGS_lstring & ,
                                const GGS_basic_type & ,
                                const GGS_task_autostart_obj & ,
                                const GGS_lstringlist & ,
                                const GGS_lstringlist & ,
                                const GGS_lstringlist & ,
                                const GGS_lstringlist & ,
                                const GGS_timing_prot & ,
                                const GGS_ident_map & 
                                COMMA_LOCATION_ARGS) ;

//--- Attributes
  public : GGS_basic_type  priority ;
  public : GGS_lstring  schedule ;
  public : GGS_basic_type  activation ;
  public : GGS_task_autostart_obj  autostart ;
  public : GGS_lstringlist  resources ;
  public : GGS_lstringlist  events ;
  public : GGS_lstringlist  messages ;
  public : GGS_lstringlist  acc_apps ;
  public : GGS_timing_prot  timing_prot ;
  public : GGS_ident_map  others ;
//--- Class message
  public : virtual const char * instanceMessage (void) const ;
  public : static const char * _static_message (void) ;

//--- Method for 'description' reader
  public : virtual void
  appendForDescription (C_String & ioString,
                        const PMSInt32 inIndentation) const ;

//--- Comparison
  public : virtual bool
  isEqualToObject (const cPtr__AC_galgas_class * inOperand) const ;

//--- Galgas RTTI
  public : virtual AC_galgasClassRunTimeInformationEX * galgasRTTI (void) const ;

//--- Make clone
  public : virtual cPtr__AC_galgas_class * makeClone (void) const ;
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                        Element of map '@task_map'                         *
//                                                                           *
//---------------------------------------------------------------------------*

class e_task_map {
  public : GGS_task_obj  task ;

  public : e_task_map (void) ;
} ;

//---------------------------------------------------------------------------*

class elementOf_GGS_task_map : public AC_galgas_map_element {
//--- Constructor
  public : elementOf_GGS_task_map (const GGS_lstring & inKey,
                                     const PMSInt32 inIndex,
                                     const e_task_map & inInfo,
                                     const PMUInt32 inInitialState = 0) ;
//--- Get pointers
  public : inline elementOf_GGS_task_map * nextObject (void) const { return (elementOf_GGS_task_map *) mNextItem ; }
  public : inline elementOf_GGS_task_map * infObject (void) const { return (elementOf_GGS_task_map *) mInfPtr ; }
  public : inline elementOf_GGS_task_map * supObject (void) const { return (elementOf_GGS_task_map *) mSupPtr ; }
//--- Comparison
  protected : virtual bool isEqualToMapElement (const AC_galgas_map_element * inOperand) const ;
//--- Data member
  public : e_task_map mInfo ;
//--- Method for 'description' reader
  public : void appendForMapDescription (const PMSInt32 inElementIndex,
                                         C_String & ioString,
                                         const PMSInt32 inIndentation) const ;
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                       Element of map '@task_mask'                         *
//                                                                           *
//---------------------------------------------------------------------------*

class e_task_mask {
  public : GGS_uint64  mask ;

  public : e_task_mask (void) ;
} ;

//---------------------------------------------------------------------------*

class elementOf_GGS_task_mask : public AC_galgas_map_element {
//--- Constructor
  public : elementOf_GGS_task_mask (const GGS_lstring & inKey,
                                     const PMSInt32 inIndex,
                                     const e_task_mask & inInfo,
                                     const PMUInt32 inInitialState = 0) ;
//--- Get pointers
  public : inline elementOf_GGS_task_mask * nextObject (void) const { return (elementOf_GGS_task_mask *) mNextItem ; }
  public : inline elementOf_GGS_task_mask * infObject (void) const { return (elementOf_GGS_task_mask *) mInfPtr ; }
  public : inline elementOf_GGS_task_mask * supObject (void) const { return (elementOf_GGS_task_mask *) mSupPtr ; }
//--- Comparison
  protected : virtual bool isEqualToMapElement (const AC_galgas_map_element * inOperand) const ;
//--- Data member
  public : e_task_mask mInfo ;
//--- Method for 'description' reader
  public : void appendForMapDescription (const PMSInt32 inElementIndex,
                                         C_String & ioString,
                                         const PMSInt32 inIndentation) const ;
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                  Element of sorted list '@objs_by_prio'                   *
//                                                                           *
//---------------------------------------------------------------------------*

class elementOf_GGS_objs_by_prio : public AC_GGS_sortedlist::cSortedListElement {
//--- Attributes
  public : GGS_uint  prio ;
  public : GGS_uint  act ;
  public : GGS_lstring  name ;
//--- Constructor
  public : elementOf_GGS_objs_by_prio (const GGS_uint & ,
                                const GGS_uint & ,
                                const GGS_lstring & ) ;

//--- Access to next
  public : inline elementOf_GGS_objs_by_prio * nextObject (void) const { return (elementOf_GGS_objs_by_prio *) internalNextItem () ; }
//--- Access to previous
  public : inline elementOf_GGS_objs_by_prio * previousObject (void) const { return (elementOf_GGS_objs_by_prio *) internalPreviousItem () ; }
//--- Element comparison
  protected : virtual bool
  isEqualToObject (const cSortedListElement * inOperand) const ;
//--- Method used for sorting elements
  protected : virtual PMSInt32 compareForSorting (const cSortedListElement * inOperand) const ;
//--- Method used for description
  public : virtual void
  appendForDescription (C_String & ioString,
                        const PMSInt32 inIndentation) const ;
  friend class GGS_objs_by_prio ;
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                 Element of sorted list '@tasks_by_type'                   *
//                                                                           *
//---------------------------------------------------------------------------*

class elementOf_GGS_tasks_by_type : public AC_GGS_sortedlist::cSortedListElement {
//--- Attributes
  public : GGS_uint  type ;
  public : GGS_string name ;
//--- Constructor
  public : elementOf_GGS_tasks_by_type (const GGS_uint & ,
                                const GGS_string& ) ;

//--- Access to next
  public : inline elementOf_GGS_tasks_by_type * nextObject (void) const { return (elementOf_GGS_tasks_by_type *) internalNextItem () ; }
//--- Access to previous
  public : inline elementOf_GGS_tasks_by_type * previousObject (void) const { return (elementOf_GGS_tasks_by_type *) internalPreviousItem () ; }
//--- Element comparison
  protected : virtual bool
  isEqualToObject (const cSortedListElement * inOperand) const ;
//--- Method used for sorting elements
  protected : virtual PMSInt32 compareForSorting (const cSortedListElement * inOperand) const ;
//--- Method used for description
  public : virtual void
  appendForDescription (C_String & ioString,
                        const PMSInt32 inIndentation) const ;
  friend class GGS_tasks_by_type ;
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                       Element of list '@prio_list'                        *
//                                                                           *
//---------------------------------------------------------------------------*

class elementOf_GGS_prio_list : public AC_GGS_list::cListElement {
//--- Attributes
  public : GGS_uint  fifosize ;
//--- Constructor
  public : elementOf_GGS_prio_list (const GGS_uint & 
                                COMMA_LOCATION_ARGS) ;

//--- Access to next
  public : inline elementOf_GGS_prio_list * nextObject (void) const { return (elementOf_GGS_prio_list *) internalNextItem () ; }

//--- Access to previous
  public : inline elementOf_GGS_prio_list * previousObject (void) const { return (elementOf_GGS_prio_list *) internalPreviousItem () ; }

//--- Element comparison
  protected : virtual bool
  isEqualToObject (const cListElement * inOperand) const ;

//--- Method used for description
  public : virtual void
  appendForDescription (C_String & ioString,
                        const PMSInt32 inIndentation) const ;

//--- Friend class declaration
  friend class GGS_prio_list ;
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                        Element of map '@prio_map'                         *
//                                                                           *
//---------------------------------------------------------------------------*

class e_prio_map {
  public : GGS_uint  prio ;
  public : GGS_uint  act ;

  public : e_prio_map (void) ;
} ;

//---------------------------------------------------------------------------*

class elementOf_GGS_prio_map : public AC_galgas_map_element {
//--- Constructor
  public : elementOf_GGS_prio_map (const GGS_lstring & inKey,
                                     const PMSInt32 inIndex,
                                     const e_prio_map & inInfo,
                                     const PMUInt32 inInitialState = 0) ;
//--- Get pointers
  public : inline elementOf_GGS_prio_map * nextObject (void) const { return (elementOf_GGS_prio_map *) mNextItem ; }
  public : inline elementOf_GGS_prio_map * infObject (void) const { return (elementOf_GGS_prio_map *) mInfPtr ; }
  public : inline elementOf_GGS_prio_map * supObject (void) const { return (elementOf_GGS_prio_map *) mSupPtr ; }
//--- Comparison
  protected : virtual bool isEqualToMapElement (const AC_galgas_map_element * inOperand) const ;
//--- Data member
  public : e_prio_map mInfo ;
//--- Method for 'description' reader
  public : void appendForMapDescription (const PMSInt32 inElementIndex,
                                         C_String & ioString,
                                         const PMSInt32 inIndentation) const ;
} ;

//---------------------------------------------------------------------------*

#endif
