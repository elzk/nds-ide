//---------------------------------------------------------------------------*
//                                                                           *
//                          File 'isrs_verif.cpp'                            *
//                        Generated by version 2.0.0                         *
//                       july 7th, 2010, at 17h16'14"                        *
//                                                                           *
//---------------------------------------------------------------------------*

//--- START OF USER ZONE 1


//--- END OF USER ZONE 1

//---------------------------------------------------------------------------*

#include "version_libpm.h"
#if CURRENT_LIBPM_VERSION != 820
  #error "This file has been compiled with a version of GALGAS that uses libpm version 820, different than the current version (CURRENT_LIBPM_VERSION) of libpm"
#endif

//---------------------------------------------------------------------------*

#include <typeinfo>
#include "utilities/MF_MemoryControl.h"
#include "files/C_TextFileWrite.h"
#include "galgas/C_galgas_CLI_Options.h"
#include "isrs_verif.h"

//---------------------------------------------------------------------------*

#ifndef DO_NOT_GENERATE_CHECKINGS
  #define SOURCE_FILE_AT_LINE(line) "isrs_verif.gSemantics", line
  #define COMMA_SOURCE_FILE_AT_LINE(line) , SOURCE_FILE_AT_LINE(line)
#else
  #define SOURCE_FILE_AT_LINE(line) 
  #define COMMA_SOURCE_FILE_AT_LINE(line) 
#endif


//--- START OF USER ZONE 2


//--- END OF USER ZONE 2

//---------------------------------------------------------------------------*
//                                                                           *
//               Implementation of routine "isrs_well_formed"                *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_isrs_well_formed (C_Compiler & inLexique,
                                const GGS_isr_map   var_cas_isrs
                        COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_isrs_well_formed at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  {
    GGS_isr_map::cEnumerator enumerator_815 (var_cas_isrs, true) ;
    const GGS_isr_map::cElement * operand_815 = NULL ;
    while (((operand_815 = enumerator_815.nextObject ()))) {
      macroValidPointer (operand_815) ;
      { const GGS_basic_type _var_1003 = operand_815->mInfo.isr.reader_category (inLexique COMMA_SOURCE_FILE_AT_LINE (48)) ; // CAST instruction
        if (_var_1003.getPtr () != NULL) {
          macroValidPointer (_var_1003.getPtr ()) ;
          if (typeid (cPtr_void) == typeid (* (_var_1003.getPtr ()))) {
            operand_815->mKey.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, (GGS_string ("CATEGORY attribute undefined for ISR ")).operator_concat (operand_815->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (50))) COMMA_SOURCE_FILE_AT_LINE (51)) ;
          }else{
          }
        }
      }
      { const GGS_basic_type _var_1160 = operand_815->mInfo.isr.reader_priority (inLexique COMMA_SOURCE_FILE_AT_LINE (54)) ; // CAST instruction
        if (_var_1160.getPtr () != NULL) {
          macroValidPointer (_var_1160.getPtr ()) ;
          if (typeid (cPtr_void) == typeid (* (_var_1160.getPtr ()))) {
            operand_815->mKey.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, (GGS_string ("PRIORITY attribute undefined for ISR ")).operator_concat (operand_815->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (56))) COMMA_SOURCE_FILE_AT_LINE (57)) ;
          }else{
          }
        }
      }
    }
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_isrs_well_formed\n") ;
  #endif
}

//---------------------------------------------------------------------------*

