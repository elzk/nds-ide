//---------------------------------------------------------------------------*
//                                                                           *
//                           File 'xml_utils.cpp'                            *
//                 Generated by version GALGAS_BETA_VERSION                  *
//                      june 12th, 2009, at 14h44'48"                        *
//                                                                           *
//---------------------------------------------------------------------------*

//--- START OF USER ZONE 1


//--- END OF USER ZONE 1

//---------------------------------------------------------------------------*

#include "version_libpm.h"
#if LIBPM_VERSION != 502
  #error "This file has been compiled with a version of GALGAS different than the version of libpm"
#endif

//---------------------------------------------------------------------------*

#include <typeinfo>
#include "utilities/MF_MemoryControl.h"
#include "files/C_TextFileWrite.h"
#include "xml_utils.h"

//---------------------------------------------------------------------------*

#ifndef DO_NOT_GENERATE_CHECKINGS
  #define SOURCE_FILE_AT_LINE(line) "xml_utils.ggs", line
  #define COMMA_SOURCE_FILE_AT_LINE(line) , SOURCE_FILE_AT_LINE(line)
#else
  #define SOURCE_FILE_AT_LINE(line) 
  #define COMMA_SOURCE_FILE_AT_LINE(line) 
#endif


//--- START OF USER ZONE 2


//--- END OF USER ZONE 2

//---------------------------------------------------------------------------*
//                                                                           *
//                   Implementation of function "is_elem"                    *
//                                                                           *
//---------------------------------------------------------------------------*

GGS_bool function_is_elem (C_Compiler & inLexique,
                                const GGS_xmlNode   var_cas_node,
                                const GGS_string  var_cas_name COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER function_is_elem at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  GGS_bool var_cas_res ;
  if ((((var_cas_node.reader_type (inLexique COMMA_SOURCE_FILE_AT_LINE (11))).operator_isEqual (GGS_xmlNodeType::constructor_element (inLexique COMMA_HERE))).operator_and ((var_cas_node.reader_name (inLexique COMMA_SOURCE_FILE_AT_LINE (11)).reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (11))).operator_isEqual (var_cas_name))).isBuiltAndTrue ()) {
    var_cas_res = GGS_bool (true) ;
  }else{
    var_cas_res = GGS_bool (false) ;
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE function_is_elem\n") ;
  #endif
  return var_cas_res ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                   Implementation of function "is_text"                    *
//                                                                           *
//---------------------------------------------------------------------------*

GGS_bool function_is_text (C_Compiler & inLexique,
                                const GGS_xmlNode   var_cas_node,
                                const GGS_string  var_cas_name COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER function_is_text at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  GGS_bool var_cas_res ;
  if ((((var_cas_node.reader_type (inLexique COMMA_SOURCE_FILE_AT_LINE (23))).operator_isEqual (GGS_xmlNodeType::constructor_text (inLexique COMMA_HERE))).operator_and ((var_cas_node.reader_name (inLexique COMMA_SOURCE_FILE_AT_LINE (23)).reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (23))).operator_isEqual (var_cas_name))).isBuiltAndTrue ()) {
    var_cas_res = GGS_bool (true) ;
  }else{
    var_cas_res = GGS_bool (false) ;
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE function_is_text\n") ;
  #endif
  return var_cas_res ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                 Implementation of function "is_not_void"                  *
//                                                                           *
//---------------------------------------------------------------------------*

GGS_bool function_is_not_void (C_Compiler & inLexique,
                                const GGS_xmlNode   var_cas_node COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER function_is_not_void at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  GGS_bool var_cas_res ;
  if (((var_cas_node.reader_type (inLexique COMMA_SOURCE_FILE_AT_LINE (34))).operator_isEqual (GGS_xmlNodeType::constructor_void (inLexique COMMA_HERE))).isBuiltAndTrue ()) {
    var_cas_res = GGS_bool (false) ;
  }else{
    var_cas_res = GGS_bool (true) ;
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE function_is_not_void\n") ;
  #endif
  return var_cas_res ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                Implementation of function "is_short_name"                 *
//                                                                           *
//---------------------------------------------------------------------------*

GGS_bool function_is_short_name (C_Compiler & inLexique,
                                const GGS_xmlNode   var_cas_node,
                                const GGS_string  var_cas_name COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER function_is_short_name at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  GGS_bool var_cas_res ;
  if ((function_is_elem (inLexique, var_cas_node, GGS_string ("SHORT-NAME") COMMA_SOURCE_FILE_AT_LINE (46))).isBuiltAndTrue ()) {
    GGS_xmlNodeList  var_cas_nl ;
    var_cas_nl = var_cas_node.reader_nodeList (inLexique COMMA_SOURCE_FILE_AT_LINE (47)) ;
    GGS_xmlNode  var_cas_module_name ;
    const GGS_xmlNodeList  _temp_929 = var_cas_nl ;
    if (_temp_929.isBuilt ()) {
      _temp_929 (HERE)->method_first (inLexique, var_cas_module_name COMMA_SOURCE_FILE_AT_LINE (49)) ;
    }
    if ((function_is_text (inLexique, var_cas_module_name, var_cas_name COMMA_SOURCE_FILE_AT_LINE (50))).isBuiltAndTrue ()) {
      var_cas_res = GGS_bool (true) ;
    }else{
      var_cas_res = GGS_bool (false) ;
    }
  }else{
    var_cas_res = GGS_bool (false) ;
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE function_is_short_name\n") ;
  #endif
  return var_cas_res ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                 Implementation of function "elem_named"                   *
//                                                                           *
//---------------------------------------------------------------------------*

GGS_xmlNode  function_elem_named (C_Compiler & inLexique,
                                const GGS_xmlNodeList   var_cas_nodes,
                                const GGS_string  var_cas_name COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER function_elem_named at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  GGS_xmlNode  var_cas_elem ;
  var_cas_elem = GGS_xmlNode ::constructor_new (inLexique, GGS_xmlNodeType::constructor_void (inLexique COMMA_HERE), GGS_lstring ::constructor_new (inLexique, GGS_string (""), GGS_location (inLexique) COMMA_HERE), GGS_xmlAttributeMap ::constructor_emptyMap (inLexique COMMA_HERE), GGS_xmlNodeList ::constructor_emptyList () COMMA_HERE) ;
  {
    GGS_xmlNodeList::cEnumerator enumerator_1345 (var_cas_nodes, true) ;
    const GGS_xmlNodeList::cElement * operand_1345 = NULL ;
    while (((operand_1345 = enumerator_1345.nextObject ()))) {
      macroValidPointer (operand_1345) ;
      if ((function_is_elem (inLexique, operand_1345->node, var_cas_name COMMA_SOURCE_FILE_AT_LINE (72))).isBuiltAndTrue ()) {
        var_cas_elem = operand_1345->node ;
      }
    }
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE function_elem_named\n") ;
  #endif
  return var_cas_elem ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                 Implementation of function "short_name"                   *
//                                                                           *
//---------------------------------------------------------------------------*

GGS_lstring  function_short_name (C_Compiler & inLexique,
                                const GGS_xmlNode   var_cas_node COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER function_short_name at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  GGS_lstring  var_cas_name ;
  var_cas_name = GGS_lstring ::constructor_new (inLexique, GGS_string (""), GGS_location (inLexique) COMMA_HERE) ;
  if ((function_is_elem (inLexique, var_cas_node, GGS_string ("SHORT-NAME") COMMA_SOURCE_FILE_AT_LINE (83))).isBuiltAndTrue ()) {
    GGS_xmlNodeList  var_cas_nl ;
    var_cas_nl = var_cas_node.reader_nodeList (inLexique COMMA_SOURCE_FILE_AT_LINE (85)) ;
    GGS_xmlNode  var_cas_module_name ;
    const GGS_xmlNodeList  _temp_1682 = var_cas_nl ;
    if (_temp_1682.isBuilt ()) {
      _temp_1682 (HERE)->method_first (inLexique, var_cas_module_name COMMA_SOURCE_FILE_AT_LINE (87)) ;
    }
    if (((var_cas_module_name.reader_type (inLexique COMMA_SOURCE_FILE_AT_LINE (88))).operator_isEqual (GGS_xmlNodeType::constructor_text (inLexique COMMA_HERE))).isBuiltAndTrue ()) {
      var_cas_name = var_cas_module_name.reader_name (inLexique COMMA_SOURCE_FILE_AT_LINE (89)) ;
    }
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE function_short_name\n") ;
  #endif
  return var_cas_name ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                  Implementation of function "long_name"                   *
//                                                                           *
//---------------------------------------------------------------------------*

GGS_lstring  function_long_name (C_Compiler & inLexique,
                                const GGS_xmlNode   var_cas_node COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER function_long_name at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  GGS_lstring  var_cas_name ;
  var_cas_name = GGS_lstring ::constructor_new (inLexique, GGS_string (""), GGS_location (inLexique) COMMA_HERE) ;
  if ((function_is_elem (inLexique, var_cas_node, GGS_string ("LONG-NAME") COMMA_SOURCE_FILE_AT_LINE (101))).isBuiltAndTrue ()) {
    GGS_xmlNodeList  var_cas_nl ;
    var_cas_nl = var_cas_node.reader_nodeList (inLexique COMMA_SOURCE_FILE_AT_LINE (103)) ;
    GGS_xmlNode  var_cas_l4 ;
    var_cas_l4 = function_elem_named (inLexique, var_cas_nl, GGS_string ("L-4") COMMA_SOURCE_FILE_AT_LINE (104)) ;
    if ((function_is_not_void (inLexique, var_cas_l4 COMMA_SOURCE_FILE_AT_LINE (105))).isBuiltAndTrue ()) {
      GGS_xmlNodeList  var_cas_nl ;
      var_cas_nl = var_cas_l4.reader_nodeList (inLexique COMMA_SOURCE_FILE_AT_LINE (106)) ;
      GGS_xmlNode  var_cas_module_name ;
      const GGS_xmlNodeList  _temp_2236 = var_cas_nl ;
      if (_temp_2236.isBuilt ()) {
        _temp_2236 (HERE)->method_first (inLexique, var_cas_module_name COMMA_SOURCE_FILE_AT_LINE (108)) ;
      }
      if (((var_cas_module_name.reader_type (inLexique COMMA_SOURCE_FILE_AT_LINE (109))).operator_isEqual (GGS_xmlNodeType::constructor_text (inLexique COMMA_HERE))).isBuiltAndTrue ()) {
        var_cas_name = var_cas_module_name.reader_name (inLexique COMMA_SOURCE_FILE_AT_LINE (110)) ;
      }
    }
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE function_long_name\n") ;
  #endif
  return var_cas_name ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//             Implementation of function "container_long_name"              *
//                                                                           *
//---------------------------------------------------------------------------*

GGS_lstring  function_container_long_name (C_Compiler & inLexique,
                                const GGS_xmlNode   var_cas_node COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER function_container_long_name at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  GGS_lstring  var_cas_name ;
  var_cas_name = GGS_lstring ::constructor_new (inLexique, GGS_string (""), GGS_location (inLexique) COMMA_HERE) ;
  GGS_xmlNode  var_cas_long_name ;
  var_cas_long_name = function_elem_named (inLexique, var_cas_node.reader_nodeList (inLexique COMMA_SOURCE_FILE_AT_LINE (123)), GGS_string ("LONG-NAME") COMMA_SOURCE_FILE_AT_LINE (123)) ;
  if ((function_is_not_void (inLexique, var_cas_long_name COMMA_SOURCE_FILE_AT_LINE (124))).isBuiltAndTrue ()) {
    GGS_xmlNodeList  var_cas_nl ;
    var_cas_nl = var_cas_long_name.reader_nodeList (inLexique COMMA_SOURCE_FILE_AT_LINE (126)) ;
    GGS_xmlNode  var_cas_l4 ;
    var_cas_l4 = function_elem_named (inLexique, var_cas_nl, GGS_string ("L-4") COMMA_SOURCE_FILE_AT_LINE (127)) ;
    if ((function_is_not_void (inLexique, var_cas_l4 COMMA_SOURCE_FILE_AT_LINE (128))).isBuiltAndTrue ()) {
      GGS_xmlNodeList  var_cas_nl ;
      var_cas_nl = var_cas_l4.reader_nodeList (inLexique COMMA_SOURCE_FILE_AT_LINE (129)) ;
      GGS_xmlNode  var_cas_module_name ;
      const GGS_xmlNodeList  _temp_2890 = var_cas_nl ;
      if (_temp_2890.isBuilt ()) {
        _temp_2890 (HERE)->method_first (inLexique, var_cas_module_name COMMA_SOURCE_FILE_AT_LINE (131)) ;
      }
      if (((var_cas_module_name.reader_type (inLexique COMMA_SOURCE_FILE_AT_LINE (132))).operator_isEqual (GGS_xmlNodeType::constructor_text (inLexique COMMA_HERE))).isBuiltAndTrue ()) {
        var_cas_name = var_cas_module_name.reader_name (inLexique COMMA_SOURCE_FILE_AT_LINE (133)) ;
      }
    }
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE function_container_long_name\n") ;
  #endif
  return var_cas_name ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                  Implementation of function "is_param"                    *
//                                                                           *
//---------------------------------------------------------------------------*

GGS_bool function_is_param (C_Compiler & inLexique,
                                const GGS_xmlNode   var_cas_node,
                                const GGS_string  var_cas_name COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER function_is_param at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  GGS_bool var_cas_res ;
  GGS_xmlNodeList  var_cas_nl ;
  var_cas_nl = var_cas_node.reader_nodeList (inLexique COMMA_SOURCE_FILE_AT_LINE (146)) ;
  GGS_xmlNode  var_cas_param_name ;
  const GGS_xmlNodeList  _temp_3257 = var_cas_nl ;
  if (_temp_3257.isBuilt ()) {
    _temp_3257 (HERE)->method_first (inLexique, var_cas_param_name COMMA_SOURCE_FILE_AT_LINE (148)) ;
  }
  if ((function_is_elem (inLexique, var_cas_param_name, GGS_string ("DEFINITION-REF") COMMA_SOURCE_FILE_AT_LINE (149))).isBuiltAndTrue ()) {
    var_cas_nl = var_cas_param_name.reader_nodeList (inLexique COMMA_SOURCE_FILE_AT_LINE (150)) ;
    GGS_xmlNode  var_cas_param_text ;
    const GGS_xmlNodeList  _temp_3391 = var_cas_nl ;
    if (_temp_3391.isBuilt ()) {
      _temp_3391 (HERE)->method_first (inLexique, var_cas_param_text COMMA_SOURCE_FILE_AT_LINE (152)) ;
    }
    GGS_string var_cas_pn ;
    var_cas_pn = var_cas_param_text.reader_name (inLexique COMMA_SOURCE_FILE_AT_LINE (153)).reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (153)).reader_lastPathComponent (inLexique COMMA_SOURCE_FILE_AT_LINE (153)) ;
    if (((var_cas_pn).operator_isEqual (var_cas_name)).isBuiltAndTrue ()) {
      var_cas_res = GGS_bool (true) ;
    }else{
      var_cas_res = GGS_bool (false) ;
    }
  }else{
    var_cas_res = GGS_bool (false) ;
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE function_is_param\n") ;
  #endif
  return var_cas_res ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                 Implementation of function "value_text"                   *
//                                                                           *
//---------------------------------------------------------------------------*

GGS_lstring  function_value_text (C_Compiler & inLexique,
                                const GGS_xmlNode   var_cas_node COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER function_value_text at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  GGS_lstring  var_cas_text ;
  var_cas_text = GGS_lstring ::constructor_new (inLexique, GGS_string (""), GGS_location (inLexique) COMMA_HERE) ;
  GGS_xmlNodeList  var_cas_nl ;
  var_cas_nl = var_cas_node.reader_nodeList (inLexique COMMA_SOURCE_FILE_AT_LINE (169)) ;
  GGS_xmlNode  var_cas_text_val ;
  const GGS_xmlNodeList  _temp_3768 = var_cas_nl ;
  if (_temp_3768.isBuilt ()) {
    _temp_3768 (HERE)->method_last (inLexique, var_cas_text_val COMMA_SOURCE_FILE_AT_LINE (171)) ;
  }
  if ((function_is_elem (inLexique, var_cas_text_val, GGS_string ("VALUE") COMMA_SOURCE_FILE_AT_LINE (172))).isBuiltAndTrue ()) {
    var_cas_nl = var_cas_text_val.reader_nodeList (inLexique COMMA_SOURCE_FILE_AT_LINE (173)) ;
    GGS_xmlNode  var_cas_text_text ;
    const GGS_xmlNodeList  _temp_3886 = var_cas_nl ;
    if (_temp_3886.isBuilt ()) {
      _temp_3886 (HERE)->method_first (inLexique, var_cas_text_text COMMA_SOURCE_FILE_AT_LINE (175)) ;
    }
    var_cas_text = var_cas_text_text.reader_name (inLexique COMMA_SOURCE_FILE_AT_LINE (176)) ;
  }else{
    var_cas_text_val.reader_name (inLexique COMMA_SOURCE_FILE_AT_LINE (178)).reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("VALUE expected") COMMA_SOURCE_FILE_AT_LINE (179)) ;
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE function_value_text\n") ;
  #endif
  return var_cas_text ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                  Implementation of function "ref_text"                    *
//                                                                           *
//---------------------------------------------------------------------------*

GGS_lstring  function_ref_text (C_Compiler & inLexique,
                                const GGS_xmlNode   var_cas_node COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER function_ref_text at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  GGS_lstring  var_cas_text ;
  var_cas_text = GGS_lstring ::constructor_new (inLexique, GGS_string (""), GGS_location (inLexique) COMMA_HERE) ;
  GGS_xmlNodeList  var_cas_nl ;
  var_cas_nl = var_cas_node.reader_nodeList (inLexique COMMA_SOURCE_FILE_AT_LINE (187)) ;
  GGS_xmlNode  var_cas_text_val ;
  const GGS_xmlNodeList  _temp_4168 = var_cas_nl ;
  if (_temp_4168.isBuilt ()) {
    _temp_4168 (HERE)->method_last (inLexique, var_cas_text_val COMMA_SOURCE_FILE_AT_LINE (189)) ;
  }
  if ((function_is_elem (inLexique, var_cas_text_val, GGS_string ("VALUE-REF") COMMA_SOURCE_FILE_AT_LINE (190))).isBuiltAndTrue ()) {
    var_cas_nl = var_cas_text_val.reader_nodeList (inLexique COMMA_SOURCE_FILE_AT_LINE (191)) ;
    GGS_xmlNode  var_cas_text_text ;
    const GGS_xmlNodeList  _temp_4290 = var_cas_nl ;
    if (_temp_4290.isBuilt ()) {
      _temp_4290 (HERE)->method_first (inLexique, var_cas_text_text COMMA_SOURCE_FILE_AT_LINE (193)) ;
    }
    var_cas_text = var_cas_text_text.reader_name (inLexique COMMA_SOURCE_FILE_AT_LINE (194)) ;
  }else{
    var_cas_text_val.reader_name (inLexique COMMA_SOURCE_FILE_AT_LINE (196)).reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("VALUE-REF expected") COMMA_SOURCE_FILE_AT_LINE (197)) ;
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE function_ref_text\n") ;
  #endif
  return var_cas_text ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                Implementation of function "lstring_param"                 *
//                                                                           *
//---------------------------------------------------------------------------*

GGS_lstring  function_lstring_param (C_Compiler & inLexique,
                                const GGS_xmlNode   var_cas_node COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER function_lstring_param at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  GGS_lstring  var_cas_param ;
  var_cas_param = function_value_text (inLexique, var_cas_node COMMA_SOURCE_FILE_AT_LINE (204)) ;
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE function_lstring_param\n") ;
  #endif
  return var_cas_param ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//              Implementation of function "bool_class_param"                *
//                                                                           *
//---------------------------------------------------------------------------*

GGS_bool_class  function_bool_class_param (C_Compiler & inLexique,
                                const GGS_xmlNode   var_cas_node COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER function_bool_class_param at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  GGS_bool_class  var_cas_param ;
  GGS_lstring  var_cas_lval ;
  var_cas_lval = function_value_text (inLexique, var_cas_node COMMA_SOURCE_FILE_AT_LINE (211)) ;
  GGS_string var_cas_val ;
  var_cas_val = var_cas_lval.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (212)).reader_uppercaseString (inLexique COMMA_SOURCE_FILE_AT_LINE (212)) ;
  if (((var_cas_val).operator_isEqual (GGS_string ("TRUE"))).isBuiltAndTrue ()) {
    var_cas_param = GGS_bool_class ::constructor_new (inLexique, var_cas_lval.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (214)), GGS_bool (true) COMMA_HERE) ;
  }else if (((var_cas_val).operator_isEqual (GGS_string ("FALSE"))).isBuiltAndTrue ()) {
    var_cas_param = GGS_bool_class ::constructor_new (inLexique, var_cas_lval.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (216)), GGS_bool (false) COMMA_HERE) ;
  }else{
    var_cas_lval.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("boolean expected") COMMA_SOURCE_FILE_AT_LINE (219)) ;
    var_cas_param = GGS_bool_class ::constructor_new (inLexique, var_cas_lval.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (219)), GGS_bool (false) COMMA_HERE) ;
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE function_bool_class_param\n") ;
  #endif
  return var_cas_param ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//             Implementation of function "uint32_class_param"               *
//                                                                           *
//---------------------------------------------------------------------------*

GGS_uint32_class  function_uint32_class_param (C_Compiler & inLexique,
                                const GGS_xmlNode   var_cas_node COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER function_uint32_class_param at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  GGS_uint32_class  var_cas_param ;
  GGS_lstring  var_cas_lval ;
  var_cas_lval = function_value_text (inLexique, var_cas_node COMMA_SOURCE_FILE_AT_LINE (227)) ;
  if ((var_cas_lval.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (228)).reader_isDecimalUnsignedNumber (inLexique COMMA_SOURCE_FILE_AT_LINE (228))).isBuiltAndTrue ()) {
    GGS_uint  var_cas_val ;
    var_cas_val = var_cas_lval.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (229)).reader_decimalUnsignedNumber (inLexique COMMA_SOURCE_FILE_AT_LINE (229)) ;
    var_cas_param = GGS_uint32_class ::constructor_new (inLexique, var_cas_lval.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (230)), var_cas_val COMMA_HERE) ;
  }else{
    var_cas_lval.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("Unsigned number expected") COMMA_SOURCE_FILE_AT_LINE (233)) ;
    var_cas_param = GGS_uint32_class ::constructor_new (inLexique, var_cas_lval.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (233)), GGS_uint (0U) COMMA_HERE) ;
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE function_uint32_class_param\n") ;
  #endif
  return var_cas_param ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//             Implementation of function "uint64_class_param"               *
//                                                                           *
//---------------------------------------------------------------------------*

GGS_uint64_class  function_uint64_class_param (C_Compiler & inLexique,
                                const GGS_xmlNode   var_cas_node COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER function_uint64_class_param at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  GGS_uint64_class  var_cas_param ;
  GGS_lstring  var_cas_lval ;
  var_cas_lval = function_value_text (inLexique, var_cas_node COMMA_SOURCE_FILE_AT_LINE (241)) ;
  if ((var_cas_lval.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (242)).reader_isDecimalUnsignedNumber (inLexique COMMA_SOURCE_FILE_AT_LINE (242))).isBuiltAndTrue ()) {
    GGS_uint  var_cas_val ;
    var_cas_val = var_cas_lval.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (243)).reader_decimalUnsignedNumber (inLexique COMMA_SOURCE_FILE_AT_LINE (243)) ;
    var_cas_param = GGS_uint64_class ::constructor_new (inLexique, var_cas_lval.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (244)), var_cas_val.reader_uint64 (inLexique COMMA_SOURCE_FILE_AT_LINE (244)) COMMA_HERE) ;
  }else{
    var_cas_lval.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("Unsigned number expected") COMMA_SOURCE_FILE_AT_LINE (247)) ;
    var_cas_param = GGS_uint64_class ::constructor_new (inLexique, var_cas_lval.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (247)), GGS_uint64 (0U) COMMA_HERE) ;
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE function_uint64_class_param\n") ;
  #endif
  return var_cas_param ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                Implementation of function "luint64_param"                 *
//                                                                           *
//---------------------------------------------------------------------------*

GGS_luint64  function_luint64_param (C_Compiler & inLexique,
                                const GGS_xmlNode   var_cas_node COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER function_luint64_param at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  GGS_luint64  var_cas_param ;
  GGS_lstring  var_cas_lval ;
  var_cas_lval = function_value_text (inLexique, var_cas_node COMMA_SOURCE_FILE_AT_LINE (255)) ;
  if ((var_cas_lval.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (256)).reader_isDecimalUnsignedNumber (inLexique COMMA_SOURCE_FILE_AT_LINE (256))).isBuiltAndTrue ()) {
    var_cas_param = GGS_luint64 ::constructor_new (inLexique, var_cas_lval.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (257)).reader_decimalUnsignedNumber (inLexique COMMA_SOURCE_FILE_AT_LINE (257)).reader_uint64 (inLexique COMMA_SOURCE_FILE_AT_LINE (257)), var_cas_lval.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (257)) COMMA_HERE) ;
  }else{
    var_cas_lval.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("Unsigned number expected") COMMA_SOURCE_FILE_AT_LINE (260)) ;
    var_cas_param = GGS_luint64 ::constructor_new (inLexique, GGS_uint64 (0U), var_cas_lval.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (260)) COMMA_HERE) ;
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE function_luint64_param\n") ;
  #endif
  return var_cas_param ;
}

//---------------------------------------------------------------------------*

