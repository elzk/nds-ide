//---------------------------------------------------------------------------*
//                                                                           *
//                         File 'system_config.cpp'                          *
//                        Generated by version 2.0.0                         *
//                       july 9th, 2010, at 9h45'24"                         *
//                                                                           *
//---------------------------------------------------------------------------*

//--- START OF USER ZONE 1


//--- END OF USER ZONE 1

//---------------------------------------------------------------------------*

#include "version_libpm.h"
#if CURRENT_LIBPM_VERSION != 820
  #error "This file has been compiled with a version of GALGAS that uses libpm version 820, different than the current version (CURRENT_LIBPM_VERSION) of libpm"
#endif

//---------------------------------------------------------------------------*

#include <typeinfo>
#include "utilities/MF_MemoryControl.h"
#include "files/C_TextFileWrite.h"
#include "galgas/C_galgas_CLI_Options.h"
#include "system_config.h"

//---------------------------------------------------------------------------*

#ifndef DO_NOT_GENERATE_CHECKINGS
  #define SOURCE_FILE_AT_LINE(line) "system_config.gSemantics", line
  #define COMMA_SOURCE_FILE_AT_LINE(line) , SOURCE_FILE_AT_LINE(line)
#else
  #define SOURCE_FILE_AT_LINE(line) 
  #define COMMA_SOURCE_FILE_AT_LINE(line) 
#endif


//--- START OF USER ZONE 2


//--- END OF USER ZONE 2

//---------------------------------------------------------------------------*
//                                                                           *
//                     Class for 'taskKind' Enumeration                      *
//                                                                           *
//---------------------------------------------------------------------------*

const C_galgas_type_descriptorEX kTypeDescriptor_GGS_taskKind ("taskKind", false, NULL) ;

//---------------------------------------------------------------------------*

bool GGS_taskKind::
isBuilt (void) const {
  return mValue > kNotBuilt ;
}

//---------------------------------------------------------------------------*

GGS_bool GGS_taskKind::
operator_isEqual (const GGS_taskKind inOperand) const {
  return GGS_bool (isBuilt () && inOperand.isBuilt (),
                   mValue == inOperand.mValue) ;
}

//---------------------------------------------------------------------------*

GGS_bool GGS_taskKind::
operator_isNotEqual (const GGS_taskKind inOperand) const {
  return GGS_bool (isBuilt () && inOperand.isBuilt (),
                   mValue != inOperand.mValue) ;
}

//---------------------------------------------------------------------------*

GGS_bool GGS_taskKind::
operator_infOrEqual (const GGS_taskKind inOperand) const {
  return GGS_bool (isBuilt () && inOperand.isBuilt (),
                   mValue <= inOperand.mValue) ;
}

//---------------------------------------------------------------------------*

GGS_bool GGS_taskKind::
operator_supOrEqual (const GGS_taskKind inOperand) const {
  return GGS_bool (isBuilt () && inOperand.isBuilt (),
                   mValue >= inOperand.mValue) ;
}

//---------------------------------------------------------------------------*

GGS_bool GGS_taskKind::
operator_strictInf (const GGS_taskKind inOperand) const {
  return GGS_bool (isBuilt () && inOperand.isBuilt (),
                   mValue < inOperand.mValue) ;
}

//---------------------------------------------------------------------------*

GGS_bool GGS_taskKind::
operator_strictSup (const GGS_taskKind inOperand) const {
  return GGS_bool (isBuilt () && inOperand.isBuilt (),
                   mValue > inOperand.mValue) ;
}

//---------------------------------------------------------------------------*

GGS_string GGS_taskKind::
reader_description (const PMSInt32 /* inIndentation */) const {
  C_String s ;
  s << "<enum @taskKind" ;
  switch (mValue) {
  case enum_all:
    s << " all>" ;
    break ;
  case enum_basic:
    s << " basic>" ;
    break ;
  case enum_extended:
    s << " extended>" ;
    break ;
  case kNotBuilt:
    s << " (not built)>" ;
    break ;
  }
  return GGS_string (true, s) ;
}

//---------------------------------------------------------------------------*

GGS_object GGS_taskKind::reader_object (void) const {
  GGS_object result ;
  if (isBuilt ()) {
    GGS_taskKind * p = NULL ;
    macroMyNew (p, GGS_taskKind (*this)) ;
    result = GGS_object (p) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_taskKind GGS_taskKind::castFromObject (C_Compiler & inLexique,
                                   const GGS_object & inObject,
                                   const GGS_location & inErrorLocation
                                   COMMA_LOCATION_ARGS) {
  GGS_taskKind result ;
  const GGS__root * embeddedObject = inObject.embeddedObject () ;
  if (NULL != embeddedObject) {
    const GGS_taskKind * p = dynamic_cast <const GGS_taskKind *> (embeddedObject) ;
    if (NULL != p) {
      result = * p ;
    }else{
      castFromObjectErrorSignaling (inLexique, inErrorLocation, & kTypeDescriptor_GGS_taskKind, embeddedObject COMMA_THERE) ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*

const C_galgas_type_descriptorEX * GGS_taskKind::typeDescriptor (void) const {
  return & kTypeDescriptor_GGS_taskKind ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//           Implementation of routine "setAppRelatedAttributes"             *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_setAppRelatedAttributes (C_Compiler & inLexique,
                                GGS_goilTemplateFieldMap  & var_cas_fieldMap,
                                const GGS_root_obj   var_cas_cpu,
                                const GGS_stringMap   var_cas_appForObj,
                                const GGS_lstring   var_cas_objName
                        COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_setAppRelatedAttributes at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  const GGS_bool cond_2773 = gOption_goil_5F_options_autosar_5F_on.reader_value () ;
  if (cond_2773.isBuiltAndTrue ()) {
    const GGS_bool cond_2763 = (var_cas_appForObj.reader_count ()).operator_strictSup (GGS_uint (0U)) ;
    if (cond_2763.isBuiltAndTrue ()) {
      GGS_bool var_cas_trustedApp = GGS_bool (false) ;
      GGS_string var_cas_appName ;
      if (var_cas_appForObj.isBuilt ()) {
        var_cas_appForObj (HERE)->method_get (inLexique, var_cas_objName, var_cas_appName COMMA_SOURCE_FILE_AT_LINE (85)) ;
      }
      ::routine_addStringFieldValue (inLexique,  var_cas_fieldMap,  GGS_lstring ::constructor_new (inLexique, GGS_string ("APPLICATION"), GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (86)),  var_cas_appName COMMA_SOURCE_FILE_AT_LINE (86)) ;
      GGS_app_obj  var_cas_app ;
      const GGS_app_map  temp_2533 = var_cas_cpu.reader_applis (inLexique COMMA_SOURCE_FILE_AT_LINE (91)) ;
      if (temp_2533.isBuilt ()) {
        temp_2533 (HERE)->method_get (inLexique, GGS_lstring ::constructor_new (inLexique, var_cas_appName, GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (91)), var_cas_app COMMA_SOURCE_FILE_AT_LINE (91)) ;
      }
      { const GGS_app_trusted_obj _var_2668 = var_cas_app.reader_trusted (inLexique COMMA_SOURCE_FILE_AT_LINE (92)) ; // CAST instruction
        if (_var_2668.getPtr () != NULL) {
          macroValidPointer (_var_2668.getPtr ()) ;
          if (typeid (cPtr_app_trusted_true) == typeid (* (_var_2668.getPtr ()))) {
            var_cas_trustedApp = GGS_bool (true) ;
          }else{
          }
        }
      }
      ::routine_addBoolFieldValue (inLexique,  var_cas_fieldMap,  GGS_lstring ::constructor_new (inLexique, GGS_string ("TRUSTED"), GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (95)),  var_cas_trustedApp COMMA_SOURCE_FILE_AT_LINE (95)) ;
    }
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_setAppRelatedAttributes\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//               Implementation of function "orderedTaskList"                *
//                                                                           *
//---------------------------------------------------------------------------*

GGS_tasks_by_type  function_orderedTaskList (C_Compiler & inLexique,
                                const GGS_root_obj   var_cas_cpu COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER function_orderedTaskList at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  GGS_tasks_by_type  var_cas_taskList ;
  var_cas_taskList = GGS_tasks_by_type ::constructor_emptySortedList () ;
  {
    GGS_task_map::cEnumerator enumerator_3056 (var_cas_cpu.reader_tasks (inLexique COMMA_SOURCE_FILE_AT_LINE (109)), true) ;
    const GGS_task_map::cElement * operand_3056 = NULL ;
    while (((operand_3056 = enumerator_3056.nextObject ()))) {
      macroValidPointer (operand_3056) ;
      const GGS_bool cond_3154 = (operand_3056->mInfo.task.reader_events (inLexique COMMA_SOURCE_FILE_AT_LINE (110)).reader_length ()).operator_strictSup (GGS_uint (0U)) ;
      if (cond_3154.isBuiltAndTrue ()) {
        var_cas_taskList.addAssign_operation (GGS_uint (0U), operand_3056->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (111))) ;
      }else if (cond_3154.isBuiltAndFalse ()) {
        var_cas_taskList.addAssign_operation (GGS_uint (1U), operand_3056->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (113))) ;
      }
    }
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE function_orderedTaskList\n") ;
  #endif
  return var_cas_taskList ;
}

//---------------------------------------------------------------------------*

static GGS_object functionForGenericCall_orderedTaskList (C_Compiler & inLexique,
                           const GGS_objectlist & inEffectiveParameterArray,
                           const GGS_location & inErrorLocation
                           COMMA_LOCATION_ARGS) {
  const GGS_root_obj  arg_0 = GGS_root_obj ::castFromObject (inLexique, inEffectiveParameterArray.reader_mValueAtIndex (inLexique, GGS_uint (0) COMMA_THERE), inErrorLocation COMMA_THERE) ;
  const GGS_tasks_by_type  result = function_orderedTaskList (inLexique,
                            arg_0
                            COMMA_THERE) ;
  return result.reader_object () ;
}

//---------------------------------------------------------------------------*

static const C_galgas_type_descriptorEX *
kArgumentTypeList_orderedTaskList [1] = {& kTypeDescriptor_GGS_root_obj } ;

const C_galgas_function_descriptorEX
kFunction_descriptor_orderedTaskList ("orderedTaskList",
                              functionForGenericCall_orderedTaskList,
                              & kTypeDescriptor_GGS_tasks_by_type ,
                              1,
                              kArgumentTypeList_orderedTaskList) ;

//---------------------------------------------------------------------------*
//                                                                           *
//               Implementation of routine "computeTaskList"                 *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_computeTaskList (C_Compiler & inLexique,
                                const GGS_root_obj   var_cas_cpu,
                                const GGS_prio_map   var_cas_actualPriorities,
                                const GGS_stringMap   var_cas_appForObj,
                                const GGS_taskKind  var_cas_kind,
                                GGS_goilTemplateFieldMapList  & var_cas_taskList
                        COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_computeTaskList at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  GGS_tasks_by_type  var_cas_sTasks = function_orderedTaskList (inLexique, var_cas_cpu COMMA_SOURCE_FILE_AT_LINE (128)) ;
  {
    GGS_tasks_by_type::cEnumerator enumerator_3507 (var_cas_sTasks, true) ;
    const GGS_tasks_by_type::cElement * operand_3507 = NULL ;
    while (((operand_3507 = enumerator_3507.nextObject ()))) {
      macroValidPointer (operand_3507) ;
      const GGS_bool cond_7192 = (((var_cas_kind).operator_isEqual (GGS_taskKind::constructor_all (inLexique COMMA_SOURCE_FILE_AT_LINE (131)))).operator_or (((operand_3507->type).operator_isEqual (GGS_uint (0U))).operator_and ((var_cas_kind).operator_isEqual (GGS_taskKind::constructor_extended (inLexique COMMA_SOURCE_FILE_AT_LINE (132)))))).operator_or (((operand_3507->type).operator_isEqual (GGS_uint (1U))).operator_and ((var_cas_kind).operator_isEqual (GGS_taskKind::constructor_basic (inLexique COMMA_SOURCE_FILE_AT_LINE (133))))) ;
      if (cond_7192.isBuiltAndTrue ()) {
        GGS_task_obj  var_cas_task ;
        GGS_lstring  var_cas_taskName = GGS_lstring ::constructor_new (inLexique, operand_3507->name, GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (135)) ;
        const GGS_task_map  temp_3757 = var_cas_cpu.reader_tasks (inLexique COMMA_SOURCE_FILE_AT_LINE (136)) ;
        if (temp_3757.isBuilt ()) {
          temp_3757 (HERE)->method_get (inLexique, var_cas_taskName, var_cas_task COMMA_SOURCE_FILE_AT_LINE (136)) ;
        }
        GGS_goilTemplateFieldMap  var_cas_fieldMap = GGS_goilTemplateFieldMap ::constructor_emptyMap (inLexique COMMA_SOURCE_FILE_AT_LINE (137)) ;
        ::routine_addStringFieldValue (inLexique,  var_cas_fieldMap,  GGS_lstring ::constructor_new (inLexique, GGS_string ("NAME"), var_cas_cpu.reader_tasks (inLexique COMMA_SOURCE_FILE_AT_LINE (138)).reader_locationForKey (inLexique, operand_3507->name COMMA_SOURCE_FILE_AT_LINE (138)) COMMA_SOURCE_FILE_AT_LINE (138)),  operand_3507->name COMMA_SOURCE_FILE_AT_LINE (138)) ;
        ::routine_addStringFieldValue (inLexique,  var_cas_fieldMap,  GGS_lstring ::constructor_new (inLexique, GGS_string ("PROCESSKIND"), GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (139)),  GGS_string ("Task") COMMA_SOURCE_FILE_AT_LINE (139)) ;
        ::routine_addBoolFieldValue (inLexique,  var_cas_fieldMap,  GGS_lstring ::constructor_new (inLexique, GGS_string ("EXTENDEDTASK"), GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (140)),  (operand_3507->type).operator_isEqual (GGS_uint (0U)) COMMA_SOURCE_FILE_AT_LINE (140)) ;
        ::routine_addBoolFieldValue (inLexique,  var_cas_fieldMap,  GGS_lstring ::constructor_new (inLexique, GGS_string ("NONPREEMPTABLE"), GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (141)),  (var_cas_task.reader_schedule (inLexique COMMA_SOURCE_FILE_AT_LINE (141)).reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (141))).operator_isEqual (GGS_string ("NON")) COMMA_SOURCE_FILE_AT_LINE (141)) ;
        GGS_uint  var_cas_actualPrio ;
        GGS_uint  var_cas_activation ;
        if (var_cas_actualPriorities.isBuilt ()) {
          var_cas_actualPriorities (HERE)->method_get (inLexique, var_cas_taskName, var_cas_actualPrio, var_cas_activation COMMA_SOURCE_FILE_AT_LINE (144)) ;
        }
        ::routine_addUnsignedFieldValue (inLexique,  var_cas_fieldMap,  GGS_lstring ::constructor_new (inLexique, GGS_string ("PRIORITY"), GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (145)),  var_cas_actualPrio.reader_uint64 (inLexique COMMA_SOURCE_FILE_AT_LINE (145)) COMMA_SOURCE_FILE_AT_LINE (145)) ;
        ::routine_addUnsignedFieldValue (inLexique,  var_cas_fieldMap,  GGS_lstring ::constructor_new (inLexique, GGS_string ("ACTIVATION"), GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (146)),  var_cas_activation.reader_uint64 (inLexique COMMA_SOURCE_FILE_AT_LINE (146)) COMMA_SOURCE_FILE_AT_LINE (146)) ;
        { const GGS_task_autostart_obj _var_4895 = var_cas_task.reader_autostart (inLexique COMMA_SOURCE_FILE_AT_LINE (148)) ; // CAST instruction
          if (_var_4895.getPtr () != NULL) {
            macroValidPointer (_var_4895.getPtr ()) ;
            if (typeid (cPtr_task_autostart_true) == typeid (* (_var_4895.getPtr ()))) {
              ::routine_addBoolFieldValue (inLexique,  var_cas_fieldMap,  GGS_lstring ::constructor_new (inLexique, GGS_string ("AUTOSTART"), GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (150)),  GGS_bool (true) COMMA_SOURCE_FILE_AT_LINE (150)) ;
            }else if (typeid (cPtr_task_autostart_false) == typeid (* (_var_4895.getPtr ()))) {
              ::routine_addBoolFieldValue (inLexique,  var_cas_fieldMap,  GGS_lstring ::constructor_new (inLexique, GGS_string ("AUTOSTART"), GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (152)),  GGS_bool (false) COMMA_SOURCE_FILE_AT_LINE (152)) ;
            }else{
              var_cas_task.reader_autostart (inLexique COMMA_SOURCE_FILE_AT_LINE (154)).reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (154)).reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("internal error, AUTOSTART type is undefined") COMMA_SOURCE_FILE_AT_LINE (155)) ;
            }
          }
        }
        const GGS_bool cond_5822 = (var_cas_task.reader_schedule (inLexique COMMA_SOURCE_FILE_AT_LINE (156)).reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (156))).operator_isEqual (GGS_string ("FULL")) ;
        if (cond_5822.isBuiltAndTrue ()) {
          GGS_bool var_cas_internalFound = GGS_bool (false) ;
          {
            GGS_lstringlist::cEnumerator enumerator_5006 (var_cas_task.reader_resources (inLexique COMMA_SOURCE_FILE_AT_LINE (158)), true) ;
            const GGS_lstringlist::cElement * operand_5006 = NULL ;
            while (((operand_5006 = enumerator_5006.nextObject ()))) {
              macroValidPointer (operand_5006) ;
              const GGS_bool cond_5556 = (var_cas_internalFound).operator_not () ;
              if (cond_5556.isBuiltAndTrue ()) {
                GGS_resource_obj  var_cas_resource ;
                const GGS_resource_map  temp_5153 = var_cas_cpu.reader_resources (inLexique COMMA_SOURCE_FILE_AT_LINE (161)) ;
                if (temp_5153.isBuilt ()) {
                  temp_5153 (HERE)->method_get (inLexique, operand_5006->mValue, var_cas_resource COMMA_SOURCE_FILE_AT_LINE (161)) ;
                }
                { const GGS_resource_property_obj _var_5536 = var_cas_resource.reader_property (inLexique COMMA_SOURCE_FILE_AT_LINE (162)) ; // CAST instruction
                  if (_var_5536.getPtr () != NULL) {
                    macroValidPointer (_var_5536.getPtr ()) ;
                    if (typeid (cPtr_resource_property_internal_obj) == typeid (* (_var_5536.getPtr ()))) {
                      var_cas_internalFound = GGS_bool (true) ;
                      ::routine_addStringFieldValue (inLexique,  var_cas_fieldMap,  GGS_lstring ::constructor_new (inLexique, GGS_string ("INTERNALRESOURCE"), GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (165)),  operand_5006->mValue.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (165)) COMMA_SOURCE_FILE_AT_LINE (165)) ;
                      ::routine_addBoolFieldValue (inLexique,  var_cas_fieldMap,  GGS_lstring ::constructor_new (inLexique, GGS_string ("USEINTERNALRESOURCE"), GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (166)),  GGS_bool (true) COMMA_SOURCE_FILE_AT_LINE (166)) ;
                    }else{
                    }
                  }
                }
              }
            }
          }
          const GGS_bool cond_5807 = (var_cas_internalFound).operator_not () ;
          if (cond_5807.isBuiltAndTrue ()) {
            ::routine_addStringFieldValue (inLexique,  var_cas_fieldMap,  GGS_lstring ::constructor_new (inLexique, GGS_string ("INTERNALRESOURCE"), GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (171)),  GGS_string ("") COMMA_SOURCE_FILE_AT_LINE (171)) ;
            ::routine_addBoolFieldValue (inLexique,  var_cas_fieldMap,  GGS_lstring ::constructor_new (inLexique, GGS_string ("USEINTERNALRESOURCE"), GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (172)),  GGS_bool (false) COMMA_SOURCE_FILE_AT_LINE (172)) ;
          }
        }else if (cond_5822.isBuiltAndFalse ()) {
          ::routine_addStringFieldValue (inLexique,  var_cas_fieldMap,  GGS_lstring ::constructor_new (inLexique, GGS_string ("INTERNALRESOURCE"), GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (175)),  GGS_string ("") COMMA_SOURCE_FILE_AT_LINE (175)) ;
          ::routine_addBoolFieldValue (inLexique,  var_cas_fieldMap,  GGS_lstring ::constructor_new (inLexique, GGS_string ("USEINTERNALRESOURCE"), GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (176)),  GGS_bool (false) COMMA_SOURCE_FILE_AT_LINE (176)) ;
        }
        GGS_goilTemplateFieldMapList  var_cas_resourceList = GGS_goilTemplateFieldMapList ::constructor_emptyList () ;
        {
          GGS_lstringlist::cEnumerator enumerator_6091 (var_cas_task.reader_resources (inLexique COMMA_SOURCE_FILE_AT_LINE (180)), true) ;
          const GGS_lstringlist::cElement * operand_6091 = NULL ;
          while (((operand_6091 = enumerator_6091.nextObject ()))) {
            macroValidPointer (operand_6091) ;
            GGS_resource_obj  var_cas_resource ;
            const GGS_resource_map  temp_6194 = var_cas_cpu.reader_resources (inLexique COMMA_SOURCE_FILE_AT_LINE (182)) ;
            if (temp_6194.isBuilt ()) {
              temp_6194 (HERE)->method_get (inLexique, operand_6091->mValue, var_cas_resource COMMA_SOURCE_FILE_AT_LINE (182)) ;
            }
            { const GGS_resource_property_obj _var_6547 = var_cas_resource.reader_property (inLexique COMMA_SOURCE_FILE_AT_LINE (183)) ; // CAST instruction
              if (_var_6547.getPtr () != NULL) {
                macroValidPointer (_var_6547.getPtr ()) ;
                if (typeid (cPtr_resource_property_internal_obj) == typeid (* (_var_6547.getPtr ()))) {
                }else{
                  GGS_goilTemplateFieldMap  var_cas_resourceFieldMap = GGS_goilTemplateFieldMap ::constructor_emptyMap (inLexique COMMA_SOURCE_FILE_AT_LINE (186)) ;
                  ::routine_addStringFieldValue (inLexique,  var_cas_resourceFieldMap,  GGS_lstring ::constructor_new (inLexique, GGS_string ("RESOURCENAME"), GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (187)),  operand_6091->mValue.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (187)) COMMA_SOURCE_FILE_AT_LINE (187)) ;
                  var_cas_resourceList.addAssign_operation (var_cas_resourceFieldMap) ;
                }
              }
            }
          }
        }
        ::routine_addListFieldValue (inLexique,  var_cas_fieldMap,  GGS_lstring ::constructor_new (inLexique, GGS_string ("RESOURCES"), GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (191)),  var_cas_resourceList COMMA_SOURCE_FILE_AT_LINE (191)) ;
        {
          GGS_ident_map::cEnumerator enumerator_6706 (var_cas_task.reader_others (inLexique COMMA_SOURCE_FILE_AT_LINE (194)), true) ;
          const GGS_ident_map::cElement * operand_6706 = NULL ;
          while (((operand_6706 = enumerator_6706.nextObject ()))) {
            macroValidPointer (operand_6706) ;
            { const GGS_basic_type _var_7058 = operand_6706->mInfo.value ; // CAST instruction
              if (_var_7058.getPtr () != NULL) {
                macroValidPointer (_var_7058.getPtr ()) ;
                if (typeid (cPtr_bool_class) == typeid (* (_var_7058.getPtr ()))) {
                  const GGS_bool_class var_cas_bool (_var_7058.getPtr ()) ;
                  ::routine_addBoolFieldValue (inLexique,  var_cas_fieldMap,  operand_6706->mKey,  var_cas_bool.reader_value (inLexique COMMA_SOURCE_FILE_AT_LINE (197)) COMMA_SOURCE_FILE_AT_LINE (197)) ;
                }else if (typeid (cPtr_uint64_class) == typeid (* (_var_7058.getPtr ()))) {
                  const GGS_uint64_class var_cas_number (_var_7058.getPtr ()) ;
                  ::routine_addUnsignedFieldValue (inLexique,  var_cas_fieldMap,  operand_6706->mKey,  var_cas_number.reader_value (inLexique COMMA_SOURCE_FILE_AT_LINE (199)) COMMA_SOURCE_FILE_AT_LINE (199)) ;
                }else if (typeid (cPtr_string_class) == typeid (* (_var_7058.getPtr ()))) {
                  const GGS_string_class var_cas_str (_var_7058.getPtr ()) ;
                  ::routine_addStringFieldValue (inLexique,  var_cas_fieldMap,  operand_6706->mKey,  var_cas_str.reader_value (inLexique COMMA_SOURCE_FILE_AT_LINE (201)) COMMA_SOURCE_FILE_AT_LINE (201)) ;
                }else{
                }
              }
            }
          }
        }
        ::routine_setAppRelatedAttributes (inLexique,  var_cas_fieldMap,  var_cas_cpu,  var_cas_appForObj,  var_cas_taskName COMMA_SOURCE_FILE_AT_LINE (205)) ;
        var_cas_taskList.addAssign_operation (var_cas_fieldMap) ;
      }
    }
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_computeTaskList\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//                Implementation of routine "computeISRList"                 *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_computeISRList (C_Compiler & inLexique,
                                const GGS_root_obj   var_cas_cpu,
                                const GGS_prio_map   var_cas_actualPriorities,
                                const GGS_stringMap   var_cas_appForObj,
                                const GGS_uint64   var_cas_isrCategory,
                                GGS_goilTemplateFieldMapList  & var_cas_isrList
                        COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_computeISRList at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  {
    GGS_isr_map::cEnumerator enumerator_7445 (var_cas_cpu.reader_isrs (inLexique COMMA_SOURCE_FILE_AT_LINE (222)), true) ;
    const GGS_isr_map::cElement * operand_7445 = NULL ;
    while (((operand_7445 = enumerator_7445.nextObject ()))) {
      macroValidPointer (operand_7445) ;
      { const GGS_basic_type _var_9423 = operand_7445->mInfo.isr.reader_category (inLexique COMMA_SOURCE_FILE_AT_LINE (223)) ; // CAST instruction
        if (_var_9423.getPtr () != NULL) {
          macroValidPointer (_var_9423.getPtr ()) ;
          if (typeid (cPtr_uint64_class) == typeid (* (_var_9423.getPtr ()))) {
            const GGS_uint64_class var_cas_category (_var_9423.getPtr ()) ;
            const GGS_bool cond_9406 = (var_cas_category.reader_value (inLexique COMMA_SOURCE_FILE_AT_LINE (225))).operator_isEqual (var_cas_isrCategory) ;
            if (cond_9406.isBuiltAndTrue ()) {
              GGS_goilTemplateFieldMap  var_cas_fieldMap = GGS_goilTemplateFieldMap ::constructor_emptyMap (inLexique COMMA_SOURCE_FILE_AT_LINE (226)) ;
              ::routine_addStringFieldValue (inLexique,  var_cas_fieldMap,  GGS_lstring ::constructor_new (inLexique, GGS_string ("NAME"), GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (227)),  operand_7445->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (227)) COMMA_SOURCE_FILE_AT_LINE (227)) ;
              ::routine_addStringFieldValue (inLexique,  var_cas_fieldMap,  GGS_lstring ::constructor_new (inLexique, GGS_string ("PROCESSKIND"), GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (228)),  GGS_string ("ISR") COMMA_SOURCE_FILE_AT_LINE (228)) ;
              ::routine_addBoolFieldValue (inLexique,  var_cas_fieldMap,  GGS_lstring ::constructor_new (inLexique, GGS_string ("EXTENDEDTASK"), GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (229)),  GGS_bool (false) COMMA_SOURCE_FILE_AT_LINE (229)) ;
              GGS_uint  var_cas_actualPrio ;
              GGS_uint  var_cas_activation ;
              if (var_cas_actualPriorities.isBuilt ()) {
                var_cas_actualPriorities (HERE)->method_get (inLexique, operand_7445->mKey, var_cas_actualPrio, var_cas_activation COMMA_SOURCE_FILE_AT_LINE (232)) ;
              }
              ::routine_addUnsignedFieldValue (inLexique,  var_cas_fieldMap,  GGS_lstring ::constructor_new (inLexique, GGS_string ("PRIORITY"), GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (233)),  var_cas_actualPrio.reader_uint64 (inLexique COMMA_SOURCE_FILE_AT_LINE (233)) COMMA_SOURCE_FILE_AT_LINE (233)) ;
              ::routine_addUnsignedFieldValue (inLexique,  var_cas_fieldMap,  GGS_lstring ::constructor_new (inLexique, GGS_string ("ACTIVATION"), GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (234)),  var_cas_activation.reader_uint64 (inLexique COMMA_SOURCE_FILE_AT_LINE (234)) COMMA_SOURCE_FILE_AT_LINE (234)) ;
              {
                GGS_ident_map::cEnumerator enumerator_8230 (operand_7445->mInfo.isr.reader_other_fields (inLexique COMMA_SOURCE_FILE_AT_LINE (237)), true) ;
                const GGS_ident_map::cElement * operand_8230 = NULL ;
                while (((operand_8230 = enumerator_8230.nextObject ()))) {
                  macroValidPointer (operand_8230) ;
                  { const GGS_basic_type _var_8603 = operand_8230->mInfo.value ; // CAST instruction
                    if (_var_8603.getPtr () != NULL) {
                      macroValidPointer (_var_8603.getPtr ()) ;
                      if (typeid (cPtr_bool_class) == typeid (* (_var_8603.getPtr ()))) {
                        const GGS_bool_class var_cas_bool (_var_8603.getPtr ()) ;
                        ::routine_addBoolFieldValue (inLexique,  var_cas_fieldMap,  operand_8230->mKey,  var_cas_bool.reader_value (inLexique COMMA_SOURCE_FILE_AT_LINE (240)) COMMA_SOURCE_FILE_AT_LINE (240)) ;
                      }else if (typeid (cPtr_uint64_class) == typeid (* (_var_8603.getPtr ()))) {
                        const GGS_uint64_class var_cas_number (_var_8603.getPtr ()) ;
                        ::routine_addUnsignedFieldValue (inLexique,  var_cas_fieldMap,  operand_8230->mKey,  var_cas_number.reader_value (inLexique COMMA_SOURCE_FILE_AT_LINE (242)) COMMA_SOURCE_FILE_AT_LINE (242)) ;
                      }else if (typeid (cPtr_string_class) == typeid (* (_var_8603.getPtr ()))) {
                        const GGS_string_class var_cas_str (_var_8603.getPtr ()) ;
                        ::routine_addStringFieldValue (inLexique,  var_cas_fieldMap,  operand_8230->mKey,  var_cas_str.reader_value (inLexique COMMA_SOURCE_FILE_AT_LINE (244)) COMMA_SOURCE_FILE_AT_LINE (244)) ;
                      }else{
                      }
                    }
                  }
                }
              }
              GGS_goilTemplateFieldMapList  var_cas_resourceList = GGS_goilTemplateFieldMapList ::constructor_emptyList () ;
              {
                GGS_lstringlist::cEnumerator enumerator_8709 (operand_7445->mInfo.isr.reader_resources (inLexique COMMA_SOURCE_FILE_AT_LINE (249)), true) ;
                const GGS_lstringlist::cElement * operand_8709 = NULL ;
                while (((operand_8709 = enumerator_8709.nextObject ()))) {
                  macroValidPointer (operand_8709) ;
                  GGS_resource_obj  var_cas_resource ;
                  const GGS_resource_map  temp_8815 = var_cas_cpu.reader_resources (inLexique COMMA_SOURCE_FILE_AT_LINE (251)) ;
                  if (temp_8815.isBuilt ()) {
                    temp_8815 (HERE)->method_get (inLexique, operand_8709->mValue, var_cas_resource COMMA_SOURCE_FILE_AT_LINE (251)) ;
                  }
                  { const GGS_resource_property_obj _var_9182 = var_cas_resource.reader_property (inLexique COMMA_SOURCE_FILE_AT_LINE (252)) ; // CAST instruction
                    if (_var_9182.getPtr () != NULL) {
                      macroValidPointer (_var_9182.getPtr ()) ;
                      if (typeid (cPtr_resource_property_internal_obj) == typeid (* (_var_9182.getPtr ()))) {
                      }else{
                        GGS_goilTemplateFieldMap  var_cas_resourceFieldMap = GGS_goilTemplateFieldMap ::constructor_emptyMap (inLexique COMMA_SOURCE_FILE_AT_LINE (255)) ;
                        ::routine_addStringFieldValue (inLexique,  var_cas_resourceFieldMap,  GGS_lstring ::constructor_new (inLexique, GGS_string ("RESOURCENAME"), GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (256)),  operand_8709->mValue.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (256)) COMMA_SOURCE_FILE_AT_LINE (256)) ;
                        var_cas_resourceList.addAssign_operation (var_cas_resourceFieldMap) ;
                      }
                    }
                  }
                }
              }
              ::routine_addListFieldValue (inLexique,  var_cas_fieldMap,  GGS_lstring ::constructor_new (inLexique, GGS_string ("RESOURCES"), GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (260)),  var_cas_resourceList COMMA_SOURCE_FILE_AT_LINE (260)) ;
              ::routine_setAppRelatedAttributes (inLexique,  var_cas_fieldMap,  var_cas_cpu,  var_cas_appForObj,  operand_7445->mKey COMMA_SOURCE_FILE_AT_LINE (262)) ;
              var_cas_isrList.addAssign_operation (var_cas_fieldMap) ;
            }
          }else{
          }
        }
      }
    }
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_computeISRList\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//                 Implementation of routine "setTasksList"                  *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_setTasksList (C_Compiler & inLexique,
                                const GGS_root_obj   var_cas_cpu,
                                const GGS_prio_map   var_cas_actualPriorities,
                                const GGS_stringMap   var_cas_appForObj,
                                GGS_goilTemplateVariableMap  & var_cas_cfg
                        COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_setTasksList at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  GGS_goilTemplateFieldMapList  var_cas_taskList = GGS_goilTemplateFieldMapList ::constructor_emptyList () ;
  ::routine_computeTaskList (inLexique,  var_cas_cpu,  var_cas_actualPriorities,  var_cas_appForObj,  GGS_taskKind::constructor_all (inLexique COMMA_SOURCE_FILE_AT_LINE (280)),  var_cas_taskList COMMA_SOURCE_FILE_AT_LINE (280)) ;
  ::routine_addListValue (inLexique,  var_cas_cfg,  GGS_lstring ::constructor_new (inLexique, GGS_string ("TASKS"), GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (281)),  var_cas_taskList COMMA_SOURCE_FILE_AT_LINE (281)) ;
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_setTasksList\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//              Implementation of routine "setBasicTasksList"                *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_setBasicTasksList (C_Compiler & inLexique,
                                const GGS_root_obj   var_cas_cpu,
                                const GGS_prio_map   var_cas_actualPriorities,
                                const GGS_stringMap   var_cas_appForObj,
                                GGS_goilTemplateVariableMap  & var_cas_cfg
                        COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_setBasicTasksList at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  GGS_goilTemplateFieldMapList  var_cas_taskList = GGS_goilTemplateFieldMapList ::constructor_emptyList () ;
  ::routine_computeTaskList (inLexique,  var_cas_cpu,  var_cas_actualPriorities,  var_cas_appForObj,  GGS_taskKind::constructor_basic (inLexique COMMA_SOURCE_FILE_AT_LINE (294)),  var_cas_taskList COMMA_SOURCE_FILE_AT_LINE (294)) ;
  ::routine_addListValue (inLexique,  var_cas_cfg,  GGS_lstring ::constructor_new (inLexique, GGS_string ("BASICTASKS"), GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (295)),  var_cas_taskList COMMA_SOURCE_FILE_AT_LINE (295)) ;
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_setBasicTasksList\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//             Implementation of routine "setExtendedTasksList"              *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_setExtendedTasksList (C_Compiler & inLexique,
                                const GGS_root_obj   var_cas_cpu,
                                const GGS_prio_map   var_cas_actualPriorities,
                                const GGS_stringMap   var_cas_appForObj,
                                GGS_goilTemplateVariableMap  & var_cas_cfg
                        COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_setExtendedTasksList at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  GGS_goilTemplateFieldMapList  var_cas_taskList = GGS_goilTemplateFieldMapList ::constructor_emptyList () ;
  ::routine_computeTaskList (inLexique,  var_cas_cpu,  var_cas_actualPriorities,  var_cas_appForObj,  GGS_taskKind::constructor_extended (inLexique COMMA_SOURCE_FILE_AT_LINE (308)),  var_cas_taskList COMMA_SOURCE_FILE_AT_LINE (308)) ;
  ::routine_addListValue (inLexique,  var_cas_cfg,  GGS_lstring ::constructor_new (inLexique, GGS_string ("EXTENDEDTASKS"), GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (309)),  var_cas_taskList COMMA_SOURCE_FILE_AT_LINE (309)) ;
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_setExtendedTasksList\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//                 Implementation of routine "setISRs1List"                  *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_setISRs1List (C_Compiler & inLexique,
                                const GGS_root_obj   var_cas_cpu,
                                const GGS_prio_map   var_cas_actualPriorities,
                                const GGS_stringMap   var_cas_appForObj,
                                GGS_goilTemplateVariableMap  & var_cas_cfg
                        COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_setISRs1List at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  GGS_goilTemplateFieldMapList  var_cas_isrList = GGS_goilTemplateFieldMapList ::constructor_emptyList () ;
  ::routine_computeISRList (inLexique,  var_cas_cpu,  var_cas_actualPriorities,  var_cas_appForObj,  GGS_uint64 (1ULL),  var_cas_isrList COMMA_SOURCE_FILE_AT_LINE (322)) ;
  ::routine_addListValue (inLexique,  var_cas_cfg,  GGS_lstring ::constructor_new (inLexique, GGS_string ("ISRS1"), GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (323)),  var_cas_isrList COMMA_SOURCE_FILE_AT_LINE (323)) ;
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_setISRs1List\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//                 Implementation of routine "setISRs2List"                  *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_setISRs2List (C_Compiler & inLexique,
                                const GGS_root_obj   var_cas_cpu,
                                const GGS_prio_map   var_cas_actualPriorities,
                                const GGS_stringMap   var_cas_appForObj,
                                GGS_goilTemplateVariableMap  & var_cas_cfg
                        COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_setISRs2List at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  GGS_goilTemplateFieldMapList  var_cas_isrList = GGS_goilTemplateFieldMapList ::constructor_emptyList () ;
  ::routine_computeISRList (inLexique,  var_cas_cpu,  var_cas_actualPriorities,  var_cas_appForObj,  GGS_uint64 (2ULL),  var_cas_isrList COMMA_SOURCE_FILE_AT_LINE (336)) ;
  ::routine_addListValue (inLexique,  var_cas_cfg,  GGS_lstring ::constructor_new (inLexique, GGS_string ("ISRS2"), GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (337)),  var_cas_isrList COMMA_SOURCE_FILE_AT_LINE (337)) ;
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_setISRs2List\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//               Implementation of routine "setProcessesList"                *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_setProcessesList (C_Compiler & inLexique,
                                const GGS_root_obj   var_cas_cpu,
                                const GGS_prio_map   var_cas_actualPriorities,
                                const GGS_stringMap   var_cas_appForObj,
                                GGS_goilTemplateVariableMap  & var_cas_cfg
                        COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_setProcessesList at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  GGS_goilTemplateFieldMapList  var_cas_processesList = GGS_goilTemplateFieldMapList ::constructor_emptyList () ;
  ::routine_computeTaskList (inLexique,  var_cas_cpu,  var_cas_actualPriorities,  var_cas_appForObj,  GGS_taskKind::constructor_all (inLexique COMMA_SOURCE_FILE_AT_LINE (350)),  var_cas_processesList COMMA_SOURCE_FILE_AT_LINE (350)) ;
  ::routine_computeISRList (inLexique,  var_cas_cpu,  var_cas_actualPriorities,  var_cas_appForObj,  GGS_uint64 (2ULL),  var_cas_processesList COMMA_SOURCE_FILE_AT_LINE (351)) ;
  ::routine_addListValue (inLexique,  var_cas_cfg,  function_lstringWith (inLexique, GGS_string ("PROCESSES") COMMA_SOURCE_FILE_AT_LINE (352)),  var_cas_processesList COMMA_SOURCE_FILE_AT_LINE (352)) ;
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_setProcessesList\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//               Implementation of routine "setCountersList"                 *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_setCountersList (C_Compiler & inLexique,
                                const GGS_root_obj   var_cas_cpu,
                                const GGS_stringMap   var_cas_appForObj,
                                GGS_goilTemplateVariableMap  & var_cas_cfg
                        COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_setCountersList at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  GGS_goilTemplateFieldMapList  var_cas_countersList = GGS_goilTemplateFieldMapList ::constructor_emptyList () ;
  GGS_goilTemplateFieldMapList  var_cas_hardCountersList = GGS_goilTemplateFieldMapList ::constructor_emptyList () ;
  GGS_goilTemplateFieldMapList  var_cas_softCountersList = GGS_goilTemplateFieldMapList ::constructor_emptyList () ;
  {
    GGS_counter_map::cEnumerator enumerator_12231 (var_cas_cpu.reader_counters (inLexique COMMA_SOURCE_FILE_AT_LINE (366)), true) ;
    const GGS_counter_map::cElement * operand_12231 = NULL ;
    while (((operand_12231 = enumerator_12231.nextObject ()))) {
      macroValidPointer (operand_12231) ;
      GGS_goilTemplateFieldMap  var_cas_fieldMap = GGS_goilTemplateFieldMap ::constructor_emptyMap (inLexique COMMA_SOURCE_FILE_AT_LINE (367)) ;
      ::routine_addStringFieldValue (inLexique,  var_cas_fieldMap,  function_lstringWith (inLexique, GGS_string ("NAME") COMMA_SOURCE_FILE_AT_LINE (368)),  operand_12231->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (368)) COMMA_SOURCE_FILE_AT_LINE (368)) ;
      ::routine_addUnsignedFieldValue (inLexique,  var_cas_fieldMap,  function_lstringWith (inLexique, GGS_string ("MAXALLOWEDVALUE") COMMA_SOURCE_FILE_AT_LINE (369)),  function_maxAllowedValue (inLexique, operand_12231->mInfo.counter COMMA_SOURCE_FILE_AT_LINE (369)) COMMA_SOURCE_FILE_AT_LINE (369)) ;
      ::routine_addUnsignedFieldValue (inLexique,  var_cas_fieldMap,  function_lstringWith (inLexique, GGS_string ("MINCYCLE") COMMA_SOURCE_FILE_AT_LINE (370)),  function_minCycle (inLexique, operand_12231->mInfo.counter COMMA_SOURCE_FILE_AT_LINE (370)) COMMA_SOURCE_FILE_AT_LINE (370)) ;
      ::routine_addUnsignedFieldValue (inLexique,  var_cas_fieldMap,  function_lstringWith (inLexique, GGS_string ("TICKSPERBASE") COMMA_SOURCE_FILE_AT_LINE (371)),  function_ticksPerBase (inLexique, operand_12231->mInfo.counter COMMA_SOURCE_FILE_AT_LINE (371)) COMMA_SOURCE_FILE_AT_LINE (371)) ;
      GGS_string var_cas_type = GGS_string ("HARDWARE_COUNTER") ;
      { const GGS_counter_type _var_12851 = operand_12231->mInfo.counter.reader_type (inLexique COMMA_SOURCE_FILE_AT_LINE (373)) ; // CAST instruction
        if (_var_12851.getPtr () != NULL) {
          macroValidPointer (_var_12851.getPtr ()) ;
          if (typeid (cPtr_software_counter) == typeid (* (_var_12851.getPtr ()))) {
            var_cas_type = GGS_string ("SOFTWARE_COUNTER") ;
          }else{
            ::routine_addLStringFieldValue (inLexique,  var_cas_fieldMap,  GGS_string ("SOURCE"),  operand_12231->mInfo.counter.reader_source (inLexique COMMA_SOURCE_FILE_AT_LINE (376)) COMMA_SOURCE_FILE_AT_LINE (376)) ;
          }
        }
      }
      ::routine_addStringFieldValue (inLexique,  var_cas_fieldMap,  function_lstringWith (inLexique, GGS_string ("TYPE") COMMA_SOURCE_FILE_AT_LINE (378)),  var_cas_type COMMA_SOURCE_FILE_AT_LINE (378)) ;
      const GGS_bool cond_13039 = (operand_12231->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (380))).operator_isNotEqual (GGS_string ("SystemCounter")) ;
      if (cond_13039.isBuiltAndTrue ()) {
        ::routine_setAppRelatedAttributes (inLexique,  var_cas_fieldMap,  var_cas_cpu,  var_cas_appForObj,  operand_12231->mKey COMMA_SOURCE_FILE_AT_LINE (381)) ;
      }
      var_cas_countersList.addAssign_operation (var_cas_fieldMap) ;
      const GGS_bool cond_13160 = (var_cas_type).operator_isEqual (GGS_string ("HARDWARE_COUNTER")) ;
      if (cond_13160.isBuiltAndTrue ()) {
        var_cas_hardCountersList.addAssign_operation (var_cas_fieldMap) ;
      }else if (cond_13160.isBuiltAndFalse ()) {
        var_cas_softCountersList.addAssign_operation (var_cas_fieldMap) ;
      }
    }
  }
  ::routine_addListValue (inLexique,  var_cas_cfg,  function_lstringWith (inLexique, GGS_string ("COUNTERS") COMMA_SOURCE_FILE_AT_LINE (391)),  var_cas_countersList COMMA_SOURCE_FILE_AT_LINE (391)) ;
  ::routine_addListValue (inLexique,  var_cas_cfg,  function_lstringWith (inLexique, GGS_string ("HARDWARECOUNTERS") COMMA_SOURCE_FILE_AT_LINE (392)),  var_cas_hardCountersList COMMA_SOURCE_FILE_AT_LINE (392)) ;
  ::routine_addListValue (inLexique,  var_cas_cfg,  function_lstringWith (inLexique, GGS_string ("SOFTWARECOUNTERS") COMMA_SOURCE_FILE_AT_LINE (393)),  var_cas_softCountersList COMMA_SOURCE_FILE_AT_LINE (393)) ;
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_setCountersList\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//                Implementation of routine "setEventsList"                  *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_setEventsList (C_Compiler & inLexique,
                                const GGS_root_obj   var_cas_cpu,
                                const GGS_eventMaskMap   var_cas_eventMasks,
                                GGS_goilTemplateVariableMap  & var_cas_cfg
                        COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_setEventsList at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  GGS_goilTemplateFieldMapList  var_cas_eventsList = GGS_goilTemplateFieldMapList ::constructor_emptyList () ;
  {
    GGS_event_map::cEnumerator enumerator_13659 (var_cas_cpu.reader_events (inLexique COMMA_SOURCE_FILE_AT_LINE (405)), true) ;
    const GGS_event_map::cElement * operand_13659 = NULL ;
    while (((operand_13659 = enumerator_13659.nextObject ()))) {
      macroValidPointer (operand_13659) ;
      GGS_goilTemplateFieldMap  var_cas_fieldMap = GGS_goilTemplateFieldMap ::constructor_emptyMap (inLexique COMMA_SOURCE_FILE_AT_LINE (406)) ;
      ::routine_addStringFieldValue (inLexique,  var_cas_fieldMap,  GGS_lstring ::constructor_new (inLexique, GGS_string ("NAME"), GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (407)),  operand_13659->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (407)) COMMA_SOURCE_FILE_AT_LINE (407)) ;
      GGS_uint64  var_cas_eventMask ;
      if (var_cas_eventMasks.isBuilt ()) {
        var_cas_eventMasks (HERE)->method_get (inLexique, operand_13659->mKey, var_cas_eventMask COMMA_SOURCE_FILE_AT_LINE (409)) ;
      }
      ::routine_addUnsignedFieldValue (inLexique,  var_cas_fieldMap,  GGS_lstring ::constructor_new (inLexique, GGS_string ("MASK"), operand_13659->mInfo.event.reader_mask (inLexique COMMA_SOURCE_FILE_AT_LINE (410)).reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (410)) COMMA_SOURCE_FILE_AT_LINE (410)),  var_cas_eventMask COMMA_SOURCE_FILE_AT_LINE (410)) ;
      var_cas_eventsList.addAssign_operation (var_cas_fieldMap) ;
    }
  }
  ::routine_addListValue (inLexique,  var_cas_cfg,  GGS_lstring ::constructor_new (inLexique, GGS_string ("EVENTS"), GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (413)),  var_cas_eventsList COMMA_SOURCE_FILE_AT_LINE (413)) ;
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_setEventsList\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//                  Implementation of routine "setAction"                    *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_setAction (C_Compiler & inLexique,
                                GGS_goilTemplateFieldMap  & var_cas_fieldMap,
                                const GGS_action_obj   var_cas_actionobj
                        COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_setAction at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  { const GGS_action_obj _var_15391 = var_cas_actionobj ; // CAST instruction
    if (_var_15391.getPtr () != NULL) {
      macroValidPointer (_var_15391.getPtr ()) ;
      if (typeid (cPtr_setevent_action) == typeid (* (_var_15391.getPtr ()))) {
        const GGS_setevent_action var_cas_setEvent (_var_15391.getPtr ()) ;
        ::routine_addStringFieldValue (inLexique,  var_cas_fieldMap,  function_lstringWith (inLexique, GGS_string ("ACTION") COMMA_SOURCE_FILE_AT_LINE (422)),  GGS_string ("setEvent") COMMA_SOURCE_FILE_AT_LINE (422)) ;
        ::routine_addStringFieldValue (inLexique,  var_cas_fieldMap,  function_lstringWith (inLexique, GGS_string ("TASK") COMMA_SOURCE_FILE_AT_LINE (423)),  var_cas_setEvent.reader_task_name (inLexique COMMA_SOURCE_FILE_AT_LINE (423)).reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (423)) COMMA_SOURCE_FILE_AT_LINE (423)) ;
        ::routine_addStringFieldValue (inLexique,  var_cas_fieldMap,  function_lstringWith (inLexique, GGS_string ("EVENT") COMMA_SOURCE_FILE_AT_LINE (424)),  var_cas_setEvent.reader_event_name (inLexique COMMA_SOURCE_FILE_AT_LINE (424)).reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (424)) COMMA_SOURCE_FILE_AT_LINE (424)) ;
      }else if (typeid (cPtr_activatetask_action) == typeid (* (_var_15391.getPtr ()))) {
        const GGS_activatetask_action var_cas_activateTask (_var_15391.getPtr ()) ;
        ::routine_addStringFieldValue (inLexique,  var_cas_fieldMap,  function_lstringWith (inLexique, GGS_string ("ACTION") COMMA_SOURCE_FILE_AT_LINE (426)),  GGS_string ("activateTask") COMMA_SOURCE_FILE_AT_LINE (426)) ;
        ::routine_addStringFieldValue (inLexique,  var_cas_fieldMap,  function_lstringWith (inLexique, GGS_string ("TASK") COMMA_SOURCE_FILE_AT_LINE (427)),  var_cas_activateTask.reader_task_name (inLexique COMMA_SOURCE_FILE_AT_LINE (427)).reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (427)) COMMA_SOURCE_FILE_AT_LINE (427)) ;
      }else if (typeid (cPtr_callback_action) == typeid (* (_var_15391.getPtr ()))) {
        const GGS_callback_action var_cas_callback (_var_15391.getPtr ()) ;
        ::routine_addStringFieldValue (inLexique,  var_cas_fieldMap,  function_lstringWith (inLexique, GGS_string ("ACTION") COMMA_SOURCE_FILE_AT_LINE (429)),  GGS_string ("callback") COMMA_SOURCE_FILE_AT_LINE (429)) ;
        ::routine_addStringFieldValue (inLexique,  var_cas_fieldMap,  function_lstringWith (inLexique, GGS_string ("FUNCTION") COMMA_SOURCE_FILE_AT_LINE (430)),  var_cas_callback.reader_function_name (inLexique COMMA_SOURCE_FILE_AT_LINE (430)).reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (430)) COMMA_SOURCE_FILE_AT_LINE (430)) ;
      }else if (typeid (cPtr_incrementcounter_action) == typeid (* (_var_15391.getPtr ()))) {
        const GGS_incrementcounter_action var_cas_incrementCounter (_var_15391.getPtr ()) ;
        ::routine_addStringFieldValue (inLexique,  var_cas_fieldMap,  function_lstringWith (inLexique, GGS_string ("ACTION") COMMA_SOURCE_FILE_AT_LINE (432)),  GGS_string ("incrementCounter") COMMA_SOURCE_FILE_AT_LINE (432)) ;
        ::routine_addStringFieldValue (inLexique,  var_cas_fieldMap,  function_lstringWith (inLexique, GGS_string ("TARGETCOUNTER") COMMA_SOURCE_FILE_AT_LINE (433)),  var_cas_incrementCounter.reader_counter_name (inLexique COMMA_SOURCE_FILE_AT_LINE (433)).reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (433)) COMMA_SOURCE_FILE_AT_LINE (433)) ;
      }else if (typeid (cPtr_finalize_st_action) == typeid (* (_var_15391.getPtr ()))) {
        const GGS_finalize_st_action var_cas_finalizeScheduletable (_var_15391.getPtr ()) ;
        ::routine_addStringFieldValue (inLexique,  var_cas_fieldMap,  function_lstringWith (inLexique, GGS_string ("ACTION") COMMA_SOURCE_FILE_AT_LINE (435)),  GGS_string ("finalizeScheduletable") COMMA_SOURCE_FILE_AT_LINE (435)) ;
        ::routine_addLStringFieldValue (inLexique,  var_cas_fieldMap,  GGS_string ("TARGETCOUNTER"),  var_cas_finalizeScheduletable.reader_scheduleTableName (inLexique COMMA_SOURCE_FILE_AT_LINE (436)) COMMA_SOURCE_FILE_AT_LINE (436)) ;
      }else{
      }
    }
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_setAction\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//                Implementation of routine "setAlarmsList"                  *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_setAlarmsList (C_Compiler & inLexique,
                                const GGS_root_obj   var_cas_cpu,
                                const GGS_stringMap   var_cas_appForObj,
                                GGS_goilTemplateVariableMap  & var_cas_cfg
                        COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_setAlarmsList at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  GGS_goilTemplateFieldMapList  var_cas_alarmsList = GGS_goilTemplateFieldMapList ::constructor_emptyList () ;
  {
    GGS_alarm_map::cEnumerator enumerator_15618 (var_cas_cpu.reader_alarms (inLexique COMMA_SOURCE_FILE_AT_LINE (449)), true) ;
    const GGS_alarm_map::cElement * operand_15618 = NULL ;
    while (((operand_15618 = enumerator_15618.nextObject ()))) {
      macroValidPointer (operand_15618) ;
      GGS_goilTemplateFieldMap  var_cas_fieldMap = GGS_goilTemplateFieldMap ::constructor_emptyMap (inLexique COMMA_SOURCE_FILE_AT_LINE (450)) ;
      ::routine_addStringFieldValue (inLexique,  var_cas_fieldMap,  function_lstringWith (inLexique, GGS_string ("NAME") COMMA_SOURCE_FILE_AT_LINE (451)),  operand_15618->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (451)) COMMA_SOURCE_FILE_AT_LINE (451)) ;
      ::routine_addStringFieldValue (inLexique,  var_cas_fieldMap,  function_lstringWith (inLexique, GGS_string ("COUNTER") COMMA_SOURCE_FILE_AT_LINE (452)),  operand_15618->mInfo.alarm.reader_counter_name (inLexique COMMA_SOURCE_FILE_AT_LINE (452)).reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (452)) COMMA_SOURCE_FILE_AT_LINE (452)) ;
      ::routine_setAction (inLexique,  var_cas_fieldMap,  operand_15618->mInfo.alarm.reader_action_params (inLexique COMMA_SOURCE_FILE_AT_LINE (454)) COMMA_SOURCE_FILE_AT_LINE (454)) ;
      { const GGS_autostart_obj _var_16847 = operand_15618->mInfo.alarm.reader_autostart_params (inLexique COMMA_SOURCE_FILE_AT_LINE (456)) ; // CAST instruction
        if (_var_16847.getPtr () != NULL) {
          macroValidPointer (_var_16847.getPtr ()) ;
          if (typeid (cPtr_alarm_autostart_true) == typeid (* (_var_16847.getPtr ()))) {
            const GGS_alarm_autostart_true var_cas_autostart (_var_16847.getPtr ()) ;
            ::routine_addBoolFieldValue (inLexique,  var_cas_fieldMap,  function_lstringWith (inLexique, GGS_string ("AUTOSTART") COMMA_SOURCE_FILE_AT_LINE (458)),  GGS_bool (true) COMMA_SOURCE_FILE_AT_LINE (458)) ;
            ::routine_addUnsignedFieldValue (inLexique,  var_cas_fieldMap,  function_lstringWith (inLexique, GGS_string ("ALARMTIME") COMMA_SOURCE_FILE_AT_LINE (459)),  var_cas_autostart.reader_alarm_time (inLexique COMMA_SOURCE_FILE_AT_LINE (459)).reader_uint64 (inLexique COMMA_SOURCE_FILE_AT_LINE (459)) COMMA_SOURCE_FILE_AT_LINE (459)) ;
            ::routine_addUnsignedFieldValue (inLexique,  var_cas_fieldMap,  function_lstringWith (inLexique, GGS_string ("CYCLETIME") COMMA_SOURCE_FILE_AT_LINE (460)),  var_cas_autostart.reader_cycle_time (inLexique COMMA_SOURCE_FILE_AT_LINE (460)).reader_uint64 (inLexique COMMA_SOURCE_FILE_AT_LINE (460)) COMMA_SOURCE_FILE_AT_LINE (460)) ;
            GGS_goilTemplateFieldMapList  var_cas_appmodesList = GGS_goilTemplateFieldMapList ::constructor_emptyList () ;
            {
              GGS_stringset::cEnumerator enumerator_16320 (var_cas_autostart.reader_app_modes (inLexique COMMA_SOURCE_FILE_AT_LINE (462)), true) ;
              while (enumerator_16320.hasCurrentObject ()) {
                GGS_goilTemplateFieldMap  var_cas_appModeFields = GGS_goilTemplateFieldMap ::constructor_emptyMap (inLexique COMMA_SOURCE_FILE_AT_LINE (463)) ;
                ::routine_addStringFieldValue (inLexique,  var_cas_appModeFields,  function_lstringWith (inLexique, GGS_string ("APPMODE") COMMA_SOURCE_FILE_AT_LINE (464)),  enumerator_16320._key (HERE) COMMA_SOURCE_FILE_AT_LINE (464)) ;
                var_cas_appmodesList.addAssign_operation (var_cas_appModeFields) ;
                enumerator_16320.next () ;
              }
            }
            ::routine_addListFieldValue (inLexique,  var_cas_fieldMap,  function_lstringWith (inLexique, GGS_string ("APPMODES") COMMA_SOURCE_FILE_AT_LINE (467)),  var_cas_appmodesList COMMA_SOURCE_FILE_AT_LINE (467)) ;
          }else if (typeid (cPtr_autostart_false) == typeid (* (_var_16847.getPtr ()))) {
            ::routine_addBoolFieldValue (inLexique,  var_cas_fieldMap,  function_lstringWith (inLexique, GGS_string ("AUTOSTART") COMMA_SOURCE_FILE_AT_LINE (469)),  GGS_bool (false) COMMA_SOURCE_FILE_AT_LINE (469)) ;
          }else if (typeid (cPtr_autostart_void) == typeid (* (_var_16847.getPtr ()))) {
            ::routine_addBoolFieldValue (inLexique,  var_cas_fieldMap,  function_lstringWith (inLexique, GGS_string ("AUTOSTART") COMMA_SOURCE_FILE_AT_LINE (471)),  GGS_bool (false) COMMA_SOURCE_FILE_AT_LINE (471)) ;
          }else{
          }
        }
      }
      ::routine_setAppRelatedAttributes (inLexique,  var_cas_fieldMap,  var_cas_cpu,  var_cas_appForObj,  operand_15618->mKey COMMA_SOURCE_FILE_AT_LINE (474)) ;
      var_cas_alarmsList.addAssign_operation (var_cas_fieldMap) ;
    }
  }
  ::routine_addListValue (inLexique,  var_cas_cfg,  GGS_lstring ::constructor_new (inLexique, GGS_string ("ALARMS"), GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (478)),  var_cas_alarmsList COMMA_SOURCE_FILE_AT_LINE (478)) ;
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_setAlarmsList\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//               Implementation of routine "setResourcesList"                *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_setResourcesList (C_Compiler & inLexique,
                                const GGS_root_obj   var_cas_cpu,
                                const GGS_prio_map   var_cas_resourcesPrio,
                                const GGS_stringMap   var_cas_appForObj,
                                GGS_goilTemplateVariableMap  & var_cas_cfg
                        COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_setResourcesList at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  GGS_goilTemplateFieldMapList  var_cas_regularList = GGS_goilTemplateFieldMapList ::constructor_emptyList () ;
  GGS_goilTemplateFieldMapList  var_cas_internalList = GGS_goilTemplateFieldMapList ::constructor_emptyList () ;
  {
    GGS_resource_map::cEnumerator enumerator_17345 (var_cas_cpu.reader_resources (inLexique COMMA_SOURCE_FILE_AT_LINE (492)), true) ;
    const GGS_resource_map::cElement * operand_17345 = NULL ;
    while (((operand_17345 = enumerator_17345.nextObject ()))) {
      macroValidPointer (operand_17345) ;
      GGS_goilTemplateFieldMap  var_cas_fieldMap = GGS_goilTemplateFieldMap ::constructor_emptyMap (inLexique COMMA_SOURCE_FILE_AT_LINE (493)) ;
      ::routine_addStringFieldValue (inLexique,  var_cas_fieldMap,  GGS_lstring ::constructor_new (inLexique, GGS_string ("NAME"), GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (494)),  operand_17345->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (494)) COMMA_SOURCE_FILE_AT_LINE (494)) ;
      GGS_uint  var_cas_priority ;
      GGS_uint  automatic_var_17553_0 ;
      if (var_cas_resourcesPrio.isBuilt ()) {
        var_cas_resourcesPrio (HERE)->method_get (inLexique, operand_17345->mKey, var_cas_priority, automatic_var_17553_0 COMMA_SOURCE_FILE_AT_LINE (496)) ;
      }
      ::routine_addUnsignedFieldValue (inLexique,  var_cas_fieldMap,  GGS_lstring ::constructor_new (inLexique, GGS_string ("PRIORITY"), GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (497)),  var_cas_priority.reader_uint64 (inLexique COMMA_SOURCE_FILE_AT_LINE (497)) COMMA_SOURCE_FILE_AT_LINE (497)) ;
      GGS_goilTemplateFieldMapList  var_cas_taskUsage = GGS_goilTemplateFieldMapList ::constructor_emptyList () ;
      {
        GGS_task_map::cEnumerator enumerator_17713 (var_cas_cpu.reader_tasks (inLexique COMMA_SOURCE_FILE_AT_LINE (500)), true) ;
        const GGS_task_map::cElement * operand_17713 = NULL ;
        while (((operand_17713 = enumerator_17713.nextObject ()))) {
          macroValidPointer (operand_17713) ;
          const GGS_bool cond_17968 = function_isInLstringlist (inLexique, operand_17713->mInfo.task.reader_resources (inLexique COMMA_SOURCE_FILE_AT_LINE (501)), operand_17345->mKey COMMA_SOURCE_FILE_AT_LINE (501)) ;
          if (cond_17968.isBuiltAndTrue ()) {
            GGS_goilTemplateFieldMap  var_cas_usage = GGS_goilTemplateFieldMap ::constructor_emptyMap (inLexique COMMA_SOURCE_FILE_AT_LINE (502)) ;
            ::routine_addStringFieldValue (inLexique,  var_cas_usage,  GGS_lstring ::constructor_new (inLexique, GGS_string ("NAME"), GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (503)),  operand_17713->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (503)) COMMA_SOURCE_FILE_AT_LINE (503)) ;
            var_cas_taskUsage.addAssign_operation (var_cas_usage) ;
          }
        }
      }
      ::routine_addListFieldValue (inLexique,  var_cas_fieldMap,  GGS_lstring ::constructor_new (inLexique, GGS_string ("TASKUSAGE"), GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (508)),  var_cas_taskUsage COMMA_SOURCE_FILE_AT_LINE (508)) ;
      GGS_goilTemplateFieldMapList  var_cas_isrUsage = GGS_goilTemplateFieldMapList ::constructor_emptyList () ;
      {
        GGS_isr_map::cEnumerator enumerator_18145 (var_cas_cpu.reader_isrs (inLexique COMMA_SOURCE_FILE_AT_LINE (511)), true) ;
        const GGS_isr_map::cElement * operand_18145 = NULL ;
        while (((operand_18145 = enumerator_18145.nextObject ()))) {
          macroValidPointer (operand_18145) ;
          const GGS_bool cond_18397 = function_isInLstringlist (inLexique, operand_18145->mInfo.isr.reader_resources (inLexique COMMA_SOURCE_FILE_AT_LINE (512)), operand_17345->mKey COMMA_SOURCE_FILE_AT_LINE (512)) ;
          if (cond_18397.isBuiltAndTrue ()) {
            GGS_goilTemplateFieldMap  var_cas_usage = GGS_goilTemplateFieldMap ::constructor_emptyMap (inLexique COMMA_SOURCE_FILE_AT_LINE (513)) ;
            ::routine_addStringFieldValue (inLexique,  var_cas_usage,  GGS_lstring ::constructor_new (inLexique, GGS_string ("NAME"), GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (514)),  operand_18145->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (514)) COMMA_SOURCE_FILE_AT_LINE (514)) ;
            var_cas_isrUsage.addAssign_operation (var_cas_usage) ;
          }
        }
      }
      ::routine_addListFieldValue (inLexique,  var_cas_fieldMap,  GGS_lstring ::constructor_new (inLexique, GGS_string ("ISRUSAGE"), GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (519)),  var_cas_isrUsage COMMA_SOURCE_FILE_AT_LINE (519)) ;
      ::routine_setAppRelatedAttributes (inLexique,  var_cas_fieldMap,  var_cas_cpu,  var_cas_appForObj,  operand_17345->mKey COMMA_SOURCE_FILE_AT_LINE (521)) ;
      { const GGS_resource_property_obj _var_18950 = operand_17345->mInfo.resource.reader_property (inLexique COMMA_SOURCE_FILE_AT_LINE (524)) ; // CAST instruction
        if (_var_18950.getPtr () != NULL) {
          macroValidPointer (_var_18950.getPtr ()) ;
          if (typeid (cPtr_resource_property_standard_obj) == typeid (* (_var_18950.getPtr ()))) {
            var_cas_regularList.addAssign_operation (var_cas_fieldMap) ;
          }else if (typeid (cPtr_resource_property_linked_obj) == typeid (* (_var_18950.getPtr ()))) {
            var_cas_regularList.addAssign_operation (var_cas_fieldMap) ;
          }else if (typeid (cPtr_resource_property_internal_obj) == typeid (* (_var_18950.getPtr ()))) {
            var_cas_internalList.addAssign_operation (var_cas_fieldMap) ;
          }else{
            operand_17345->mInfo.resource.reader_property (inLexique COMMA_SOURCE_FILE_AT_LINE (532)).reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (532)).reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("internal error, RESOURCEPROPERTY type is undefined") COMMA_SOURCE_FILE_AT_LINE (533)) ;
          }
        }
      }
    }
  }
  ::routine_addListValue (inLexique,  var_cas_cfg,  GGS_lstring ::constructor_new (inLexique, GGS_string ("REGULARRESOURCES"), GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (535)),  var_cas_regularList COMMA_SOURCE_FILE_AT_LINE (535)) ;
  ::routine_addListValue (inLexique,  var_cas_cfg,  GGS_lstring ::constructor_new (inLexique, GGS_string ("INTERNALRESOURCES"), GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (536)),  var_cas_internalList COMMA_SOURCE_FILE_AT_LINE (536)) ;
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_setResourcesList\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//                  Element of list '@receiverSortedList'                    *
//                                                                           *
//---------------------------------------------------------------------------*

elementOf_GGS_receiverSortedList::
elementOf_GGS_receiverSortedList (const GGS_message_obj & argument_0,
                                const GGS_string& argument_1,
                                const GGS_location & argument_2,
                                const GGS_string& argument_3,
                                const GGS_location & argument_4):
mess (argument_0),
senderName (argument_1),
senderLocation (argument_2),
receiverName (argument_3),
receiverLocation (argument_4) {
}

//---------------------------------------------------------------------------*

bool elementOf_GGS_receiverSortedList::
isEqualToObject (const cSortedListElement * inOperand) const {
  bool equal = inOperand == this ;
  if (! equal) {
    const elementOf_GGS_receiverSortedList * ptr = dynamic_cast <const elementOf_GGS_receiverSortedList *> (inOperand) ;
    macroValidPointer (ptr) ;
    equal = mess.operator_isEqual (ptr->mess).boolValue ()
         && senderName.operator_isEqual (ptr->senderName).boolValue ()
         && senderLocation.operator_isEqual (ptr->senderLocation).boolValue ()
         && receiverName.operator_isEqual (ptr->receiverName).boolValue ()
         && receiverLocation.operator_isEqual (ptr->receiverLocation).boolValue () ;
  }
  return equal ;
}

//---------------------------------------------------------------------------*

PMSInt32 elementOf_GGS_receiverSortedList::
compareForSorting (const cSortedListElement * inOperand) const {
  const elementOf_GGS_receiverSortedList * operand = (const elementOf_GGS_receiverSortedList *) inOperand ;
  PMSInt32 result = - senderName.genericObjectCompare (operand->senderName) ;
  if (result == 0) {
    result = - receiverName.genericObjectCompare (operand->receiverName) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

void elementOf_GGS_receiverSortedList::
appendForDescription (C_String & ioString,
                      const PMSInt32 inIndentation) const {
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "|-" ;
  ioString << mess.reader_description (inIndentation) ;
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "|-" ;
  ioString << senderName.reader_description (inIndentation) ;
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "|-" ;
  ioString << senderLocation.reader_description (inIndentation) ;
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "|-" ;
  ioString << receiverName.reader_description (inIndentation) ;
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "|-" ;
  ioString << receiverLocation.reader_description (inIndentation) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                    Sorted list '@receiverSortedList'                      *
//                                                                           *
//---------------------------------------------------------------------------*

const C_galgas_type_descriptorEX kTypeDescriptor_GGS_receiverSortedList ("receiverSortedList", false, NULL) ;

//---------------------------------------------------------------------------*

GGS_receiverSortedList::GGS_receiverSortedList (void): AC_GGS_sortedlist () { // Default Constructor
}

//---------------------------------------------------------------------------*

GGS_receiverSortedList::
GGS_receiverSortedList (const GGS_receiverSortedList & inSource): AC_GGS_sortedlist (inSource) {
}

//---------------------------------------------------------------------------*

GGS_bool GGS_receiverSortedList::
operator_isEqual (const GGS_receiverSortedList & inOperand) const {
  return GGS_bool (isBuilt () && inOperand.isBuilt (), isEqualToList (inOperand)) ;
}

//---------------------------------------------------------------------------*

GGS_bool GGS_receiverSortedList::
operator_isNotEqual (const GGS_receiverSortedList & inOperand) const {
  return GGS_bool (isBuilt () && inOperand.isBuilt (), ! isEqualToList (inOperand)) ;
}

//---------------------------------------------------------------------------*

void GGS_receiverSortedList::
internalAppendValues (const GGS_message_obj & argument_0,
                    const GGS_string& argument_1,
                    const GGS_location & argument_2,
                    const GGS_string& argument_3,
                    const GGS_location & argument_4) {
  cElement * newElement = (cElement *) NULL ;
  macroMyNew (newElement, cElement (argument_0,
                                argument_1,
                                argument_2,
                                argument_3,
                                argument_4)) ;
  internalAppendItem (newElement) ;
}

//---------------------------------------------------------------------------*

void GGS_receiverSortedList::
addAssign_operation (const GGS_message_obj & argument_0,
                                const GGS_string& argument_1,
                                const GGS_location & argument_2,
                                const GGS_string& argument_3,
                                const GGS_location & argument_4) {
  if (isBuilt ()) {
    insulateList () ;
    internalAppendValues (argument_0,
                                argument_1,
                                argument_2,
                                argument_3,
                                argument_4) ;
  }
}

//---------------------------------------------------------------------------*

GGS_receiverSortedList GGS_receiverSortedList::
operator_concat (const GGS_receiverSortedList & inOperand) const {
  GGS_receiverSortedList result = * this ;
  result.dotAssign_operation (inOperand) ;
  return result ;
}

//---------------------------------------------------------------------------*

void GGS_receiverSortedList::
dotAssign_operation (const GGS_receiverSortedList inOperand) {
  if (isBuilt () && inOperand.isBuilt ()) {
    if (count () == 0) {
      *this = inOperand ;
    }else{
      if (inOperand.count () > 0) {
        insulateList () ;
        elementOf_GGS_receiverSortedList * p = inOperand.firstObject () ;
        while (p != NULL) {
          macroValidPointer (p) ;
          GGS_message_obj  p_0 = p->mess ;
          GGS_string p_1 = p->senderName ;
          GGS_location  p_2 = p->senderLocation ;
          GGS_string p_3 = p->receiverName ;
          GGS_location  p_4 = p->receiverLocation ;
          internalAppendValues (p_0, p_1, p_2, p_3, p_4) ;
          p = p->nextObject () ;
        }
      }
    }
  }
}

//---------------------------------------------------------------------------*

void GGS_receiverSortedList::
insulateList (void) {
  if (isShared ()) {
    cElement * ptr = firstObject () ;
    alloc () ;
    while (ptr != NULL) {
      macroValidPointer (ptr) ;
      internalAppendValues (ptr->mess,
                                ptr->senderName,
                                ptr->senderLocation,
                                ptr->receiverName,
                                ptr->receiverLocation) ;
      ptr = ptr->nextObject () ;
    }
  }
}

//---------------------------------------------------------------------------*

GGS_receiverSortedList  GGS_receiverSortedList::
constructor_emptySortedList (void) {
  GGS_receiverSortedList result ;
  result.alloc () ;
  return result ;
}

//---------------------------------------------------------------------------*

GGS_receiverSortedList  GGS_receiverSortedList::
constructor_sortedListWithValue (const GGS_message_obj & argument_0,
                           const GGS_string& argument_1,
                           const GGS_location & argument_2,
                           const GGS_string& argument_3,
                           const GGS_location & argument_4) {
  GGS_receiverSortedList result ;
  result.alloc () ;
  result.addAssign_operation (argument_0, argument_1, argument_2, argument_3, argument_4) ;
  return result ;
}

//---------------------------------------------------------------------------*

GGS_string GGS_receiverSortedList::
reader_description (const PMSInt32 inIndentation) const {
  return performDescription ("@receiverSortedList", inIndentation) ;
}

//---------------------------------------------------------------------------*

void GGS_receiverSortedList::
method_smallest (C_Compiler & inLexique,
                 GGS_message_obj & _out_0,
                 GGS_string& _out_1,
                 GGS_location & _out_2,
                 GGS_string& _out_3,
                 GGS_location & _out_4
                 COMMA_LOCATION_ARGS) const {
  cElement * ptr = NULL ;
  if (isBuilt ()) {
    ptr = firstObject () ;
    if (ptr == NULL) {
      inLexique.onTheFlyRunTimeError ("'first' method invoked on an empty list" COMMA_THERE) ;
    }
  }
  if (ptr != NULL) {
    _out_0 = ptr->mess ;
    _out_1 = ptr->senderName ;
    _out_2 = ptr->senderLocation ;
    _out_3 = ptr->receiverName ;
    _out_4 = ptr->receiverLocation ;
  }else{
    _out_0.drop () ;
    _out_1.drop () ;
    _out_2.drop () ;
    _out_3.drop () ;
    _out_4.drop () ;
  }
}

//---------------------------------------------------------------------------*

void GGS_receiverSortedList::
method_greatest (C_Compiler & inLexique,
             GGS_message_obj & _out_0,
             GGS_string& _out_1,
             GGS_location & _out_2,
             GGS_string& _out_3,
             GGS_location & _out_4
             COMMA_LOCATION_ARGS) const {
  cElement * ptr = NULL ;
  if (isBuilt ()) {
    ptr = lastObject () ;
    if (ptr == NULL) {
      inLexique.onTheFlyRunTimeError ("'greatest' method invoked on an empty list" COMMA_THERE) ;
    }
  }
  if (ptr != NULL) {
    _out_0 = ptr->mess ;
    _out_1 = ptr->senderName ;
    _out_2 = ptr->senderLocation ;
    _out_3 = ptr->receiverName ;
    _out_4 = ptr->receiverLocation ;
  }else{
    _out_0.drop () ;
    _out_1.drop () ;
    _out_2.drop () ;
    _out_3.drop () ;
    _out_4.drop () ;
  }
}

//---------------------------------------------------------------------------*

void GGS_receiverSortedList::
modifier_popSmallest (C_Compiler & inLexique,
                 GGS_message_obj & _out_0,
                 GGS_string& _out_1,
                 GGS_location & _out_2,
                 GGS_string& _out_3,
                 GGS_location & _out_4
                 COMMA_LOCATION_ARGS) {
  cElement * ptr = NULL ;
  if (isBuilt ()) {
    ptr = firstObject () ;
    if (ptr == NULL) {
      inLexique.onTheFlyRunTimeError ("'popSmallest' modifier invoked on an empty list" COMMA_THERE) ;
    }
  }
  if (ptr != NULL) {
    _out_0 = ptr->mess ;
    _out_1 = ptr->senderName ;
    _out_2 = ptr->senderLocation ;
    _out_3 = ptr->receiverName ;
    _out_4 = ptr->receiverLocation ;
    insulateList () ;
    _internalRemoveSmallest () ;
  }else{
    _out_0.drop () ;
    _out_1.drop () ;
    _out_2.drop () ;
    _out_3.drop () ;
    _out_4.drop () ;
  }
}

//---------------------------------------------------------------------------*

void GGS_receiverSortedList::
modifier_popGreatest (C_Compiler & inLexique,
                GGS_message_obj & _out_0,
                GGS_string& _out_1,
                GGS_location & _out_2,
                GGS_string& _out_3,
                GGS_location & _out_4
                COMMA_LOCATION_ARGS) {
  cElement * ptr = NULL ;
  if (isBuilt ()) {
    ptr = lastObject () ;
    if (ptr == NULL) {
      inLexique.onTheFlyRunTimeError ("'popGreatest' modifier invoked on an empty list" COMMA_THERE) ;
    }
  }
  if (ptr != NULL) {
    _out_0 = ptr->mess ;
    _out_1 = ptr->senderName ;
    _out_2 = ptr->senderLocation ;
    _out_3 = ptr->receiverName ;
    _out_4 = ptr->receiverLocation ;
    insulateList () ;
    _internalRemoveGreatest () ;
  }else{
    _out_0.drop () ;
    _out_1.drop () ;
    _out_2.drop () ;
    _out_3.drop () ;
    _out_4.drop () ;
  }
}

//---------------------------------------------------------------------------*

/* const */ GGS_message_obj  & GGS_receiverSortedList::cEnumerator::_mess (LOCATION_ARGS) const {
  macroValidPointerThere (mCurrentEnumeratedObject) ;
  return ((/* const */ cElement *) mCurrentEnumeratedObject)->mess ;
}

//---------------------------------------------------------------------------*

/* const */ GGS_string & GGS_receiverSortedList::cEnumerator::_senderName (LOCATION_ARGS) const {
  macroValidPointerThere (mCurrentEnumeratedObject) ;
  return ((/* const */ cElement *) mCurrentEnumeratedObject)->senderName ;
}

//---------------------------------------------------------------------------*

/* const */ GGS_location  & GGS_receiverSortedList::cEnumerator::_senderLocation (LOCATION_ARGS) const {
  macroValidPointerThere (mCurrentEnumeratedObject) ;
  return ((/* const */ cElement *) mCurrentEnumeratedObject)->senderLocation ;
}

//---------------------------------------------------------------------------*

/* const */ GGS_string & GGS_receiverSortedList::cEnumerator::_receiverName (LOCATION_ARGS) const {
  macroValidPointerThere (mCurrentEnumeratedObject) ;
  return ((/* const */ cElement *) mCurrentEnumeratedObject)->receiverName ;
}

//---------------------------------------------------------------------------*

/* const */ GGS_location  & GGS_receiverSortedList::cEnumerator::_receiverLocation (LOCATION_ARGS) const {
  macroValidPointerThere (mCurrentEnumeratedObject) ;
  return ((/* const */ cElement *) mCurrentEnumeratedObject)->receiverLocation ;
}

//---------------------------------------------------------------------------*

GGS_object GGS_receiverSortedList::reader_object (void) const {
  GGS_object result ;
  if (isBuilt ()) {
    GGS_receiverSortedList * p = NULL ;
    macroMyNew (p, GGS_receiverSortedList (*this)) ;
    result = GGS_object (p) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_receiverSortedList GGS_receiverSortedList::castFromObject (C_Compiler & inLexique,
                                   const GGS_object & inObject,
                                   const GGS_location & inErrorLocation
                                   COMMA_LOCATION_ARGS) {
  GGS_receiverSortedList result ;
  const GGS__root * embeddedObject = inObject.embeddedObject () ;
  if (NULL != embeddedObject) {
    const GGS_receiverSortedList * p = dynamic_cast <const GGS_receiverSortedList *> (embeddedObject) ;
    if (NULL != p) {
      result = * p ;
    }else{
      castFromObjectErrorSignaling (inLexique, inErrorLocation, & kTypeDescriptor_GGS_receiverSortedList, embeddedObject COMMA_THERE) ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*

const C_galgas_type_descriptorEX * GGS_receiverSortedList::typeDescriptor (void) const {
  return & kTypeDescriptor_GGS_receiverSortedList ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//               Element of list '@receiverReverseSortedList'                *
//                                                                           *
//---------------------------------------------------------------------------*

elementOf_GGS_receiverReverseSortedList::
elementOf_GGS_receiverReverseSortedList (const GGS_message_obj & argument_0,
                                const GGS_string& argument_1,
                                const GGS_location & argument_2,
                                const GGS_string& argument_3,
                                const GGS_location & argument_4):
mess (argument_0),
senderName (argument_1),
senderLocation (argument_2),
receiverName (argument_3),
receiverLocation (argument_4) {
}

//---------------------------------------------------------------------------*

bool elementOf_GGS_receiverReverseSortedList::
isEqualToObject (const cSortedListElement * inOperand) const {
  bool equal = inOperand == this ;
  if (! equal) {
    const elementOf_GGS_receiverReverseSortedList * ptr = dynamic_cast <const elementOf_GGS_receiverReverseSortedList *> (inOperand) ;
    macroValidPointer (ptr) ;
    equal = mess.operator_isEqual (ptr->mess).boolValue ()
         && senderName.operator_isEqual (ptr->senderName).boolValue ()
         && senderLocation.operator_isEqual (ptr->senderLocation).boolValue ()
         && receiverName.operator_isEqual (ptr->receiverName).boolValue ()
         && receiverLocation.operator_isEqual (ptr->receiverLocation).boolValue () ;
  }
  return equal ;
}

//---------------------------------------------------------------------------*

PMSInt32 elementOf_GGS_receiverReverseSortedList::
compareForSorting (const cSortedListElement * inOperand) const {
  const elementOf_GGS_receiverReverseSortedList * operand = (const elementOf_GGS_receiverReverseSortedList *) inOperand ;
  PMSInt32 result = - senderName.genericObjectCompare (operand->senderName) ;
  if (result == 0) {
    result = receiverName.genericObjectCompare (operand->receiverName) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

void elementOf_GGS_receiverReverseSortedList::
appendForDescription (C_String & ioString,
                      const PMSInt32 inIndentation) const {
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "|-" ;
  ioString << mess.reader_description (inIndentation) ;
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "|-" ;
  ioString << senderName.reader_description (inIndentation) ;
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "|-" ;
  ioString << senderLocation.reader_description (inIndentation) ;
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "|-" ;
  ioString << receiverName.reader_description (inIndentation) ;
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "|-" ;
  ioString << receiverLocation.reader_description (inIndentation) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                 Sorted list '@receiverReverseSortedList'                  *
//                                                                           *
//---------------------------------------------------------------------------*

const C_galgas_type_descriptorEX kTypeDescriptor_GGS_receiverReverseSortedList ("receiverReverseSortedList", false, NULL) ;

//---------------------------------------------------------------------------*

GGS_receiverReverseSortedList::GGS_receiverReverseSortedList (void): AC_GGS_sortedlist () { // Default Constructor
}

//---------------------------------------------------------------------------*

GGS_receiverReverseSortedList::
GGS_receiverReverseSortedList (const GGS_receiverReverseSortedList & inSource): AC_GGS_sortedlist (inSource) {
}

//---------------------------------------------------------------------------*

GGS_bool GGS_receiverReverseSortedList::
operator_isEqual (const GGS_receiverReverseSortedList & inOperand) const {
  return GGS_bool (isBuilt () && inOperand.isBuilt (), isEqualToList (inOperand)) ;
}

//---------------------------------------------------------------------------*

GGS_bool GGS_receiverReverseSortedList::
operator_isNotEqual (const GGS_receiverReverseSortedList & inOperand) const {
  return GGS_bool (isBuilt () && inOperand.isBuilt (), ! isEqualToList (inOperand)) ;
}

//---------------------------------------------------------------------------*

void GGS_receiverReverseSortedList::
internalAppendValues (const GGS_message_obj & argument_0,
                    const GGS_string& argument_1,
                    const GGS_location & argument_2,
                    const GGS_string& argument_3,
                    const GGS_location & argument_4) {
  cElement * newElement = (cElement *) NULL ;
  macroMyNew (newElement, cElement (argument_0,
                                argument_1,
                                argument_2,
                                argument_3,
                                argument_4)) ;
  internalAppendItem (newElement) ;
}

//---------------------------------------------------------------------------*

void GGS_receiverReverseSortedList::
addAssign_operation (const GGS_message_obj & argument_0,
                                const GGS_string& argument_1,
                                const GGS_location & argument_2,
                                const GGS_string& argument_3,
                                const GGS_location & argument_4) {
  if (isBuilt ()) {
    insulateList () ;
    internalAppendValues (argument_0,
                                argument_1,
                                argument_2,
                                argument_3,
                                argument_4) ;
  }
}

//---------------------------------------------------------------------------*

GGS_receiverReverseSortedList GGS_receiverReverseSortedList::
operator_concat (const GGS_receiverReverseSortedList & inOperand) const {
  GGS_receiverReverseSortedList result = * this ;
  result.dotAssign_operation (inOperand) ;
  return result ;
}

//---------------------------------------------------------------------------*

void GGS_receiverReverseSortedList::
dotAssign_operation (const GGS_receiverReverseSortedList inOperand) {
  if (isBuilt () && inOperand.isBuilt ()) {
    if (count () == 0) {
      *this = inOperand ;
    }else{
      if (inOperand.count () > 0) {
        insulateList () ;
        elementOf_GGS_receiverReverseSortedList * p = inOperand.firstObject () ;
        while (p != NULL) {
          macroValidPointer (p) ;
          GGS_message_obj  p_0 = p->mess ;
          GGS_string p_1 = p->senderName ;
          GGS_location  p_2 = p->senderLocation ;
          GGS_string p_3 = p->receiverName ;
          GGS_location  p_4 = p->receiverLocation ;
          internalAppendValues (p_0, p_1, p_2, p_3, p_4) ;
          p = p->nextObject () ;
        }
      }
    }
  }
}

//---------------------------------------------------------------------------*

void GGS_receiverReverseSortedList::
insulateList (void) {
  if (isShared ()) {
    cElement * ptr = firstObject () ;
    alloc () ;
    while (ptr != NULL) {
      macroValidPointer (ptr) ;
      internalAppendValues (ptr->mess,
                                ptr->senderName,
                                ptr->senderLocation,
                                ptr->receiverName,
                                ptr->receiverLocation) ;
      ptr = ptr->nextObject () ;
    }
  }
}

//---------------------------------------------------------------------------*

GGS_receiverReverseSortedList  GGS_receiverReverseSortedList::
constructor_emptySortedList (void) {
  GGS_receiverReverseSortedList result ;
  result.alloc () ;
  return result ;
}

//---------------------------------------------------------------------------*

GGS_receiverReverseSortedList  GGS_receiverReverseSortedList::
constructor_sortedListWithValue (const GGS_message_obj & argument_0,
                           const GGS_string& argument_1,
                           const GGS_location & argument_2,
                           const GGS_string& argument_3,
                           const GGS_location & argument_4) {
  GGS_receiverReverseSortedList result ;
  result.alloc () ;
  result.addAssign_operation (argument_0, argument_1, argument_2, argument_3, argument_4) ;
  return result ;
}

//---------------------------------------------------------------------------*

GGS_string GGS_receiverReverseSortedList::
reader_description (const PMSInt32 inIndentation) const {
  return performDescription ("@receiverReverseSortedList", inIndentation) ;
}

//---------------------------------------------------------------------------*

void GGS_receiverReverseSortedList::
method_smallest (C_Compiler & inLexique,
                 GGS_message_obj & _out_0,
                 GGS_string& _out_1,
                 GGS_location & _out_2,
                 GGS_string& _out_3,
                 GGS_location & _out_4
                 COMMA_LOCATION_ARGS) const {
  cElement * ptr = NULL ;
  if (isBuilt ()) {
    ptr = firstObject () ;
    if (ptr == NULL) {
      inLexique.onTheFlyRunTimeError ("'first' method invoked on an empty list" COMMA_THERE) ;
    }
  }
  if (ptr != NULL) {
    _out_0 = ptr->mess ;
    _out_1 = ptr->senderName ;
    _out_2 = ptr->senderLocation ;
    _out_3 = ptr->receiverName ;
    _out_4 = ptr->receiverLocation ;
  }else{
    _out_0.drop () ;
    _out_1.drop () ;
    _out_2.drop () ;
    _out_3.drop () ;
    _out_4.drop () ;
  }
}

//---------------------------------------------------------------------------*

void GGS_receiverReverseSortedList::
method_greatest (C_Compiler & inLexique,
             GGS_message_obj & _out_0,
             GGS_string& _out_1,
             GGS_location & _out_2,
             GGS_string& _out_3,
             GGS_location & _out_4
             COMMA_LOCATION_ARGS) const {
  cElement * ptr = NULL ;
  if (isBuilt ()) {
    ptr = lastObject () ;
    if (ptr == NULL) {
      inLexique.onTheFlyRunTimeError ("'greatest' method invoked on an empty list" COMMA_THERE) ;
    }
  }
  if (ptr != NULL) {
    _out_0 = ptr->mess ;
    _out_1 = ptr->senderName ;
    _out_2 = ptr->senderLocation ;
    _out_3 = ptr->receiverName ;
    _out_4 = ptr->receiverLocation ;
  }else{
    _out_0.drop () ;
    _out_1.drop () ;
    _out_2.drop () ;
    _out_3.drop () ;
    _out_4.drop () ;
  }
}

//---------------------------------------------------------------------------*

void GGS_receiverReverseSortedList::
modifier_popSmallest (C_Compiler & inLexique,
                 GGS_message_obj & _out_0,
                 GGS_string& _out_1,
                 GGS_location & _out_2,
                 GGS_string& _out_3,
                 GGS_location & _out_4
                 COMMA_LOCATION_ARGS) {
  cElement * ptr = NULL ;
  if (isBuilt ()) {
    ptr = firstObject () ;
    if (ptr == NULL) {
      inLexique.onTheFlyRunTimeError ("'popSmallest' modifier invoked on an empty list" COMMA_THERE) ;
    }
  }
  if (ptr != NULL) {
    _out_0 = ptr->mess ;
    _out_1 = ptr->senderName ;
    _out_2 = ptr->senderLocation ;
    _out_3 = ptr->receiverName ;
    _out_4 = ptr->receiverLocation ;
    insulateList () ;
    _internalRemoveSmallest () ;
  }else{
    _out_0.drop () ;
    _out_1.drop () ;
    _out_2.drop () ;
    _out_3.drop () ;
    _out_4.drop () ;
  }
}

//---------------------------------------------------------------------------*

void GGS_receiverReverseSortedList::
modifier_popGreatest (C_Compiler & inLexique,
                GGS_message_obj & _out_0,
                GGS_string& _out_1,
                GGS_location & _out_2,
                GGS_string& _out_3,
                GGS_location & _out_4
                COMMA_LOCATION_ARGS) {
  cElement * ptr = NULL ;
  if (isBuilt ()) {
    ptr = lastObject () ;
    if (ptr == NULL) {
      inLexique.onTheFlyRunTimeError ("'popGreatest' modifier invoked on an empty list" COMMA_THERE) ;
    }
  }
  if (ptr != NULL) {
    _out_0 = ptr->mess ;
    _out_1 = ptr->senderName ;
    _out_2 = ptr->senderLocation ;
    _out_3 = ptr->receiverName ;
    _out_4 = ptr->receiverLocation ;
    insulateList () ;
    _internalRemoveGreatest () ;
  }else{
    _out_0.drop () ;
    _out_1.drop () ;
    _out_2.drop () ;
    _out_3.drop () ;
    _out_4.drop () ;
  }
}

//---------------------------------------------------------------------------*

/* const */ GGS_message_obj  & GGS_receiverReverseSortedList::cEnumerator::_mess (LOCATION_ARGS) const {
  macroValidPointerThere (mCurrentEnumeratedObject) ;
  return ((/* const */ cElement *) mCurrentEnumeratedObject)->mess ;
}

//---------------------------------------------------------------------------*

/* const */ GGS_string & GGS_receiverReverseSortedList::cEnumerator::_senderName (LOCATION_ARGS) const {
  macroValidPointerThere (mCurrentEnumeratedObject) ;
  return ((/* const */ cElement *) mCurrentEnumeratedObject)->senderName ;
}

//---------------------------------------------------------------------------*

/* const */ GGS_location  & GGS_receiverReverseSortedList::cEnumerator::_senderLocation (LOCATION_ARGS) const {
  macroValidPointerThere (mCurrentEnumeratedObject) ;
  return ((/* const */ cElement *) mCurrentEnumeratedObject)->senderLocation ;
}

//---------------------------------------------------------------------------*

/* const */ GGS_string & GGS_receiverReverseSortedList::cEnumerator::_receiverName (LOCATION_ARGS) const {
  macroValidPointerThere (mCurrentEnumeratedObject) ;
  return ((/* const */ cElement *) mCurrentEnumeratedObject)->receiverName ;
}

//---------------------------------------------------------------------------*

/* const */ GGS_location  & GGS_receiverReverseSortedList::cEnumerator::_receiverLocation (LOCATION_ARGS) const {
  macroValidPointerThere (mCurrentEnumeratedObject) ;
  return ((/* const */ cElement *) mCurrentEnumeratedObject)->receiverLocation ;
}

//---------------------------------------------------------------------------*

GGS_object GGS_receiverReverseSortedList::reader_object (void) const {
  GGS_object result ;
  if (isBuilt ()) {
    GGS_receiverReverseSortedList * p = NULL ;
    macroMyNew (p, GGS_receiverReverseSortedList (*this)) ;
    result = GGS_object (p) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_receiverReverseSortedList GGS_receiverReverseSortedList::castFromObject (C_Compiler & inLexique,
                                   const GGS_object & inObject,
                                   const GGS_location & inErrorLocation
                                   COMMA_LOCATION_ARGS) {
  GGS_receiverReverseSortedList result ;
  const GGS__root * embeddedObject = inObject.embeddedObject () ;
  if (NULL != embeddedObject) {
    const GGS_receiverReverseSortedList * p = dynamic_cast <const GGS_receiverReverseSortedList *> (embeddedObject) ;
    if (NULL != p) {
      result = * p ;
    }else{
      castFromObjectErrorSignaling (inLexique, inErrorLocation, & kTypeDescriptor_GGS_receiverReverseSortedList, embeddedObject COMMA_THERE) ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*

const C_galgas_type_descriptorEX * GGS_receiverReverseSortedList::typeDescriptor (void) const {
  return & kTypeDescriptor_GGS_receiverReverseSortedList ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                  Implementation of routine "setFilter"                    *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_setFilter (C_Compiler & inLexique,
                                GGS_goilTemplateFieldMap  & var_cas_fieldMap,
                                const GGS_filter_prop_obj   var_cas_filter
                        COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_setFilter at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  { const GGS_filter_prop_obj _var_22757 = var_cas_filter ; // CAST instruction
    if (_var_22757.getPtr () != NULL) {
      macroValidPointer (_var_22757.getPtr ()) ;
      if (typeid (cPtr_always_filter) == typeid (* (_var_22757.getPtr ()))) {
        ::routine_addStringFieldValue (inLexique,  var_cas_fieldMap,  GGS_lstring ::constructor_new (inLexique, GGS_string ("FILTER"), var_cas_filter.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (570)) COMMA_SOURCE_FILE_AT_LINE (570)),  GGS_string ("ALWAYS") COMMA_SOURCE_FILE_AT_LINE (570)) ;
      }else if (typeid (cPtr_never_filter) == typeid (* (_var_22757.getPtr ()))) {
        ::routine_addStringFieldValue (inLexique,  var_cas_fieldMap,  GGS_lstring ::constructor_new (inLexique, GGS_string ("FILTER"), var_cas_filter.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (572)) COMMA_SOURCE_FILE_AT_LINE (572)),  GGS_string ("NEVER") COMMA_SOURCE_FILE_AT_LINE (572)) ;
      }else if (typeid (cPtr_maskednewequalsx_filter) == typeid (* (_var_22757.getPtr ()))) {
        const GGS_maskednewequalsx_filter var_cas_maskedNewEqualsXFilter (_var_22757.getPtr ()) ;
        ::routine_addStringFieldValue (inLexique,  var_cas_fieldMap,  GGS_lstring ::constructor_new (inLexique, GGS_string ("FILTER"), var_cas_filter.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (574)) COMMA_SOURCE_FILE_AT_LINE (574)),  GGS_string ("MASKEDNEWEQUALSX") COMMA_SOURCE_FILE_AT_LINE (574)) ;
        ::routine_addLUnsignedFieldValue (inLexique,  var_cas_fieldMap,  GGS_string ("MASK"),  var_cas_maskedNewEqualsXFilter.reader_mask (inLexique COMMA_SOURCE_FILE_AT_LINE (575)) COMMA_SOURCE_FILE_AT_LINE (575)) ;
        ::routine_addLUnsignedFieldValue (inLexique,  var_cas_fieldMap,  GGS_string ("X"),  var_cas_maskedNewEqualsXFilter.reader_x (inLexique COMMA_SOURCE_FILE_AT_LINE (576)) COMMA_SOURCE_FILE_AT_LINE (576)) ;
      }else if (typeid (cPtr_maskednewdiffersx_filter) == typeid (* (_var_22757.getPtr ()))) {
        const GGS_maskednewdiffersx_filter var_cas_maskedNewDiffersXFilter (_var_22757.getPtr ()) ;
        ::routine_addStringFieldValue (inLexique,  var_cas_fieldMap,  GGS_lstring ::constructor_new (inLexique, GGS_string ("FILTER"), var_cas_filter.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (578)) COMMA_SOURCE_FILE_AT_LINE (578)),  GGS_string ("MASKEDNEWDIFFERSX") COMMA_SOURCE_FILE_AT_LINE (578)) ;
        ::routine_addLUnsignedFieldValue (inLexique,  var_cas_fieldMap,  GGS_string ("MASK"),  var_cas_maskedNewDiffersXFilter.reader_mask (inLexique COMMA_SOURCE_FILE_AT_LINE (579)) COMMA_SOURCE_FILE_AT_LINE (579)) ;
        ::routine_addLUnsignedFieldValue (inLexique,  var_cas_fieldMap,  GGS_string ("X"),  var_cas_maskedNewDiffersXFilter.reader_x (inLexique COMMA_SOURCE_FILE_AT_LINE (580)) COMMA_SOURCE_FILE_AT_LINE (580)) ;
      }else if (typeid (cPtr_newisequal_filter) == typeid (* (_var_22757.getPtr ()))) {
        ::routine_addStringFieldValue (inLexique,  var_cas_fieldMap,  GGS_lstring ::constructor_new (inLexique, GGS_string ("FILTER"), var_cas_filter.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (582)) COMMA_SOURCE_FILE_AT_LINE (582)),  GGS_string ("NEWISEQUAL") COMMA_SOURCE_FILE_AT_LINE (582)) ;
      }else if (typeid (cPtr_newisdifferent_filter) == typeid (* (_var_22757.getPtr ()))) {
        ::routine_addStringFieldValue (inLexique,  var_cas_fieldMap,  GGS_lstring ::constructor_new (inLexique, GGS_string ("FILTER"), var_cas_filter.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (584)) COMMA_SOURCE_FILE_AT_LINE (584)),  GGS_string ("NEWISDIFFERENT") COMMA_SOURCE_FILE_AT_LINE (584)) ;
      }else if (typeid (cPtr_maskednewequalsmaskedold_filter) == typeid (* (_var_22757.getPtr ()))) {
        const GGS_maskednewequalsmaskedold_filter var_cas_maskedNewEqualsMaskedOldFilter (_var_22757.getPtr ()) ;
        ::routine_addStringFieldValue (inLexique,  var_cas_fieldMap,  GGS_lstring ::constructor_new (inLexique, GGS_string ("FILTER"), var_cas_filter.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (586)) COMMA_SOURCE_FILE_AT_LINE (586)),  GGS_string ("MASKEDNEWEQUALSMASKEDOLD") COMMA_SOURCE_FILE_AT_LINE (586)) ;
        ::routine_addLUnsignedFieldValue (inLexique,  var_cas_fieldMap,  GGS_string ("MASK"),  var_cas_maskedNewEqualsMaskedOldFilter.reader_mask (inLexique COMMA_SOURCE_FILE_AT_LINE (587)) COMMA_SOURCE_FILE_AT_LINE (587)) ;
      }else if (typeid (cPtr_maskednewdiffersmaskedold_filter) == typeid (* (_var_22757.getPtr ()))) {
        const GGS_maskednewdiffersmaskedold_filter var_cas_maskedNewDiffersMaskedOldFilter (_var_22757.getPtr ()) ;
        ::routine_addStringFieldValue (inLexique,  var_cas_fieldMap,  GGS_lstring ::constructor_new (inLexique, GGS_string ("FILTER"), var_cas_filter.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (589)) COMMA_SOURCE_FILE_AT_LINE (589)),  GGS_string ("MASKEDNEWDIFFERSMASKEDOLD") COMMA_SOURCE_FILE_AT_LINE (589)) ;
        ::routine_addLUnsignedFieldValue (inLexique,  var_cas_fieldMap,  GGS_string ("MASK"),  var_cas_maskedNewDiffersMaskedOldFilter.reader_mask (inLexique COMMA_SOURCE_FILE_AT_LINE (590)) COMMA_SOURCE_FILE_AT_LINE (590)) ;
      }else if (typeid (cPtr_newiswithin) == typeid (* (_var_22757.getPtr ()))) {
        const GGS_newiswithin var_cas_newIsWithinFilter (_var_22757.getPtr ()) ;
        ::routine_addStringFieldValue (inLexique,  var_cas_fieldMap,  GGS_lstring ::constructor_new (inLexique, GGS_string ("FILTER"), var_cas_filter.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (592)) COMMA_SOURCE_FILE_AT_LINE (592)),  GGS_string ("NEWISWITHIN") COMMA_SOURCE_FILE_AT_LINE (592)) ;
        ::routine_addLUnsignedFieldValue (inLexique,  var_cas_fieldMap,  GGS_string ("MIN"),  var_cas_newIsWithinFilter.reader_min (inLexique COMMA_SOURCE_FILE_AT_LINE (593)) COMMA_SOURCE_FILE_AT_LINE (593)) ;
        ::routine_addLUnsignedFieldValue (inLexique,  var_cas_fieldMap,  GGS_string ("MAX"),  var_cas_newIsWithinFilter.reader_max (inLexique COMMA_SOURCE_FILE_AT_LINE (594)) COMMA_SOURCE_FILE_AT_LINE (594)) ;
      }else if (typeid (cPtr_newisoutside) == typeid (* (_var_22757.getPtr ()))) {
        const GGS_newisoutside var_cas_newIsOutsideFilter (_var_22757.getPtr ()) ;
        ::routine_addStringFieldValue (inLexique,  var_cas_fieldMap,  GGS_lstring ::constructor_new (inLexique, GGS_string ("FILTER"), var_cas_filter.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (596)) COMMA_SOURCE_FILE_AT_LINE (596)),  GGS_string ("NEWISOUTSIDE") COMMA_SOURCE_FILE_AT_LINE (596)) ;
        ::routine_addLUnsignedFieldValue (inLexique,  var_cas_fieldMap,  GGS_string ("MIN"),  var_cas_newIsOutsideFilter.reader_min (inLexique COMMA_SOURCE_FILE_AT_LINE (597)) COMMA_SOURCE_FILE_AT_LINE (597)) ;
        ::routine_addLUnsignedFieldValue (inLexique,  var_cas_fieldMap,  GGS_string ("MAX"),  var_cas_newIsOutsideFilter.reader_max (inLexique COMMA_SOURCE_FILE_AT_LINE (598)) COMMA_SOURCE_FILE_AT_LINE (598)) ;
      }else if (typeid (cPtr_newisgreater_filter) == typeid (* (_var_22757.getPtr ()))) {
        ::routine_addStringFieldValue (inLexique,  var_cas_fieldMap,  GGS_lstring ::constructor_new (inLexique, GGS_string ("FILTER"), var_cas_filter.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (600)) COMMA_SOURCE_FILE_AT_LINE (600)),  GGS_string ("NEWISGREATER") COMMA_SOURCE_FILE_AT_LINE (600)) ;
      }else if (typeid (cPtr_newislessorequal_filter) == typeid (* (_var_22757.getPtr ()))) {
        ::routine_addStringFieldValue (inLexique,  var_cas_fieldMap,  GGS_lstring ::constructor_new (inLexique, GGS_string ("FILTER"), var_cas_filter.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (602)) COMMA_SOURCE_FILE_AT_LINE (602)),  GGS_string ("NEWISLESSOREQUAL") COMMA_SOURCE_FILE_AT_LINE (602)) ;
      }else if (typeid (cPtr_newisless_filter) == typeid (* (_var_22757.getPtr ()))) {
        ::routine_addStringFieldValue (inLexique,  var_cas_fieldMap,  GGS_lstring ::constructor_new (inLexique, GGS_string ("FILTER"), var_cas_filter.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (604)) COMMA_SOURCE_FILE_AT_LINE (604)),  GGS_string ("NEWISLESS") COMMA_SOURCE_FILE_AT_LINE (604)) ;
      }else if (typeid (cPtr_newisgreaterorequal_filter) == typeid (* (_var_22757.getPtr ()))) {
        ::routine_addStringFieldValue (inLexique,  var_cas_fieldMap,  GGS_lstring ::constructor_new (inLexique, GGS_string ("FILTER"), var_cas_filter.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (606)) COMMA_SOURCE_FILE_AT_LINE (606)),  GGS_string ("NEWISGREATEROREQUAL") COMMA_SOURCE_FILE_AT_LINE (606)) ;
      }else if (typeid (cPtr_oneeveryn_filter) == typeid (* (_var_22757.getPtr ()))) {
        const GGS_oneeveryn_filter var_cas_oneEveryNFilter (_var_22757.getPtr ()) ;
        ::routine_addStringFieldValue (inLexique,  var_cas_fieldMap,  GGS_lstring ::constructor_new (inLexique, GGS_string ("FILTER"), var_cas_filter.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (608)) COMMA_SOURCE_FILE_AT_LINE (608)),  GGS_string ("ONEEVERYN") COMMA_SOURCE_FILE_AT_LINE (608)) ;
        ::routine_addLUnsignedFieldValue (inLexique,  var_cas_fieldMap,  GGS_string ("PERIOD"),  var_cas_oneEveryNFilter.reader_period (inLexique COMMA_SOURCE_FILE_AT_LINE (609)) COMMA_SOURCE_FILE_AT_LINE (609)) ;
        ::routine_addLUnsignedFieldValue (inLexique,  var_cas_fieldMap,  GGS_string ("OFFSET"),  var_cas_oneEveryNFilter.reader_offset (inLexique COMMA_SOURCE_FILE_AT_LINE (610)) COMMA_SOURCE_FILE_AT_LINE (610)) ;
      }else{
      }
    }
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_setFilter\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//               Implementation of routine "setMessagesList"                 *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_setMessagesList (C_Compiler & inLexique,
                                const GGS_root_obj   var_cas_cpu,
                                const GGS_stringMap   /* var_cas_appForObj */,
                                GGS_goilTemplateVariableMap  & var_cas_cfg
                        COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_setMessagesList at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  GGS_receiverSortedList  var_cas_internalReceiversList = GGS_receiverSortedList ::constructor_emptySortedList () ;
  {
    GGS_message_map::cEnumerator enumerator_23141 (var_cas_cpu.reader_messages (inLexique COMMA_SOURCE_FILE_AT_LINE (623)), true) ;
    const GGS_message_map::cElement * operand_23141 = NULL ;
    while (((operand_23141 = enumerator_23141.nextObject ()))) {
      macroValidPointer (operand_23141) ;
      { const GGS_mess_prop_obj _var_23959 = operand_23141->mInfo.mess.reader_messageproperty (inLexique COMMA_SOURCE_FILE_AT_LINE (624)) ; // CAST instruction
        if (_var_23959.getPtr () != NULL) {
          macroValidPointer (_var_23959.getPtr ()) ;
          if (typeid (cPtr_rzi_mess_prop) == typeid (* (_var_23959.getPtr ()))) {
            const GGS_rzi_mess_prop var_cas_receiveZeroInternalMessage (_var_23959.getPtr ()) ;
            GGS_lstring  var_cas_sendMessage = var_cas_receiveZeroInternalMessage.reader_sendingmessage (inLexique COMMA_SOURCE_FILE_AT_LINE (626)) ;
            var_cas_internalReceiversList.addAssign_operation (operand_23141->mInfo.mess, var_cas_sendMessage.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (627)), var_cas_sendMessage.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (627)), operand_23141->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (627)), operand_23141->mKey.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (627))) ;
          }else if (typeid (cPtr_rui_mess_prop) == typeid (* (_var_23959.getPtr ()))) {
            const GGS_rui_mess_prop var_cas_receiveUnqueuedInternalMessage (_var_23959.getPtr ()) ;
            GGS_lstring  var_cas_sendMessage = var_cas_receiveUnqueuedInternalMessage.reader_sendingmessage (inLexique COMMA_SOURCE_FILE_AT_LINE (629)) ;
            var_cas_internalReceiversList.addAssign_operation (operand_23141->mInfo.mess, var_cas_sendMessage.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (630)), var_cas_sendMessage.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (630)), operand_23141->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (630)), operand_23141->mKey.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (630))) ;
          }else if (typeid (cPtr_rqi_mess_prop) == typeid (* (_var_23959.getPtr ()))) {
            const GGS_rqi_mess_prop var_cas_receiveQueuedInternalMessage (_var_23959.getPtr ()) ;
            GGS_lstring  var_cas_sendMessage = var_cas_receiveQueuedInternalMessage.reader_sendingmessage (inLexique COMMA_SOURCE_FILE_AT_LINE (632)) ;
            var_cas_internalReceiversList.addAssign_operation (operand_23141->mInfo.mess, var_cas_sendMessage.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (633)), var_cas_sendMessage.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (633)), operand_23141->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (633)), operand_23141->mKey.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (633))) ;
          }else{
          }
        }
      }
    }
  }
  GGS_lstringMap  var_cas_internalTargets = GGS_lstringMap ::constructor_emptyMap (inLexique COMMA_SOURCE_FILE_AT_LINE (646)) ;
  GGS_lstringMap  var_cas_nextTargets = GGS_lstringMap ::constructor_emptyMap (inLexique COMMA_SOURCE_FILE_AT_LINE (647)) ;
  GGS_receiverReverseSortedList  var_cas_actualInternalReceiverList = GGS_receiverReverseSortedList ::constructor_emptySortedList () ;
  GGS_string var_cas_previousReceiver = GGS_string ("") ;
  GGS_string var_cas_previousSender = GGS_string ("") ;
  {
    GGS_receiverSortedList::cEnumerator enumerator_24708 (var_cas_internalReceiversList, true) ;
    const GGS_receiverSortedList::cElement * operand_24708 = NULL ;
    while (((operand_24708 = enumerator_24708.nextObject ()))) {
      macroValidPointer (operand_24708) ;
      const GGS_bool cond_24877 = (var_cas_internalTargets.reader_hasKey (operand_24708->senderName)).operator_not () ;
      if (cond_24877.isBuiltAndTrue ()) {
        var_cas_internalTargets.modifier_put (inLexique, function_lstringWith (inLexique, operand_24708->senderName COMMA_SOURCE_FILE_AT_LINE (653)), GGS_lstring ::constructor_new (inLexique, operand_24708->receiverName, operand_24708->receiverLocation COMMA_SOURCE_FILE_AT_LINE (653)) COMMA_SOURCE_FILE_AT_LINE (653)) ;
      }
      const GGS_bool cond_25037 = (operand_24708->senderName).operator_isEqual (var_cas_previousSender) ;
      if (cond_25037.isBuiltAndTrue ()) {
        var_cas_nextTargets.modifier_put (inLexique, function_lstringWith (inLexique, var_cas_previousReceiver COMMA_SOURCE_FILE_AT_LINE (656)), GGS_lstring ::constructor_new (inLexique, operand_24708->receiverName, operand_24708->receiverLocation COMMA_SOURCE_FILE_AT_LINE (656)) COMMA_SOURCE_FILE_AT_LINE (656)) ;
      }
      var_cas_previousSender = operand_24708->senderName ;
      var_cas_previousReceiver = operand_24708->receiverName ;
      var_cas_actualInternalReceiverList.addAssign_operation (operand_24708->mess, operand_24708->senderName, operand_24708->senderLocation, operand_24708->receiverName, operand_24708->receiverLocation) ;
    }
  }
  GGS_goilTemplateFieldMapList  var_cas_messagesList = GGS_goilTemplateFieldMapList ::constructor_emptyList () ;
  GGS_goilTemplateFieldMapList  var_cas_sendMessagesList = GGS_goilTemplateFieldMapList ::constructor_emptyList () ;
  GGS_goilTemplateFieldMapList  var_cas_receiveMessagesList = GGS_goilTemplateFieldMapList ::constructor_emptyList () ;
  {
    GGS_receiverReverseSortedList::cEnumerator enumerator_25531 (var_cas_actualInternalReceiverList, true) ;
    const GGS_receiverReverseSortedList::cElement * operand_25531 = NULL ;
    while (((operand_25531 = enumerator_25531.nextObject ()))) {
      macroValidPointer (operand_25531) ;
      GGS_goilTemplateFieldMap  var_cas_fieldMap = GGS_goilTemplateFieldMap ::constructor_emptyMap (inLexique COMMA_SOURCE_FILE_AT_LINE (671)) ;
      ::routine_addStringFieldValue (inLexique,  var_cas_fieldMap,  GGS_lstring ::constructor_new (inLexique, GGS_string ("NAME"), operand_25531->receiverLocation COMMA_SOURCE_FILE_AT_LINE (672)),  operand_25531->receiverName COMMA_SOURCE_FILE_AT_LINE (672)) ;
      const GGS_bool cond_26004 = var_cas_nextTargets.reader_hasKey (operand_25531->receiverName) ;
      if (cond_26004.isBuiltAndTrue ()) {
        GGS_lstring  var_cas_nextReceiveMessage ;
        if (var_cas_nextTargets.isBuilt ()) {
          var_cas_nextTargets (HERE)->method_get (inLexique, GGS_lstring ::constructor_new (inLexique, operand_25531->receiverName, operand_25531->receiverLocation COMMA_SOURCE_FILE_AT_LINE (676)), var_cas_nextReceiveMessage COMMA_SOURCE_FILE_AT_LINE (676)) ;
        }
        ::routine_addStringFieldValue (inLexique,  var_cas_fieldMap,  GGS_lstring ::constructor_new (inLexique, GGS_string ("NEXT"), var_cas_nextReceiveMessage.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (677)) COMMA_SOURCE_FILE_AT_LINE (677)),  var_cas_nextReceiveMessage.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (677)) COMMA_SOURCE_FILE_AT_LINE (677)) ;
      }
      GGS_mess_prop_obj  var_cas_messageProperty = operand_25531->mess.reader_messageproperty (inLexique COMMA_SOURCE_FILE_AT_LINE (679)) ;
      { const GGS_mess_prop_obj _var_28565 = var_cas_messageProperty ; // CAST instruction
        if (_var_28565.getPtr () != NULL) {
          macroValidPointer (_var_28565.getPtr ()) ;
          if (typeid (cPtr_rzi_mess_prop) == typeid (* (_var_28565.getPtr ()))) {
            const GGS_rzi_mess_prop var_cas_receiveZeroInternalMessage (_var_28565.getPtr ()) ;
            ::routine_addStringFieldValue (inLexique,  var_cas_fieldMap,  GGS_lstring ::constructor_new (inLexique, GGS_string ("MESSAGEPROPERTY"), var_cas_messageProperty.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (682)) COMMA_SOURCE_FILE_AT_LINE (682)),  GGS_string ("RECEIVE_ZERO_INTERNAL") COMMA_SOURCE_FILE_AT_LINE (682)) ;
            ::routine_addLStringFieldValue (inLexique,  var_cas_fieldMap,  GGS_string ("SOURCE"),  var_cas_receiveZeroInternalMessage.reader_sendingmessage (inLexique COMMA_SOURCE_FILE_AT_LINE (683)) COMMA_SOURCE_FILE_AT_LINE (683)) ;
          }else if (typeid (cPtr_rui_mess_prop) == typeid (* (_var_28565.getPtr ()))) {
            const GGS_rui_mess_prop var_cas_receiveUnqueuedInternalMessage (_var_28565.getPtr ()) ;
            GGS_lstring  var_cas_senderName = var_cas_receiveUnqueuedInternalMessage.reader_sendingmessage (inLexique COMMA_SOURCE_FILE_AT_LINE (685)) ;
            ::routine_addStringFieldValue (inLexique,  var_cas_fieldMap,  GGS_lstring ::constructor_new (inLexique, GGS_string ("MESSAGEPROPERTY"), var_cas_messageProperty.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (686)) COMMA_SOURCE_FILE_AT_LINE (686)),  GGS_string ("RECEIVE_UNQUEUED_INTERNAL") COMMA_SOURCE_FILE_AT_LINE (686)) ;
            ::routine_addLStringFieldValue (inLexique,  var_cas_fieldMap,  GGS_string ("SOURCE"),  var_cas_senderName COMMA_SOURCE_FILE_AT_LINE (687)) ;
            GGS_message_obj  var_cas_sender ;
            const GGS_message_map  temp_26756 = var_cas_cpu.reader_messages (inLexique COMMA_SOURCE_FILE_AT_LINE (689)) ;
            if (temp_26756.isBuilt ()) {
              temp_26756 (HERE)->method_get (inLexique, var_cas_senderName, var_cas_sender COMMA_SOURCE_FILE_AT_LINE (689)) ;
            }
            { const GGS_mess_prop_obj _var_27513 = var_cas_sender.reader_messageproperty (inLexique COMMA_SOURCE_FILE_AT_LINE (690)) ; // CAST instruction
              if (_var_27513.getPtr () != NULL) {
                macroValidPointer (_var_27513.getPtr ()) ;
                if (typeid (cPtr_ssi_mess_prop) == typeid (* (_var_27513.getPtr ()))) {
                  const GGS_ssi_mess_prop var_cas_sendStaticInternalSender (_var_27513.getPtr ()) ;
                  ::routine_addLStringFieldValue (inLexique,  var_cas_fieldMap,  GGS_string ("CTYPE"),  var_cas_sendStaticInternalSender.reader_cdatatype (inLexique COMMA_SOURCE_FILE_AT_LINE (692)) COMMA_SOURCE_FILE_AT_LINE (692)) ;
                  GGS_basic_type  var_cas_initialValue = var_cas_receiveUnqueuedInternalMessage.reader_initialvalue (inLexique COMMA_SOURCE_FILE_AT_LINE (693)) ;
                  GGS_string var_cas_initialValueString ;
                  if (var_cas_initialValue.isBuilt ()) {
                    var_cas_initialValue (HERE)->method_string (inLexique, var_cas_initialValueString COMMA_SOURCE_FILE_AT_LINE (695)) ;
                  }
                  const GGS_bool cond_27302 = (var_cas_initialValueString).operator_isNotEqual (GGS_string ("")) ;
                  if (cond_27302.isBuiltAndTrue ()) {
                    ::routine_addStringFieldValue (inLexique,  var_cas_fieldMap,  GGS_lstring ::constructor_new (inLexique, GGS_string ("INITIALVALUE"), var_cas_initialValue.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (697)) COMMA_SOURCE_FILE_AT_LINE (697)),  var_cas_initialValueString COMMA_SOURCE_FILE_AT_LINE (697)) ;
                  }
                }else{
                  var_cas_messageProperty.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (700)).reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("MESSAGEPROPERTY of sender has an incompatible property") COMMA_SOURCE_FILE_AT_LINE (701)) ;
                  var_cas_senderName.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("MESSAGEPROPERTY of sender should be SEND_STATIC_INTERNAL") COMMA_SOURCE_FILE_AT_LINE (702)) ;
                }
              }
            }
            ::routine_setFilter (inLexique,  var_cas_fieldMap,  var_cas_receiveUnqueuedInternalMessage.reader_filter (inLexique COMMA_SOURCE_FILE_AT_LINE (703)) COMMA_SOURCE_FILE_AT_LINE (703)) ;
          }else if (typeid (cPtr_rqi_mess_prop) == typeid (* (_var_28565.getPtr ()))) {
            const GGS_rqi_mess_prop var_cas_receiveQueuedInternalMessage (_var_28565.getPtr ()) ;
            GGS_lstring  var_cas_senderName = var_cas_receiveQueuedInternalMessage.reader_sendingmessage (inLexique COMMA_SOURCE_FILE_AT_LINE (705)) ;
            ::routine_addStringFieldValue (inLexique,  var_cas_fieldMap,  GGS_lstring ::constructor_new (inLexique, GGS_string ("MESSAGEPROPERTY"), var_cas_messageProperty.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (706)) COMMA_SOURCE_FILE_AT_LINE (706)),  GGS_string ("RECEIVE_QUEUED_INTERNAL") COMMA_SOURCE_FILE_AT_LINE (706)) ;
            ::routine_addLStringFieldValue (inLexique,  var_cas_fieldMap,  GGS_string ("SOURCE"),  var_cas_senderName COMMA_SOURCE_FILE_AT_LINE (707)) ;
            ::routine_addLUnsignedFieldValue (inLexique,  var_cas_fieldMap,  GGS_string ("QUEUESIZE"),  var_cas_receiveQueuedInternalMessage.reader_queuesize (inLexique COMMA_SOURCE_FILE_AT_LINE (708)) COMMA_SOURCE_FILE_AT_LINE (708)) ;
            GGS_message_obj  var_cas_sender ;
            const GGS_message_map  temp_28061 = var_cas_cpu.reader_messages (inLexique COMMA_SOURCE_FILE_AT_LINE (710)) ;
            if (temp_28061.isBuilt ()) {
              temp_28061 (HERE)->method_get (inLexique, var_cas_senderName, var_cas_sender COMMA_SOURCE_FILE_AT_LINE (710)) ;
            }
            { const GGS_mess_prop_obj _var_28472 = var_cas_sender.reader_messageproperty (inLexique COMMA_SOURCE_FILE_AT_LINE (711)) ; // CAST instruction
              if (_var_28472.getPtr () != NULL) {
                macroValidPointer (_var_28472.getPtr ()) ;
                if (typeid (cPtr_ssi_mess_prop) == typeid (* (_var_28472.getPtr ()))) {
                  const GGS_ssi_mess_prop var_cas_sendStaticInternalSender (_var_28472.getPtr ()) ;
                  ::routine_addLStringFieldValue (inLexique,  var_cas_fieldMap,  GGS_string ("CTYPE"),  var_cas_sendStaticInternalSender.reader_cdatatype (inLexique COMMA_SOURCE_FILE_AT_LINE (713)) COMMA_SOURCE_FILE_AT_LINE (713)) ;
                }else{
                  var_cas_messageProperty.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (715)).reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("MESSAGEPROPERTY of sender has an incompatible property") COMMA_SOURCE_FILE_AT_LINE (716)) ;
                  var_cas_senderName.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("MESSAGEPROPERTY of sender should be SEND_STATIC_INTERNAL") COMMA_SOURCE_FILE_AT_LINE (717)) ;
                }
              }
            }
            ::routine_setFilter (inLexique,  var_cas_fieldMap,  var_cas_receiveQueuedInternalMessage.reader_filter (inLexique COMMA_SOURCE_FILE_AT_LINE (719)) COMMA_SOURCE_FILE_AT_LINE (719)) ;
          }else{
          }
        }
      }
      ::routine_setAction (inLexique,  var_cas_fieldMap,  operand_25531->mess.reader_notification (inLexique COMMA_SOURCE_FILE_AT_LINE (722)) COMMA_SOURCE_FILE_AT_LINE (722)) ;
      var_cas_receiveMessagesList.addAssign_operation (var_cas_fieldMap) ;
      var_cas_messagesList.addAssign_operation (var_cas_fieldMap) ;
    }
  }
  {
    GGS_message_map::cEnumerator enumerator_28722 (var_cas_cpu.reader_messages (inLexique COMMA_SOURCE_FILE_AT_LINE (727)), true) ;
    const GGS_message_map::cElement * operand_28722 = NULL ;
    while (((operand_28722 = enumerator_28722.nextObject ()))) {
      macroValidPointer (operand_28722) ;
      GGS_goilTemplateFieldMap  var_cas_fieldMap = GGS_goilTemplateFieldMap ::constructor_emptyMap (inLexique COMMA_SOURCE_FILE_AT_LINE (728)) ;
      GGS_mess_prop_obj  var_cas_messageProperty = operand_28722->mInfo.mess.reader_messageproperty (inLexique COMMA_SOURCE_FILE_AT_LINE (729)) ;
      GGS_bool var_cas_okMessage = GGS_bool (true) ;
      GGS_bool var_cas_isSendMessage = GGS_bool (true) ;
      { const GGS_mess_prop_obj _var_31897 = var_cas_messageProperty ; // CAST instruction
        if (_var_31897.getPtr () != NULL) {
          macroValidPointer (_var_31897.getPtr ()) ;
          if (typeid (cPtr_ssi_mess_prop) == typeid (* (_var_31897.getPtr ()))) {
            const GGS_ssi_mess_prop var_cas_sendStaticInternalMessage (_var_31897.getPtr ()) ;
            ::routine_addStringFieldValue (inLexique,  var_cas_fieldMap,  GGS_lstring ::constructor_new (inLexique, GGS_string ("MESSAGEPROPERTY"), var_cas_messageProperty.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (734)) COMMA_SOURCE_FILE_AT_LINE (734)),  GGS_string ("SEND_STATIC_INTERNAL") COMMA_SOURCE_FILE_AT_LINE (734)) ;
            ::routine_addLStringFieldValue (inLexique,  var_cas_fieldMap,  GGS_string ("CTYPE"),  var_cas_sendStaticInternalMessage.reader_cdatatype (inLexique COMMA_SOURCE_FILE_AT_LINE (735)) COMMA_SOURCE_FILE_AT_LINE (735)) ;
            GGS_lstring  var_cas_targetMessage ;
            if (var_cas_internalTargets.isBuilt ()) {
              var_cas_internalTargets (HERE)->method_get (inLexique, operand_28722->mKey, var_cas_targetMessage COMMA_SOURCE_FILE_AT_LINE (737)) ;
            }
            ::routine_addLStringFieldValue (inLexique,  var_cas_fieldMap,  GGS_string ("TARGET"),  var_cas_targetMessage COMMA_SOURCE_FILE_AT_LINE (738)) ;
          }else if (typeid (cPtr_szi_mess_prop) == typeid (* (_var_31897.getPtr ()))) {
            ::routine_addStringFieldValue (inLexique,  var_cas_fieldMap,  GGS_lstring ::constructor_new (inLexique, GGS_string ("MESSAGEPROPERTY"), var_cas_messageProperty.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (740)) COMMA_SOURCE_FILE_AT_LINE (740)),  GGS_string ("SEND_ZERO_INTERNAL") COMMA_SOURCE_FILE_AT_LINE (740)) ;
            GGS_lstring  var_cas_targetMessage ;
            if (var_cas_internalTargets.isBuilt ()) {
              var_cas_internalTargets (HERE)->method_get (inLexique, operand_28722->mKey, var_cas_targetMessage COMMA_SOURCE_FILE_AT_LINE (742)) ;
            }
            ::routine_addLStringFieldValue (inLexique,  var_cas_fieldMap,  GGS_string ("TARGET"),  var_cas_targetMessage COMMA_SOURCE_FILE_AT_LINE (743)) ;
          }else if (typeid (cPtr_rzs_mess_prop) == typeid (* (_var_31897.getPtr ()))) {
            const GGS_rzs_mess_prop var_cas_receiveZeroSendersMessage (_var_31897.getPtr ()) ;
            ::routine_addStringFieldValue (inLexique,  var_cas_fieldMap,  GGS_lstring ::constructor_new (inLexique, GGS_string ("MESSAGEPROPERTY"), var_cas_messageProperty.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (766)) COMMA_SOURCE_FILE_AT_LINE (766)),  GGS_string ("RECEIVE_ZERO_SENDERS") COMMA_SOURCE_FILE_AT_LINE (766)) ;
            ::routine_addLStringFieldValue (inLexique,  var_cas_fieldMap,  GGS_string ("CTYPE"),  var_cas_receiveZeroSendersMessage.reader_cdatatype (inLexique COMMA_SOURCE_FILE_AT_LINE (767)) COMMA_SOURCE_FILE_AT_LINE (767)) ;
            GGS_basic_type  var_cas_initialValue = var_cas_receiveZeroSendersMessage.reader_initialvalue (inLexique COMMA_SOURCE_FILE_AT_LINE (768)) ;
            GGS_string var_cas_initialValueString ;
            if (var_cas_initialValue.isBuilt ()) {
              var_cas_initialValue (HERE)->method_string (inLexique, var_cas_initialValueString COMMA_SOURCE_FILE_AT_LINE (770)) ;
            }
            const GGS_bool cond_31820 = (var_cas_initialValueString).operator_isNotEqual (GGS_string ("")) ;
            if (cond_31820.isBuiltAndTrue ()) {
              ::routine_addStringFieldValue (inLexique,  var_cas_fieldMap,  GGS_lstring ::constructor_new (inLexique, GGS_string ("INITIALVALUE"), var_cas_initialValue.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (772)) COMMA_SOURCE_FILE_AT_LINE (772)),  var_cas_initialValueString COMMA_SOURCE_FILE_AT_LINE (772)) ;
            }
            var_cas_isSendMessage = GGS_bool (false) ;
          }else{
            var_cas_okMessage = GGS_bool (false) ;
          }
        }
      }
      const GGS_bool cond_32175 = var_cas_okMessage ;
      if (cond_32175.isBuiltAndTrue ()) {
        ::routine_addStringFieldValue (inLexique,  var_cas_fieldMap,  function_lstringWith (inLexique, GGS_string ("NAME") COMMA_SOURCE_FILE_AT_LINE (779)),  operand_28722->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (779)) COMMA_SOURCE_FILE_AT_LINE (779)) ;
        var_cas_messagesList.addAssign_operation (var_cas_fieldMap) ;
        const GGS_bool cond_32111 = var_cas_isSendMessage ;
        if (cond_32111.isBuiltAndTrue ()) {
          var_cas_sendMessagesList.addAssign_operation (var_cas_fieldMap) ;
        }else if (cond_32111.isBuiltAndFalse ()) {
          var_cas_receiveMessagesList.addAssign_operation (var_cas_fieldMap) ;
        }
      }
    }
  }
  ::routine_addListValue (inLexique,  var_cas_cfg,  function_lstringWith (inLexique, GGS_string ("MESSAGES") COMMA_SOURCE_FILE_AT_LINE (788)),  var_cas_messagesList COMMA_SOURCE_FILE_AT_LINE (788)) ;
  ::routine_addListValue (inLexique,  var_cas_cfg,  function_lstringWith (inLexique, GGS_string ("SENDMESSAGES") COMMA_SOURCE_FILE_AT_LINE (789)),  var_cas_sendMessagesList COMMA_SOURCE_FILE_AT_LINE (789)) ;
  ::routine_addListValue (inLexique,  var_cas_cfg,  function_lstringWith (inLexique, GGS_string ("RECEIVEMESSAGES") COMMA_SOURCE_FILE_AT_LINE (790)),  var_cas_receiveMessagesList COMMA_SOURCE_FILE_AT_LINE (790)) ;
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_setMessagesList\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//            Implementation of routine "setScheduletablesList"              *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_setScheduletablesList (C_Compiler & inLexique,
                                const GGS_root_obj   var_cas_cpu,
                                const GGS_stringMap   var_cas_appForObj,
                                GGS_goilTemplateVariableMap  & var_cas_cfg
                        COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_setScheduletablesList at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  GGS_goilTemplateFieldMapList  var_cas_scheduletablesList = GGS_goilTemplateFieldMapList ::constructor_emptyList () ;
  {
    GGS_scheduletable_map::cEnumerator enumerator_32634 (var_cas_cpu.reader_scheduletables (inLexique COMMA_SOURCE_FILE_AT_LINE (802)), true) ;
    const GGS_scheduletable_map::cElement * operand_32634 = NULL ;
    while (((operand_32634 = enumerator_32634.nextObject ()))) {
      macroValidPointer (operand_32634) ;
      GGS_goilTemplateFieldMap  var_cas_fieldMap = GGS_goilTemplateFieldMap ::constructor_emptyMap (inLexique COMMA_SOURCE_FILE_AT_LINE (803)) ;
      ::routine_addStringFieldValue (inLexique,  var_cas_fieldMap,  function_lstringWith (inLexique, GGS_string ("NAME") COMMA_SOURCE_FILE_AT_LINE (804)),  operand_32634->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (804)) COMMA_SOURCE_FILE_AT_LINE (804)) ;
      ::routine_addStringFieldValue (inLexique,  var_cas_fieldMap,  function_lstringWith (inLexique, GGS_string ("COUNTER") COMMA_SOURCE_FILE_AT_LINE (805)),  operand_32634->mInfo.scheduletable.reader_counter (inLexique COMMA_SOURCE_FILE_AT_LINE (805)).reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (805)) COMMA_SOURCE_FILE_AT_LINE (805)) ;
      GGS_bool var_cas_periodic = GGS_bool (false) ;
      { const GGS_basic_type _var_33005 = operand_32634->mInfo.scheduletable.reader_periodic (inLexique COMMA_SOURCE_FILE_AT_LINE (808)) ; // CAST instruction
        if (_var_33005.getPtr () != NULL) {
          macroValidPointer (_var_33005.getPtr ()) ;
          if (typeid (cPtr_bool_class) == typeid (* (_var_33005.getPtr ()))) {
            const GGS_bool_class var_cas_p (_var_33005.getPtr ()) ;
            var_cas_periodic = var_cas_p.reader_value (inLexique COMMA_SOURCE_FILE_AT_LINE (809)) ;
          }else{
          }
        }
      }
      ::routine_addBoolFieldValue (inLexique,  var_cas_fieldMap,  function_lstringWith (inLexique, GGS_string ("PERIODIC") COMMA_SOURCE_FILE_AT_LINE (811)),  var_cas_periodic COMMA_SOURCE_FILE_AT_LINE (811)) ;
      GGS_lstring  var_cas_syncStrategy = GGS_lstring ::constructor_new (inLexique, GGS_string ("SCHEDTABLE_NO_SYNC"), GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (813)) ;
      GGS_luint64  var_cas_precision = GGS_luint64 ::constructor_new (inLexique, GGS_uint64 (0ULL), GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (814)) ;
      { const GGS_ltgt_sync_obj _var_33543 = operand_32634->mInfo.scheduletable.reader_ltgt_sync (inLexique COMMA_SOURCE_FILE_AT_LINE (815)) ; // CAST instruction
        if (_var_33543.getPtr () != NULL) {
          macroValidPointer (_var_33543.getPtr ()) ;
          if (typeid (cPtr_ltgt_sync_true) == typeid (* (_var_33543.getPtr ()))) {
            const GGS_ltgt_sync_true var_cas_syncStrategyTrue (_var_33543.getPtr ()) ;
            GGS_lstring  var_cas_strategy = var_cas_syncStrategyTrue.reader_strategy (inLexique COMMA_SOURCE_FILE_AT_LINE (817)) ;
            var_cas_syncStrategy = GGS_lstring ::constructor_new (inLexique, ((GGS_string ("SCHEDTABLE_")).operator_concat (var_cas_strategy.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (818)))).operator_concat (GGS_string ("_SYNC")), var_cas_strategy.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (818)) COMMA_SOURCE_FILE_AT_LINE (818)) ;
            var_cas_precision = function_luint64OrError (inLexique, var_cas_syncStrategyTrue.reader_precision (inLexique COMMA_SOURCE_FILE_AT_LINE (819)), GGS_string ("PRECISION") COMMA_SOURCE_FILE_AT_LINE (819)) ;
          }else{
          }
        }
      }
      ::routine_addLStringFieldValue (inLexique,  var_cas_fieldMap,  GGS_string ("SYNCSTRATEGY"),  var_cas_syncStrategy COMMA_SOURCE_FILE_AT_LINE (821)) ;
      ::routine_addLUnsignedFieldValue (inLexique,  var_cas_fieldMap,  GGS_string ("PRECISION"),  var_cas_precision COMMA_SOURCE_FILE_AT_LINE (822)) ;
      GGS_lstring  var_cas_scheduletableState = function_lstringWith (inLexique, GGS_string ("") COMMA_SOURCE_FILE_AT_LINE (824)) ;
      GGS_luint64  var_cas_scheduletableDate = GGS_luint64 ::constructor_new (inLexique, GGS_uint64 (0ULL), GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (825)) ;
      { const GGS_autostart_obj _var_34709 = operand_32634->mInfo.scheduletable.reader_autostart (inLexique COMMA_SOURCE_FILE_AT_LINE (826)) ; // CAST instruction
        if (_var_34709.getPtr () != NULL) {
          macroValidPointer (_var_34709.getPtr ()) ;
          if (typeid (cPtr_sd_autostart_false) == typeid (* (_var_34709.getPtr ()))) {
            const GGS_sd_autostart_false var_cas_autostartFalse (_var_34709.getPtr ()) ;
            var_cas_scheduletableState = GGS_lstring ::constructor_new (inLexique, GGS_string ("SCHEDULETABLE_STOPPED"), var_cas_autostartFalse.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (828)) COMMA_SOURCE_FILE_AT_LINE (828)) ;
          }else if (typeid (cPtr_sd_autostart_synchron) == typeid (* (_var_34709.getPtr ()))) {
            const GGS_sd_autostart_synchron var_cas_autostartSynchron (_var_34709.getPtr ()) ;
            var_cas_scheduletableState = GGS_lstring ::constructor_new (inLexique, GGS_string ("SCHEDULETABLE_AUTOSTART_SYNCHRON"), var_cas_autostartSynchron.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (830)) COMMA_SOURCE_FILE_AT_LINE (830)) ;
          }else if (typeid (cPtr_sd_autostart_relative) == typeid (* (_var_34709.getPtr ()))) {
            const GGS_sd_autostart_relative var_cas_autostartRelative (_var_34709.getPtr ()) ;
            var_cas_scheduletableState = GGS_lstring ::constructor_new (inLexique, GGS_string ("SCHEDULETABLE_AUTOSTART_RELATIVE"), var_cas_autostartRelative.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (832)) COMMA_SOURCE_FILE_AT_LINE (832)) ;
            var_cas_scheduletableDate = var_cas_autostartRelative.reader_offset (inLexique COMMA_SOURCE_FILE_AT_LINE (833)) ;
          }else if (typeid (cPtr_sd_autostart_absolute) == typeid (* (_var_34709.getPtr ()))) {
            const GGS_sd_autostart_absolute var_cas_autostartAbsolute (_var_34709.getPtr ()) ;
            var_cas_scheduletableState = GGS_lstring ::constructor_new (inLexique, GGS_string ("SCHEDULETABLE_AUTOSTART_ABSOLUTE"), var_cas_autostartAbsolute.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (835)) COMMA_SOURCE_FILE_AT_LINE (835)) ;
            var_cas_scheduletableDate = var_cas_autostartAbsolute.reader_value (inLexique COMMA_SOURCE_FILE_AT_LINE (836)) ;
          }else{
            operand_32634->mKey.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, (GGS_string ("Internal error, unexpected type for AUTOSTART attribute of schedule table ")).operator_concat (operand_32634->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (837))) COMMA_SOURCE_FILE_AT_LINE (838)) ;
          }
        }
      }
      ::routine_addLStringFieldValue (inLexique,  var_cas_fieldMap,  GGS_string ("STATE"),  var_cas_scheduletableState COMMA_SOURCE_FILE_AT_LINE (839)) ;
      ::routine_addLUnsignedFieldValue (inLexique,  var_cas_fieldMap,  GGS_string ("DATE"),  var_cas_scheduletableDate COMMA_SOURCE_FILE_AT_LINE (840)) ;
      GGS_uint64  var_cas_length = GGS_uint64 (0ULL) ;
      { const GGS_basic_type _var_35133 = operand_32634->mInfo.scheduletable.reader_length (inLexique COMMA_SOURCE_FILE_AT_LINE (843)) ; // CAST instruction
        if (_var_35133.getPtr () != NULL) {
          macroValidPointer (_var_35133.getPtr ()) ;
          if (typeid (cPtr_uint64_class) == typeid (* (_var_35133.getPtr ()))) {
            const GGS_uint64_class var_cas_len (_var_35133.getPtr ()) ;
            var_cas_length = var_cas_len.reader_value (inLexique COMMA_SOURCE_FILE_AT_LINE (845)) ;
            ::routine_addUnsignedFieldValue (inLexique,  var_cas_fieldMap,  GGS_lstring ::constructor_new (inLexique, GGS_string ("LENGTH"), var_cas_len.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (846)) COMMA_SOURCE_FILE_AT_LINE (846)),  var_cas_length COMMA_SOURCE_FILE_AT_LINE (846)) ;
          }else{
            operand_32634->mKey.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("internal, wrong type for LENGTH attribute") COMMA_SOURCE_FILE_AT_LINE (848)) ;
          }
        }
      }
      GGS_expiry_point_list  var_cas_expiryPoints = operand_32634->mInfo.scheduletable.reader_exp_points (inLexique COMMA_SOURCE_FILE_AT_LINE (852)) ;
      GGS_expiry_point_obj  var_cas_lastPoint ;
      GGS_uint64  var_cas_lastOffset ;
      var_cas_expiryPoints.modifier_popGreatest (inLexique, var_cas_lastOffset, var_cas_lastPoint COMMA_SOURCE_FILE_AT_LINE (855)) ;
      const GGS_bool cond_35661 = (var_cas_lastOffset).operator_isEqual (var_cas_length) ;
      if (cond_35661.isBuiltAndTrue ()) {
        GGS_action_list  var_cas_actions = var_cas_lastPoint.reader_actions (inLexique COMMA_SOURCE_FILE_AT_LINE (858)) ;
        var_cas_actions.addAssign_operation (GGS_uint (10U), GGS_finalize_st_action ::constructor_new (inLexique, GGS_location (inLexique), operand_32634->mKey COMMA_SOURCE_FILE_AT_LINE (859))) ;
        var_cas_lastPoint.modifier_setActions (inLexique, var_cas_actions COMMA_SOURCE_FILE_AT_LINE (860)) ;
      }else if (cond_35661.isBuiltAndFalse ()) {
        GGS_action_list  var_cas_finalizeExpiryPointActions = GGS_action_list ::constructor_emptySortedList () ;
        var_cas_finalizeExpiryPointActions.addAssign_operation (GGS_uint (10U), GGS_finalize_st_action ::constructor_new (inLexique, GGS_location (inLexique), operand_32634->mKey COMMA_SOURCE_FILE_AT_LINE (864))) ;
        GGS_expiry_point_obj  var_cas_finalizeExpiryPoint = GGS_expiry_point_obj ::constructor_new (inLexique, GGS_lstring ::constructor_new (inLexique, GGS_string (""), GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (867)), GGS_uint64_class ::constructor_new (inLexique, GGS_location (inLexique), var_cas_length COMMA_SOURCE_FILE_AT_LINE (868)), GGS_lstring ::constructor_new (inLexique, GGS_string ("finalize"), GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (869)), GGS_adjustable_void ::constructor_new (inLexique, function_empty_lstring (inLexique COMMA_SOURCE_FILE_AT_LINE (870)), GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (870)), var_cas_finalizeExpiryPointActions COMMA_SOURCE_FILE_AT_LINE (866)) ;
        var_cas_expiryPoints.addAssign_operation (var_cas_length, var_cas_finalizeExpiryPoint) ;
      }
      var_cas_expiryPoints.addAssign_operation (var_cas_lastOffset, var_cas_lastPoint) ;
      GGS_goilTemplateFieldMapList  var_cas_expiryPointsList = GGS_goilTemplateFieldMapList ::constructor_emptyList () ;
      GGS_uint64  var_cas_previousOffset = GGS_uint64 (0ULL) ;
      {
        GGS_expiry_point_list::cEnumerator enumerator_36439 (var_cas_expiryPoints, true) ;
        const GGS_expiry_point_list::cElement * operand_36439 = NULL ;
        while (((operand_36439 = enumerator_36439.nextObject ()))) {
          macroValidPointer (operand_36439) ;
          GGS_goilTemplateFieldMap  var_cas_fieldMap = GGS_goilTemplateFieldMap ::constructor_emptyMap (inLexique COMMA_SOURCE_FILE_AT_LINE (881)) ;
          ::routine_addUnsignedFieldValue (inLexique,  var_cas_fieldMap,  function_lstringWith (inLexique, GGS_string ("ABSOLUTEOFFSET") COMMA_SOURCE_FILE_AT_LINE (882)),  operand_36439->off COMMA_SOURCE_FILE_AT_LINE (882)) ;
          ::routine_addUnsignedFieldValue (inLexique,  var_cas_fieldMap,  function_lstringWith (inLexique, GGS_string ("RELATIVEOFFSET") COMMA_SOURCE_FILE_AT_LINE (883)),  operand_36439->off.substract_operation (inLexique, var_cas_previousOffset COMMA_SOURCE_FILE_AT_LINE (883)) COMMA_SOURCE_FILE_AT_LINE (883)) ;
          var_cas_previousOffset = operand_36439->off ;
          GGS_goilTemplateFieldMapList  var_cas_actionsList = GGS_goilTemplateFieldMapList ::constructor_emptyList () ;
          {
            GGS_action_list::cEnumerator enumerator_36874 (operand_36439->point.reader_actions (inLexique COMMA_SOURCE_FILE_AT_LINE (888)), true) ;
            const GGS_action_list::cElement * operand_36874 = NULL ;
            while (((operand_36874 = enumerator_36874.nextObject ()))) {
              macroValidPointer (operand_36874) ;
              GGS_goilTemplateFieldMap  var_cas_fieldMap = GGS_goilTemplateFieldMap ::constructor_emptyMap (inLexique COMMA_SOURCE_FILE_AT_LINE (889)) ;
              ::routine_setAction (inLexique,  var_cas_fieldMap,  operand_36874->actionobj COMMA_SOURCE_FILE_AT_LINE (890)) ;
              var_cas_actionsList.addAssign_operation (var_cas_fieldMap) ;
            }
          }
          ::routine_addListFieldValue (inLexique,  var_cas_fieldMap,  function_lstringWith (inLexique, GGS_string ("ACTIONS") COMMA_SOURCE_FILE_AT_LINE (893)),  var_cas_actionsList COMMA_SOURCE_FILE_AT_LINE (893)) ;
          GGS_luint64  var_cas_maxAdvance = GGS_luint64 ::constructor_new (inLexique, GGS_uint64 (0ULL), GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (895)) ;
          GGS_luint64  var_cas_maxRetard = GGS_luint64 ::constructor_new (inLexique, GGS_uint64 (0ULL), GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (896)) ;
          { const GGS_adjustable_obj _var_37503 = operand_36439->point.reader_adjust (inLexique COMMA_SOURCE_FILE_AT_LINE (897)) ; // CAST instruction
            if (_var_37503.getPtr () != NULL) {
              macroValidPointer (_var_37503.getPtr ()) ;
              if (typeid (cPtr_adjustable_true) == typeid (* (_var_37503.getPtr ()))) {
                const GGS_adjustable_true var_cas_adjustableExpiryPoint (_var_37503.getPtr ()) ;
                var_cas_maxAdvance = function_luint64OrError (inLexique, var_cas_adjustableExpiryPoint.reader_max_advance (inLexique COMMA_SOURCE_FILE_AT_LINE (899)), GGS_string ("MAX_ADVANCE") COMMA_SOURCE_FILE_AT_LINE (899)) ;
                var_cas_maxRetard = function_luint64OrError (inLexique, var_cas_adjustableExpiryPoint.reader_max_retard (inLexique COMMA_SOURCE_FILE_AT_LINE (900)), GGS_string ("MAX_RETARD") COMMA_SOURCE_FILE_AT_LINE (900)) ;
              }else{
              }
            }
          }
          ::routine_addLUnsignedFieldValue (inLexique,  var_cas_fieldMap,  GGS_string ("MAXRETARD"),  var_cas_maxRetard COMMA_SOURCE_FILE_AT_LINE (902)) ;
          ::routine_addLUnsignedFieldValue (inLexique,  var_cas_fieldMap,  GGS_string ("MAXADVANCE"),  var_cas_maxAdvance COMMA_SOURCE_FILE_AT_LINE (903)) ;
          var_cas_expiryPointsList.addAssign_operation (var_cas_fieldMap) ;
        }
      }
      ::routine_addListFieldValue (inLexique,  var_cas_fieldMap,  function_lstringWith (inLexique, GGS_string ("EXPIRYPOINTS") COMMA_SOURCE_FILE_AT_LINE (907)),  var_cas_expiryPointsList COMMA_SOURCE_FILE_AT_LINE (907)) ;
      ::routine_setAppRelatedAttributes (inLexique,  var_cas_fieldMap,  var_cas_cpu,  var_cas_appForObj,  operand_32634->mKey COMMA_SOURCE_FILE_AT_LINE (909)) ;
      var_cas_scheduletablesList.addAssign_operation (var_cas_fieldMap) ;
    }
  }
  ::routine_addListValue (inLexique,  var_cas_cfg,  function_lstringWith (inLexique, GGS_string ("SCHEDULETABLES") COMMA_SOURCE_FILE_AT_LINE (913)),  var_cas_scheduletablesList COMMA_SOURCE_FILE_AT_LINE (913)) ;
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_setScheduletablesList\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//             Implementation of routine "computeBinaryVector"               *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_computeBinaryVector (C_Compiler & inLexique,
                                const GGS_string  var_cas_vec,
                                GGS_string & var_cas_res,
                                GGS_uint  & var_cas_byteCount
                        COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_computeBinaryVector at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  var_cas_byteCount = var_cas_vec.reader_length ().divide_operation (inLexique, GGS_uint (8U) COMMA_SOURCE_FILE_AT_LINE (929)) ;
  const GGS_bool cond_38344 = (var_cas_vec.reader_length ().modulo_operation (inLexique, GGS_uint (8U) COMMA_SOURCE_FILE_AT_LINE (930))).operator_isNotEqual (GGS_uint (0U)) ;
  if (cond_38344.isBuiltAndTrue ()) {
    var_cas_byteCount.increment_operation (inLexique COMMA_SOURCE_FILE_AT_LINE (930)) ;
  }
  GGS_stringlist  var_cas_data = GGS_stringlist ::constructor_emptyList () ;
  GGS_uint  var_cas_i = GGS_uint (0U) ;
  GGS_uint  var_cas_start = GGS_uint (0U) ;
  GGS_uint _variant_38895 = var_cas_byteCount ;
  GGS_bool _condition_38895 (_variant_38895.isBuilt (), true) ;
  while (_condition_38895.isBuiltAndTrue ()) {
    _condition_38895 = (var_cas_i).operator_strictInf (var_cas_byteCount) ;
    if (_condition_38895.isBuiltAndTrue ()) {
      if (_variant_38895.uintValue () == 0) {
        inLexique.onTheFlyRunTimeError ("loop variant error" COMMA_SOURCE_FILE_AT_LINE (955)) ;
        _condition_38895 = GGS_bool (false) ;
      }else{
        _variant_38895.decrement_operation (inLexique COMMA_HERE) ;
        GGS_string var_cas_byte = var_cas_vec.reader_subString (var_cas_start, GGS_uint (8U)).reader_reversedString () ;
        GGS_uint  var_cas_bitPos = GGS_uint (0U) ;
        GGS_uint  var_cas_val = GGS_uint (0U) ;
        GGS_uint _variant_38819 = GGS_uint (8U) ;
        GGS_bool _condition_38819 (_variant_38819.isBuilt (), true) ;
        while (_condition_38819.isBuiltAndTrue ()) {
          _condition_38819 = (var_cas_bitPos).operator_strictInf (var_cas_byte.reader_length ()) ;
          if (_condition_38819.isBuiltAndTrue ()) {
            if (_variant_38819.uintValue () == 0) {
              inLexique.onTheFlyRunTimeError ("loop variant error" COMMA_SOURCE_FILE_AT_LINE (951)) ;
              _condition_38819 = GGS_bool (false) ;
            }else{
              _variant_38819.decrement_operation (inLexique COMMA_HERE) ;
              GGS_char var_cas_bit = var_cas_byte.reader_characterAtIndex (inLexique, var_cas_bitPos COMMA_SOURCE_FILE_AT_LINE (945)) ;
              var_cas_val = var_cas_val.left_shift_operation (inLexique, GGS_uint (1U) COMMA_SOURCE_FILE_AT_LINE (946)) ;
              const GGS_bool cond_38789 = (var_cas_bit).operator_isEqual (GGS_char (TO_UNICODE ('1'))) ;
              if (cond_38789.isBuiltAndTrue ()) {
                var_cas_val.increment_operation (inLexique COMMA_SOURCE_FILE_AT_LINE (948)) ;
              }
              var_cas_bitPos.increment_operation (inLexique COMMA_SOURCE_FILE_AT_LINE (950)) ;
            }
          }
        }
        var_cas_data.addAssign_operation (var_cas_val.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (952))) ;
        var_cas_i.increment_operation (inLexique COMMA_SOURCE_FILE_AT_LINE (953)) ;
        var_cas_start = var_cas_start.add_operation (inLexique, GGS_uint (8U) COMMA_SOURCE_FILE_AT_LINE (954)) ;
      }
    }
  }
  var_cas_res = GGS_string::constructor_componentsJoinedByString (inLexique, var_cas_data, GGS_string (", ") COMMA_SOURCE_FILE_AT_LINE (956)) ;
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_computeBinaryVector\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//                Implementation of routine "computeVector"                  *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_computeVector (C_Compiler & inLexique,
                                GGS_string & var_cas_vector,
                                const GGS_lstring   var_cas_objectName,
                                const GGS_lstring   var_cas_applicationName,
                                const GGS_lstringlist   var_cas_ownedObjects,
                                const GGS_lstringlist   var_cas_accessingObjects
                        COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_computeVector at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  const GGS_bool cond_39215 = function_isInLstringlist (inLexique, var_cas_ownedObjects, var_cas_objectName COMMA_SOURCE_FILE_AT_LINE (966)) ;
  if (cond_39215.isBuiltAndTrue ()) {
    var_cas_vector.appendCString ("11") ;
  }else if (cond_39215.isBuiltAndFalse ()) {
    var_cas_vector.appendCString ("0") ;
    const GGS_bool cond_39367 = function_isInLstringlist (inLexique, var_cas_accessingObjects, var_cas_applicationName COMMA_SOURCE_FILE_AT_LINE (971)) ;
    if (cond_39367.isBuiltAndTrue ()) {
      var_cas_vector.appendCString ("1") ;
    }else if (cond_39367.isBuiltAndFalse ()) {
      var_cas_vector.appendCString ("0") ;
    }
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_computeVector\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//            Implementation of routine "setOsapplicationsList"              *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_setOsapplicationsList (C_Compiler & inLexique,
                                const GGS_root_obj   var_cas_cpu,
                                const GGS_stringMap   /* var_cas_appForObj */,
                                GGS_goilTemplateVariableMap  & var_cas_cfg
                        COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_setOsapplicationsList at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  GGS_goilTemplateFieldMapList  var_cas_osapplicationsList = GGS_goilTemplateFieldMapList ::constructor_emptyList () ;
  GGS_stringset  var_cas_trustedFunctionSet = GGS_stringset ::constructor_emptySet () ;
  GGS_tasks_by_type  var_cas_allTaskList = function_orderedTaskList (inLexique, var_cas_cpu COMMA_SOURCE_FILE_AT_LINE (987)) ;
  {
    GGS_app_map::cEnumerator enumerator_39713 (var_cas_cpu.reader_applis (inLexique COMMA_SOURCE_FILE_AT_LINE (988)), true) ;
    const GGS_app_map::cElement * operand_39713 = NULL ;
    while (((operand_39713 = enumerator_39713.nextObject ()))) {
      macroValidPointer (operand_39713) ;
      GGS_goilTemplateFieldMap  var_cas_fieldMap = GGS_goilTemplateFieldMap ::constructor_emptyMap (inLexique COMMA_SOURCE_FILE_AT_LINE (989)) ;
      ::routine_addStringFieldValue (inLexique,  var_cas_fieldMap,  function_lstringWith (inLexique, GGS_string ("NAME") COMMA_SOURCE_FILE_AT_LINE (990)),  operand_39713->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (990)) COMMA_SOURCE_FILE_AT_LINE (990)) ;
      { const GGS_basic_type _var_40134 = operand_39713->mInfo.app.reader_restart (inLexique COMMA_SOURCE_FILE_AT_LINE (993)) ; // CAST instruction
        if (_var_40134.getPtr () != NULL) {
          macroValidPointer (_var_40134.getPtr ()) ;
          if (typeid (cPtr_string_class) == typeid (* (_var_40134.getPtr ()))) {
            const GGS_string_class var_cas_restartTask (_var_40134.getPtr ()) ;
            ::routine_addStringFieldValue (inLexique,  var_cas_fieldMap,  GGS_lstring ::constructor_new (inLexique, GGS_string ("RESTART"), var_cas_restartTask.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (995)) COMMA_SOURCE_FILE_AT_LINE (995)),  var_cas_restartTask.reader_value (inLexique COMMA_SOURCE_FILE_AT_LINE (995)) COMMA_SOURCE_FILE_AT_LINE (995)) ;
          }else{
          }
        }
      }
      GGS_bool var_cas_hasStartup ;
      { const GGS_basic_type _var_40342 = operand_39713->mInfo.app.reader_startuphook (inLexique COMMA_SOURCE_FILE_AT_LINE (999)) ; // CAST instruction
        if (_var_40342.getPtr () != NULL) {
          macroValidPointer (_var_40342.getPtr ()) ;
          if (typeid (cPtr_bool_class) == typeid (* (_var_40342.getPtr ()))) {
            const GGS_bool_class var_cas_startup (_var_40342.getPtr ()) ;
            var_cas_hasStartup = var_cas_startup.reader_value (inLexique COMMA_SOURCE_FILE_AT_LINE (1001)) ;
          }else{
            var_cas_hasStartup = GGS_bool (false) ;
          }
        }
      }
      ::routine_addBoolFieldValue (inLexique,  var_cas_fieldMap,  GGS_lstring ::constructor_new (inLexique, GGS_string ("HASSTARTUPHOOK"), operand_39713->mInfo.app.reader_startuphook (inLexique COMMA_SOURCE_FILE_AT_LINE (1005)).reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (1005)) COMMA_SOURCE_FILE_AT_LINE (1005)),  var_cas_hasStartup COMMA_SOURCE_FILE_AT_LINE (1005)) ;
      GGS_bool var_cas_hasShutdown ;
      { const GGS_basic_type _var_40678 = operand_39713->mInfo.app.reader_shutdownhook (inLexique COMMA_SOURCE_FILE_AT_LINE (1008)) ; // CAST instruction
        if (_var_40678.getPtr () != NULL) {
          macroValidPointer (_var_40678.getPtr ()) ;
          if (typeid (cPtr_bool_class) == typeid (* (_var_40678.getPtr ()))) {
            const GGS_bool_class var_cas_shutdown (_var_40678.getPtr ()) ;
            var_cas_hasShutdown = var_cas_shutdown.reader_value (inLexique COMMA_SOURCE_FILE_AT_LINE (1010)) ;
          }else{
            var_cas_hasShutdown = GGS_bool (false) ;
          }
        }
      }
      ::routine_addBoolFieldValue (inLexique,  var_cas_fieldMap,  GGS_lstring ::constructor_new (inLexique, GGS_string ("HASSHUTDOWNHOOK"), operand_39713->mInfo.app.reader_shutdownhook (inLexique COMMA_SOURCE_FILE_AT_LINE (1014)).reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (1014)) COMMA_SOURCE_FILE_AT_LINE (1014)),  var_cas_hasShutdown COMMA_SOURCE_FILE_AT_LINE (1014)) ;
      GGS_string var_cas_vector = GGS_string ("") ;
      GGS_string var_cas_binaryVector ;
      GGS_uint  var_cas_numberOfItems ;
      GGS_task_map  var_cas_allTasks = var_cas_cpu.reader_tasks (inLexique COMMA_SOURCE_FILE_AT_LINE (1023)) ;
      {
        GGS_tasks_by_type::cEnumerator enumerator_41040 (var_cas_allTaskList, true) ;
        const GGS_tasks_by_type::cElement * operand_41040 = NULL ;
        while (((operand_41040 = enumerator_41040.nextObject ()))) {
          macroValidPointer (operand_41040) ;
          GGS_task_obj  var_cas_taskItem ;
          if (var_cas_allTasks.isBuilt ()) {
            var_cas_allTasks (HERE)->method_get (inLexique, function_lstringWith (inLexique, operand_41040->name COMMA_SOURCE_FILE_AT_LINE (1026)), var_cas_taskItem COMMA_SOURCE_FILE_AT_LINE (1026)) ;
          }
          ::routine_computeVector (inLexique,  var_cas_vector,  function_lstringWith (inLexique, operand_41040->name COMMA_SOURCE_FILE_AT_LINE (1027)),  operand_39713->mKey,  operand_39713->mInfo.app.reader_tasks (inLexique COMMA_SOURCE_FILE_AT_LINE (1027)).reader_allKeyList (inLexique COMMA_SOURCE_FILE_AT_LINE (1027)),  var_cas_taskItem.reader_acc_apps (inLexique COMMA_SOURCE_FILE_AT_LINE (1027)) COMMA_SOURCE_FILE_AT_LINE (1027)) ;
        }
      }
      {
        GGS_isr_map::cEnumerator enumerator_41315 (var_cas_cpu.reader_isrs (inLexique COMMA_SOURCE_FILE_AT_LINE (1030)), true) ;
        const GGS_isr_map::cElement * operand_41315 = NULL ;
        while (((operand_41315 = enumerator_41315.nextObject ()))) {
          macroValidPointer (operand_41315) ;
          ::routine_computeVector (inLexique,  var_cas_vector,  operand_41315->mKey,  operand_39713->mKey,  operand_39713->mInfo.app.reader_isrs (inLexique COMMA_SOURCE_FILE_AT_LINE (1031)).reader_allKeyList (inLexique COMMA_SOURCE_FILE_AT_LINE (1031)),  operand_41315->mInfo.isr.reader_acc_apps (inLexique COMMA_SOURCE_FILE_AT_LINE (1031)) COMMA_SOURCE_FILE_AT_LINE (1031)) ;
        }
      }
      var_cas_vector.appendCString ("01") ;
      ::routine_addStringFieldValue (inLexique,  var_cas_fieldMap,  function_lstringWith (inLexique, GGS_string ("PROCESSACCESSVECTOR") COMMA_SOURCE_FILE_AT_LINE (1035)),  var_cas_vector COMMA_SOURCE_FILE_AT_LINE (1035)) ;
      ::routine_computeBinaryVector (inLexique,  var_cas_vector,  var_cas_binaryVector,  var_cas_numberOfItems COMMA_SOURCE_FILE_AT_LINE (1036)) ;
      ::routine_addStringFieldValue (inLexique,  var_cas_fieldMap,  function_lstringWith (inLexique, GGS_string ("PROCESSACCESSITEMS") COMMA_SOURCE_FILE_AT_LINE (1037)),  var_cas_binaryVector COMMA_SOURCE_FILE_AT_LINE (1037)) ;
      ::routine_addUnsignedFieldValue (inLexique,  var_cas_fieldMap,  function_lstringWith (inLexique, GGS_string ("PROCESSACCESSNUM") COMMA_SOURCE_FILE_AT_LINE (1038)),  var_cas_numberOfItems.reader_uint64 (inLexique COMMA_SOURCE_FILE_AT_LINE (1038)) COMMA_SOURCE_FILE_AT_LINE (1038)) ;
      var_cas_vector = GGS_string ("") ;
      {
        GGS_alarm_map::cEnumerator enumerator_41955 (var_cas_cpu.reader_alarms (inLexique COMMA_SOURCE_FILE_AT_LINE (1042)), true) ;
        const GGS_alarm_map::cElement * operand_41955 = NULL ;
        while (((operand_41955 = enumerator_41955.nextObject ()))) {
          macroValidPointer (operand_41955) ;
          ::routine_computeVector (inLexique,  var_cas_vector,  operand_41955->mKey,  operand_39713->mKey,  operand_39713->mInfo.app.reader_alarms (inLexique COMMA_SOURCE_FILE_AT_LINE (1043)).reader_allKeyList (inLexique COMMA_SOURCE_FILE_AT_LINE (1043)),  operand_41955->mInfo.alarm.reader_acc_apps (inLexique COMMA_SOURCE_FILE_AT_LINE (1043)) COMMA_SOURCE_FILE_AT_LINE (1043)) ;
        }
      }
      ::routine_addStringFieldValue (inLexique,  var_cas_fieldMap,  function_lstringWith (inLexique, GGS_string ("ALARMACCESSVECTOR") COMMA_SOURCE_FILE_AT_LINE (1045)),  var_cas_vector COMMA_SOURCE_FILE_AT_LINE (1045)) ;
      ::routine_computeBinaryVector (inLexique,  var_cas_vector,  var_cas_binaryVector,  var_cas_numberOfItems COMMA_SOURCE_FILE_AT_LINE (1046)) ;
      ::routine_addStringFieldValue (inLexique,  var_cas_fieldMap,  function_lstringWith (inLexique, GGS_string ("ALARMACCESSITEMS") COMMA_SOURCE_FILE_AT_LINE (1047)),  var_cas_binaryVector COMMA_SOURCE_FILE_AT_LINE (1047)) ;
      ::routine_addUnsignedFieldValue (inLexique,  var_cas_fieldMap,  function_lstringWith (inLexique, GGS_string ("ALARMACCESSNUM") COMMA_SOURCE_FILE_AT_LINE (1048)),  var_cas_numberOfItems.reader_uint64 (inLexique COMMA_SOURCE_FILE_AT_LINE (1048)) COMMA_SOURCE_FILE_AT_LINE (1048)) ;
      var_cas_vector = GGS_string ("") ;
      {
        GGS_resource_map::cEnumerator enumerator_42490 (var_cas_cpu.reader_resources (inLexique COMMA_SOURCE_FILE_AT_LINE (1052)), true) ;
        const GGS_resource_map::cElement * operand_42490 = NULL ;
        while (((operand_42490 = enumerator_42490.nextObject ()))) {
          macroValidPointer (operand_42490) ;
          ::routine_computeVector (inLexique,  var_cas_vector,  operand_42490->mKey,  operand_39713->mKey,  operand_39713->mInfo.app.reader_resources (inLexique COMMA_SOURCE_FILE_AT_LINE (1053)).reader_allKeyList (inLexique COMMA_SOURCE_FILE_AT_LINE (1053)),  operand_42490->mInfo.resource.reader_acc_apps (inLexique COMMA_SOURCE_FILE_AT_LINE (1053)) COMMA_SOURCE_FILE_AT_LINE (1053)) ;
        }
      }
      var_cas_vector.appendCString ("10") ;
      ::routine_addStringFieldValue (inLexique,  var_cas_fieldMap,  function_lstringWith (inLexique, GGS_string ("RESOURCEACCESSVECTOR") COMMA_SOURCE_FILE_AT_LINE (1058)),  var_cas_vector COMMA_SOURCE_FILE_AT_LINE (1058)) ;
      ::routine_computeBinaryVector (inLexique,  var_cas_vector,  var_cas_binaryVector,  var_cas_numberOfItems COMMA_SOURCE_FILE_AT_LINE (1059)) ;
      ::routine_addStringFieldValue (inLexique,  var_cas_fieldMap,  function_lstringWith (inLexique, GGS_string ("RESOURCEACCESSITEMS") COMMA_SOURCE_FILE_AT_LINE (1060)),  var_cas_binaryVector COMMA_SOURCE_FILE_AT_LINE (1060)) ;
      ::routine_addUnsignedFieldValue (inLexique,  var_cas_fieldMap,  function_lstringWith (inLexique, GGS_string ("RESOURCEACCESSNUM") COMMA_SOURCE_FILE_AT_LINE (1061)),  var_cas_numberOfItems.reader_uint64 (inLexique COMMA_SOURCE_FILE_AT_LINE (1061)) COMMA_SOURCE_FILE_AT_LINE (1061)) ;
      var_cas_vector = GGS_string ("") ;
      {
        GGS_scheduletable_map::cEnumerator enumerator_43154 (var_cas_cpu.reader_scheduletables (inLexique COMMA_SOURCE_FILE_AT_LINE (1065)), true) ;
        const GGS_scheduletable_map::cElement * operand_43154 = NULL ;
        while (((operand_43154 = enumerator_43154.nextObject ()))) {
          macroValidPointer (operand_43154) ;
          ::routine_computeVector (inLexique,  var_cas_vector,  operand_43154->mKey,  operand_39713->mKey,  operand_39713->mInfo.app.reader_scheduletables (inLexique COMMA_SOURCE_FILE_AT_LINE (1066)).reader_allKeyList (inLexique COMMA_SOURCE_FILE_AT_LINE (1066)),  operand_43154->mInfo.scheduletable.reader_acc_apps (inLexique COMMA_SOURCE_FILE_AT_LINE (1066)) COMMA_SOURCE_FILE_AT_LINE (1066)) ;
        }
      }
      ::routine_addStringFieldValue (inLexique,  var_cas_fieldMap,  function_lstringWith (inLexique, GGS_string ("SCHEDULETABLEACCESSVECTOR") COMMA_SOURCE_FILE_AT_LINE (1068)),  var_cas_vector COMMA_SOURCE_FILE_AT_LINE (1068)) ;
      ::routine_computeBinaryVector (inLexique,  var_cas_vector,  var_cas_binaryVector,  var_cas_numberOfItems COMMA_SOURCE_FILE_AT_LINE (1069)) ;
      ::routine_addStringFieldValue (inLexique,  var_cas_fieldMap,  function_lstringWith (inLexique, GGS_string ("SCHEDULETABLEACCESSITEMS") COMMA_SOURCE_FILE_AT_LINE (1070)),  var_cas_binaryVector COMMA_SOURCE_FILE_AT_LINE (1070)) ;
      ::routine_addUnsignedFieldValue (inLexique,  var_cas_fieldMap,  function_lstringWith (inLexique, GGS_string ("SCHEDULETABLEACCESSNUM") COMMA_SOURCE_FILE_AT_LINE (1071)),  var_cas_numberOfItems.reader_uint64 (inLexique COMMA_SOURCE_FILE_AT_LINE (1071)) COMMA_SOURCE_FILE_AT_LINE (1071)) ;
      var_cas_vector = GGS_string ("") ;
      {
        GGS_counter_map::cEnumerator enumerator_43740 (var_cas_cpu.reader_counters (inLexique COMMA_SOURCE_FILE_AT_LINE (1075)), true) ;
        const GGS_counter_map::cElement * operand_43740 = NULL ;
        while (((operand_43740 = enumerator_43740.nextObject ()))) {
          macroValidPointer (operand_43740) ;
          ::routine_computeVector (inLexique,  var_cas_vector,  operand_43740->mKey,  operand_39713->mKey,  operand_39713->mInfo.app.reader_counters (inLexique COMMA_SOURCE_FILE_AT_LINE (1076)).reader_allKeyList (inLexique COMMA_SOURCE_FILE_AT_LINE (1076)),  operand_43740->mInfo.counter.reader_acc_apps (inLexique COMMA_SOURCE_FILE_AT_LINE (1076)) COMMA_SOURCE_FILE_AT_LINE (1076)) ;
        }
      }
      ::routine_addStringFieldValue (inLexique,  var_cas_fieldMap,  function_lstringWith (inLexique, GGS_string ("COUNTERACCESSVECTOR") COMMA_SOURCE_FILE_AT_LINE (1078)),  var_cas_vector COMMA_SOURCE_FILE_AT_LINE (1078)) ;
      ::routine_computeBinaryVector (inLexique,  var_cas_vector,  var_cas_binaryVector,  var_cas_numberOfItems COMMA_SOURCE_FILE_AT_LINE (1079)) ;
      ::routine_addStringFieldValue (inLexique,  var_cas_fieldMap,  function_lstringWith (inLexique, GGS_string ("COUNTERACCESSITEMS") COMMA_SOURCE_FILE_AT_LINE (1080)),  var_cas_binaryVector COMMA_SOURCE_FILE_AT_LINE (1080)) ;
      ::routine_addUnsignedFieldValue (inLexique,  var_cas_fieldMap,  function_lstringWith (inLexique, GGS_string ("COUNTERACCESSNUM") COMMA_SOURCE_FILE_AT_LINE (1081)),  var_cas_numberOfItems.reader_uint64 (inLexique COMMA_SOURCE_FILE_AT_LINE (1081)) COMMA_SOURCE_FILE_AT_LINE (1081)) ;
      GGS_goilTemplateFieldMapList  var_cas_procList = GGS_goilTemplateFieldMapList ::constructor_emptyList () ;
      GGS_goilTemplateFieldMapList  var_cas_taskList = GGS_goilTemplateFieldMapList ::constructor_emptyList () ;
      GGS_goilTemplateFieldMapList  var_cas_isrList = GGS_goilTemplateFieldMapList ::constructor_emptyList () ;
      {
        GGS_ident_map::cEnumerator enumerator_44416 (operand_39713->mInfo.app.reader_tasks (inLexique COMMA_SOURCE_FILE_AT_LINE (1087)), true) ;
        const GGS_ident_map::cElement * operand_44416 = NULL ;
        while (((operand_44416 = enumerator_44416.nextObject ()))) {
          macroValidPointer (operand_44416) ;
          GGS_goilTemplateFieldMap  var_cas_taskFieldMap = GGS_goilTemplateFieldMap ::constructor_emptyMap (inLexique COMMA_SOURCE_FILE_AT_LINE (1088)) ;
          ::routine_addStringFieldValue (inLexique,  var_cas_taskFieldMap,  GGS_lstring ::constructor_new (inLexique, GGS_string ("NAME"), operand_44416->mKey.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (1089)) COMMA_SOURCE_FILE_AT_LINE (1089)),  operand_44416->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1089)) COMMA_SOURCE_FILE_AT_LINE (1089)) ;
          var_cas_procList.addAssign_operation (var_cas_taskFieldMap) ;
          var_cas_taskList.addAssign_operation (var_cas_taskFieldMap) ;
        }
      }
      {
        GGS_ident_map::cEnumerator enumerator_44685 (operand_39713->mInfo.app.reader_isrs (inLexique COMMA_SOURCE_FILE_AT_LINE (1093)), true) ;
        const GGS_ident_map::cElement * operand_44685 = NULL ;
        while (((operand_44685 = enumerator_44685.nextObject ()))) {
          macroValidPointer (operand_44685) ;
          GGS_goilTemplateFieldMap  var_cas_isrFieldMap = GGS_goilTemplateFieldMap ::constructor_emptyMap (inLexique COMMA_SOURCE_FILE_AT_LINE (1094)) ;
          ::routine_addStringFieldValue (inLexique,  var_cas_isrFieldMap,  GGS_lstring ::constructor_new (inLexique, GGS_string ("NAME"), operand_44685->mKey.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (1095)) COMMA_SOURCE_FILE_AT_LINE (1095)),  operand_44685->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1095)) COMMA_SOURCE_FILE_AT_LINE (1095)) ;
          GGS_isr_obj  var_cas_isr ;
          const GGS_isr_map  temp_44896 = var_cas_cpu.reader_isrs (inLexique COMMA_SOURCE_FILE_AT_LINE (1097)) ;
          if (temp_44896.isBuilt ()) {
            temp_44896 (HERE)->method_get (inLexique, operand_44685->mKey, var_cas_isr COMMA_SOURCE_FILE_AT_LINE (1097)) ;
          }
          { const GGS_basic_type _var_45150 = var_cas_isr.reader_category (inLexique COMMA_SOURCE_FILE_AT_LINE (1098)) ; // CAST instruction
            if (_var_45150.getPtr () != NULL) {
              macroValidPointer (_var_45150.getPtr ()) ;
              if (typeid (cPtr_uint64_class) == typeid (* (_var_45150.getPtr ()))) {
                const GGS_uint64_class var_cas_cat (_var_45150.getPtr ()) ;
                const GGS_bool cond_45131 = (var_cas_cat.reader_value (inLexique COMMA_SOURCE_FILE_AT_LINE (1100))).operator_isEqual (GGS_uint64 (2ULL)) ;
                if (cond_45131.isBuiltAndTrue ()) {
                  var_cas_procList.addAssign_operation (var_cas_isrFieldMap) ;
                }
              }else{
              }
            }
          }
          var_cas_isrList.addAssign_operation (var_cas_isrFieldMap) ;
        }
      }
      ::routine_addListFieldValue (inLexique,  var_cas_fieldMap,  function_lstringWith (inLexique, GGS_string ("PROCESSES") COMMA_SOURCE_FILE_AT_LINE (1108)),  var_cas_procList COMMA_SOURCE_FILE_AT_LINE (1108)) ;
      ::routine_addListFieldValue (inLexique,  var_cas_fieldMap,  function_lstringWith (inLexique, GGS_string ("TASKS") COMMA_SOURCE_FILE_AT_LINE (1109)),  var_cas_taskList COMMA_SOURCE_FILE_AT_LINE (1109)) ;
      ::routine_addListFieldValue (inLexique,  var_cas_fieldMap,  function_lstringWith (inLexique, GGS_string ("ISRS") COMMA_SOURCE_FILE_AT_LINE (1110)),  var_cas_isrList COMMA_SOURCE_FILE_AT_LINE (1110)) ;
      GGS_goilTemplateFieldMapList  var_cas_alarmList = GGS_goilTemplateFieldMapList ::constructor_emptyList () ;
      {
        GGS_ident_map::cEnumerator enumerator_45509 (operand_39713->mInfo.app.reader_alarms (inLexique COMMA_SOURCE_FILE_AT_LINE (1114)), true) ;
        const GGS_ident_map::cElement * operand_45509 = NULL ;
        while (((operand_45509 = enumerator_45509.nextObject ()))) {
          macroValidPointer (operand_45509) ;
          GGS_goilTemplateFieldMap  var_cas_alarmFieldMap = GGS_goilTemplateFieldMap ::constructor_emptyMap (inLexique COMMA_SOURCE_FILE_AT_LINE (1115)) ;
          ::routine_addStringFieldValue (inLexique,  var_cas_alarmFieldMap,  GGS_lstring ::constructor_new (inLexique, GGS_string ("NAME"), operand_45509->mKey.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (1116)) COMMA_SOURCE_FILE_AT_LINE (1116)),  operand_45509->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1116)) COMMA_SOURCE_FILE_AT_LINE (1116)) ;
          var_cas_alarmList.addAssign_operation (var_cas_alarmFieldMap) ;
        }
      }
      ::routine_addListFieldValue (inLexique,  var_cas_fieldMap,  function_lstringWith (inLexique, GGS_string ("ALARMS") COMMA_SOURCE_FILE_AT_LINE (1119)),  var_cas_alarmList COMMA_SOURCE_FILE_AT_LINE (1119)) ;
      GGS_goilTemplateFieldMapList  var_cas_resourcesList = GGS_goilTemplateFieldMapList ::constructor_emptyList () ;
      GGS_goilTemplateFieldMapList  var_cas_regularResourcesList = GGS_goilTemplateFieldMapList ::constructor_emptyList () ;
      GGS_goilTemplateFieldMapList  var_cas_internalResourcesList = GGS_goilTemplateFieldMapList ::constructor_emptyList () ;
      {
        GGS_ident_map::cEnumerator enumerator_46042 (operand_39713->mInfo.app.reader_resources (inLexique COMMA_SOURCE_FILE_AT_LINE (1125)), true) ;
        const GGS_ident_map::cElement * operand_46042 = NULL ;
        while (((operand_46042 = enumerator_46042.nextObject ()))) {
          macroValidPointer (operand_46042) ;
          GGS_goilTemplateFieldMap  var_cas_resourceFieldMap = GGS_goilTemplateFieldMap ::constructor_emptyMap (inLexique COMMA_SOURCE_FILE_AT_LINE (1126)) ;
          ::routine_addStringFieldValue (inLexique,  var_cas_resourceFieldMap,  GGS_lstring ::constructor_new (inLexique, GGS_string ("NAME"), operand_46042->mKey.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (1127)) COMMA_SOURCE_FILE_AT_LINE (1127)),  operand_46042->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1127)) COMMA_SOURCE_FILE_AT_LINE (1127)) ;
          var_cas_resourcesList.addAssign_operation (var_cas_resourceFieldMap) ;
          GGS_resource_map  var_cas_allResources = var_cas_cpu.reader_resources (inLexique COMMA_SOURCE_FILE_AT_LINE (1129)) ;
          GGS_resource_obj  var_cas_resource ;
          if (var_cas_allResources.isBuilt ()) {
            var_cas_allResources (HERE)->method_get (inLexique, operand_46042->mKey, var_cas_resource COMMA_SOURCE_FILE_AT_LINE (1131)) ;
          }
          { const GGS_resource_property_obj _var_46598 = var_cas_resource.reader_property (inLexique COMMA_SOURCE_FILE_AT_LINE (1132)) ; // CAST instruction
            if (_var_46598.getPtr () != NULL) {
              macroValidPointer (_var_46598.getPtr ()) ;
              if (typeid (cPtr_resource_property_internal_obj) == typeid (* (_var_46598.getPtr ()))) {
                var_cas_internalResourcesList.addAssign_operation (var_cas_resourceFieldMap) ;
              }else{
                var_cas_regularResourcesList.addAssign_operation (var_cas_resourceFieldMap) ;
              }
            }
          }
        }
      }
      ::routine_addListFieldValue (inLexique,  var_cas_fieldMap,  function_lstringWith (inLexique, GGS_string ("RESOURCES") COMMA_SOURCE_FILE_AT_LINE (1139)),  var_cas_resourcesList COMMA_SOURCE_FILE_AT_LINE (1139)) ;
      ::routine_addListFieldValue (inLexique,  var_cas_fieldMap,  function_lstringWith (inLexique, GGS_string ("REGULARRESOURCES") COMMA_SOURCE_FILE_AT_LINE (1140)),  var_cas_regularResourcesList COMMA_SOURCE_FILE_AT_LINE (1140)) ;
      ::routine_addListFieldValue (inLexique,  var_cas_fieldMap,  function_lstringWith (inLexique, GGS_string ("INTERNALRESOURCES") COMMA_SOURCE_FILE_AT_LINE (1141)),  var_cas_internalResourcesList COMMA_SOURCE_FILE_AT_LINE (1141)) ;
      GGS_goilTemplateFieldMapList  var_cas_scheduletableList = GGS_goilTemplateFieldMapList ::constructor_emptyList () ;
      {
        GGS_ident_map::cEnumerator enumerator_46997 (operand_39713->mInfo.app.reader_scheduletables (inLexique COMMA_SOURCE_FILE_AT_LINE (1145)), true) ;
        const GGS_ident_map::cElement * operand_46997 = NULL ;
        while (((operand_46997 = enumerator_46997.nextObject ()))) {
          macroValidPointer (operand_46997) ;
          GGS_goilTemplateFieldMap  var_cas_scheduletableFieldMap = GGS_goilTemplateFieldMap ::constructor_emptyMap (inLexique COMMA_SOURCE_FILE_AT_LINE (1146)) ;
          ::routine_addStringFieldValue (inLexique,  var_cas_scheduletableFieldMap,  GGS_lstring ::constructor_new (inLexique, GGS_string ("NAME"), operand_46997->mKey.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (1147)) COMMA_SOURCE_FILE_AT_LINE (1147)),  operand_46997->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1147)) COMMA_SOURCE_FILE_AT_LINE (1147)) ;
          var_cas_scheduletableList.addAssign_operation (var_cas_scheduletableFieldMap) ;
        }
      }
      ::routine_addListFieldValue (inLexique,  var_cas_fieldMap,  function_lstringWith (inLexique, GGS_string ("SCHEDULETABLES") COMMA_SOURCE_FILE_AT_LINE (1150)),  var_cas_scheduletableList COMMA_SOURCE_FILE_AT_LINE (1150)) ;
      GGS_goilTemplateFieldMapList  var_cas_counterList = GGS_goilTemplateFieldMapList ::constructor_emptyList () ;
      {
        GGS_ident_map::cEnumerator enumerator_47454 (operand_39713->mInfo.app.reader_counters (inLexique COMMA_SOURCE_FILE_AT_LINE (1154)), true) ;
        const GGS_ident_map::cElement * operand_47454 = NULL ;
        while (((operand_47454 = enumerator_47454.nextObject ()))) {
          macroValidPointer (operand_47454) ;
          GGS_goilTemplateFieldMap  var_cas_counterFieldMap = GGS_goilTemplateFieldMap ::constructor_emptyMap (inLexique COMMA_SOURCE_FILE_AT_LINE (1155)) ;
          ::routine_addStringFieldValue (inLexique,  var_cas_counterFieldMap,  GGS_lstring ::constructor_new (inLexique, GGS_string ("NAME"), operand_47454->mKey.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (1156)) COMMA_SOURCE_FILE_AT_LINE (1156)),  operand_47454->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1156)) COMMA_SOURCE_FILE_AT_LINE (1156)) ;
          var_cas_counterList.addAssign_operation (var_cas_counterFieldMap) ;
        }
      }
      ::routine_addListFieldValue (inLexique,  var_cas_fieldMap,  function_lstringWith (inLexique, GGS_string ("COUNTERS") COMMA_SOURCE_FILE_AT_LINE (1159)),  var_cas_counterList COMMA_SOURCE_FILE_AT_LINE (1159)) ;
      GGS_goilTemplateFieldMapList  var_cas_messageList = GGS_goilTemplateFieldMapList ::constructor_emptyList () ;
      {
        GGS_ident_map::cEnumerator enumerator_47869 (operand_39713->mInfo.app.reader_messages (inLexique COMMA_SOURCE_FILE_AT_LINE (1163)), true) ;
        const GGS_ident_map::cElement * operand_47869 = NULL ;
        while (((operand_47869 = enumerator_47869.nextObject ()))) {
          macroValidPointer (operand_47869) ;
          GGS_goilTemplateFieldMap  var_cas_messageFieldMap = GGS_goilTemplateFieldMap ::constructor_emptyMap (inLexique COMMA_SOURCE_FILE_AT_LINE (1164)) ;
          ::routine_addStringFieldValue (inLexique,  var_cas_messageFieldMap,  GGS_lstring ::constructor_new (inLexique, GGS_string ("NAME"), operand_47869->mKey.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (1165)) COMMA_SOURCE_FILE_AT_LINE (1165)),  operand_47869->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1165)) COMMA_SOURCE_FILE_AT_LINE (1165)) ;
          var_cas_messageList.addAssign_operation (var_cas_messageFieldMap) ;
        }
      }
      ::routine_addListFieldValue (inLexique,  var_cas_fieldMap,  function_lstringWith (inLexique, GGS_string ("MESSAGES") COMMA_SOURCE_FILE_AT_LINE (1168)),  var_cas_messageList COMMA_SOURCE_FILE_AT_LINE (1168)) ;
      var_cas_osapplicationsList.addAssign_operation (var_cas_fieldMap) ;
      { const GGS_app_trusted_obj _var_48441 = operand_39713->mInfo.app.reader_trusted (inLexique COMMA_SOURCE_FILE_AT_LINE (1172)) ; // CAST instruction
        if (_var_48441.getPtr () != NULL) {
          macroValidPointer (_var_48441.getPtr ()) ;
          if (typeid (cPtr_app_trusted_true) == typeid (* (_var_48441.getPtr ()))) {
            const GGS_app_trusted_true var_cas_t (_var_48441.getPtr ()) ;
            {
              GGS_stringset::cEnumerator enumerator_48309 (var_cas_t.reader_trusted_fcts (inLexique COMMA_SOURCE_FILE_AT_LINE (1174)), true) ;
              while (enumerator_48309.hasCurrentObject ()) {
                var_cas_trustedFunctionSet.addAssign_operation (enumerator_48309._key (HERE)) ;
                enumerator_48309.next () ;
              }
            }
          }else{
          }
        }
      }
    }
  }
  ::routine_addListValue (inLexique,  var_cas_cfg,  function_lstringWith (inLexique, GGS_string ("OSAPPLICATIONS") COMMA_SOURCE_FILE_AT_LINE (1179)),  var_cas_osapplicationsList COMMA_SOURCE_FILE_AT_LINE (1179)) ;
  GGS_goilTemplateFieldMapList  var_cas_trustedfunctionsList = GGS_goilTemplateFieldMapList ::constructor_emptyList () ;
  {
    GGS_stringset::cEnumerator enumerator_48630 (var_cas_trustedFunctionSet, true) ;
    while (enumerator_48630.hasCurrentObject ()) {
      GGS_goilTemplateFieldMap  var_cas_fieldMap = GGS_goilTemplateFieldMap ::constructor_emptyMap (inLexique COMMA_SOURCE_FILE_AT_LINE (1183)) ;
      ::routine_addStringFieldValue (inLexique,  var_cas_fieldMap,  function_lstringWith (inLexique, GGS_string ("NAME") COMMA_SOURCE_FILE_AT_LINE (1184)),  enumerator_48630._key (HERE) COMMA_SOURCE_FILE_AT_LINE (1184)) ;
      var_cas_trustedfunctionsList.addAssign_operation (var_cas_fieldMap) ;
      enumerator_48630.next () ;
    }
  }
  ::routine_addListValue (inLexique,  var_cas_cfg,  function_lstringWith (inLexique, GGS_string ("TRUSTEDFUNCTIONS") COMMA_SOURCE_FILE_AT_LINE (1187)),  var_cas_trustedfunctionsList COMMA_SOURCE_FILE_AT_LINE (1187)) ;
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_setOsapplicationsList\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//                 Implementation of routine "setReadyList"                  *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_setReadyList (C_Compiler & inLexique,
                                const GGS_root_obj   var_cas_cpu,
                                const GGS_prio_list   var_cas_readyList,
                                GGS_goilTemplateVariableMap  & var_cas_cfg
                        COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_setReadyList at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  GGS_uint  var_cas_prio = GGS_uint (0U) ;
  GGS_bool var_cas_powerof2 = GGS_bool (false) ;
  GGS_ident_map  var_cas_config = var_cas_cpu.reader_os (inLexique COMMA_SOURCE_FILE_AT_LINE (1201)).reader_others (inLexique COMMA_SOURCE_FILE_AT_LINE (1201)) ;
  GGS_goilTemplateFieldMapList  var_cas_fifoList = GGS_goilTemplateFieldMapList ::constructor_emptyList () ;
  const GGS_bool cond_49585 = var_cas_config.reader_hasKey (GGS_string ("POWEROF2QUEUE")) ;
  if (cond_49585.isBuiltAndTrue ()) {
    GGS_basic_type  var_cas_pw ;
    if (var_cas_config.isBuilt ()) {
      var_cas_config (HERE)->method_get (inLexique, GGS_lstring ::constructor_new (inLexique, GGS_string ("POWEROF2QUEUE"), GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (1207)), var_cas_pw COMMA_SOURCE_FILE_AT_LINE (1207)) ;
    }
    { const GGS_basic_type _var_49573 = var_cas_pw ; // CAST instruction
      if (_var_49573.getPtr () != NULL) {
        macroValidPointer (_var_49573.getPtr ()) ;
        if (typeid (cPtr_bool_class) == typeid (* (_var_49573.getPtr ()))) {
          const GGS_bool_class var_cas_b (_var_49573.getPtr ()) ;
          var_cas_powerof2 = var_cas_b.reader_value (inLexique COMMA_SOURCE_FILE_AT_LINE (1210)) ;
        }else{
          var_cas_pw.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (1212)).reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("POWEROF2QUEUE should be a boolean") COMMA_SOURCE_FILE_AT_LINE (1213)) ;
        }
      }
    }
  }
  {
    GGS_prio_list::cEnumerator enumerator_49612 (var_cas_readyList, true) ;
    const GGS_prio_list::cElement * operand_49612 = NULL ;
    while (((operand_49612 = enumerator_49612.nextObject ()))) {
      macroValidPointer (operand_49612) ;
      GGS_goilTemplateFieldMap  var_cas_fifoFieldMap = GGS_goilTemplateFieldMap ::constructor_emptyMap (inLexique COMMA_SOURCE_FILE_AT_LINE (1217)) ;
      GGS_uint  var_cas_maxSize ;
      const GGS_bool cond_49843 = var_cas_powerof2 ;
      if (cond_49843.isBuiltAndTrue ()) {
        var_cas_maxSize = GGS_uint (1U) ;
        GGS_uint _variant_49828 = GGS_uint (32U) ;
        GGS_bool _condition_49828 (_variant_49828.isBuilt (), true) ;
        while (_condition_49828.isBuiltAndTrue ()) {
          _condition_49828 = (operand_49612->fifosize).operator_strictSup (var_cas_maxSize) ;
          if (_condition_49828.isBuiltAndTrue ()) {
            if (_variant_49828.uintValue () == 0) {
              inLexique.onTheFlyRunTimeError ("loop variant error" COMMA_SOURCE_FILE_AT_LINE (1224)) ;
              _condition_49828 = GGS_bool (false) ;
            }else{
              _variant_49828.decrement_operation (inLexique COMMA_HERE) ;
              var_cas_maxSize = var_cas_maxSize.left_shift_operation (inLexique, GGS_uint (1U) COMMA_SOURCE_FILE_AT_LINE (1223)) ;
            }
          }
        }
      }else if (cond_49843.isBuiltAndFalse ()) {
        var_cas_maxSize = operand_49612->fifosize ;
      }
      ::routine_addUnsignedFieldValue (inLexique,  var_cas_fifoFieldMap,  function_lstringWith (inLexique, GGS_string ("SIZE") COMMA_SOURCE_FILE_AT_LINE (1228)),  var_cas_maxSize.reader_uint64 (inLexique COMMA_SOURCE_FILE_AT_LINE (1228)) COMMA_SOURCE_FILE_AT_LINE (1228)) ;
      var_cas_fifoList.addAssign_operation (var_cas_fifoFieldMap) ;
    }
  }
  ::routine_addListValue (inLexique,  var_cas_cfg,  function_lstringWith (inLexique, GGS_string ("READYLIST") COMMA_SOURCE_FILE_AT_LINE (1231)),  var_cas_fifoList COMMA_SOURCE_FILE_AT_LINE (1231)) ;
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_setReadyList\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//               Implementation of routine "setProcessCount"                 *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_setProcessCount (C_Compiler & inLexique,
                                const GGS_root_obj   var_cas_cpu,
                                GGS_goilTemplateVariableMap  & var_cas_cfg
                        COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_setProcessCount at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  GGS_uint64  var_cas_taskCount = var_cas_cpu.reader_tasks (inLexique COMMA_SOURCE_FILE_AT_LINE (1243)).reader_count ().reader_uint64 (inLexique COMMA_SOURCE_FILE_AT_LINE (1243)) ;
  GGS_uint64  var_cas_isrCount = var_cas_cpu.reader_isrs (inLexique COMMA_SOURCE_FILE_AT_LINE (1244)).reader_count ().reader_uint64 (inLexique COMMA_SOURCE_FILE_AT_LINE (1244)) ;
  GGS_uint64  var_cas_extendedCount = GGS_uint64 (0ULL) ;
  {
    GGS_task_map::cEnumerator enumerator_50437 (var_cas_cpu.reader_tasks (inLexique COMMA_SOURCE_FILE_AT_LINE (1246)), true) ;
    const GGS_task_map::cElement * operand_50437 = NULL ;
    while (((operand_50437 = enumerator_50437.nextObject ()))) {
      macroValidPointer (operand_50437) ;
      const GGS_bool cond_50520 = (operand_50437->mInfo.task.reader_events (inLexique COMMA_SOURCE_FILE_AT_LINE (1247)).reader_length ()).operator_strictSup (GGS_uint (0U)) ;
      if (cond_50520.isBuiltAndTrue ()) {
        var_cas_extendedCount.increment_operation (inLexique COMMA_SOURCE_FILE_AT_LINE (1248)) ;
      }
    }
  }
  GGS_uint64  var_cas_isr2Count = GGS_uint64 (0ULL) ;
  {
    GGS_isr_map::cEnumerator enumerator_50578 (var_cas_cpu.reader_isrs (inLexique COMMA_SOURCE_FILE_AT_LINE (1252)), true) ;
    const GGS_isr_map::cElement * operand_50578 = NULL ;
    while (((operand_50578 = enumerator_50578.nextObject ()))) {
      macroValidPointer (operand_50578) ;
      { const GGS_basic_type _var_50780 = operand_50578->mInfo.isr.reader_category (inLexique COMMA_SOURCE_FILE_AT_LINE (1253)) ; // CAST instruction
        if (_var_50780.getPtr () != NULL) {
          macroValidPointer (_var_50780.getPtr ()) ;
          if (typeid (cPtr_uint64_class) == typeid (* (_var_50780.getPtr ()))) {
            const GGS_uint64_class var_cas_cat (_var_50780.getPtr ()) ;
            const GGS_bool cond_50711 = (var_cas_cat.reader_value (inLexique COMMA_SOURCE_FILE_AT_LINE (1255))).operator_isEqual (GGS_uint64 (2ULL)) ;
            if (cond_50711.isBuiltAndTrue ()) {
              var_cas_isr2Count.increment_operation (inLexique COMMA_SOURCE_FILE_AT_LINE (1256)) ;
            }
          }else{
            operand_50578->mKey.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("missing CATEGORY attribute") COMMA_SOURCE_FILE_AT_LINE (1260)) ;
          }
        }
      }
    }
  }
  ::routine_addUnsignedValue (inLexique,  var_cas_cfg,  GGS_lstring ::constructor_new (inLexique, GGS_string ("TASKCOUNT"), GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (1262)),  var_cas_taskCount COMMA_SOURCE_FILE_AT_LINE (1262)) ;
  ::routine_addUnsignedValue (inLexique,  var_cas_cfg,  GGS_lstring ::constructor_new (inLexique, GGS_string ("EXTENDEDTASKCOUNT"), GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (1263)),  var_cas_extendedCount COMMA_SOURCE_FILE_AT_LINE (1263)) ;
  ::routine_addUnsignedValue (inLexique,  var_cas_cfg,  GGS_lstring ::constructor_new (inLexique, GGS_string ("BASICTASKCOUNT"), GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (1264)),  var_cas_taskCount.substract_operation (inLexique, var_cas_extendedCount COMMA_SOURCE_FILE_AT_LINE (1264)) COMMA_SOURCE_FILE_AT_LINE (1264)) ;
  ::routine_addUnsignedValue (inLexique,  var_cas_cfg,  GGS_lstring ::constructor_new (inLexique, GGS_string ("PROCESSCOUNT"), GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (1265)),  var_cas_taskCount.add_operation (inLexique, var_cas_isr2Count COMMA_SOURCE_FILE_AT_LINE (1265)) COMMA_SOURCE_FILE_AT_LINE (1265)) ;
  ::routine_addUnsignedValue (inLexique,  var_cas_cfg,  GGS_lstring ::constructor_new (inLexique, GGS_string ("ISRCOUNT"), GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (1266)),  var_cas_isrCount COMMA_SOURCE_FILE_AT_LINE (1266)) ;
  ::routine_addUnsignedValue (inLexique,  var_cas_cfg,  GGS_lstring ::constructor_new (inLexique, GGS_string ("ISR2COUNT"), GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (1267)),  var_cas_isr2Count COMMA_SOURCE_FILE_AT_LINE (1267)) ;
  ::routine_addUnsignedValue (inLexique,  var_cas_cfg,  GGS_lstring ::constructor_new (inLexique, GGS_string ("ISR1COUNT"), GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (1268)),  var_cas_isrCount.substract_operation (inLexique, var_cas_isr2Count COMMA_SOURCE_FILE_AT_LINE (1268)) COMMA_SOURCE_FILE_AT_LINE (1268)) ;
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_setProcessCount\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//               Implementation of routine "setResourceCount"                *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_setResourceCount (C_Compiler & inLexique,
                                const GGS_root_obj   var_cas_cpu,
                                GGS_goilTemplateVariableMap  & var_cas_cfg
                        COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_setResourceCount at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  ::routine_addUnsignedValue (inLexique,  var_cas_cfg,  GGS_lstring ::constructor_new (inLexique, GGS_string ("RESOURCECOUNT"), GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (1275)),  var_cas_cpu.reader_resources (inLexique COMMA_SOURCE_FILE_AT_LINE (1275)).reader_count ().reader_uint64 (inLexique COMMA_SOURCE_FILE_AT_LINE (1275)) COMMA_SOURCE_FILE_AT_LINE (1275)) ;
  GGS_uint64  var_cas_regularCount = GGS_uint64 (0ULL) ;
  GGS_uint64  var_cas_internalCount = GGS_uint64 (0ULL) ;
  {
    GGS_resource_map::cEnumerator enumerator_51700 (var_cas_cpu.reader_resources (inLexique COMMA_SOURCE_FILE_AT_LINE (1278)), true) ;
    const GGS_resource_map::cElement * operand_51700 = NULL ;
    while (((operand_51700 = enumerator_51700.nextObject ()))) {
      macroValidPointer (operand_51700) ;
      { const GGS_resource_property_obj _var_52069 = operand_51700->mInfo.resource.reader_property (inLexique COMMA_SOURCE_FILE_AT_LINE (1279)) ; // CAST instruction
        if (_var_52069.getPtr () != NULL) {
          macroValidPointer (_var_52069.getPtr ()) ;
          if (typeid (cPtr_resource_property_standard_obj) == typeid (* (_var_52069.getPtr ()))) {
            var_cas_regularCount.increment_operation (inLexique COMMA_SOURCE_FILE_AT_LINE (1281)) ;
          }else if (typeid (cPtr_resource_property_linked_obj) == typeid (* (_var_52069.getPtr ()))) {
            var_cas_regularCount.increment_operation (inLexique COMMA_SOURCE_FILE_AT_LINE (1283)) ;
          }else if (typeid (cPtr_resource_property_internal_obj) == typeid (* (_var_52069.getPtr ()))) {
            var_cas_internalCount.increment_operation (inLexique COMMA_SOURCE_FILE_AT_LINE (1285)) ;
          }else{
            operand_51700->mInfo.resource.reader_property (inLexique COMMA_SOURCE_FILE_AT_LINE (1287)).reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (1287)).reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("internal error, RESOURCEPROPERTY type is undefined") COMMA_SOURCE_FILE_AT_LINE (1288)) ;
          }
        }
      }
    }
  }
  ::routine_addUnsignedValue (inLexique,  var_cas_cfg,  GGS_lstring ::constructor_new (inLexique, GGS_string ("REGULARRESOURCECOUNT"), GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (1290)),  var_cas_regularCount COMMA_SOURCE_FILE_AT_LINE (1290)) ;
  ::routine_addUnsignedValue (inLexique,  var_cas_cfg,  GGS_lstring ::constructor_new (inLexique, GGS_string ("INTERNALRESOURCECOUNT"), GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (1291)),  var_cas_internalCount COMMA_SOURCE_FILE_AT_LINE (1291)) ;
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_setResourceCount\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//              Implementation of routine "setSourceFileList"                *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_setSourceFileList (C_Compiler & inLexique,
                                const GGS_root_obj   var_cas_cpu,
                                GGS_goilTemplateVariableMap  & var_cas_cfg
                        COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_setSourceFileList at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  GGS_goilTemplateFieldMapList  var_cas_sourceFileList = GGS_goilTemplateFieldMapList ::constructor_emptyList () ;
  {
    GGS_lstringlist::cEnumerator enumerator_52455 (var_cas_cpu.reader_os (inLexique COMMA_SOURCE_FILE_AT_LINE (1299)).reader_app_src (inLexique COMMA_SOURCE_FILE_AT_LINE (1299)), true) ;
    const GGS_lstringlist::cElement * operand_52455 = NULL ;
    while (((operand_52455 = enumerator_52455.nextObject ()))) {
      macroValidPointer (operand_52455) ;
      GGS_goilTemplateFieldMap  var_cas_sourceFileFieldMap = GGS_goilTemplateFieldMap ::constructor_emptyMap (inLexique COMMA_SOURCE_FILE_AT_LINE (1300)) ;
      ::routine_addStringFieldValue (inLexique,  var_cas_sourceFileFieldMap,  GGS_lstring ::constructor_new (inLexique, GGS_string ("FILE"), operand_52455->mValue.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (1301)) COMMA_SOURCE_FILE_AT_LINE (1301)),  operand_52455->mValue.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1301)) COMMA_SOURCE_FILE_AT_LINE (1301)) ;
      var_cas_sourceFileList.addAssign_operation (var_cas_sourceFileFieldMap) ;
    }
  }
  ::routine_addListValue (inLexique,  var_cas_cfg,  function_lstringWith (inLexique, GGS_string ("SOURCEFILES") COMMA_SOURCE_FILE_AT_LINE (1304)),  var_cas_sourceFileList COMMA_SOURCE_FILE_AT_LINE (1304)) ;
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_setSourceFileList\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//                Implementation of routine "setCFlagsList"                  *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_setCFlagsList (C_Compiler & inLexique,
                                const GGS_root_obj   var_cas_cpu,
                                GGS_goilTemplateVariableMap  & var_cas_cfg
                        COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_setCFlagsList at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  GGS_goilTemplateFieldMapList  var_cas_cFlagsList = GGS_goilTemplateFieldMapList ::constructor_emptyList () ;
  {
    GGS_lstringlist::cEnumerator enumerator_52970 (var_cas_cpu.reader_os (inLexique COMMA_SOURCE_FILE_AT_LINE (1312)).reader_cflags (inLexique COMMA_SOURCE_FILE_AT_LINE (1312)), true) ;
    const GGS_lstringlist::cElement * operand_52970 = NULL ;
    while (((operand_52970 = enumerator_52970.nextObject ()))) {
      macroValidPointer (operand_52970) ;
      const GGS_bool cond_53253 = (function_stripString (inLexique, operand_52970->mValue.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1313)) COMMA_SOURCE_FILE_AT_LINE (1313))).operator_isNotEqual (GGS_string ("")) ;
      if (cond_53253.isBuiltAndTrue ()) {
        GGS_goilTemplateFieldMap  var_cas_cFlagFieldMap = GGS_goilTemplateFieldMap ::constructor_emptyMap (inLexique COMMA_SOURCE_FILE_AT_LINE (1314)) ;
        ::routine_addStringFieldValue (inLexique,  var_cas_cFlagFieldMap,  GGS_lstring ::constructor_new (inLexique, GGS_string ("CFLAG"), operand_52970->mValue.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (1315)) COMMA_SOURCE_FILE_AT_LINE (1315)),  operand_52970->mValue.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1315)) COMMA_SOURCE_FILE_AT_LINE (1315)) ;
        var_cas_cFlagsList.addAssign_operation (var_cas_cFlagFieldMap) ;
      }
    }
  }
  ::routine_addListValue (inLexique,  var_cas_cfg,  function_lstringWith (inLexique, GGS_string ("CFLAGS") COMMA_SOURCE_FILE_AT_LINE (1319)),  var_cas_cFlagsList COMMA_SOURCE_FILE_AT_LINE (1319)) ;
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_setCFlagsList\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//               Implementation of routine "setCPPFlagsList"                 *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_setCPPFlagsList (C_Compiler & inLexique,
                                const GGS_root_obj   var_cas_cpu,
                                GGS_goilTemplateVariableMap  & var_cas_cfg
                        COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_setCPPFlagsList at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  GGS_goilTemplateFieldMapList  var_cas_cppFlagsList = GGS_goilTemplateFieldMapList ::constructor_emptyList () ;
  {
    GGS_lstringlist::cEnumerator enumerator_53513 (var_cas_cpu.reader_os (inLexique COMMA_SOURCE_FILE_AT_LINE (1327)).reader_cppflags (inLexique COMMA_SOURCE_FILE_AT_LINE (1327)), true) ;
    const GGS_lstringlist::cElement * operand_53513 = NULL ;
    while (((operand_53513 = enumerator_53513.nextObject ()))) {
      macroValidPointer (operand_53513) ;
      const GGS_bool cond_53816 = (function_stripString (inLexique, operand_53513->mValue.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1328)) COMMA_SOURCE_FILE_AT_LINE (1328))).operator_isNotEqual (GGS_string ("")) ;
      if (cond_53816.isBuiltAndTrue ()) {
        GGS_goilTemplateFieldMap  var_cas_cppFlagFieldMap = GGS_goilTemplateFieldMap ::constructor_emptyMap (inLexique COMMA_SOURCE_FILE_AT_LINE (1329)) ;
        ::routine_addStringFieldValue (inLexique,  var_cas_cppFlagFieldMap,  GGS_lstring ::constructor_new (inLexique, GGS_string ("CPPFLAG"), operand_53513->mValue.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (1330)) COMMA_SOURCE_FILE_AT_LINE (1330)),  operand_53513->mValue.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1330)) COMMA_SOURCE_FILE_AT_LINE (1330)) ;
        var_cas_cppFlagsList.addAssign_operation (var_cas_cppFlagFieldMap) ;
      }
    }
  }
  ::routine_addListValue (inLexique,  var_cas_cfg,  function_lstringWith (inLexique, GGS_string ("CPPFLAGS") COMMA_SOURCE_FILE_AT_LINE (1334)),  var_cas_cppFlagsList COMMA_SOURCE_FILE_AT_LINE (1334)) ;
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_setCPPFlagsList\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//                Implementation of routine "setAsFlagsList"                 *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_setAsFlagsList (C_Compiler & inLexique,
                                const GGS_root_obj   var_cas_cpu,
                                GGS_goilTemplateVariableMap  & var_cas_cfg
                        COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_setAsFlagsList at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  GGS_goilTemplateFieldMapList  var_cas_asFlagsList = GGS_goilTemplateFieldMapList ::constructor_emptyList () ;
  {
    GGS_lstringlist::cEnumerator enumerator_54077 (var_cas_cpu.reader_os (inLexique COMMA_SOURCE_FILE_AT_LINE (1342)).reader_asflags (inLexique COMMA_SOURCE_FILE_AT_LINE (1342)), true) ;
    const GGS_lstringlist::cElement * operand_54077 = NULL ;
    while (((operand_54077 = enumerator_54077.nextObject ()))) {
      macroValidPointer (operand_54077) ;
      const GGS_bool cond_54370 = (function_stripString (inLexique, operand_54077->mValue.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1343)) COMMA_SOURCE_FILE_AT_LINE (1343))).operator_isNotEqual (GGS_string ("")) ;
      if (cond_54370.isBuiltAndTrue ()) {
        GGS_goilTemplateFieldMap  var_cas_asFlagFieldMap = GGS_goilTemplateFieldMap ::constructor_emptyMap (inLexique COMMA_SOURCE_FILE_AT_LINE (1344)) ;
        ::routine_addStringFieldValue (inLexique,  var_cas_asFlagFieldMap,  GGS_lstring ::constructor_new (inLexique, GGS_string ("ASFLAG"), operand_54077->mValue.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (1345)) COMMA_SOURCE_FILE_AT_LINE (1345)),  operand_54077->mValue.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1345)) COMMA_SOURCE_FILE_AT_LINE (1345)) ;
        var_cas_asFlagsList.addAssign_operation (var_cas_asFlagFieldMap) ;
      }
    }
  }
  ::routine_addListValue (inLexique,  var_cas_cfg,  function_lstringWith (inLexique, GGS_string ("ASFLAGS") COMMA_SOURCE_FILE_AT_LINE (1349)),  var_cas_asFlagsList COMMA_SOURCE_FILE_AT_LINE (1349)) ;
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_setAsFlagsList\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//                Implementation of routine "setLdFlagsList"                 *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_setLdFlagsList (C_Compiler & inLexique,
                                const GGS_root_obj   var_cas_cpu,
                                GGS_goilTemplateVariableMap  & var_cas_cfg
                        COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_setLdFlagsList at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  GGS_goilTemplateFieldMapList  var_cas_ldFlagsList = GGS_goilTemplateFieldMapList ::constructor_emptyList () ;
  {
    GGS_lstringlist::cEnumerator enumerator_54629 (var_cas_cpu.reader_os (inLexique COMMA_SOURCE_FILE_AT_LINE (1357)).reader_ldflags (inLexique COMMA_SOURCE_FILE_AT_LINE (1357)), true) ;
    const GGS_lstringlist::cElement * operand_54629 = NULL ;
    while (((operand_54629 = enumerator_54629.nextObject ()))) {
      macroValidPointer (operand_54629) ;
      const GGS_bool cond_54922 = (function_stripString (inLexique, operand_54629->mValue.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1358)) COMMA_SOURCE_FILE_AT_LINE (1358))).operator_isNotEqual (GGS_string ("")) ;
      if (cond_54922.isBuiltAndTrue ()) {
        GGS_goilTemplateFieldMap  var_cas_ldFlagFieldMap = GGS_goilTemplateFieldMap ::constructor_emptyMap (inLexique COMMA_SOURCE_FILE_AT_LINE (1359)) ;
        ::routine_addStringFieldValue (inLexique,  var_cas_ldFlagFieldMap,  GGS_lstring ::constructor_new (inLexique, GGS_string ("LDFLAG"), operand_54629->mValue.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (1360)) COMMA_SOURCE_FILE_AT_LINE (1360)),  operand_54629->mValue.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1360)) COMMA_SOURCE_FILE_AT_LINE (1360)) ;
        var_cas_ldFlagsList.addAssign_operation (var_cas_ldFlagFieldMap) ;
      }
    }
  }
  ::routine_addListValue (inLexique,  var_cas_cfg,  function_lstringWith (inLexique, GGS_string ("LDFLAGS") COMMA_SOURCE_FILE_AT_LINE (1364)),  var_cas_ldFlagsList COMMA_SOURCE_FILE_AT_LINE (1364)) ;
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_setLdFlagsList\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//                 Implementation of routine "setTraceFlag"                  *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_setTraceFlag (C_Compiler & inLexique,
                                const GGS_root_obj   var_cas_cpu,
                                GGS_goilTemplateVariableMap  & var_cas_cfg
                        COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_setTraceFlag at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  { const GGS_trace _var_57370 = var_cas_cpu.reader_os (inLexique COMMA_SOURCE_FILE_AT_LINE (1371)).reader_trace (inLexique COMMA_SOURCE_FILE_AT_LINE (1371)) ; // CAST instruction
    if (_var_57370.getPtr () != NULL) {
      macroValidPointer (_var_57370.getPtr ()) ;
      if (typeid (cPtr_trace) == typeid (* (_var_57370.getPtr ()))) {
        const GGS_trace var_cas_noTrace (_var_57370.getPtr ()) ;
        ::routine_addBoolValue (inLexique,  var_cas_cfg,  GGS_lstring ::constructor_new (inLexique, GGS_string ("USETRACE"), var_cas_noTrace.reader_loc (inLexique COMMA_SOURCE_FILE_AT_LINE (1373)) COMMA_SOURCE_FILE_AT_LINE (1373)),  GGS_bool (false) COMMA_SOURCE_FILE_AT_LINE (1373)) ;
      }else if (typeid (cPtr_trace_off) == typeid (* (_var_57370.getPtr ()))) {
        const GGS_trace_off var_cas_traceOff (_var_57370.getPtr ()) ;
        ::routine_addBoolValue (inLexique,  var_cas_cfg,  GGS_lstring ::constructor_new (inLexique, GGS_string ("USETRACE"), var_cas_traceOff.reader_loc (inLexique COMMA_SOURCE_FILE_AT_LINE (1375)) COMMA_SOURCE_FILE_AT_LINE (1375)),  GGS_bool (false) COMMA_SOURCE_FILE_AT_LINE (1375)) ;
      }else if (typeid (cPtr_trace_on) == typeid (* (_var_57370.getPtr ()))) {
        const GGS_trace_on var_cas_traceOn (_var_57370.getPtr ()) ;
        ::routine_addBoolValue (inLexique,  var_cas_cfg,  GGS_lstring ::constructor_new (inLexique, GGS_string ("USETRACE"), var_cas_traceOn.reader_loc (inLexique COMMA_SOURCE_FILE_AT_LINE (1377)) COMMA_SOURCE_FILE_AT_LINE (1377)),  GGS_bool (true) COMMA_SOURCE_FILE_AT_LINE (1377)) ;
        ::routine_addStringValue (inLexique,  var_cas_cfg,  GGS_lstring ::constructor_new (inLexique, GGS_string ("TRACEFORMAT"), var_cas_traceOn.reader_form (inLexique COMMA_SOURCE_FILE_AT_LINE (1378)).reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (1378)) COMMA_SOURCE_FILE_AT_LINE (1378)),  var_cas_traceOn.reader_form (inLexique COMMA_SOURCE_FILE_AT_LINE (1378)).reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1378)) COMMA_SOURCE_FILE_AT_LINE (1378)) ;
        const GGS_bool cond_55779 = (var_cas_cpu.reader_tasks (inLexique COMMA_SOURCE_FILE_AT_LINE (1380)).reader_count ().reader_uint64 (inLexique COMMA_SOURCE_FILE_AT_LINE (1380))).operator_strictSup (GGS_uint64 (0ULL)) ;
        if (cond_55779.isBuiltAndTrue ()) {
          ::routine_addBoolValue (inLexique,  var_cas_cfg,  GGS_lstring ::constructor_new (inLexique, GGS_string ("TRACETASK"), var_cas_traceOn.reader_trace_task (inLexique COMMA_SOURCE_FILE_AT_LINE (1381)).reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (1381)) COMMA_SOURCE_FILE_AT_LINE (1381)),  function_getBool (inLexique, var_cas_traceOn.reader_trace_task (inLexique COMMA_SOURCE_FILE_AT_LINE (1381)), GGS_bool (true) COMMA_SOURCE_FILE_AT_LINE (1381)) COMMA_SOURCE_FILE_AT_LINE (1381)) ;
        }else if (cond_55779.isBuiltAndFalse ()) {
          ::routine_addBoolValue (inLexique,  var_cas_cfg,  GGS_lstring ::constructor_new (inLexique, GGS_string ("TRACETASK"), var_cas_traceOn.reader_trace_task (inLexique COMMA_SOURCE_FILE_AT_LINE (1383)).reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (1383)) COMMA_SOURCE_FILE_AT_LINE (1383)),  function_getBool (inLexique, var_cas_traceOn.reader_trace_task (inLexique COMMA_SOURCE_FILE_AT_LINE (1383)), GGS_bool (false) COMMA_SOURCE_FILE_AT_LINE (1383)) COMMA_SOURCE_FILE_AT_LINE (1383)) ;
        }
        const GGS_bool cond_56108 = (var_cas_cpu.reader_isrs (inLexique COMMA_SOURCE_FILE_AT_LINE (1386)).reader_count ().reader_uint64 (inLexique COMMA_SOURCE_FILE_AT_LINE (1386))).operator_strictSup (GGS_uint64 (0ULL)) ;
        if (cond_56108.isBuiltAndTrue ()) {
          ::routine_addBoolValue (inLexique,  var_cas_cfg,  GGS_lstring ::constructor_new (inLexique, GGS_string ("TRACEISR"), var_cas_traceOn.reader_trace_task (inLexique COMMA_SOURCE_FILE_AT_LINE (1387)).reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (1387)) COMMA_SOURCE_FILE_AT_LINE (1387)),  function_getBool (inLexique, var_cas_traceOn.reader_trace_isr (inLexique COMMA_SOURCE_FILE_AT_LINE (1387)), GGS_bool (true) COMMA_SOURCE_FILE_AT_LINE (1387)) COMMA_SOURCE_FILE_AT_LINE (1387)) ;
        }else if (cond_56108.isBuiltAndFalse ()) {
          ::routine_addBoolValue (inLexique,  var_cas_cfg,  GGS_lstring ::constructor_new (inLexique, GGS_string ("TRACEISR"), var_cas_traceOn.reader_trace_task (inLexique COMMA_SOURCE_FILE_AT_LINE (1389)).reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (1389)) COMMA_SOURCE_FILE_AT_LINE (1389)),  function_getBool (inLexique, var_cas_traceOn.reader_trace_isr (inLexique COMMA_SOURCE_FILE_AT_LINE (1389)), GGS_bool (false) COMMA_SOURCE_FILE_AT_LINE (1389)) COMMA_SOURCE_FILE_AT_LINE (1389)) ;
        }
        const GGS_bool cond_56455 = (var_cas_cpu.reader_resources (inLexique COMMA_SOURCE_FILE_AT_LINE (1392)).reader_count ().reader_uint64 (inLexique COMMA_SOURCE_FILE_AT_LINE (1392))).operator_strictSup (GGS_uint64 (0ULL)) ;
        if (cond_56455.isBuiltAndTrue ()) {
          ::routine_addBoolValue (inLexique,  var_cas_cfg,  GGS_lstring ::constructor_new (inLexique, GGS_string ("TRACERESOURCE"), var_cas_traceOn.reader_trace_task (inLexique COMMA_SOURCE_FILE_AT_LINE (1393)).reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (1393)) COMMA_SOURCE_FILE_AT_LINE (1393)),  function_getBool (inLexique, var_cas_traceOn.reader_trace_resource (inLexique COMMA_SOURCE_FILE_AT_LINE (1393)), GGS_bool (true) COMMA_SOURCE_FILE_AT_LINE (1393)) COMMA_SOURCE_FILE_AT_LINE (1393)) ;
        }else if (cond_56455.isBuiltAndFalse ()) {
          ::routine_addBoolValue (inLexique,  var_cas_cfg,  GGS_lstring ::constructor_new (inLexique, GGS_string ("TRACERESOURCE"), var_cas_traceOn.reader_trace_task (inLexique COMMA_SOURCE_FILE_AT_LINE (1395)).reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (1395)) COMMA_SOURCE_FILE_AT_LINE (1395)),  function_getBool (inLexique, var_cas_traceOn.reader_trace_resource (inLexique COMMA_SOURCE_FILE_AT_LINE (1395)), GGS_bool (false) COMMA_SOURCE_FILE_AT_LINE (1395)) COMMA_SOURCE_FILE_AT_LINE (1395)) ;
        }
        const GGS_bool cond_56800 = (var_cas_cpu.reader_alarms (inLexique COMMA_SOURCE_FILE_AT_LINE (1398)).reader_count ().reader_uint64 (inLexique COMMA_SOURCE_FILE_AT_LINE (1398))).operator_strictSup (GGS_uint64 (0ULL)) ;
        if (cond_56800.isBuiltAndTrue ()) {
          ::routine_addBoolValue (inLexique,  var_cas_cfg,  GGS_lstring ::constructor_new (inLexique, GGS_string ("TRACEALARM"), var_cas_traceOn.reader_trace_task (inLexique COMMA_SOURCE_FILE_AT_LINE (1399)).reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (1399)) COMMA_SOURCE_FILE_AT_LINE (1399)),  function_getBool (inLexique, var_cas_traceOn.reader_trace_alarm (inLexique COMMA_SOURCE_FILE_AT_LINE (1399)), GGS_bool (true) COMMA_SOURCE_FILE_AT_LINE (1399)) COMMA_SOURCE_FILE_AT_LINE (1399)) ;
        }else if (cond_56800.isBuiltAndFalse ()) {
          ::routine_addBoolValue (inLexique,  var_cas_cfg,  GGS_lstring ::constructor_new (inLexique, GGS_string ("TRACEALARM"), var_cas_traceOn.reader_trace_task (inLexique COMMA_SOURCE_FILE_AT_LINE (1401)).reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (1401)) COMMA_SOURCE_FILE_AT_LINE (1401)),  function_getBool (inLexique, var_cas_traceOn.reader_trace_alarm (inLexique COMMA_SOURCE_FILE_AT_LINE (1401)), GGS_bool (false) COMMA_SOURCE_FILE_AT_LINE (1401)) COMMA_SOURCE_FILE_AT_LINE (1401)) ;
        }
        ::routine_addBoolValue (inLexique,  var_cas_cfg,  GGS_lstring ::constructor_new (inLexique, GGS_string ("TRACEUSEREVENT"), var_cas_traceOn.reader_trace_task (inLexique COMMA_SOURCE_FILE_AT_LINE (1403)).reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (1403)) COMMA_SOURCE_FILE_AT_LINE (1403)),  function_getBool (inLexique, var_cas_traceOn.reader_trace_user_event (inLexique COMMA_SOURCE_FILE_AT_LINE (1403)), GGS_bool (true) COMMA_SOURCE_FILE_AT_LINE (1403)) COMMA_SOURCE_FILE_AT_LINE (1403)) ;
        { const GGS_trace_method _var_57353 = var_cas_traceOn.reader_meth (inLexique COMMA_SOURCE_FILE_AT_LINE (1404)) ; // CAST instruction
          if (_var_57353.getPtr () != NULL) {
            macroValidPointer (_var_57353.getPtr ()) ;
            if (typeid (cPtr_trace_file) == typeid (* (_var_57353.getPtr ()))) {
              const GGS_trace_file var_cas_traceFile (_var_57353.getPtr ()) ;
              ::routine_addStringValue (inLexique,  var_cas_cfg,  GGS_lstring ::constructor_new (inLexique, GGS_string ("TRACEMETHOD"), var_cas_traceOn.reader_meth (inLexique COMMA_SOURCE_FILE_AT_LINE (1406)).reader_loc (inLexique COMMA_SOURCE_FILE_AT_LINE (1406)) COMMA_SOURCE_FILE_AT_LINE (1406)),  GGS_string ("file") COMMA_SOURCE_FILE_AT_LINE (1406)) ;
              ::routine_addStringValue (inLexique,  var_cas_cfg,  GGS_lstring ::constructor_new (inLexique, GGS_string ("TRACEFILE"), var_cas_traceFile.reader_name (inLexique COMMA_SOURCE_FILE_AT_LINE (1407)).reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (1407)) COMMA_SOURCE_FILE_AT_LINE (1407)),  var_cas_traceFile.reader_name (inLexique COMMA_SOURCE_FILE_AT_LINE (1407)).reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1407)) COMMA_SOURCE_FILE_AT_LINE (1407)) ;
            }else{
            }
          }
        }
      }else{
      }
    }
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_setTraceFlag\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//                Implementation of routine "setLinkScript"                  *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_setLinkScript (C_Compiler & inLexique,
                                const GGS_root_obj   var_cas_cpu,
                                GGS_goilTemplateVariableMap  & var_cas_cfg
                        COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_setLinkScript at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  GGS_string var_cas_linkScriptName = function_link_script_name (inLexique, var_cas_cpu.reader_os (inLexique COMMA_SOURCE_FILE_AT_LINE (1416)).reader_memmap (inLexique COMMA_SOURCE_FILE_AT_LINE (1416)) COMMA_SOURCE_FILE_AT_LINE (1416)) ;
  GGS_bool var_cas_useLinkScript = (var_cas_linkScriptName).operator_isNotEqual (GGS_string ("")) ;
  ::routine_addBoolValue (inLexique,  var_cas_cfg,  GGS_lstring ::constructor_new (inLexique, GGS_string ("USELINKSCRIPT"), var_cas_cpu.reader_os (inLexique COMMA_SOURCE_FILE_AT_LINE (1418)).reader_memmap (inLexique COMMA_SOURCE_FILE_AT_LINE (1418)).reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (1418)) COMMA_SOURCE_FILE_AT_LINE (1418)),  var_cas_useLinkScript COMMA_SOURCE_FILE_AT_LINE (1418)) ;
  const GGS_bool cond_57843 = var_cas_useLinkScript ;
  if (cond_57843.isBuiltAndTrue ()) {
    ::routine_addStringValue (inLexique,  var_cas_cfg,  GGS_lstring ::constructor_new (inLexique, GGS_string ("LINKSCRIPT"), var_cas_cpu.reader_os (inLexique COMMA_SOURCE_FILE_AT_LINE (1420)).reader_memmap (inLexique COMMA_SOURCE_FILE_AT_LINE (1420)).reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (1420)) COMMA_SOURCE_FILE_AT_LINE (1420)),  var_cas_linkScriptName COMMA_SOURCE_FILE_AT_LINE (1420)) ;
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_setLinkScript\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//               Implementation of routine "setMemoryMapping"                *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_setMemoryMapping (C_Compiler & inLexique,
                                const GGS_root_obj   var_cas_cpu,
                                GGS_goilTemplateVariableMap  & var_cas_cfg
                        COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_setMemoryMapping at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  GGS_bool var_cas_useMemoryMapping = GGS_bool (false) ;
  GGS_bool var_cas_useCompilerSettings = GGS_bool (false) ;
  { const GGS_basic_type _var_58823 = var_cas_cpu.reader_os (inLexique COMMA_SOURCE_FILE_AT_LINE (1430)).reader_memmap (inLexique COMMA_SOURCE_FILE_AT_LINE (1430)) ; // CAST instruction
    if (_var_58823.getPtr () != NULL) {
      macroValidPointer (_var_58823.getPtr ()) ;
      if (typeid (cPtr_memmap_false) == typeid (* (_var_58823.getPtr ()))) {
        var_cas_useMemoryMapping = GGS_bool (false) ;
        var_cas_useCompilerSettings = GGS_bool (false) ;
      }else if (typeid (cPtr_memmap_true) == typeid (* (_var_58823.getPtr ()))) {
        const GGS_memmap_true var_cas_trueMemmap (_var_58823.getPtr ()) ;
        var_cas_useMemoryMapping = GGS_bool (true) ;
        GGS_lstring  var_cas_compiler = var_cas_trueMemmap.reader_compiler (inLexique COMMA_SOURCE_FILE_AT_LINE (1436)) ;
        const GGS_bool cond_58409 = (var_cas_compiler.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1437))).operator_isNotEqual (GGS_string ("")) ;
        if (cond_58409.isBuiltAndTrue ()) {
          var_cas_useCompilerSettings = GGS_bool (true) ;
          ::routine_addLStringValue (inLexique,  var_cas_cfg,  GGS_string ("COMPILER"),  var_cas_compiler COMMA_SOURCE_FILE_AT_LINE (1439)) ;
        }
        GGS_lstring  var_cas_assembler = var_cas_trueMemmap.reader_assembler (inLexique COMMA_SOURCE_FILE_AT_LINE (1441)) ;
        const GGS_bool cond_58561 = (var_cas_assembler.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1442))).operator_isNotEqual (GGS_string ("")) ;
        if (cond_58561.isBuiltAndTrue ()) {
          ::routine_addLStringValue (inLexique,  var_cas_cfg,  GGS_string ("ASSEMBLER"),  var_cas_assembler COMMA_SOURCE_FILE_AT_LINE (1443)) ;
        }
        { const GGS_basic_type _var_58806 = var_cas_trueMemmap.reader_linker (inLexique COMMA_SOURCE_FILE_AT_LINE (1445)) ; // CAST instruction
          if (_var_58806.getPtr () != NULL) {
            macroValidPointer (_var_58806.getPtr ()) ;
            if (typeid (cPtr_no_linker) == typeid (* (_var_58806.getPtr ()))) {
            }else if (typeid (cPtr_yes_linker) == typeid (* (_var_58806.getPtr ()))) {
              const GGS_yes_linker var_cas_yesLinker (_var_58806.getPtr ()) ;
              GGS_lstring  var_cas_linker = var_cas_yesLinker.reader_linker (inLexique COMMA_SOURCE_FILE_AT_LINE (1448)) ;
              ::routine_addStringValue (inLexique,  var_cas_cfg,  GGS_lstring ::constructor_new (inLexique, GGS_string ("LINKER"), var_cas_linker.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (1449)) COMMA_SOURCE_FILE_AT_LINE (1449)),  var_cas_linker.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1449)) COMMA_SOURCE_FILE_AT_LINE (1449)) ;
            }else{
            }
          }
        }
      }else{
      }
    }
  }
  ::routine_addBoolValue (inLexique,  var_cas_cfg,  GGS_lstring ::constructor_new (inLexique, GGS_string ("USEMEMORYMAPPING"), var_cas_cpu.reader_os (inLexique COMMA_SOURCE_FILE_AT_LINE (1452)).reader_memmap (inLexique COMMA_SOURCE_FILE_AT_LINE (1452)).reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (1452)) COMMA_SOURCE_FILE_AT_LINE (1452)),  var_cas_useMemoryMapping COMMA_SOURCE_FILE_AT_LINE (1452)) ;
  ::routine_addBoolValue (inLexique,  var_cas_cfg,  GGS_lstring ::constructor_new (inLexique, GGS_string ("USECOMPILERSETTINGS"), var_cas_cpu.reader_os (inLexique COMMA_SOURCE_FILE_AT_LINE (1453)).reader_memmap (inLexique COMMA_SOURCE_FILE_AT_LINE (1453)).reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (1453)) COMMA_SOURCE_FILE_AT_LINE (1453)),  var_cas_useCompilerSettings COMMA_SOURCE_FILE_AT_LINE (1453)) ;
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_setMemoryMapping\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//                 Implementation of routine "setCompiler"                   *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_setCompiler (C_Compiler & inLexique,
                                const GGS_root_obj   var_cas_cpu,
                                GGS_goilTemplateVariableMap  & var_cas_cfg
                        COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_setCompiler at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  GGS_lstring  var_cas_compiler = var_cas_cpu.reader_os (inLexique COMMA_SOURCE_FILE_AT_LINE (1460)).reader_compiler (inLexique COMMA_SOURCE_FILE_AT_LINE (1460)) ;
  GGS_string var_cas_actualCompiler = GGS_string ("gcc") ;
  const GGS_bool cond_59316 = (var_cas_compiler.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1462))).operator_isNotEqual (GGS_string ("")) ;
  if (cond_59316.isBuiltAndTrue ()) {
    var_cas_actualCompiler = var_cas_compiler.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1462)) ;
  }
  ::routine_addStringValue (inLexique,  var_cas_cfg,  GGS_lstring ::constructor_new (inLexique, GGS_string ("COMPILEREXE"), var_cas_compiler.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (1463)) COMMA_SOURCE_FILE_AT_LINE (1463)),  var_cas_actualCompiler COMMA_SOURCE_FILE_AT_LINE (1463)) ;
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_setCompiler\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//                 Implementation of routine "setAssembler"                  *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_setAssembler (C_Compiler & inLexique,
                                const GGS_root_obj   var_cas_cpu,
                                GGS_goilTemplateVariableMap  & var_cas_cfg
                        COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_setAssembler at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  GGS_lstring  var_cas_assembler = var_cas_cpu.reader_os (inLexique COMMA_SOURCE_FILE_AT_LINE (1470)).reader_assembler (inLexique COMMA_SOURCE_FILE_AT_LINE (1470)) ;
  GGS_string var_cas_actualAssembler = GGS_string ("as") ;
  const GGS_bool cond_59688 = (var_cas_assembler.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1472))).operator_isNotEqual (GGS_string ("")) ;
  if (cond_59688.isBuiltAndTrue ()) {
    var_cas_actualAssembler = var_cas_assembler.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1472)) ;
  }
  ::routine_addStringValue (inLexique,  var_cas_cfg,  GGS_lstring ::constructor_new (inLexique, GGS_string ("ASSEMBLEREXE"), var_cas_assembler.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (1473)) COMMA_SOURCE_FILE_AT_LINE (1473)),  var_cas_actualAssembler COMMA_SOURCE_FILE_AT_LINE (1473)) ;
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_setAssembler\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//                  Implementation of routine "setLinker"                    *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_setLinker (C_Compiler & inLexique,
                                const GGS_root_obj   var_cas_cpu,
                                GGS_goilTemplateVariableMap  & var_cas_cfg
                        COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_setLinker at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  GGS_lstring  var_cas_linker = var_cas_cpu.reader_os (inLexique COMMA_SOURCE_FILE_AT_LINE (1480)).reader_linker (inLexique COMMA_SOURCE_FILE_AT_LINE (1480)) ;
  GGS_string var_cas_actualLinker = GGS_string ("gcc") ;
  const GGS_bool cond_60040 = (var_cas_linker.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1482))).operator_isNotEqual (GGS_string ("")) ;
  if (cond_60040.isBuiltAndTrue ()) {
    var_cas_actualLinker = var_cas_linker.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1482)) ;
  }
  ::routine_addStringValue (inLexique,  var_cas_cfg,  GGS_lstring ::constructor_new (inLexique, GGS_string ("LINKEREXE"), var_cas_linker.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (1483)) COMMA_SOURCE_FILE_AT_LINE (1483)),  var_cas_actualLinker COMMA_SOURCE_FILE_AT_LINE (1483)) ;
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_setLinker\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//                  Implementation of routine "setTarget"                    *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_setTarget (C_Compiler & inLexique,
                                const GGS_root_obj   /* var_cas_cpu */,
                                GGS_goilTemplateVariableMap  & var_cas_cfg
                        COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_setTarget at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  ::routine_addStringValue (inLexique,  var_cas_cfg,  function_lstringWith (inLexique, GGS_string ("TARGET") COMMA_SOURCE_FILE_AT_LINE (1490)),  gOption_goil_5F_options_target_5F_platform.reader_value () COMMA_SOURCE_FILE_AT_LINE (1490)) ;
  ::routine_addStringValue (inLexique,  var_cas_cfg,  function_lstringWith (inLexique, GGS_string ("ARCH") COMMA_SOURCE_FILE_AT_LINE (1491)),  function_arch (inLexique COMMA_SOURCE_FILE_AT_LINE (1491)) COMMA_SOURCE_FILE_AT_LINE (1491)) ;
  ::routine_addStringValue (inLexique,  var_cas_cfg,  function_lstringWith (inLexique, GGS_string ("CHIP") COMMA_SOURCE_FILE_AT_LINE (1492)),  function_chip (inLexique COMMA_SOURCE_FILE_AT_LINE (1492)) COMMA_SOURCE_FILE_AT_LINE (1492)) ;
  ::routine_addStringValue (inLexique,  var_cas_cfg,  function_lstringWith (inLexique, GGS_string ("BOARD") COMMA_SOURCE_FILE_AT_LINE (1493)),  function_board (inLexique COMMA_SOURCE_FILE_AT_LINE (1493)) COMMA_SOURCE_FILE_AT_LINE (1493)) ;
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_setTarget\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//               Implementation of routine "setTemplatePath"                 *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_setTemplatePath (C_Compiler & inLexique,
                                const GGS_root_obj   /* var_cas_cpu */,
                                GGS_goilTemplateVariableMap  & var_cas_cfg
                        COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_setTemplatePath at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  GGS_string var_cas_templatePath = gOption_goil_5F_options_template_5F_dir.reader_value () ;
  ::routine_addStringValue (inLexique,  var_cas_cfg,  function_lstringWith (inLexique, GGS_string ("TEMPLATEPATH") COMMA_SOURCE_FILE_AT_LINE (1501)),  var_cas_templatePath COMMA_SOURCE_FILE_AT_LINE (1501)) ;
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_setTemplatePath\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//              Implementation of routine "setTrampolinePath"                *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_setTrampolinePath (C_Compiler & inLexique,
                                const GGS_root_obj   var_cas_cpu,
                                GGS_goilTemplateVariableMap  & var_cas_cfg
                        COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_setTrampolinePath at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  GGS_lstring  var_cas_trampolinePath = var_cas_cpu.reader_os (inLexique COMMA_SOURCE_FILE_AT_LINE (1508)).reader_tpl_base_path (inLexique COMMA_SOURCE_FILE_AT_LINE (1508)) ;
  const GGS_bool cond_61093 = (var_cas_trampolinePath.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1509))).operator_isEqual (GGS_string ("")) ;
  if (cond_61093.isBuiltAndTrue ()) {
    var_cas_trampolinePath = GGS_lstring ::constructor_new (inLexique, GGS_string (".."), var_cas_trampolinePath.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (1510)) COMMA_SOURCE_FILE_AT_LINE (1510)) ;
  }
  ::routine_checkTrampolinePath (inLexique,  var_cas_trampolinePath COMMA_SOURCE_FILE_AT_LINE (1512)) ;
  ::routine_addStringValue (inLexique,  var_cas_cfg,  GGS_lstring ::constructor_new (inLexique, GGS_string ("TRAMPOLINEPATH"), var_cas_trampolinePath.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (1513)) COMMA_SOURCE_FILE_AT_LINE (1513)),  var_cas_trampolinePath.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1513)) COMMA_SOURCE_FILE_AT_LINE (1513)) ;
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_setTrampolinePath\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//                Implementation of routine "setSystemCall"                  *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_setSystemCall (C_Compiler & inLexique,
                                const GGS_root_obj   var_cas_cpu,
                                GGS_goilTemplateVariableMap  & var_cas_cfg
                        COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_setSystemCall at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  ::routine_addBoolValue (inLexique,  var_cas_cfg,  GGS_lstring ::constructor_new (inLexique, GGS_string ("USESYSTEMCALL"), var_cas_cpu.reader_os (inLexique COMMA_SOURCE_FILE_AT_LINE (1520)).reader_systemcall (inLexique COMMA_SOURCE_FILE_AT_LINE (1520)).reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (1520)) COMMA_SOURCE_FILE_AT_LINE (1520)),  function_getBool (inLexique, var_cas_cpu.reader_os (inLexique COMMA_SOURCE_FILE_AT_LINE (1520)).reader_systemcall (inLexique COMMA_SOURCE_FILE_AT_LINE (1520)), GGS_bool (false) COMMA_SOURCE_FILE_AT_LINE (1520)) COMMA_SOURCE_FILE_AT_LINE (1520)) ;
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_setSystemCall\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//                   Implementation of routine "setDebug"                    *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_setDebug (C_Compiler & inLexique,
                                const GGS_root_obj   var_cas_cpu,
                                GGS_goilTemplateVariableMap  & var_cas_cfg
                        COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_setDebug at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  ::routine_addBoolValue (inLexique,  var_cas_cfg,  GGS_lstring ::constructor_new (inLexique, GGS_string ("USEDEBUG"), var_cas_cpu.reader_os (inLexique COMMA_SOURCE_FILE_AT_LINE (1527)).reader_debug (inLexique COMMA_SOURCE_FILE_AT_LINE (1527)).reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (1527)) COMMA_SOURCE_FILE_AT_LINE (1527)),  function_getBool (inLexique, var_cas_cpu.reader_os (inLexique COMMA_SOURCE_FILE_AT_LINE (1527)).reader_debug (inLexique COMMA_SOURCE_FILE_AT_LINE (1527)), GGS_bool (false) COMMA_SOURCE_FILE_AT_LINE (1527)) COMMA_SOURCE_FILE_AT_LINE (1527)) ;
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_setDebug\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//             Implementation of routine "setUseInterruptTable"              *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_setUseInterruptTable (C_Compiler & inLexique,
                                const GGS_root_obj   /* var_cas_cpu */,
                                GGS_goilTemplateVariableMap  & var_cas_cfg
                        COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_setUseInterruptTable at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  ::routine_addBoolValue (inLexique,  var_cas_cfg,  function_lstringWith (inLexique, GGS_string ("USEINTERRUPTTABLE") COMMA_SOURCE_FILE_AT_LINE (1534)),  gOption_goil_5F_options_posix_5F_it.reader_value () COMMA_SOURCE_FILE_AT_LINE (1534)) ;
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_setUseInterruptTable\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//                Implementation of routine "setBuildConfig"                 *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_setBuildConfig (C_Compiler & inLexique,
                                const GGS_root_obj   var_cas_cpu,
                                GGS_goilTemplateVariableMap  & var_cas_cfg
                        COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_setBuildConfig at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  ::routine_setSourceFileList (inLexique,  var_cas_cpu,  var_cas_cfg COMMA_SOURCE_FILE_AT_LINE (1541)) ;
  ::routine_setCFlagsList (inLexique,  var_cas_cpu,  var_cas_cfg COMMA_SOURCE_FILE_AT_LINE (1542)) ;
  ::routine_setCPPFlagsList (inLexique,  var_cas_cpu,  var_cas_cfg COMMA_SOURCE_FILE_AT_LINE (1543)) ;
  ::routine_setAsFlagsList (inLexique,  var_cas_cpu,  var_cas_cfg COMMA_SOURCE_FILE_AT_LINE (1544)) ;
  ::routine_setLdFlagsList (inLexique,  var_cas_cpu,  var_cas_cfg COMMA_SOURCE_FILE_AT_LINE (1545)) ;
  ::routine_setTraceFlag (inLexique,  var_cas_cpu,  var_cas_cfg COMMA_SOURCE_FILE_AT_LINE (1546)) ;
  ::routine_setLinkScript (inLexique,  var_cas_cpu,  var_cas_cfg COMMA_SOURCE_FILE_AT_LINE (1547)) ;
  ::routine_setMemoryMapping (inLexique,  var_cas_cpu,  var_cas_cfg COMMA_SOURCE_FILE_AT_LINE (1548)) ;
  ::routine_setCompiler (inLexique,  var_cas_cpu,  var_cas_cfg COMMA_SOURCE_FILE_AT_LINE (1549)) ;
  ::routine_setAssembler (inLexique,  var_cas_cpu,  var_cas_cfg COMMA_SOURCE_FILE_AT_LINE (1550)) ;
  ::routine_setLinker (inLexique,  var_cas_cpu,  var_cas_cfg COMMA_SOURCE_FILE_AT_LINE (1551)) ;
  ::routine_setTarget (inLexique,  var_cas_cpu,  var_cas_cfg COMMA_SOURCE_FILE_AT_LINE (1552)) ;
  ::routine_setTemplatePath (inLexique,  var_cas_cpu,  var_cas_cfg COMMA_SOURCE_FILE_AT_LINE (1553)) ;
  ::routine_setTrampolinePath (inLexique,  var_cas_cpu,  var_cas_cfg COMMA_SOURCE_FILE_AT_LINE (1554)) ;
  ::routine_setSystemCall (inLexique,  var_cas_cpu,  var_cas_cfg COMMA_SOURCE_FILE_AT_LINE (1555)) ;
  ::routine_setDebug (inLexique,  var_cas_cpu,  var_cas_cfg COMMA_SOURCE_FILE_AT_LINE (1556)) ;
  ::routine_setUseInterruptTable (inLexique,  var_cas_cpu,  var_cas_cfg COMMA_SOURCE_FILE_AT_LINE (1557)) ;
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_setBuildConfig\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//              Implementation of function "useCommunication"                *
//                                                                           *
//---------------------------------------------------------------------------*

GGS_bool function_useCommunication (C_Compiler & inLexique,
                                const GGS_root_obj   var_cas_cpu COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER function_useCommunication at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  GGS_bool var_cas_useCom ;
  var_cas_useCom = GGS_bool (false) ;
  GGS_com  var_cas_comObject = var_cas_cpu.reader_com (inLexique COMMA_SOURCE_FILE_AT_LINE (1562)) ;
  const GGS_bool cond_62735 = var_cas_comObject.reader_usecom (inLexique COMMA_SOURCE_FILE_AT_LINE (1563)) ;
  if (cond_62735.isBuiltAndTrue ()) {
    var_cas_useCom = GGS_bool (true) ;
  }else if (cond_62735.isBuiltAndFalse ()) {
    var_cas_useCom = ((var_cas_cpu.reader_messages (inLexique COMMA_SOURCE_FILE_AT_LINE (1566)).reader_count ()).operator_strictSup (GGS_uint (0U))).operator_or ((var_cas_cpu.reader_net_messages (inLexique COMMA_SOURCE_FILE_AT_LINE (1567)).reader_count ()).operator_strictSup (GGS_uint (0U))) ;
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE function_useCommunication\n") ;
  #endif
  return var_cas_useCom ;
}

//---------------------------------------------------------------------------*

static GGS_object functionForGenericCall_useCommunication (C_Compiler & inLexique,
                           const GGS_objectlist & inEffectiveParameterArray,
                           const GGS_location & inErrorLocation
                           COMMA_LOCATION_ARGS) {
  const GGS_root_obj  arg_0 = GGS_root_obj ::castFromObject (inLexique, inEffectiveParameterArray.reader_mValueAtIndex (inLexique, GGS_uint (0) COMMA_THERE), inErrorLocation COMMA_THERE) ;
  const GGS_bool result = function_useCommunication (inLexique,
                            arg_0
                            COMMA_THERE) ;
  return result.reader_object () ;
}

//---------------------------------------------------------------------------*

static const C_galgas_type_descriptorEX *
kArgumentTypeList_useCommunication [1] = {& kTypeDescriptor_GGS_root_obj } ;

const C_galgas_function_descriptorEX
kFunction_descriptor_useCommunication ("useCommunication",
                              functionForGenericCall_useCommunication,
                              & kTypeDescriptor_GGS_bool,
                              1,
                              kArgumentTypeList_useCommunication) ;

//---------------------------------------------------------------------------*
//                                                                           *
//                  Implementation of routine "setUseCom"                    *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_setUseCom (C_Compiler & inLexique,
                                const GGS_root_obj   var_cas_cpu,
                                GGS_goilTemplateVariableMap  & var_cas_cfg
                        COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_setUseCom at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  GGS_bool var_cas_useCom = function_useCommunication (inLexique, var_cas_cpu COMMA_SOURCE_FILE_AT_LINE (1577)) ;
  ::routine_addBoolValue (inLexique,  var_cas_cfg,  GGS_lstring ::constructor_new (inLexique, GGS_string ("USECOM"), GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (1578)),  var_cas_useCom COMMA_SOURCE_FILE_AT_LINE (1578)) ;
  const GGS_bool cond_64425 = var_cas_useCom ;
  if (cond_64425.isBuiltAndTrue ()) {
    GGS_uint64  var_cas_timeBaseInNanoseconds = GGS_uint64 (1000000ULL) ;
    GGS_com  var_cas_comObject = var_cas_cpu.reader_com (inLexique COMMA_SOURCE_FILE_AT_LINE (1581)) ;
    { const GGS_basic_type _var_63447 = var_cas_comObject.reader_timebase (inLexique COMMA_SOURCE_FILE_AT_LINE (1582)) ; // CAST instruction
      if (_var_63447.getPtr () != NULL) {
        macroValidPointer (_var_63447.getPtr ()) ;
        if (typeid (cPtr_float_class) == typeid (* (_var_63447.getPtr ()))) {
          const GGS_float_class var_cas_timeBase (_var_63447.getPtr ()) ;
          var_cas_timeBaseInNanoseconds = var_cas_timeBase.reader_value (inLexique COMMA_SOURCE_FILE_AT_LINE (1584)).multiply_operation (inLexique, GGS_double (1.000000e+09) COMMA_SOURCE_FILE_AT_LINE (1584)).reader_uint64 (inLexique COMMA_SOURCE_FILE_AT_LINE (1584)) ;
        }else{
        }
      }
    }
    ::routine_addUnsignedValue (inLexique,  var_cas_cfg,  GGS_lstring ::constructor_new (inLexique, GGS_string ("COMTIMEBASE"), var_cas_comObject.reader_timebase (inLexique COMMA_SOURCE_FILE_AT_LINE (1587)).reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (1587)) COMMA_SOURCE_FILE_AT_LINE (1587)),  var_cas_timeBaseInNanoseconds COMMA_SOURCE_FILE_AT_LINE (1587)) ;
    ::routine_addBoolValue (inLexique,  var_cas_cfg,  GGS_lstring ::constructor_new (inLexique, GGS_string ("USECOMERRORHOOK"), var_cas_comObject.reader_errorhook (inLexique COMMA_SOURCE_FILE_AT_LINE (1588)).reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (1588)) COMMA_SOURCE_FILE_AT_LINE (1588)),  function_getBool (inLexique, var_cas_comObject.reader_errorhook (inLexique COMMA_SOURCE_FILE_AT_LINE (1588)), GGS_bool (false) COMMA_SOURCE_FILE_AT_LINE (1588)) COMMA_SOURCE_FILE_AT_LINE (1588)) ;
    ::routine_addBoolValue (inLexique,  var_cas_cfg,  GGS_lstring ::constructor_new (inLexique, GGS_string ("USECOMGETSERVICEID"), var_cas_comObject.reader_usegetserviceid (inLexique COMMA_SOURCE_FILE_AT_LINE (1589)).reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (1589)) COMMA_SOURCE_FILE_AT_LINE (1589)),  function_getBool (inLexique, var_cas_comObject.reader_usegetserviceid (inLexique COMMA_SOURCE_FILE_AT_LINE (1589)), GGS_bool (false) COMMA_SOURCE_FILE_AT_LINE (1589)) COMMA_SOURCE_FILE_AT_LINE (1589)) ;
    ::routine_addBoolValue (inLexique,  var_cas_cfg,  GGS_lstring ::constructor_new (inLexique, GGS_string ("USECOMPARAMETERACCESS"), var_cas_comObject.reader_useparameteraccess (inLexique COMMA_SOURCE_FILE_AT_LINE (1590)).reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (1590)) COMMA_SOURCE_FILE_AT_LINE (1590)),  function_getBool (inLexique, var_cas_comObject.reader_useparameteraccess (inLexique COMMA_SOURCE_FILE_AT_LINE (1590)), GGS_bool (false) COMMA_SOURCE_FILE_AT_LINE (1590)) COMMA_SOURCE_FILE_AT_LINE (1590)) ;
    ::routine_addBoolValue (inLexique,  var_cas_cfg,  GGS_lstring ::constructor_new (inLexique, GGS_string ("USESTARTCOMEXTENSION"), var_cas_comObject.reader_startcomextension (inLexique COMMA_SOURCE_FILE_AT_LINE (1591)).reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (1591)) COMMA_SOURCE_FILE_AT_LINE (1591)),  function_getBool (inLexique, var_cas_comObject.reader_startcomextension (inLexique COMMA_SOURCE_FILE_AT_LINE (1591)), GGS_bool (false) COMMA_SOURCE_FILE_AT_LINE (1591)) COMMA_SOURCE_FILE_AT_LINE (1591)) ;
    GGS_lstring  var_cas_comStatus = var_cas_comObject.reader_status (inLexique COMMA_SOURCE_FILE_AT_LINE (1593)) ;
    GGS_bool var_cas_comExtended = GGS_bool (false) ;
    const GGS_bool cond_64324 = (var_cas_comStatus.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1595))).operator_isEqual (GGS_string ("extended")) ;
    if (cond_64324.isBuiltAndTrue ()) {
      var_cas_comExtended = GGS_bool (true) ;
    }
    ::routine_addBoolValue (inLexique,  var_cas_cfg,  GGS_lstring ::constructor_new (inLexique, GGS_string ("COMEXTENDED"), var_cas_comStatus.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (1598)) COMMA_SOURCE_FILE_AT_LINE (1598)),  var_cas_comExtended COMMA_SOURCE_FILE_AT_LINE (1598)) ;
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_setUseCom\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//                 Implementation of routine "setExtended"                   *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_setExtended (C_Compiler & inLexique,
                                const GGS_root_obj   var_cas_cpu,
                                GGS_goilTemplateVariableMap  & var_cas_cfg
                        COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_setExtended at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  GGS_bool var_cas_extended = (var_cas_cpu.reader_os (inLexique COMMA_SOURCE_FILE_AT_LINE (1607)).reader_status (inLexique COMMA_SOURCE_FILE_AT_LINE (1607)).reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1607))).operator_isEqual (GGS_string ("extended")) ;
  ::routine_addBoolValue (inLexique,  var_cas_cfg,  GGS_lstring ::constructor_new (inLexique, GGS_string ("EXTENDED"), var_cas_cpu.reader_os (inLexique COMMA_SOURCE_FILE_AT_LINE (1608)).reader_status (inLexique COMMA_SOURCE_FILE_AT_LINE (1608)).reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (1608)) COMMA_SOURCE_FILE_AT_LINE (1608)),  var_cas_extended COMMA_SOURCE_FILE_AT_LINE (1608)) ;
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_setExtended\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//               Implementation of routine "scalabilityClass"                *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_scalabilityClass (C_Compiler & inLexique,
                                const GGS_root_obj   var_cas_cpu,
                                GGS_uint64  & var_cas_sc,
                                GGS_bool & var_cas_useTimingProtection,
                                GGS_bool & var_cas_useProtectionHook
                        COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_scalabilityClass at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  var_cas_sc = GGS_uint64 (0ULL) ;
  var_cas_useTimingProtection = GGS_bool (false) ;
  var_cas_useProtectionHook = GGS_bool (false) ;
  GGS_bool var_cas_useGlobalTime = GGS_bool (false) ;
  GGS_bool var_cas_useOSApplication = GGS_bool (false) ;
  const GGS_bool cond_68220 = gOption_goil_5F_options_autosar_5F_on.reader_value () ;
  if (cond_68220.isBuiltAndTrue ()) {
    {
      GGS_task_map::cEnumerator enumerator_65063 (var_cas_cpu.reader_tasks (inLexique COMMA_SOURCE_FILE_AT_LINE (1625)), true) ;
      const GGS_task_map::cElement * operand_65063 = NULL ;
      while (((operand_65063 = enumerator_65063.nextObject ()))) {
        macroValidPointer (operand_65063) ;
        { const GGS_timing_prot _var_65186 = operand_65063->mInfo.task.reader_timing_prot (inLexique COMMA_SOURCE_FILE_AT_LINE (1626)) ; // CAST instruction
          if (_var_65186.getPtr () != NULL) {
            macroValidPointer (_var_65186.getPtr ()) ;
            if (typeid (cPtr_timing_prot_task) == typeid (* (_var_65186.getPtr ()))) {
              var_cas_useTimingProtection = GGS_bool (true) ;
            }else{
            }
          }
        }
      }
    }
    {
      GGS_isr_map::cEnumerator enumerator_65230 (var_cas_cpu.reader_isrs (inLexique COMMA_SOURCE_FILE_AT_LINE (1631)), true) ;
      const GGS_isr_map::cElement * operand_65230 = NULL ;
      while (((operand_65230 = enumerator_65230.nextObject ()))) {
        macroValidPointer (operand_65230) ;
        { const GGS_timing_prot _var_65350 = operand_65230->mInfo.isr.reader_timing_prot (inLexique COMMA_SOURCE_FILE_AT_LINE (1632)) ; // CAST instruction
          if (_var_65350.getPtr () != NULL) {
            macroValidPointer (_var_65350.getPtr ()) ;
            if (typeid (cPtr_timing_prot_isr) == typeid (* (_var_65350.getPtr ()))) {
              var_cas_useTimingProtection = GGS_bool (true) ;
            }else{
            }
          }
        }
      }
    }
    {
      GGS_scheduletable_map::cEnumerator enumerator_65392 (var_cas_cpu.reader_scheduletables (inLexique COMMA_SOURCE_FILE_AT_LINE (1637)), true) ;
      const GGS_scheduletable_map::cElement * operand_65392 = NULL ;
      while (((operand_65392 = enumerator_65392.nextObject ()))) {
        macroValidPointer (operand_65392) ;
        { const GGS_ltgt_sync_obj _var_65523 = operand_65392->mInfo.scheduletable.reader_ltgt_sync (inLexique COMMA_SOURCE_FILE_AT_LINE (1638)) ; // CAST instruction
          if (_var_65523.getPtr () != NULL) {
            macroValidPointer (_var_65523.getPtr ()) ;
            if (typeid (cPtr_ltgt_sync_true) == typeid (* (_var_65523.getPtr ()))) {
              var_cas_useGlobalTime = GGS_bool (true) ;
            }else{
            }
          }
        }
      }
    }
    var_cas_useOSApplication = (var_cas_cpu.reader_applis (inLexique COMMA_SOURCE_FILE_AT_LINE (1643)).reader_count ()).operator_strictSup (GGS_uint (0U)) ;
    { const GGS_basic_type _var_65726 = var_cas_cpu.reader_os (inLexique COMMA_SOURCE_FILE_AT_LINE (1645)).reader_protectionhook (inLexique COMMA_SOURCE_FILE_AT_LINE (1645)) ; // CAST instruction
      if (_var_65726.getPtr () != NULL) {
        macroValidPointer (_var_65726.getPtr ()) ;
        if (typeid (cPtr_bool_class) == typeid (* (_var_65726.getPtr ()))) {
          const GGS_bool_class var_cas_ph (_var_65726.getPtr ()) ;
          var_cas_useProtectionHook = var_cas_ph.reader_value (inLexique COMMA_SOURCE_FILE_AT_LINE (1647)) ;
        }else{
        }
      }
    }
    var_cas_sc = GGS_uint64 (1ULL) ;
    GGS_string var_cas_setSC = var_cas_cpu.reader_os (inLexique COMMA_SOURCE_FILE_AT_LINE (1654)).reader_scalabilityclass (inLexique COMMA_SOURCE_FILE_AT_LINE (1654)).reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1654)) ;
    const GGS_bool cond_66441 = ((var_cas_setSC).operator_isEqual (GGS_string (""))).operator_or ((var_cas_setSC).operator_isEqual (GGS_string ("AUTO"))) ;
    if (cond_66441.isBuiltAndTrue ()) {
      const GGS_bool cond_66151 = ((var_cas_useTimingProtection).operator_or (var_cas_useProtectionHook)).operator_or (var_cas_useGlobalTime) ;
      if (cond_66151.isBuiltAndTrue ()) {
        var_cas_sc = GGS_uint64 (2ULL) ;
      }
      const GGS_bool cond_66421 = (function_memory_protection_on (inLexique, var_cas_cpu.reader_os (inLexique COMMA_SOURCE_FILE_AT_LINE (1668)) COMMA_SOURCE_FILE_AT_LINE (1668))).operator_or ((var_cas_cpu.reader_applis (inLexique COMMA_SOURCE_FILE_AT_LINE (1668)).reader_count ()).operator_strictSup (GGS_uint (0U))) ;
      if (cond_66421.isBuiltAndTrue ()) {
        var_cas_sc = var_cas_sc.add_operation (inLexique, GGS_uint64 (2ULL) COMMA_SOURCE_FILE_AT_LINE (1669)) ;
      }
    }else if (cond_66441.isBuiltAndFalse ()) {
      const GGS_bool cond_67241 = (var_cas_setSC).operator_isEqual (GGS_string ("sc1")) ;
      if (cond_67241.isBuiltAndTrue ()) {
        const GGS_bool cond_66992 = var_cas_useTimingProtection ;
        if (cond_66992.isBuiltAndTrue ()) {
          const GGS_bool cond_66827 = var_cas_useOSApplication ;
          if (cond_66827.isBuiltAndTrue ()) {
            var_cas_sc = GGS_uint64 (4ULL) ;
            var_cas_cpu.reader_os (inLexique COMMA_SOURCE_FILE_AT_LINE (1679)).reader_scalabilityclass (inLexique COMMA_SOURCE_FILE_AT_LINE (1679)).reader_location (inLexique COMMA_HERE).signalGGSSemanticWarning (inLexique, GGS_string ("SCALABILITYCLASS set to 4 because Timing Protection and OS Application are used") COMMA_SOURCE_FILE_AT_LINE (1679)) ;
          }else if (cond_66827.isBuiltAndFalse ()) {
            var_cas_sc = GGS_uint64 (2ULL) ;
            var_cas_cpu.reader_os (inLexique COMMA_SOURCE_FILE_AT_LINE (1682)).reader_scalabilityclass (inLexique COMMA_SOURCE_FILE_AT_LINE (1682)).reader_location (inLexique COMMA_HERE).signalGGSSemanticWarning (inLexique, GGS_string ("SCALABILITYCLASS set to 2 because Timing Protection is used") COMMA_SOURCE_FILE_AT_LINE (1682)) ;
          }
        }else if (cond_66992.isBuiltAndFalse ()) {
          const GGS_bool cond_67173 = var_cas_useOSApplication ;
          if (cond_67173.isBuiltAndTrue ()) {
            var_cas_sc = GGS_uint64 (3ULL) ;
            var_cas_cpu.reader_os (inLexique COMMA_SOURCE_FILE_AT_LINE (1687)).reader_scalabilityclass (inLexique COMMA_SOURCE_FILE_AT_LINE (1687)).reader_location (inLexique COMMA_HERE).signalGGSSemanticWarning (inLexique, GGS_string ("SCALABILITYCLASS set to 3 because OS Application is used") COMMA_SOURCE_FILE_AT_LINE (1687)) ;
          }else if (cond_67173.isBuiltAndFalse ()) {
            var_cas_sc = GGS_uint64 (1ULL) ;
          }
        }
      }else if (cond_67241.isBuiltAndFalse ()) {
        const GGS_bool cond_67803 = (var_cas_setSC).operator_isEqual (GGS_string ("sc2")) ;
        if (cond_67803.isBuiltAndTrue ()) {
          const GGS_bool cond_67554 = var_cas_useTimingProtection ;
          if (cond_67554.isBuiltAndTrue ()) {
            const GGS_bool cond_67501 = var_cas_useOSApplication ;
            if (cond_67501.isBuiltAndTrue ()) {
              var_cas_sc = GGS_uint64 (4ULL) ;
              var_cas_cpu.reader_os (inLexique COMMA_SOURCE_FILE_AT_LINE (1696)).reader_scalabilityclass (inLexique COMMA_SOURCE_FILE_AT_LINE (1696)).reader_location (inLexique COMMA_HERE).signalGGSSemanticWarning (inLexique, GGS_string ("SCALABILITYCLASS set to 4 because Timing Protection and OS Application are used") COMMA_SOURCE_FILE_AT_LINE (1696)) ;
            }else if (cond_67501.isBuiltAndFalse ()) {
              var_cas_sc = GGS_uint64 (2ULL) ;
            }
          }else if (cond_67554.isBuiltAndFalse ()) {
            const GGS_bool cond_67735 = var_cas_useOSApplication ;
            if (cond_67735.isBuiltAndTrue ()) {
              var_cas_sc = GGS_uint64 (3ULL) ;
              var_cas_cpu.reader_os (inLexique COMMA_SOURCE_FILE_AT_LINE (1703)).reader_scalabilityclass (inLexique COMMA_SOURCE_FILE_AT_LINE (1703)).reader_location (inLexique COMMA_HERE).signalGGSSemanticWarning (inLexique, GGS_string ("SCALABILITYCLASS set to 3 because OS Application is used") COMMA_SOURCE_FILE_AT_LINE (1703)) ;
            }else if (cond_67735.isBuiltAndFalse ()) {
              var_cas_sc = GGS_uint64 (2ULL) ;
            }
          }
        }else if (cond_67803.isBuiltAndFalse ()) {
          const GGS_bool cond_68164 = (var_cas_setSC).operator_isEqual (GGS_string ("sc3")) ;
          if (cond_68164.isBuiltAndTrue ()) {
            const GGS_bool cond_68116 = var_cas_useTimingProtection ;
            if (cond_68116.isBuiltAndTrue ()) {
              const GGS_bool cond_68063 = var_cas_useOSApplication ;
              if (cond_68063.isBuiltAndTrue ()) {
                var_cas_sc = GGS_uint64 (4ULL) ;
                var_cas_cpu.reader_os (inLexique COMMA_SOURCE_FILE_AT_LINE (1712)).reader_scalabilityclass (inLexique COMMA_SOURCE_FILE_AT_LINE (1712)).reader_location (inLexique COMMA_HERE).signalGGSSemanticWarning (inLexique, GGS_string ("SCALABILITYCLASS set to 4 because Timing Protection and OS Application are used") COMMA_SOURCE_FILE_AT_LINE (1712)) ;
              }else if (cond_68063.isBuiltAndFalse ()) {
                var_cas_sc = GGS_uint64 (3ULL) ;
              }
            }else if (cond_68116.isBuiltAndFalse ()) {
              var_cas_sc = GGS_uint64 (3ULL) ;
            }
          }else if (cond_68164.isBuiltAndFalse ()) {
            const GGS_bool cond_68198 = (var_cas_setSC).operator_isEqual (GGS_string ("sc4")) ;
            if (cond_68198.isBuiltAndTrue ()) {
              var_cas_sc = GGS_uint64 (4ULL) ;
            }
          }
        }
      }
    }
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_scalabilityClass\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//             Implementation of routine "setScalabilityClass"               *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_setScalabilityClass (C_Compiler & inLexique,
                                const GGS_root_obj   var_cas_cpu,
                                GGS_goilTemplateVariableMap  & var_cas_cfg
                        COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_setScalabilityClass at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  GGS_uint64  var_cas_sc ;
  GGS_bool var_cas_useTimingProtection ;
  GGS_bool var_cas_useProtectionHook ;
  ::routine_scalabilityClass (inLexique,  var_cas_cpu,  var_cas_sc,  var_cas_useTimingProtection,  var_cas_useProtectionHook COMMA_SOURCE_FILE_AT_LINE (1732)) ;
  ::routine_addUnsignedValue (inLexique,  var_cas_cfg,  function_lstringWith (inLexique, GGS_string ("SCALABILITYCLASS") COMMA_SOURCE_FILE_AT_LINE (1733)),  var_cas_sc COMMA_SOURCE_FILE_AT_LINE (1733)) ;
  ::routine_addBoolValue (inLexique,  var_cas_cfg,  function_lstringWith (inLexique, GGS_string ("USETIMINGPROTECTION") COMMA_SOURCE_FILE_AT_LINE (1734)),  var_cas_useTimingProtection COMMA_SOURCE_FILE_AT_LINE (1734)) ;
  ::routine_addBoolValue (inLexique,  var_cas_cfg,  function_lstringWith (inLexique, GGS_string ("USEPROTECTIONHOOK") COMMA_SOURCE_FILE_AT_LINE (1735)),  var_cas_useProtectionHook COMMA_SOURCE_FILE_AT_LINE (1735)) ;
  ::routine_addBoolValue (inLexique,  var_cas_cfg,  function_lstringWith (inLexique, GGS_string ("USEMEMORYPROTECTION") COMMA_SOURCE_FILE_AT_LINE (1736)),  function_memory_protection_on (inLexique, var_cas_cpu.reader_os (inLexique COMMA_SOURCE_FILE_AT_LINE (1736)) COMMA_SOURCE_FILE_AT_LINE (1736)) COMMA_SOURCE_FILE_AT_LINE (1736)) ;
  ::routine_addBoolValue (inLexique,  var_cas_cfg,  function_lstringWith (inLexique, GGS_string ("USEOSAPPLICATION") COMMA_SOURCE_FILE_AT_LINE (1737)),  ((var_cas_sc).operator_isEqual (GGS_uint64 (3ULL))).operator_or ((var_cas_sc).operator_isEqual (GGS_uint64 (4ULL))) COMMA_SOURCE_FILE_AT_LINE (1737)) ;
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_setScalabilityClass\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//                 Implementation of routine "setUseHooks"                   *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_setUseHooks (C_Compiler & inLexique,
                                const GGS_root_obj   var_cas_cpu,
                                GGS_goilTemplateVariableMap  & var_cas_cfg
                        COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_setUseHooks at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  ::routine_addBoolValue (inLexique,  var_cas_cfg,  GGS_lstring ::constructor_new (inLexique, GGS_string ("USESTARTUPHOOK"), var_cas_cpu.reader_os (inLexique COMMA_SOURCE_FILE_AT_LINE (1744)).reader_startuphook (inLexique COMMA_SOURCE_FILE_AT_LINE (1744)).reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (1744)) COMMA_SOURCE_FILE_AT_LINE (1744)),  function_getBool (inLexique, var_cas_cpu.reader_os (inLexique COMMA_SOURCE_FILE_AT_LINE (1744)).reader_startuphook (inLexique COMMA_SOURCE_FILE_AT_LINE (1744)), GGS_bool (false) COMMA_SOURCE_FILE_AT_LINE (1744)) COMMA_SOURCE_FILE_AT_LINE (1744)) ;
  ::routine_addBoolValue (inLexique,  var_cas_cfg,  GGS_lstring ::constructor_new (inLexique, GGS_string ("USESHUTDOWNHOOK"), var_cas_cpu.reader_os (inLexique COMMA_SOURCE_FILE_AT_LINE (1745)).reader_shutdownhook (inLexique COMMA_SOURCE_FILE_AT_LINE (1745)).reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (1745)) COMMA_SOURCE_FILE_AT_LINE (1745)),  function_getBool (inLexique, var_cas_cpu.reader_os (inLexique COMMA_SOURCE_FILE_AT_LINE (1745)).reader_shutdownhook (inLexique COMMA_SOURCE_FILE_AT_LINE (1745)), GGS_bool (false) COMMA_SOURCE_FILE_AT_LINE (1745)) COMMA_SOURCE_FILE_AT_LINE (1745)) ;
  ::routine_addBoolValue (inLexique,  var_cas_cfg,  GGS_lstring ::constructor_new (inLexique, GGS_string ("USEERRORHOOK"), var_cas_cpu.reader_os (inLexique COMMA_SOURCE_FILE_AT_LINE (1746)).reader_errorhook (inLexique COMMA_SOURCE_FILE_AT_LINE (1746)).reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (1746)) COMMA_SOURCE_FILE_AT_LINE (1746)),  function_getBool (inLexique, var_cas_cpu.reader_os (inLexique COMMA_SOURCE_FILE_AT_LINE (1746)).reader_errorhook (inLexique COMMA_SOURCE_FILE_AT_LINE (1746)), GGS_bool (false) COMMA_SOURCE_FILE_AT_LINE (1746)) COMMA_SOURCE_FILE_AT_LINE (1746)) ;
  ::routine_addBoolValue (inLexique,  var_cas_cfg,  GGS_lstring ::constructor_new (inLexique, GGS_string ("USEPRETASKHOOK"), var_cas_cpu.reader_os (inLexique COMMA_SOURCE_FILE_AT_LINE (1747)).reader_pretaskhook (inLexique COMMA_SOURCE_FILE_AT_LINE (1747)).reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (1747)) COMMA_SOURCE_FILE_AT_LINE (1747)),  function_getBool (inLexique, var_cas_cpu.reader_os (inLexique COMMA_SOURCE_FILE_AT_LINE (1747)).reader_pretaskhook (inLexique COMMA_SOURCE_FILE_AT_LINE (1747)), GGS_bool (false) COMMA_SOURCE_FILE_AT_LINE (1747)) COMMA_SOURCE_FILE_AT_LINE (1747)) ;
  ::routine_addBoolValue (inLexique,  var_cas_cfg,  GGS_lstring ::constructor_new (inLexique, GGS_string ("USEPOSTTASKHOOK"), var_cas_cpu.reader_os (inLexique COMMA_SOURCE_FILE_AT_LINE (1748)).reader_posttaskhook (inLexique COMMA_SOURCE_FILE_AT_LINE (1748)).reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (1748)) COMMA_SOURCE_FILE_AT_LINE (1748)),  function_getBool (inLexique, var_cas_cpu.reader_os (inLexique COMMA_SOURCE_FILE_AT_LINE (1748)).reader_posttaskhook (inLexique COMMA_SOURCE_FILE_AT_LINE (1748)), GGS_bool (false) COMMA_SOURCE_FILE_AT_LINE (1748)) COMMA_SOURCE_FILE_AT_LINE (1748)) ;
  ::routine_addBoolValue (inLexique,  var_cas_cfg,  GGS_lstring ::constructor_new (inLexique, GGS_string ("USEGETSERVICEID"), var_cas_cpu.reader_os (inLexique COMMA_SOURCE_FILE_AT_LINE (1749)).reader_usegetserviceid (inLexique COMMA_SOURCE_FILE_AT_LINE (1749)).reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (1749)) COMMA_SOURCE_FILE_AT_LINE (1749)),  function_getBool (inLexique, var_cas_cpu.reader_os (inLexique COMMA_SOURCE_FILE_AT_LINE (1749)).reader_usegetserviceid (inLexique COMMA_SOURCE_FILE_AT_LINE (1749)), GGS_bool (false) COMMA_SOURCE_FILE_AT_LINE (1749)) COMMA_SOURCE_FILE_AT_LINE (1749)) ;
  ::routine_addBoolValue (inLexique,  var_cas_cfg,  GGS_lstring ::constructor_new (inLexique, GGS_string ("USEPARAMETERACCESS"), var_cas_cpu.reader_os (inLexique COMMA_SOURCE_FILE_AT_LINE (1750)).reader_useparameteraccess (inLexique COMMA_SOURCE_FILE_AT_LINE (1750)).reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (1750)) COMMA_SOURCE_FILE_AT_LINE (1750)),  function_getBool (inLexique, var_cas_cpu.reader_os (inLexique COMMA_SOURCE_FILE_AT_LINE (1750)).reader_useparameteraccess (inLexique COMMA_SOURCE_FILE_AT_LINE (1750)), GGS_bool (false) COMMA_SOURCE_FILE_AT_LINE (1750)) COMMA_SOURCE_FILE_AT_LINE (1750)) ;
  ::routine_addBoolValue (inLexique,  var_cas_cfg,  GGS_lstring ::constructor_new (inLexique, GGS_string ("USERESSCHEDULER"), var_cas_cpu.reader_os (inLexique COMMA_SOURCE_FILE_AT_LINE (1751)).reader_useresscheduler (inLexique COMMA_SOURCE_FILE_AT_LINE (1751)).reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (1751)) COMMA_SOURCE_FILE_AT_LINE (1751)),  function_getBool (inLexique, var_cas_cpu.reader_os (inLexique COMMA_SOURCE_FILE_AT_LINE (1751)).reader_useresscheduler (inLexique COMMA_SOURCE_FILE_AT_LINE (1751)), GGS_bool (false) COMMA_SOURCE_FILE_AT_LINE (1751)) COMMA_SOURCE_FILE_AT_LINE (1751)) ;
  ::routine_addBoolValue (inLexique,  var_cas_cfg,  GGS_lstring ::constructor_new (inLexique, GGS_string ("USESTACKMONITORING"), var_cas_cpu.reader_os (inLexique COMMA_SOURCE_FILE_AT_LINE (1752)).reader_useresscheduler (inLexique COMMA_SOURCE_FILE_AT_LINE (1752)).reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (1752)) COMMA_SOURCE_FILE_AT_LINE (1752)),  function_getBool (inLexique, var_cas_cpu.reader_os (inLexique COMMA_SOURCE_FILE_AT_LINE (1752)).reader_stackmonitoring (inLexique COMMA_SOURCE_FILE_AT_LINE (1752)), GGS_bool (false) COMMA_SOURCE_FILE_AT_LINE (1752)) COMMA_SOURCE_FILE_AT_LINE (1752)) ;
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_setUseHooks\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//                 Implementation of routine "setOsConfig"                   *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_setOsConfig (C_Compiler & inLexique,
                                const GGS_root_obj   var_cas_cpu,
                                GGS_goilTemplateVariableMap  & var_cas_cfg
                        COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_setOsConfig at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  ::routine_setExtended (inLexique,  var_cas_cpu,  var_cas_cfg COMMA_SOURCE_FILE_AT_LINE (1756)) ;
  ::routine_setUseCom (inLexique,  var_cas_cpu,  var_cas_cfg COMMA_SOURCE_FILE_AT_LINE (1757)) ;
  ::routine_setScalabilityClass (inLexique,  var_cas_cpu,  var_cas_cfg COMMA_SOURCE_FILE_AT_LINE (1758)) ;
  ::routine_setUseHooks (inLexique,  var_cas_cpu,  var_cas_cfg COMMA_SOURCE_FILE_AT_LINE (1759)) ;
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_setOsConfig\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//             Implementation of routine "setInterruptSources"               *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_setInterruptSources (C_Compiler & inLexique,
                                const GGS_config   var_cas_targetConfiguration,
                                GGS_goilTemplateVariableMap  & var_cas_cfg
                        COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_setInterruptSources at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  const GGS_bool cond_71477 = var_cas_targetConfiguration.reader_hasKey (GGS_string ("it_sources")) ;
  if (cond_71477.isBuiltAndTrue ()) {
    GGS_basic_type  var_cas_interruptSources ;
    if (var_cas_targetConfiguration.isBuilt ()) {
      var_cas_targetConfiguration (HERE)->method_get (inLexique, function_lstringWith (inLexique, GGS_string ("it_sources") COMMA_SOURCE_FILE_AT_LINE (1768)), var_cas_interruptSources COMMA_SOURCE_FILE_AT_LINE (1768)) ;
    }
    { const GGS_basic_type _var_71465 = var_cas_interruptSources ; // CAST instruction
      if (_var_71465.getPtr () != NULL) {
        macroValidPointer (_var_71465.getPtr ()) ;
        if (typeid (cPtr_interrupts) == typeid (* (_var_71465.getPtr ()))) {
          const GGS_interrupts var_cas_interrupts (_var_71465.getPtr ()) ;
          ::routine_addLUnsignedValue (inLexique,  var_cas_cfg,  GGS_string ("ITSOURCESLENGTH"),  var_cas_interrupts.reader_it_count (inLexique COMMA_SOURCE_FILE_AT_LINE (1771)) COMMA_SOURCE_FILE_AT_LINE (1771)) ;
          GGS_goilTemplateFieldMapList  var_cas_interruptSourcesList = GGS_goilTemplateFieldMapList ::constructor_emptyList () ;
          {
            GGS_ident_map::cEnumerator enumerator_71041 (var_cas_interrupts.reader_it_sources (inLexique COMMA_SOURCE_FILE_AT_LINE (1773)), true) ;
            const GGS_ident_map::cElement * operand_71041 = NULL ;
            while (((operand_71041 = enumerator_71041.nextObject ()))) {
              macroValidPointer (operand_71041) ;
              GGS_goilTemplateFieldMap  var_cas_fieldMap = GGS_goilTemplateFieldMap ::constructor_emptyMap (inLexique COMMA_SOURCE_FILE_AT_LINE (1774)) ;
              ::routine_addLStringFieldValue (inLexique,  var_cas_fieldMap,  GGS_string ("NAME"),  operand_71041->mKey COMMA_SOURCE_FILE_AT_LINE (1775)) ;
              ::routine_addUnsignedFieldValue (inLexique,  var_cas_fieldMap,  GGS_lstring ::constructor_new (inLexique, GGS_string ("NUMBER"), operand_71041->mInfo.value.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (1776)) COMMA_SOURCE_FILE_AT_LINE (1776)),  function_uint64OrError (inLexique, operand_71041->mInfo.value, GGS_string ("interrupt source number") COMMA_SOURCE_FILE_AT_LINE (1776)) COMMA_SOURCE_FILE_AT_LINE (1776)) ;
              var_cas_interruptSourcesList.addAssign_operation (var_cas_fieldMap) ;
            }
          }
          ::routine_addListValue (inLexique,  var_cas_cfg,  function_lstringWith (inLexique, GGS_string ("INTERRUPTSOURCES") COMMA_SOURCE_FILE_AT_LINE (1779)),  var_cas_interruptSourcesList COMMA_SOURCE_FILE_AT_LINE (1779)) ;
        }else{
        }
      }
    }
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_setInterruptSources\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//             Implementation of routine "addDirectoryAndFile"               *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_addDirectoryAndFile (C_Compiler & inLexique,
                                GGS_goilTemplateFieldMapList  & var_cas_fileList,
                                const GGS_string  var_cas_directory,
                                const GGS_string  var_cas_file
                        COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_addDirectoryAndFile at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  GGS_goilTemplateFieldMap  var_cas_fieldMap = GGS_goilTemplateFieldMap ::constructor_emptyMap (inLexique COMMA_SOURCE_FILE_AT_LINE (1790)) ;
  ::routine_addStringFieldValue (inLexique,  var_cas_fieldMap,  function_lstringWith (inLexique, GGS_string ("DIRECTORY") COMMA_SOURCE_FILE_AT_LINE (1791)),  var_cas_directory COMMA_SOURCE_FILE_AT_LINE (1791)) ;
  ::routine_addStringFieldValue (inLexique,  var_cas_fieldMap,  function_lstringWith (inLexique, GGS_string ("FILE") COMMA_SOURCE_FILE_AT_LINE (1792)),  var_cas_file COMMA_SOURCE_FILE_AT_LINE (1792)) ;
  var_cas_fileList.addAssign_operation (var_cas_fieldMap) ;
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_addDirectoryAndFile\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//                  Implementation of routine "setEnvData"                   *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_setEnvData (C_Compiler & inLexique,
                                const GGS_root_obj   var_cas_cpu,
                                GGS_goilTemplateVariableMap  & var_cas_cfg
                        COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_setEnvData at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  ::routine_addStringValue (inLexique,  var_cas_cfg,  function_lstringWith (inLexique, GGS_string ("OILFILENAME") COMMA_SOURCE_FILE_AT_LINE (1800)),  GGS_string::constructor_stringWithSourceFilePath (inLexique COMMA_SOURCE_FILE_AT_LINE (1800)).reader_lastPathComponent () COMMA_SOURCE_FILE_AT_LINE (1800)) ;
  ::routine_addStringValue (inLexique,  var_cas_cfg,  GGS_lstring ::constructor_new (inLexique, GGS_string ("CPUNAME"), GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (1801)),  var_cas_cpu.reader_name (inLexique COMMA_SOURCE_FILE_AT_LINE (1801)).reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1801)) COMMA_SOURCE_FILE_AT_LINE (1801)) ;
  ::routine_addStringValue (inLexique,  var_cas_cfg,  GGS_lstring ::constructor_new (inLexique, GGS_string ("TIMESTAMP"), GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (1802)),  GGS_string::constructor_stringWithCurrentDateTime (inLexique COMMA_SOURCE_FILE_AT_LINE (1802)) COMMA_SOURCE_FILE_AT_LINE (1802)) ;
  GGS_lstring  var_cas_appName = function_applicationName (inLexique, var_cas_cpu.reader_os (inLexique COMMA_SOURCE_FILE_AT_LINE (1803)) COMMA_SOURCE_FILE_AT_LINE (1803)) ;
  ::routine_addStringValue (inLexique,  var_cas_cfg,  GGS_lstring ::constructor_new (inLexique, GGS_string ("APPNAME"), var_cas_appName.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (1804)) COMMA_SOURCE_FILE_AT_LINE (1804)),  var_cas_appName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1804)) COMMA_SOURCE_FILE_AT_LINE (1804)) ;
  ::routine_addStringValue (inLexique,  var_cas_cfg,  function_lstringWith (inLexique, GGS_string ("PROJECT") COMMA_SOURCE_FILE_AT_LINE (1805)),  function_projectName (inLexique COMMA_SOURCE_FILE_AT_LINE (1805)).reader_lastPathComponent () COMMA_SOURCE_FILE_AT_LINE (1805)) ;
  ::routine_addStringValue (inLexique,  var_cas_cfg,  function_lstringWith (inLexique, GGS_string ("PROJECTPATH") COMMA_SOURCE_FILE_AT_LINE (1806)),  function_projectName (inLexique COMMA_SOURCE_FILE_AT_LINE (1806)) COMMA_SOURCE_FILE_AT_LINE (1806)) ;
  ::routine_addBoolValue (inLexique,  var_cas_cfg,  function_lstringWith (inLexique, GGS_string ("USEBUILDFILE") COMMA_SOURCE_FILE_AT_LINE (1807)),  gOption_goil_5F_options_generate_5F_makefile.reader_value () COMMA_SOURCE_FILE_AT_LINE (1807)) ;
  ::routine_addBoolValue (inLexique,  var_cas_cfg,  function_lstringWith (inLexique, GGS_string ("USELOGFILE") COMMA_SOURCE_FILE_AT_LINE (1808)),  gOption_goil_5F_options_generate_5F_log.reader_value () COMMA_SOURCE_FILE_AT_LINE (1808)) ;
  GGS_goilTemplateFieldMapList  var_cas_fileList = GGS_goilTemplateFieldMapList ::constructor_emptyList () ;
  ::routine_addDirectoryAndFile (inLexique,  var_cas_fileList,  GGS_string ("os"),  GGS_string ("tpl_os_alarm_kernel.c") COMMA_SOURCE_FILE_AT_LINE (1813)) ;
  ::routine_addDirectoryAndFile (inLexique,  var_cas_fileList,  GGS_string ("os"),  GGS_string ("tpl_os_event_kernel.c") COMMA_SOURCE_FILE_AT_LINE (1814)) ;
  ::routine_addDirectoryAndFile (inLexique,  var_cas_fileList,  GGS_string ("os"),  GGS_string ("tpl_os_it_kernel.c") COMMA_SOURCE_FILE_AT_LINE (1815)) ;
  ::routine_addDirectoryAndFile (inLexique,  var_cas_fileList,  GGS_string ("os"),  GGS_string ("tpl_os_rez_kernel.c") COMMA_SOURCE_FILE_AT_LINE (1816)) ;
  ::routine_addDirectoryAndFile (inLexique,  var_cas_fileList,  GGS_string ("os"),  GGS_string ("tpl_os_task_kernel.c") COMMA_SOURCE_FILE_AT_LINE (1817)) ;
  ::routine_addDirectoryAndFile (inLexique,  var_cas_fileList,  GGS_string ("os"),  GGS_string ("tpl_os_timeobj_kernel.c") COMMA_SOURCE_FILE_AT_LINE (1818)) ;
  ::routine_addDirectoryAndFile (inLexique,  var_cas_fileList,  GGS_string ("os"),  GGS_string ("tpl_os_kernel.c") COMMA_SOURCE_FILE_AT_LINE (1819)) ;
  ::routine_addDirectoryAndFile (inLexique,  var_cas_fileList,  GGS_string ("os"),  GGS_string ("tpl_os_action.c") COMMA_SOURCE_FILE_AT_LINE (1820)) ;
  ::routine_addDirectoryAndFile (inLexique,  var_cas_fileList,  GGS_string ("os"),  GGS_string ("tpl_os_error.c") COMMA_SOURCE_FILE_AT_LINE (1821)) ;
  ::routine_addDirectoryAndFile (inLexique,  var_cas_fileList,  GGS_string ("os"),  GGS_string ("tpl_os_dispatch_table.c") COMMA_SOURCE_FILE_AT_LINE (1822)) ;
  ::routine_addDirectoryAndFile (inLexique,  var_cas_fileList,  GGS_string ("os"),  GGS_string ("tpl_os.c") COMMA_SOURCE_FILE_AT_LINE (1823)) ;
  const GGS_bool cond_73827 = (function_getBool (inLexique, var_cas_cpu.reader_os (inLexique COMMA_SOURCE_FILE_AT_LINE (1824)).reader_systemcall (inLexique COMMA_SOURCE_FILE_AT_LINE (1824)), GGS_bool (false) COMMA_SOURCE_FILE_AT_LINE (1824))).operator_not () ;
  if (cond_73827.isBuiltAndTrue ()) {
    ::routine_addDirectoryAndFile (inLexique,  var_cas_fileList,  GGS_string ("os"),  GGS_string ("tpl_os_alarm.c") COMMA_SOURCE_FILE_AT_LINE (1825)) ;
    ::routine_addDirectoryAndFile (inLexique,  var_cas_fileList,  GGS_string ("os"),  GGS_string ("tpl_os_event.c") COMMA_SOURCE_FILE_AT_LINE (1826)) ;
    ::routine_addDirectoryAndFile (inLexique,  var_cas_fileList,  GGS_string ("os"),  GGS_string ("tpl_os_it.c") COMMA_SOURCE_FILE_AT_LINE (1827)) ;
    ::routine_addDirectoryAndFile (inLexique,  var_cas_fileList,  GGS_string ("os"),  GGS_string ("tpl_os_rez.c") COMMA_SOURCE_FILE_AT_LINE (1828)) ;
    ::routine_addDirectoryAndFile (inLexique,  var_cas_fileList,  GGS_string ("os"),  GGS_string ("tpl_os_task.c") COMMA_SOURCE_FILE_AT_LINE (1829)) ;
  }
  { const GGS_trace _var_73947 = var_cas_cpu.reader_os (inLexique COMMA_SOURCE_FILE_AT_LINE (1831)).reader_trace (inLexique COMMA_SOURCE_FILE_AT_LINE (1831)) ; // CAST instruction
    if (_var_73947.getPtr () != NULL) {
      macroValidPointer (_var_73947.getPtr ()) ;
      if (typeid (cPtr_trace_on) == typeid (* (_var_73947.getPtr ()))) {
        ::routine_addDirectoryAndFile (inLexique,  var_cas_fileList,  GGS_string ("os"),  GGS_string ("tpl_trace.c") COMMA_SOURCE_FILE_AT_LINE (1833)) ;
      }else{
      }
    }
  }
  const GGS_bool cond_74597 = function_useCommunication (inLexique, var_cas_cpu COMMA_SOURCE_FILE_AT_LINE (1835)) ;
  if (cond_74597.isBuiltAndTrue ()) {
    ::routine_addDirectoryAndFile (inLexique,  var_cas_fileList,  GGS_string ("com"),  GGS_string ("tpl_com_app_copy.c") COMMA_SOURCE_FILE_AT_LINE (1836)) ;
    ::routine_addDirectoryAndFile (inLexique,  var_cas_fileList,  GGS_string ("com"),  GGS_string ("tpl_com_filtering.c") COMMA_SOURCE_FILE_AT_LINE (1837)) ;
    ::routine_addDirectoryAndFile (inLexique,  var_cas_fileList,  GGS_string ("com"),  GGS_string ("tpl_com_filters.c") COMMA_SOURCE_FILE_AT_LINE (1838)) ;
    ::routine_addDirectoryAndFile (inLexique,  var_cas_fileList,  GGS_string ("com"),  GGS_string ("tpl_com_internal_com.c") COMMA_SOURCE_FILE_AT_LINE (1839)) ;
    ::routine_addDirectoryAndFile (inLexique,  var_cas_fileList,  GGS_string ("com"),  GGS_string ("tpl_com_external_com.c") COMMA_SOURCE_FILE_AT_LINE (1840)) ;
    ::routine_addDirectoryAndFile (inLexique,  var_cas_fileList,  GGS_string ("com"),  GGS_string ("tpl_com_notification.c") COMMA_SOURCE_FILE_AT_LINE (1841)) ;
    ::routine_addDirectoryAndFile (inLexique,  var_cas_fileList,  GGS_string ("com"),  GGS_string ("tpl_com_queue.c") COMMA_SOURCE_FILE_AT_LINE (1842)) ;
    ::routine_addDirectoryAndFile (inLexique,  var_cas_fileList,  GGS_string ("com"),  GGS_string ("tpl_com_message_management.c") COMMA_SOURCE_FILE_AT_LINE (1843)) ;
    ::routine_addDirectoryAndFile (inLexique,  var_cas_fileList,  GGS_string ("com"),  GGS_string ("tpl_com_errorhook.c") COMMA_SOURCE_FILE_AT_LINE (1844)) ;
  }
  const GGS_bool cond_75874 = gOption_goil_5F_options_autosar_5F_on.reader_value () ;
  if (cond_75874.isBuiltAndTrue ()) {
    ::routine_addDirectoryAndFile (inLexique,  var_cas_fileList,  GGS_string ("autosar"),  GGS_string ("tpl_as_counter_kernel.c") COMMA_SOURCE_FILE_AT_LINE (1847)) ;
    ::routine_addDirectoryAndFile (inLexique,  var_cas_fileList,  GGS_string ("autosar"),  GGS_string ("tpl_as_st_kernel.c") COMMA_SOURCE_FILE_AT_LINE (1848)) ;
    ::routine_addDirectoryAndFile (inLexique,  var_cas_fileList,  GGS_string ("autosar"),  GGS_string ("tpl_as_isr_kernel.c") COMMA_SOURCE_FILE_AT_LINE (1849)) ;
    ::routine_addDirectoryAndFile (inLexique,  var_cas_fileList,  GGS_string ("autosar"),  GGS_string ("tpl_as_stack_monitor.c") COMMA_SOURCE_FILE_AT_LINE (1850)) ;
    ::routine_addDirectoryAndFile (inLexique,  var_cas_fileList,  GGS_string ("autosar"),  GGS_string ("tpl_as_timing_protec.c") COMMA_SOURCE_FILE_AT_LINE (1851)) ;
    ::routine_addDirectoryAndFile (inLexique,  var_cas_fileList,  GGS_string ("autosar"),  GGS_string ("tpl_as_action.c") COMMA_SOURCE_FILE_AT_LINE (1852)) ;
    ::routine_addDirectoryAndFile (inLexique,  var_cas_fileList,  GGS_string ("autosar"),  GGS_string ("tpl_as_protec_hook.c") COMMA_SOURCE_FILE_AT_LINE (1853)) ;
    GGS_uint64  var_cas_sc ;
    GGS_bool automatic_var_75199_0 ;
    GGS_bool automatic_var_75199_1 ;
    ::routine_scalabilityClass (inLexique,  var_cas_cpu,  var_cas_sc,  automatic_var_75199_0,  automatic_var_75199_1 COMMA_SOURCE_FILE_AT_LINE (1855)) ;
    const GGS_bool cond_75392 = ((var_cas_sc).operator_isEqual (GGS_uint64 (3ULL))).operator_or ((var_cas_sc).operator_isEqual (GGS_uint64 (4ULL))) ;
    if (cond_75392.isBuiltAndTrue ()) {
      ::routine_addDirectoryAndFile (inLexique,  var_cas_fileList,  GGS_string ("autosar"),  GGS_string ("tpl_as_app_kernel.c") COMMA_SOURCE_FILE_AT_LINE (1857)) ;
      ::routine_addDirectoryAndFile (inLexique,  var_cas_fileList,  GGS_string ("autosar"),  GGS_string ("tpl_as_trusted_fct_kernel.c") COMMA_SOURCE_FILE_AT_LINE (1858)) ;
    }
    const GGS_bool cond_75864 = (function_getBool (inLexique, var_cas_cpu.reader_os (inLexique COMMA_SOURCE_FILE_AT_LINE (1860)).reader_systemcall (inLexique COMMA_SOURCE_FILE_AT_LINE (1860)), GGS_bool (false) COMMA_SOURCE_FILE_AT_LINE (1860))).operator_not () ;
    if (cond_75864.isBuiltAndTrue ()) {
      ::routine_addDirectoryAndFile (inLexique,  var_cas_fileList,  GGS_string ("autosar"),  GGS_string ("tpl_as_counter.c") COMMA_SOURCE_FILE_AT_LINE (1861)) ;
      ::routine_addDirectoryAndFile (inLexique,  var_cas_fileList,  GGS_string ("autosar"),  GGS_string ("tpl_as_isr.c") COMMA_SOURCE_FILE_AT_LINE (1862)) ;
      ::routine_addDirectoryAndFile (inLexique,  var_cas_fileList,  GGS_string ("autosar"),  GGS_string ("tpl_as_schedtable.c") COMMA_SOURCE_FILE_AT_LINE (1863)) ;
      const GGS_bool cond_75852 = ((var_cas_sc).operator_isEqual (GGS_uint64 (3ULL))).operator_or ((var_cas_sc).operator_isEqual (GGS_uint64 (4ULL))) ;
      if (cond_75852.isBuiltAndTrue ()) {
        ::routine_addDirectoryAndFile (inLexique,  var_cas_fileList,  GGS_string ("autosar"),  GGS_string ("tpl_as_trusted_fct.c") COMMA_SOURCE_FILE_AT_LINE (1865)) ;
        ::routine_addDirectoryAndFile (inLexique,  var_cas_fileList,  GGS_string ("autosar"),  GGS_string ("tpl_as_application.c") COMMA_SOURCE_FILE_AT_LINE (1866)) ;
      }
    }
  }
  ::routine_addListValue (inLexique,  var_cas_cfg,  function_lstringWith (inLexique, GGS_string ("TRAMPOLINESOURCEFILES") COMMA_SOURCE_FILE_AT_LINE (1870)),  var_cas_fileList COMMA_SOURCE_FILE_AT_LINE (1870)) ;
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_setEnvData\n") ;
  #endif
}

//---------------------------------------------------------------------------*

