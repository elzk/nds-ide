//---------------------------------------------------------------------------*
//                                                                           *
//                      File 'goil_types_resource.cpp'                       *
//                        Generated by version 2.0.0                         *
//                       july 7th, 2010, at 17h16'16"                        *
//                                                                           *
//---------------------------------------------------------------------------*

//--- START OF USER ZONE 1


//--- END OF USER ZONE 1

//---------------------------------------------------------------------------*

#include "version_libpm.h"
#if CURRENT_LIBPM_VERSION != 820
  #error "This file has been compiled with a version of GALGAS that uses libpm version 820, different than the current version (CURRENT_LIBPM_VERSION) of libpm"
#endif

//---------------------------------------------------------------------------*

#include <typeinfo>
#include "utilities/MF_MemoryControl.h"
#include "files/C_TextFileWrite.h"
#include "galgas/C_galgas_CLI_Options.h"
#include "goil_types_resource.h"

//---------------------------------------------------------------------------*

#ifndef DO_NOT_GENERATE_CHECKINGS
  #define SOURCE_FILE_AT_LINE(line) "goil_types_resource.gSemantics", line
  #define COMMA_SOURCE_FILE_AT_LINE(line) , SOURCE_FILE_AT_LINE(line)
#else
  #define SOURCE_FILE_AT_LINE(line) 
  #define COMMA_SOURCE_FILE_AT_LINE(line) 
#endif


//--- START OF USER ZONE 2


//--- END OF USER ZONE 2

//---------------------------------------------------------------------------*
//                                                                           *
//                    class 'cPtr_resource_property_obj'                     *
//                                                                           *
//---------------------------------------------------------------------------*

cPtr_resource_property_obj::
cPtr_resource_property_obj (const GGS_location & argument_0
                                COMMA_LOCATION_ARGS)
:cPtr__AC_galgas_class (THERE),
location (argument_0) {
}

//---------------------------------------------------------------------------*

#ifndef DO_NOT_GENERATE_CHECKINGS
  cPtr_resource_property_obj * GGS_resource_property_obj::
  operator () (LOCATION_ARGS) const {
    macroValidObjectThere (mPointer, cPtr_resource_property_obj) ;
    return (cPtr_resource_property_obj *) mPointer ;
  }
#endif

//---------------------------------------------------------------------------*

void cPtr_resource_property_obj::
appendForDescription (C_String & ioString,
                      const PMSInt32 inIndentation) const {
  ioString << "->@resource_property_obj:"
           << location.reader_description (inIndentation + 1) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                              Class message                                *
//                                                                           *
//---------------------------------------------------------------------------*

const char * cPtr_resource_property_obj::
instanceMessage (void) const {
  return "" ;
}

//---------------------------------------------------------------------------*

const char * cPtr_resource_property_obj::
_static_message (void) {
  return "" ;
}

//---------------------------------------------------------------------------*

C_galgas_class_inspector _gInspectorFor_resource_property_obj (& typeid (cPtr_resource_property_obj), NULL, "") ;

//---------------------------------------------------------------------------*

AC_galgasClassRunTimeInformationEX * cPtr_resource_property_obj::galgasRTTI (void) const {
  return & gClassInfoFor__resource_property_obj ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                 GALGAS class 'GGS_resource_property_obj'                  *
//                                                                           *
//---------------------------------------------------------------------------*

const C_galgas_type_descriptorEX kTypeDescriptor_GGS_resource_property_obj ("resource_property_obj", true, NULL) ;

//---------------------------------------------------------------------------*

GGS_resource_property_obj::
GGS_resource_property_obj (const cPtr__AC_galgas_class * inPointer) {
  macroAssignObject (mPointer, (cPtr__AC_galgas_class *) inPointer) ;
}

//---------------------------------------------------------------------------*

GGS_resource_property_obj::
GGS_resource_property_obj (cPtr__AC_galgas_class & inObject) {
  macroAssignObject (mPointer, & inObject) ;
}

//---------------------------------------------------------------------------*

//--- castFrom class method (implements cast expression)
GGS_resource_property_obj GGS_resource_property_obj::
castFrom (C_Compiler & inLexique,
           cPtr__AC_galgas_class * inPointer,
           const bool inUseKindOfClass,
           const GGS_location & inErrorLocation
           COMMA_LOCATION_ARGS) {
  GGS_resource_property_obj result ;
  if (inPointer != NULL) {
    macroValidPointer (inPointer) ;
    const bool ok = inUseKindOfClass
      ? (dynamic_cast <cPtr_resource_property_obj *> (inPointer) != NULL)
      : (typeid (cPtr_resource_property_obj) == typeid (*inPointer)) ;
    if (ok) {
      result = GGS_resource_property_obj (inPointer) ;
    }else{
      inErrorLocation.signalCastError (inLexique,
                                       & typeid (cPtr_resource_property_obj),
                                       inUseKindOfClass,
                                       inPointer->instanceMessage ()
                                       COMMA_THERE) ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_location  GGS_resource_property_obj::
reader_location (C_Compiler & /* inLexique */ COMMA_UNUSED_LOCATION_ARGS) const {
  GGS_location   result ;
  if (mPointer != NULL) {
    macroValidPointer (mPointer) ;
    MF_Assert (dynamic_cast <cPtr_resource_property_obj *> (mPointer) != NULL,
               "dynamic cast error", 0, 0) ;
    result = ((cPtr_resource_property_obj *) mPointer)->location ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

const char * GGS_resource_property_obj::actualTypeName (void) const {
  return "resource_property_obj" ;
}

//---------------------------------------------------------------------------*

AC_galgasClassRunTimeInformationEX * GGS_resource_property_obj::galgasObjectRunTimeInfo (void) const {
  AC_galgasClassRunTimeInformationEX * result = NULL ;
  if (mPointer != NULL) {
    result = mPointer->galgasRTTI () ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

C_galgasRootClassRunTimeInformationEX gClassInfoFor__resource_property_obj ("resource_property_obj", & kTypeDescriptor_GGS_resource_property_obj) ;

//---------------------------------------------------------------------------*

GGS_object GGS_resource_property_obj::reader_object (void) const {
  GGS_object result ;
  if (isBuilt ()) {
    GGS_resource_property_obj * p = NULL ;
    macroMyNew (p, GGS_resource_property_obj (*this)) ;
    result = GGS_object (p) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_resource_property_obj GGS_resource_property_obj::castFromObject (C_Compiler & inLexique,
                                   const GGS_object & inObject,
                                   const GGS_location & inErrorLocation
                                   COMMA_LOCATION_ARGS) {
  GGS_resource_property_obj result ;
  const GGS__root * embeddedObject = inObject.embeddedObject () ;
  if (NULL != embeddedObject) {
    const GGS_resource_property_obj * p = dynamic_cast <const GGS_resource_property_obj *> (embeddedObject) ;
    if (NULL != p) {
      result = * p ;
    }else{
      castFromObjectErrorSignaling (inLexique, inErrorLocation, & kTypeDescriptor_GGS_resource_property_obj, embeddedObject COMMA_THERE) ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*

const C_galgas_type_descriptorEX * GGS_resource_property_obj::typeDescriptor (void) const {
  return & kTypeDescriptor_GGS_resource_property_obj ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                 class 'cPtr_resource_property_void_obj'                   *
//                                                                           *
//---------------------------------------------------------------------------*

cPtr_resource_property_void_obj::
cPtr_resource_property_void_obj (const GGS_location & argument_0
                                COMMA_LOCATION_ARGS)
:cPtr_resource_property_obj (argument_0 COMMA_THERE) {
}

//---------------------------------------------------------------------------*

#ifndef DO_NOT_GENERATE_CHECKINGS
  cPtr_resource_property_void_obj * GGS_resource_property_void_obj::
  operator () (LOCATION_ARGS) const {
    macroValidObjectThere (mPointer, cPtr_resource_property_void_obj) ;
    return (cPtr_resource_property_void_obj *) mPointer ;
  }
#endif

//---------------------------------------------------------------------------*

bool cPtr_resource_property_void_obj::
isEqualToObject (const cPtr__AC_galgas_class * inOperand) const {
  bool equal = typeid (this) == typeid (inOperand) ;
  if (equal) {
    const cPtr_resource_property_void_obj * ptr = dynamic_cast <const cPtr_resource_property_void_obj *> (inOperand) ;
    macroValidPointer (ptr) ;
    equal = location.operator_isEqual (ptr->location).boolValue () ;
  }
  return equal ;
}

//---------------------------------------------------------------------------*

void cPtr_resource_property_void_obj::
appendForDescription (C_String & ioString,
                      const PMSInt32 inIndentation) const {
  ioString << "->@resource_property_void_obj:"
           << location.reader_description (inIndentation + 1) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                              Class message                                *
//                                                                           *
//---------------------------------------------------------------------------*

const char * cPtr_resource_property_void_obj::
instanceMessage (void) const {
  return "" ;
}

//---------------------------------------------------------------------------*

const char * cPtr_resource_property_void_obj::
_static_message (void) {
  return "" ;
}

//---------------------------------------------------------------------------*

C_galgas_class_inspector _gInspectorFor_resource_property_void_obj (& typeid (cPtr_resource_property_void_obj), & typeid (cPtr_resource_property_obj), "") ;

//---------------------------------------------------------------------------*

AC_galgasClassRunTimeInformationEX * cPtr_resource_property_void_obj::galgasRTTI (void) const {
  return & gClassInfoFor__resource_property_void_obj ;
}

//---------------------------------------------------------------------------*

cPtr__AC_galgas_class * cPtr_resource_property_void_obj::makeClone (void) const {
  cPtr__AC_galgas_class * result = NULL ;
  macroMyNew (result, cPtr_resource_property_void_obj (location COMMA_HERE)) ;
  return result ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//              GALGAS class 'GGS_resource_property_void_obj'                *
//                                                                           *
//---------------------------------------------------------------------------*

const C_galgas_type_descriptorEX kTypeDescriptor_GGS_resource_property_void_obj ("resource_property_void_obj", true, & kTypeDescriptor_GGS_resource_property_obj) ;

//---------------------------------------------------------------------------*

GGS_resource_property_void_obj::
GGS_resource_property_void_obj (const cPtr__AC_galgas_class * inPointer) {
  macroAssignObject (mPointer, (cPtr__AC_galgas_class *) inPointer) ;
}

//---------------------------------------------------------------------------*

GGS_resource_property_void_obj::
GGS_resource_property_void_obj (cPtr__AC_galgas_class & inObject) {
  macroAssignObject (mPointer, & inObject) ;
}

//---------------------------------------------------------------------------*

//--- castFrom class method (implements cast expression)
GGS_resource_property_void_obj GGS_resource_property_void_obj::
castFrom (C_Compiler & inLexique,
           cPtr__AC_galgas_class * inPointer,
           const bool inUseKindOfClass,
           const GGS_location & inErrorLocation
           COMMA_LOCATION_ARGS) {
  GGS_resource_property_void_obj result ;
  if (inPointer != NULL) {
    macroValidPointer (inPointer) ;
    const bool ok = inUseKindOfClass
      ? (dynamic_cast <cPtr_resource_property_void_obj *> (inPointer) != NULL)
      : (typeid (cPtr_resource_property_void_obj) == typeid (*inPointer)) ;
    if (ok) {
      result = GGS_resource_property_void_obj (inPointer) ;
    }else{
      inErrorLocation.signalCastError (inLexique,
                                       & typeid (cPtr_resource_property_void_obj),
                                       inUseKindOfClass,
                                       inPointer->instanceMessage ()
                                       COMMA_THERE) ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_resource_property_void_obj GGS_resource_property_void_obj::
constructor_new (C_Compiler & /* inLexique */,
                 const GGS_location & argument_0
                                COMMA_LOCATION_ARGS) {
  GGS_resource_property_void_obj result ;
  macroMyNew (result.mPointer, cPtr_resource_property_void_obj (argument_0 COMMA_THERE)) ;
  macroRetainObject (result.mPointer) ;
  return result ;
}

//---------------------------------------------------------------------------*

const char * GGS_resource_property_void_obj::actualTypeName (void) const {
  return "resource_property_void_obj" ;
}

//---------------------------------------------------------------------------*

C_galgasClassRunTimeInformationEX gClassInfoFor__resource_property_void_obj ("resource_property_void_obj", gClassInfoFor__resource_property_obj, & kTypeDescriptor_GGS_resource_property_void_obj) ;

//---------------------------------------------------------------------------*

GGS_object GGS_resource_property_void_obj::reader_object (void) const {
  GGS_object result ;
  if (isBuilt ()) {
    GGS_resource_property_void_obj * p = NULL ;
    macroMyNew (p, GGS_resource_property_void_obj (*this)) ;
    result = GGS_object (p) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_resource_property_void_obj GGS_resource_property_void_obj::castFromObject (C_Compiler & inLexique,
                                   const GGS_object & inObject,
                                   const GGS_location & inErrorLocation
                                   COMMA_LOCATION_ARGS) {
  GGS_resource_property_void_obj result ;
  const GGS__root * embeddedObject = inObject.embeddedObject () ;
  if (NULL != embeddedObject) {
    const GGS_resource_property_void_obj * p = dynamic_cast <const GGS_resource_property_void_obj *> (embeddedObject) ;
    if (NULL != p) {
      result = * p ;
    }else{
      castFromObjectErrorSignaling (inLexique, inErrorLocation, & kTypeDescriptor_GGS_resource_property_void_obj, embeddedObject COMMA_THERE) ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*

const C_galgas_type_descriptorEX * GGS_resource_property_void_obj::typeDescriptor (void) const {
  return & kTypeDescriptor_GGS_resource_property_void_obj ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//               class 'cPtr_resource_property_standard_obj'                 *
//                                                                           *
//---------------------------------------------------------------------------*

cPtr_resource_property_standard_obj::
cPtr_resource_property_standard_obj (const GGS_location & argument_0
                                COMMA_LOCATION_ARGS)
:cPtr_resource_property_obj (argument_0 COMMA_THERE) {
}

//---------------------------------------------------------------------------*

#ifndef DO_NOT_GENERATE_CHECKINGS
  cPtr_resource_property_standard_obj * GGS_resource_property_standard_obj::
  operator () (LOCATION_ARGS) const {
    macroValidObjectThere (mPointer, cPtr_resource_property_standard_obj) ;
    return (cPtr_resource_property_standard_obj *) mPointer ;
  }
#endif

//---------------------------------------------------------------------------*

bool cPtr_resource_property_standard_obj::
isEqualToObject (const cPtr__AC_galgas_class * inOperand) const {
  bool equal = typeid (this) == typeid (inOperand) ;
  if (equal) {
    const cPtr_resource_property_standard_obj * ptr = dynamic_cast <const cPtr_resource_property_standard_obj *> (inOperand) ;
    macroValidPointer (ptr) ;
    equal = location.operator_isEqual (ptr->location).boolValue () ;
  }
  return equal ;
}

//---------------------------------------------------------------------------*

void cPtr_resource_property_standard_obj::
appendForDescription (C_String & ioString,
                      const PMSInt32 inIndentation) const {
  ioString << "->@resource_property_standard_obj:"
           << location.reader_description (inIndentation + 1) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                              Class message                                *
//                                                                           *
//---------------------------------------------------------------------------*

const char * cPtr_resource_property_standard_obj::
instanceMessage (void) const {
  return "" ;
}

//---------------------------------------------------------------------------*

const char * cPtr_resource_property_standard_obj::
_static_message (void) {
  return "" ;
}

//---------------------------------------------------------------------------*

C_galgas_class_inspector _gInspectorFor_resource_property_standard_obj (& typeid (cPtr_resource_property_standard_obj), & typeid (cPtr_resource_property_obj), "") ;

//---------------------------------------------------------------------------*

AC_galgasClassRunTimeInformationEX * cPtr_resource_property_standard_obj::galgasRTTI (void) const {
  return & gClassInfoFor__resource_property_standard_obj ;
}

//---------------------------------------------------------------------------*

cPtr__AC_galgas_class * cPtr_resource_property_standard_obj::makeClone (void) const {
  cPtr__AC_galgas_class * result = NULL ;
  macroMyNew (result, cPtr_resource_property_standard_obj (location COMMA_HERE)) ;
  return result ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//            GALGAS class 'GGS_resource_property_standard_obj'              *
//                                                                           *
//---------------------------------------------------------------------------*

const C_galgas_type_descriptorEX kTypeDescriptor_GGS_resource_property_standard_obj ("resource_property_standard_obj", true, & kTypeDescriptor_GGS_resource_property_obj) ;

//---------------------------------------------------------------------------*

GGS_resource_property_standard_obj::
GGS_resource_property_standard_obj (const cPtr__AC_galgas_class * inPointer) {
  macroAssignObject (mPointer, (cPtr__AC_galgas_class *) inPointer) ;
}

//---------------------------------------------------------------------------*

GGS_resource_property_standard_obj::
GGS_resource_property_standard_obj (cPtr__AC_galgas_class & inObject) {
  macroAssignObject (mPointer, & inObject) ;
}

//---------------------------------------------------------------------------*

//--- castFrom class method (implements cast expression)
GGS_resource_property_standard_obj GGS_resource_property_standard_obj::
castFrom (C_Compiler & inLexique,
           cPtr__AC_galgas_class * inPointer,
           const bool inUseKindOfClass,
           const GGS_location & inErrorLocation
           COMMA_LOCATION_ARGS) {
  GGS_resource_property_standard_obj result ;
  if (inPointer != NULL) {
    macroValidPointer (inPointer) ;
    const bool ok = inUseKindOfClass
      ? (dynamic_cast <cPtr_resource_property_standard_obj *> (inPointer) != NULL)
      : (typeid (cPtr_resource_property_standard_obj) == typeid (*inPointer)) ;
    if (ok) {
      result = GGS_resource_property_standard_obj (inPointer) ;
    }else{
      inErrorLocation.signalCastError (inLexique,
                                       & typeid (cPtr_resource_property_standard_obj),
                                       inUseKindOfClass,
                                       inPointer->instanceMessage ()
                                       COMMA_THERE) ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_resource_property_standard_obj GGS_resource_property_standard_obj::
constructor_new (C_Compiler & /* inLexique */,
                 const GGS_location & argument_0
                                COMMA_LOCATION_ARGS) {
  GGS_resource_property_standard_obj result ;
  macroMyNew (result.mPointer, cPtr_resource_property_standard_obj (argument_0 COMMA_THERE)) ;
  macroRetainObject (result.mPointer) ;
  return result ;
}

//---------------------------------------------------------------------------*

const char * GGS_resource_property_standard_obj::actualTypeName (void) const {
  return "resource_property_standard_obj" ;
}

//---------------------------------------------------------------------------*

C_galgasClassRunTimeInformationEX gClassInfoFor__resource_property_standard_obj ("resource_property_standard_obj", gClassInfoFor__resource_property_obj, & kTypeDescriptor_GGS_resource_property_standard_obj) ;

//---------------------------------------------------------------------------*

GGS_object GGS_resource_property_standard_obj::reader_object (void) const {
  GGS_object result ;
  if (isBuilt ()) {
    GGS_resource_property_standard_obj * p = NULL ;
    macroMyNew (p, GGS_resource_property_standard_obj (*this)) ;
    result = GGS_object (p) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_resource_property_standard_obj GGS_resource_property_standard_obj::castFromObject (C_Compiler & inLexique,
                                   const GGS_object & inObject,
                                   const GGS_location & inErrorLocation
                                   COMMA_LOCATION_ARGS) {
  GGS_resource_property_standard_obj result ;
  const GGS__root * embeddedObject = inObject.embeddedObject () ;
  if (NULL != embeddedObject) {
    const GGS_resource_property_standard_obj * p = dynamic_cast <const GGS_resource_property_standard_obj *> (embeddedObject) ;
    if (NULL != p) {
      result = * p ;
    }else{
      castFromObjectErrorSignaling (inLexique, inErrorLocation, & kTypeDescriptor_GGS_resource_property_standard_obj, embeddedObject COMMA_THERE) ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*

const C_galgas_type_descriptorEX * GGS_resource_property_standard_obj::typeDescriptor (void) const {
  return & kTypeDescriptor_GGS_resource_property_standard_obj ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                class 'cPtr_resource_property_linked_obj'                  *
//                                                                           *
//---------------------------------------------------------------------------*

cPtr_resource_property_linked_obj::
cPtr_resource_property_linked_obj (const GGS_location & argument_0,
                                const GGS_lstring & argument_1
                                COMMA_LOCATION_ARGS)
:cPtr_resource_property_obj (argument_0 COMMA_THERE),
linked_resource (argument_1) {
}

//---------------------------------------------------------------------------*

#ifndef DO_NOT_GENERATE_CHECKINGS
  cPtr_resource_property_linked_obj * GGS_resource_property_linked_obj::
  operator () (LOCATION_ARGS) const {
    macroValidObjectThere (mPointer, cPtr_resource_property_linked_obj) ;
    return (cPtr_resource_property_linked_obj *) mPointer ;
  }
#endif

//---------------------------------------------------------------------------*

bool cPtr_resource_property_linked_obj::
isEqualToObject (const cPtr__AC_galgas_class * inOperand) const {
  bool equal = typeid (this) == typeid (inOperand) ;
  if (equal) {
    const cPtr_resource_property_linked_obj * ptr = dynamic_cast <const cPtr_resource_property_linked_obj *> (inOperand) ;
    macroValidPointer (ptr) ;
    equal = location.operator_isEqual (ptr->location).boolValue ()
         && linked_resource.operator_isEqual (ptr->linked_resource).boolValue () ;
  }
  return equal ;
}

//---------------------------------------------------------------------------*

void cPtr_resource_property_linked_obj::
appendForDescription (C_String & ioString,
                      const PMSInt32 inIndentation) const {
  ioString << "->@resource_property_linked_obj:"
           << location.reader_description (inIndentation + 1)
           << linked_resource.reader_description (inIndentation + 1) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                              Class message                                *
//                                                                           *
//---------------------------------------------------------------------------*

const char * cPtr_resource_property_linked_obj::
instanceMessage (void) const {
  return "" ;
}

//---------------------------------------------------------------------------*

const char * cPtr_resource_property_linked_obj::
_static_message (void) {
  return "" ;
}

//---------------------------------------------------------------------------*

C_galgas_class_inspector _gInspectorFor_resource_property_linked_obj (& typeid (cPtr_resource_property_linked_obj), & typeid (cPtr_resource_property_obj), "") ;

//---------------------------------------------------------------------------*

AC_galgasClassRunTimeInformationEX * cPtr_resource_property_linked_obj::galgasRTTI (void) const {
  return & gClassInfoFor__resource_property_linked_obj ;
}

//---------------------------------------------------------------------------*

cPtr__AC_galgas_class * cPtr_resource_property_linked_obj::makeClone (void) const {
  cPtr__AC_galgas_class * result = NULL ;
  macroMyNew (result, cPtr_resource_property_linked_obj (location, linked_resource COMMA_HERE)) ;
  return result ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//             GALGAS class 'GGS_resource_property_linked_obj'               *
//                                                                           *
//---------------------------------------------------------------------------*

const C_galgas_type_descriptorEX kTypeDescriptor_GGS_resource_property_linked_obj ("resource_property_linked_obj", true, & kTypeDescriptor_GGS_resource_property_obj) ;

//---------------------------------------------------------------------------*

GGS_resource_property_linked_obj::
GGS_resource_property_linked_obj (const cPtr__AC_galgas_class * inPointer) {
  macroAssignObject (mPointer, (cPtr__AC_galgas_class *) inPointer) ;
}

//---------------------------------------------------------------------------*

GGS_resource_property_linked_obj::
GGS_resource_property_linked_obj (cPtr__AC_galgas_class & inObject) {
  macroAssignObject (mPointer, & inObject) ;
}

//---------------------------------------------------------------------------*

//--- castFrom class method (implements cast expression)
GGS_resource_property_linked_obj GGS_resource_property_linked_obj::
castFrom (C_Compiler & inLexique,
           cPtr__AC_galgas_class * inPointer,
           const bool inUseKindOfClass,
           const GGS_location & inErrorLocation
           COMMA_LOCATION_ARGS) {
  GGS_resource_property_linked_obj result ;
  if (inPointer != NULL) {
    macroValidPointer (inPointer) ;
    const bool ok = inUseKindOfClass
      ? (dynamic_cast <cPtr_resource_property_linked_obj *> (inPointer) != NULL)
      : (typeid (cPtr_resource_property_linked_obj) == typeid (*inPointer)) ;
    if (ok) {
      result = GGS_resource_property_linked_obj (inPointer) ;
    }else{
      inErrorLocation.signalCastError (inLexique,
                                       & typeid (cPtr_resource_property_linked_obj),
                                       inUseKindOfClass,
                                       inPointer->instanceMessage ()
                                       COMMA_THERE) ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_resource_property_linked_obj GGS_resource_property_linked_obj::
constructor_new (C_Compiler & /* inLexique */,
                 const GGS_location & argument_0,
                 const GGS_lstring & argument_1
                                COMMA_LOCATION_ARGS) {
  GGS_resource_property_linked_obj result ;
  macroMyNew (result.mPointer, cPtr_resource_property_linked_obj (argument_0,
                                argument_1 COMMA_THERE)) ;
  macroRetainObject (result.mPointer) ;
  return result ;
}

//---------------------------------------------------------------------------*

GGS_lstring  GGS_resource_property_linked_obj::
reader_linked_resource (C_Compiler & /* inLexique */ COMMA_UNUSED_LOCATION_ARGS) const {
  GGS_lstring   result ;
  if (mPointer != NULL) {
    macroValidPointer (mPointer) ;
    MF_Assert (dynamic_cast <cPtr_resource_property_linked_obj *> (mPointer) != NULL,
               "dynamic cast error", 0, 0) ;
    result = ((cPtr_resource_property_linked_obj *) mPointer)->linked_resource ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

const char * GGS_resource_property_linked_obj::actualTypeName (void) const {
  return "resource_property_linked_obj" ;
}

//---------------------------------------------------------------------------*

C_galgasClassRunTimeInformationEX gClassInfoFor__resource_property_linked_obj ("resource_property_linked_obj", gClassInfoFor__resource_property_obj, & kTypeDescriptor_GGS_resource_property_linked_obj) ;

//---------------------------------------------------------------------------*

GGS_object GGS_resource_property_linked_obj::reader_object (void) const {
  GGS_object result ;
  if (isBuilt ()) {
    GGS_resource_property_linked_obj * p = NULL ;
    macroMyNew (p, GGS_resource_property_linked_obj (*this)) ;
    result = GGS_object (p) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_resource_property_linked_obj GGS_resource_property_linked_obj::castFromObject (C_Compiler & inLexique,
                                   const GGS_object & inObject,
                                   const GGS_location & inErrorLocation
                                   COMMA_LOCATION_ARGS) {
  GGS_resource_property_linked_obj result ;
  const GGS__root * embeddedObject = inObject.embeddedObject () ;
  if (NULL != embeddedObject) {
    const GGS_resource_property_linked_obj * p = dynamic_cast <const GGS_resource_property_linked_obj *> (embeddedObject) ;
    if (NULL != p) {
      result = * p ;
    }else{
      castFromObjectErrorSignaling (inLexique, inErrorLocation, & kTypeDescriptor_GGS_resource_property_linked_obj, embeddedObject COMMA_THERE) ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*

const C_galgas_type_descriptorEX * GGS_resource_property_linked_obj::typeDescriptor (void) const {
  return & kTypeDescriptor_GGS_resource_property_linked_obj ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//               class 'cPtr_resource_property_internal_obj'                 *
//                                                                           *
//---------------------------------------------------------------------------*

cPtr_resource_property_internal_obj::
cPtr_resource_property_internal_obj (const GGS_location & argument_0
                                COMMA_LOCATION_ARGS)
:cPtr_resource_property_obj (argument_0 COMMA_THERE) {
}

//---------------------------------------------------------------------------*

#ifndef DO_NOT_GENERATE_CHECKINGS
  cPtr_resource_property_internal_obj * GGS_resource_property_internal_obj::
  operator () (LOCATION_ARGS) const {
    macroValidObjectThere (mPointer, cPtr_resource_property_internal_obj) ;
    return (cPtr_resource_property_internal_obj *) mPointer ;
  }
#endif

//---------------------------------------------------------------------------*

bool cPtr_resource_property_internal_obj::
isEqualToObject (const cPtr__AC_galgas_class * inOperand) const {
  bool equal = typeid (this) == typeid (inOperand) ;
  if (equal) {
    const cPtr_resource_property_internal_obj * ptr = dynamic_cast <const cPtr_resource_property_internal_obj *> (inOperand) ;
    macroValidPointer (ptr) ;
    equal = location.operator_isEqual (ptr->location).boolValue () ;
  }
  return equal ;
}

//---------------------------------------------------------------------------*

void cPtr_resource_property_internal_obj::
appendForDescription (C_String & ioString,
                      const PMSInt32 inIndentation) const {
  ioString << "->@resource_property_internal_obj:"
           << location.reader_description (inIndentation + 1) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                              Class message                                *
//                                                                           *
//---------------------------------------------------------------------------*

const char * cPtr_resource_property_internal_obj::
instanceMessage (void) const {
  return "" ;
}

//---------------------------------------------------------------------------*

const char * cPtr_resource_property_internal_obj::
_static_message (void) {
  return "" ;
}

//---------------------------------------------------------------------------*

C_galgas_class_inspector _gInspectorFor_resource_property_internal_obj (& typeid (cPtr_resource_property_internal_obj), & typeid (cPtr_resource_property_obj), "") ;

//---------------------------------------------------------------------------*

AC_galgasClassRunTimeInformationEX * cPtr_resource_property_internal_obj::galgasRTTI (void) const {
  return & gClassInfoFor__resource_property_internal_obj ;
}

//---------------------------------------------------------------------------*

cPtr__AC_galgas_class * cPtr_resource_property_internal_obj::makeClone (void) const {
  cPtr__AC_galgas_class * result = NULL ;
  macroMyNew (result, cPtr_resource_property_internal_obj (location COMMA_HERE)) ;
  return result ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//            GALGAS class 'GGS_resource_property_internal_obj'              *
//                                                                           *
//---------------------------------------------------------------------------*

const C_galgas_type_descriptorEX kTypeDescriptor_GGS_resource_property_internal_obj ("resource_property_internal_obj", true, & kTypeDescriptor_GGS_resource_property_obj) ;

//---------------------------------------------------------------------------*

GGS_resource_property_internal_obj::
GGS_resource_property_internal_obj (const cPtr__AC_galgas_class * inPointer) {
  macroAssignObject (mPointer, (cPtr__AC_galgas_class *) inPointer) ;
}

//---------------------------------------------------------------------------*

GGS_resource_property_internal_obj::
GGS_resource_property_internal_obj (cPtr__AC_galgas_class & inObject) {
  macroAssignObject (mPointer, & inObject) ;
}

//---------------------------------------------------------------------------*

//--- castFrom class method (implements cast expression)
GGS_resource_property_internal_obj GGS_resource_property_internal_obj::
castFrom (C_Compiler & inLexique,
           cPtr__AC_galgas_class * inPointer,
           const bool inUseKindOfClass,
           const GGS_location & inErrorLocation
           COMMA_LOCATION_ARGS) {
  GGS_resource_property_internal_obj result ;
  if (inPointer != NULL) {
    macroValidPointer (inPointer) ;
    const bool ok = inUseKindOfClass
      ? (dynamic_cast <cPtr_resource_property_internal_obj *> (inPointer) != NULL)
      : (typeid (cPtr_resource_property_internal_obj) == typeid (*inPointer)) ;
    if (ok) {
      result = GGS_resource_property_internal_obj (inPointer) ;
    }else{
      inErrorLocation.signalCastError (inLexique,
                                       & typeid (cPtr_resource_property_internal_obj),
                                       inUseKindOfClass,
                                       inPointer->instanceMessage ()
                                       COMMA_THERE) ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_resource_property_internal_obj GGS_resource_property_internal_obj::
constructor_new (C_Compiler & /* inLexique */,
                 const GGS_location & argument_0
                                COMMA_LOCATION_ARGS) {
  GGS_resource_property_internal_obj result ;
  macroMyNew (result.mPointer, cPtr_resource_property_internal_obj (argument_0 COMMA_THERE)) ;
  macroRetainObject (result.mPointer) ;
  return result ;
}

//---------------------------------------------------------------------------*

const char * GGS_resource_property_internal_obj::actualTypeName (void) const {
  return "resource_property_internal_obj" ;
}

//---------------------------------------------------------------------------*

C_galgasClassRunTimeInformationEX gClassInfoFor__resource_property_internal_obj ("resource_property_internal_obj", gClassInfoFor__resource_property_obj, & kTypeDescriptor_GGS_resource_property_internal_obj) ;

//---------------------------------------------------------------------------*

GGS_object GGS_resource_property_internal_obj::reader_object (void) const {
  GGS_object result ;
  if (isBuilt ()) {
    GGS_resource_property_internal_obj * p = NULL ;
    macroMyNew (p, GGS_resource_property_internal_obj (*this)) ;
    result = GGS_object (p) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_resource_property_internal_obj GGS_resource_property_internal_obj::castFromObject (C_Compiler & inLexique,
                                   const GGS_object & inObject,
                                   const GGS_location & inErrorLocation
                                   COMMA_LOCATION_ARGS) {
  GGS_resource_property_internal_obj result ;
  const GGS__root * embeddedObject = inObject.embeddedObject () ;
  if (NULL != embeddedObject) {
    const GGS_resource_property_internal_obj * p = dynamic_cast <const GGS_resource_property_internal_obj *> (embeddedObject) ;
    if (NULL != p) {
      result = * p ;
    }else{
      castFromObjectErrorSignaling (inLexique, inErrorLocation, & kTypeDescriptor_GGS_resource_property_internal_obj, embeddedObject COMMA_THERE) ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*

const C_galgas_type_descriptorEX * GGS_resource_property_internal_obj::typeDescriptor (void) const {
  return & kTypeDescriptor_GGS_resource_property_internal_obj ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                        class 'cPtr_resource_obj'                          *
//                                                                           *
//---------------------------------------------------------------------------*

cPtr_resource_obj::
cPtr_resource_obj (const GGS_lstring & argument_0,
                                const GGS_resource_property_obj & argument_1,
                                const GGS_lstringlist & argument_2
                                COMMA_LOCATION_ARGS)
:cPtr_oil_obj (argument_0 COMMA_THERE),
property (argument_1),
acc_apps (argument_2) {
}

//---------------------------------------------------------------------------*

#ifndef DO_NOT_GENERATE_CHECKINGS
  cPtr_resource_obj * GGS_resource_obj::
  operator () (LOCATION_ARGS) const {
    macroValidObjectThere (mPointer, cPtr_resource_obj) ;
    return (cPtr_resource_obj *) mPointer ;
  }
#endif

//---------------------------------------------------------------------------*

bool cPtr_resource_obj::
isEqualToObject (const cPtr__AC_galgas_class * inOperand) const {
  bool equal = typeid (this) == typeid (inOperand) ;
  if (equal) {
    const cPtr_resource_obj * ptr = dynamic_cast <const cPtr_resource_obj *> (inOperand) ;
    macroValidPointer (ptr) ;
    equal = desc.operator_isEqual (ptr->desc).boolValue ()
         && property.operator_isEqual (ptr->property).boolValue ()
         && acc_apps.operator_isEqual (ptr->acc_apps).boolValue () ;
  }
  return equal ;
}

//---------------------------------------------------------------------------*

void cPtr_resource_obj::
appendForDescription (C_String & ioString,
                      const PMSInt32 inIndentation) const {
  ioString << "->@resource_obj:"
           << desc.reader_description (inIndentation + 1)
           << property.reader_description (inIndentation + 1)
           << acc_apps.reader_description (inIndentation + 1) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                              Class message                                *
//                                                                           *
//---------------------------------------------------------------------------*

const char * cPtr_resource_obj::
instanceMessage (void) const {
  return "" ;
}

//---------------------------------------------------------------------------*

const char * cPtr_resource_obj::
_static_message (void) {
  return "" ;
}

//---------------------------------------------------------------------------*

C_galgas_class_inspector _gInspectorFor_resource_obj (& typeid (cPtr_resource_obj), & typeid (cPtr_oil_obj), "") ;

//---------------------------------------------------------------------------*

AC_galgasClassRunTimeInformationEX * cPtr_resource_obj::galgasRTTI (void) const {
  return & gClassInfoFor__resource_obj ;
}

//---------------------------------------------------------------------------*

cPtr__AC_galgas_class * cPtr_resource_obj::makeClone (void) const {
  cPtr__AC_galgas_class * result = NULL ;
  macroMyNew (result, cPtr_resource_obj (desc, property, acc_apps COMMA_HERE)) ;
  return result ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                     GALGAS class 'GGS_resource_obj'                       *
//                                                                           *
//---------------------------------------------------------------------------*

const C_galgas_type_descriptorEX kTypeDescriptor_GGS_resource_obj ("resource_obj", true, & kTypeDescriptor_GGS_oil_obj) ;

//---------------------------------------------------------------------------*

GGS_resource_obj::
GGS_resource_obj (const cPtr__AC_galgas_class * inPointer) {
  macroAssignObject (mPointer, (cPtr__AC_galgas_class *) inPointer) ;
}

//---------------------------------------------------------------------------*

GGS_resource_obj::
GGS_resource_obj (cPtr__AC_galgas_class & inObject) {
  macroAssignObject (mPointer, & inObject) ;
}

//---------------------------------------------------------------------------*

//--- castFrom class method (implements cast expression)
GGS_resource_obj GGS_resource_obj::
castFrom (C_Compiler & inLexique,
           cPtr__AC_galgas_class * inPointer,
           const bool inUseKindOfClass,
           const GGS_location & inErrorLocation
           COMMA_LOCATION_ARGS) {
  GGS_resource_obj result ;
  if (inPointer != NULL) {
    macroValidPointer (inPointer) ;
    const bool ok = inUseKindOfClass
      ? (dynamic_cast <cPtr_resource_obj *> (inPointer) != NULL)
      : (typeid (cPtr_resource_obj) == typeid (*inPointer)) ;
    if (ok) {
      result = GGS_resource_obj (inPointer) ;
    }else{
      inErrorLocation.signalCastError (inLexique,
                                       & typeid (cPtr_resource_obj),
                                       inUseKindOfClass,
                                       inPointer->instanceMessage ()
                                       COMMA_THERE) ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_resource_obj GGS_resource_obj::
constructor_new (C_Compiler & /* inLexique */,
                 const GGS_lstring & argument_0,
                 const GGS_resource_property_obj & argument_1,
                 const GGS_lstringlist & argument_2
                                COMMA_LOCATION_ARGS) {
  GGS_resource_obj result ;
  macroMyNew (result.mPointer, cPtr_resource_obj (argument_0,
                                argument_1,
                                argument_2 COMMA_THERE)) ;
  macroRetainObject (result.mPointer) ;
  return result ;
}

//---------------------------------------------------------------------------*

GGS_resource_property_obj  GGS_resource_obj::
reader_property (C_Compiler & /* inLexique */ COMMA_UNUSED_LOCATION_ARGS) const {
  GGS_resource_property_obj   result ;
  if (mPointer != NULL) {
    macroValidPointer (mPointer) ;
    MF_Assert (dynamic_cast <cPtr_resource_obj *> (mPointer) != NULL,
               "dynamic cast error", 0, 0) ;
    result = ((cPtr_resource_obj *) mPointer)->property ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_lstringlist  GGS_resource_obj::
reader_acc_apps (C_Compiler & /* inLexique */ COMMA_UNUSED_LOCATION_ARGS) const {
  GGS_lstringlist   result ;
  if (mPointer != NULL) {
    macroValidPointer (mPointer) ;
    MF_Assert (dynamic_cast <cPtr_resource_obj *> (mPointer) != NULL,
               "dynamic cast error", 0, 0) ;
    result = ((cPtr_resource_obj *) mPointer)->acc_apps ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

void GGS_resource_obj::
modifier_setProperty (C_Compiler & /* inLexique */, const GGS_resource_property_obj & inValue COMMA_UNUSED_LOCATION_ARGS) {
  if ((mPointer != NULL) && inValue.isBuilt ()) {
    macroValidPointer (mPointer) ;
    if (mPointer->retainCount () > 1) {
      cPtr_resource_obj * clone = dynamic_cast <cPtr_resource_obj *> (mPointer->makeClone ()) ;
      macroValidPointer (clone) ;
      macroAssignObject (mPointer, clone) ;
    }
    ((cPtr_resource_obj *) mPointer)->property = inValue ;
  }
}

//---------------------------------------------------------------------------*

void GGS_resource_obj::
modifier_setAcc_apps (C_Compiler & /* inLexique */, const GGS_lstringlist & inValue COMMA_UNUSED_LOCATION_ARGS) {
  if ((mPointer != NULL) && inValue.isBuilt ()) {
    macroValidPointer (mPointer) ;
    if (mPointer->retainCount () > 1) {
      cPtr_resource_obj * clone = dynamic_cast <cPtr_resource_obj *> (mPointer->makeClone ()) ;
      macroValidPointer (clone) ;
      macroAssignObject (mPointer, clone) ;
    }
    ((cPtr_resource_obj *) mPointer)->acc_apps = inValue ;
  }
}

//---------------------------------------------------------------------------*

const char * GGS_resource_obj::actualTypeName (void) const {
  return "resource_obj" ;
}

//---------------------------------------------------------------------------*

C_galgasClassRunTimeInformationEX gClassInfoFor__resource_obj ("resource_obj", gClassInfoFor__oil_obj, & kTypeDescriptor_GGS_resource_obj) ;

//---------------------------------------------------------------------------*

GGS_object GGS_resource_obj::reader_object (void) const {
  GGS_object result ;
  if (isBuilt ()) {
    GGS_resource_obj * p = NULL ;
    macroMyNew (p, GGS_resource_obj (*this)) ;
    result = GGS_object (p) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_resource_obj GGS_resource_obj::castFromObject (C_Compiler & inLexique,
                                   const GGS_object & inObject,
                                   const GGS_location & inErrorLocation
                                   COMMA_LOCATION_ARGS) {
  GGS_resource_obj result ;
  const GGS__root * embeddedObject = inObject.embeddedObject () ;
  if (NULL != embeddedObject) {
    const GGS_resource_obj * p = dynamic_cast <const GGS_resource_obj *> (embeddedObject) ;
    if (NULL != p) {
      result = * p ;
    }else{
      castFromObjectErrorSignaling (inLexique, inErrorLocation, & kTypeDescriptor_GGS_resource_obj, embeddedObject COMMA_THERE) ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*

const C_galgas_type_descriptorEX * GGS_resource_obj::typeDescriptor (void) const {
  return & kTypeDescriptor_GGS_resource_obj ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                          class 'e_resource_map'                           *
//                                                                           *
//---------------------------------------------------------------------------*

e_resource_map::e_resource_map (void) :
resource () {
}

//---------------------------------------------------------------------------*
//                                                                           *
//                        class map '@resource_map'                          *
//                                                                           *
//---------------------------------------------------------------------------*

const C_galgas_type_descriptorEX kTypeDescriptor_GGS_resource_map ("resource_map", false, NULL) ;

//---------------------------------------------------------------------------*

elementOf_GGS_resource_map::
elementOf_GGS_resource_map (const GGS_lstring & inKey,
              const PMSInt32 inIndex,
              const e_resource_map & inInfo,
              const PMUInt32 inInitialState) :
AC_galgas_map_element (inKey, inIndex, inInitialState),
mInfo (inInfo) {
}

//---------------------------------------------------------------------------*

void elementOf_GGS_resource_map::
appendForMapDescription (const PMSInt32 inElementIndex,
                         C_String & ioString,
                         const PMSInt32 inIndentation) const {
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "|-key " ;
  ioString.appendSigned (inElementIndex) ;
  ioString << ":" << mKey.reader_description (inIndentation + 1) ;
  ioString << (mIsDefined ? "" : "(not solved)") ;
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "|-value " ;
  ioString.appendSigned (inElementIndex) ;
  ioString << ":" << mInfo.resource.reader_description (inIndentation + 1) ;
}

//---------------------------------------------------------------------------*

bool elementOf_GGS_resource_map::
isEqualToMapElement (const AC_galgas_map_element * inOperand) const {
  const elementOf_GGS_resource_map * ptr = dynamic_cast <const elementOf_GGS_resource_map *> (inOperand) ;
  macroValidPointer (ptr) ;
  return (mInfo.resource.operator_isEqual (ptr->mInfo.resource)).boolValue () ;
}

//---------------------------------------------------------------------------*

AC_galgas_map_element * GGS_resource_map::
new_element (const GGS_lstring & inKey, void * inInfo, const PMUInt32 inInitialState) {
  MF_Assert (reinterpret_cast <e_resource_map *> (inInfo) != NULL, "Dynamic cast error", 0, 0) ;
  AC_galgas_map_element * p = NULL ;
  e_resource_map * info = (e_resource_map *) inInfo ;
  macroMyNew (p, cElement (inKey, nextIndex (), * info, inInitialState)) ;
  return p ;
}

//---------------------------------------------------------------------------*

void GGS_resource_map::
assignInfo (AC_galgas_map_element * inPtr, void * inInfo) {
  MF_Assert (reinterpret_cast <cElement *> (inPtr) != NULL, "Dynamic cast error", 0, 0) ;
  MF_Assert (reinterpret_cast <e_resource_map *> (inInfo) != NULL, "Dynamic cast error", 0, 0) ;
  cElement * p = (cElement *) inPtr ;
  e_resource_map * info = (e_resource_map *) inInfo ;
  p->mInfo = * info ;
}

//---------------------------------------------------------------------------*

GGS_resource_map GGS_resource_map::
constructor_emptyMap (C_Compiler & /* inLexique */ COMMA_UNUSED_LOCATION_ARGS) {
  GGS_resource_map result ;
  macroMyNew (result.mSharedMapRoot, cMapRoot) ;
  return result ;
}

//---------------------------------------------------------------------------*

void GGS_resource_map::
enterIndex (const GGS_string & inKey,
            AC_galgas_index_core & outIndex) {
  e_resource_map info  ;
  internalEnterIndex (inKey,
                      (void *) & info,
                      outIndex) ;
}

//---------------------------------------------------------------------------*

GGS_bool GGS_resource_map::
operator_isEqual (const GGS_resource_map & inOperand) const {
  return GGS_bool (isBuilt () && inOperand.isBuilt (), isEqualToMap (inOperand)) ;
}

//---------------------------------------------------------------------------*

GGS_bool GGS_resource_map::
operator_isNotEqual (const GGS_resource_map & inOperand) const {
  return GGS_bool (isBuilt () && inOperand.isBuilt (), ! isEqualToMap (inOperand)) ;
}

//---------------------------------------------------------------------------*

void GGS_resource_map::
internalInsertForDuplication (AC_galgas_map_element * inPtr) {
  MF_Assert (reinterpret_cast <cElement *> (inPtr) != NULL, "Dynamic cast error", 0, 0) ;
  cElement * p = (cElement *) inPtr ;
  PMSInt32 attributeIndex = -1 ; // Unused here
  GGS_location existingKeyLocation ; // Unused here
  internalInsert (p->mKey, (void *) & p->mInfo, attributeIndex, existingKeyLocation, p->mIsDefined, p->mCurrentState) ;
}

//---------------------------------------------------------------------------*

void GGS_resource_map::
removeElement (C_Compiler & inLexique,
                const utf32 * inErrorMessage,
                const GGS_lstring & inKey,
                GGS_resource_obj & outParameter0,
                GGS_luint * outIndex
                COMMA_LOCATION_ARGS) {
  AC_galgas_map_element * removedElement = NULL ;
  PMSInt32 elementID = - 1 ;
  if (isBuilt () && inKey.isBuilt ()) {
    removedElement = internalRemove (inKey) ;
    if (removedElement == NULL) {
      inLexique.semanticErrorUsingPerCentK (inKey.string (), inKey, inErrorMessage COMMA_THERE) ;
      outParameter0.drop () ;
    }else{
      cElement * ptr = (cElement *) removedElement ;
      elementID = ptr->mID ;
      outParameter0 = ptr->mInfo.resource ;
    }
  }
  if (outIndex != NULL) {
    * outIndex = GGS_luint (GGS_uint (elementID >= 0, (PMUInt32) elementID), inKey) ;
  }
  macroMyDelete (removedElement) ;
}

//---------------------------------------------------------------------------*

void GGS_resource_map::
insertElement (C_Compiler & inLexique,
               const PMUInt32 inInitialState,
               const utf32 * inErrorMessage,
               const GGS_lstring & inKey,
               const GGS_resource_obj & inParameter0,
               GGS_luint * outIndex
               COMMA_LOCATION_ARGS) {
  PMSInt32 elementID = - 1 ;
  if (isBuilt ()
   && inParameter0.isBuilt ()
   && inKey.isBuilt ()) {
    insulateMap (THERE) ;
    e_resource_map info  ;
    info.resource = inParameter0 ;
    GGS_location existingKeyLocation ;
    internalInsert (inKey, (void *) & info, elementID, existingKeyLocation, true, inInitialState) ;
    if (elementID < 0) {
      emitInsertMapSemanticErrorMessage (inLexique, inKey, inErrorMessage, existingKeyLocation COMMA_THERE) ;
    }
  }
  if (outIndex != NULL) {
    * outIndex = GGS_luint (GGS_uint (elementID >= 0, (PMUInt32) elementID), inKey) ;
  }
}

//---------------------------------------------------------------------------*

void GGS_resource_map::
searchElement (C_Compiler & inLexique,
               const PMUInt32 /* inActionIndex */,
               const utf32 * inErrorMessage,
               const GGS_lstring & inKey,
               GGS_resource_obj   & outParameter0,
               GGS_luint * outIndex
               COMMA_LOCATION_ARGS) const {
  cElement * node = NULL  ;
  if (isBuilt () && inKey.isBuilt ()) {
    AC_galgas_map_element * p = internal_search (inKey.string ()) ;
    MF_Assert ((p == NULL) || (reinterpret_cast <cElement *> (p) != NULL), "Dynamic cast error", 0, 0) ;
    node = (cElement *) p ;
    if (node == NULL) {
      inLexique.semanticErrorUsingPerCentK (inKey.string (), inKey, inErrorMessage COMMA_THERE) ;
    }
  }
  if (node == NULL) {
    outParameter0.drop () ;
    if (outIndex != NULL) {
      outIndex->drop () ;
    }
  }else{
    outParameter0 = node->mInfo.resource ;
    if (outIndex != NULL) {
      * outIndex = GGS_luint (GGS_uint (true, (PMUInt32) node->mID), inKey) ;
    }
  }
}

//---------------------------------------------------------------------------*

const utf32 GGS_resource_map::kSearchMessage_get [] = {
  TO_UNICODE ('R'),
  TO_UNICODE ('e'),
  TO_UNICODE ('s'),
  TO_UNICODE ('o'),
  TO_UNICODE ('u'),
  TO_UNICODE ('r'),
  TO_UNICODE ('c'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('%'),
  TO_UNICODE ('K'),
  TO_UNICODE (' '),
  TO_UNICODE ('i'),
  TO_UNICODE ('s'),
  TO_UNICODE (' '),
  TO_UNICODE ('n'),
  TO_UNICODE ('o'),
  TO_UNICODE ('t'),
  TO_UNICODE (' '),
  TO_UNICODE ('d'),
  TO_UNICODE ('e'),
  TO_UNICODE ('f'),
  TO_UNICODE ('i'),
  TO_UNICODE ('n'),
  TO_UNICODE ('e'),
  TO_UNICODE ('d'),
  TO_UNICODE (0)
} ;

//---------------------------------------------------------------------------*

void GGS_resource_map::
method_get (C_Compiler & inLexique,
                                const GGS_lstring & inKey,
                                GGS_resource_obj   & outParameter0 COMMA_LOCATION_ARGS) const {
  searchElement (inLexique,
                 0,
                 kSearchMessage_get,
                 inKey,
                 outParameter0,
                 NULL
                 COMMA_THERE) ;
}

//---------------------------------------------------------------------------*

const utf32 GGS_resource_map::kRemoveMessage_del [] = {
  TO_UNICODE ('R'),
  TO_UNICODE ('e'),
  TO_UNICODE ('s'),
  TO_UNICODE ('o'),
  TO_UNICODE ('u'),
  TO_UNICODE ('r'),
  TO_UNICODE ('c'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('%'),
  TO_UNICODE ('K'),
  TO_UNICODE (' '),
  TO_UNICODE ('i'),
  TO_UNICODE ('s'),
  TO_UNICODE (' '),
  TO_UNICODE ('n'),
  TO_UNICODE ('o'),
  TO_UNICODE ('t'),
  TO_UNICODE (' '),
  TO_UNICODE ('d'),
  TO_UNICODE ('e'),
  TO_UNICODE ('f'),
  TO_UNICODE ('i'),
  TO_UNICODE ('n'),
  TO_UNICODE ('e'),
  TO_UNICODE ('d'),
  TO_UNICODE (0)
} ;

//---------------------------------------------------------------------------*

void GGS_resource_map::
modifier_del (C_Compiler & inLexique,
                                const GGS_lstring & inKey,
                                GGS_resource_obj & outParameter0 COMMA_LOCATION_ARGS) {
  removeElement (inLexique,
                  kRemoveMessage_del,
                  inKey,
                  outParameter0,
                  NULL
                  COMMA_THERE) ;
}

//---------------------------------------------------------------------------*

const utf32 GGS_resource_map::kInsertMessage_put [] = {
  TO_UNICODE ('R'),
  TO_UNICODE ('e'),
  TO_UNICODE ('s'),
  TO_UNICODE ('o'),
  TO_UNICODE ('u'),
  TO_UNICODE ('r'),
  TO_UNICODE ('c'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('%'),
  TO_UNICODE ('K'),
  TO_UNICODE (' '),
  TO_UNICODE ('i'),
  TO_UNICODE ('s'),
  TO_UNICODE (' '),
  TO_UNICODE ('a'),
  TO_UNICODE ('l'),
  TO_UNICODE ('r'),
  TO_UNICODE ('e'),
  TO_UNICODE ('a'),
  TO_UNICODE ('d'),
  TO_UNICODE ('y'),
  TO_UNICODE (' '),
  TO_UNICODE ('d'),
  TO_UNICODE ('e'),
  TO_UNICODE ('f'),
  TO_UNICODE ('i'),
  TO_UNICODE ('n'),
  TO_UNICODE ('e'),
  TO_UNICODE ('d'),
  TO_UNICODE (' '),
  TO_UNICODE ('i'),
  TO_UNICODE ('n'),
  TO_UNICODE (' '),
  TO_UNICODE ('%'),
  TO_UNICODE ('L'),
  TO_UNICODE (0)
} ;

//---------------------------------------------------------------------------*

void GGS_resource_map::
modifier_put (C_Compiler & inLexique,
                                const GGS_lstring & inKey,
                                const GGS_resource_obj & inParameter0 COMMA_LOCATION_ARGS) {
  insertElement (inLexique,
                 0,
                 kInsertMessage_put,
                 inKey,
                 inParameter0,
                NULL
                COMMA_THERE) ;
}

//---------------------------------------------------------------------------*

GGS_resource_map GGS_resource_map::
constructor_mapWithMapToOverride (C_Compiler & /* inLexique */,
                                  const GGS_resource_map & inMapToOverride
                                  COMMA_UNUSED_LOCATION_ARGS) {
  GGS_resource_map result ; // Not Built
  if (inMapToOverride.mSharedMapRoot != NULL) {
    macroValidPointer (inMapToOverride.mSharedMapRoot) ;
    macroMyNew (result.mSharedMapRoot, cMapRoot) ;
    result.mSharedMapRoot->mNextMap = inMapToOverride.mSharedMapRoot ;
    inMapToOverride.mSharedMapRoot->mReferenceCount ++ ;
    result.mSharedMapRoot->mSequenceNumber = inMapToOverride.mSharedMapRoot->mSequenceNumber ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_resource_map GGS_resource_map::
reader_overriddenMap (C_Compiler & /* inLexique */
                      COMMA_UNUSED_LOCATION_ARGS) const {
  GGS_resource_map result ; // Not Built
  if (mSharedMapRoot != NULL) {
    macroValidPointer (mSharedMapRoot) ;
    result.mSharedMapRoot = mSharedMapRoot->mNextMap ;
    if (result.mSharedMapRoot != NULL) {
      macroValidPointer (result.mSharedMapRoot) ;
      result.mSharedMapRoot->mReferenceCount ++ ;
    }else{
      macroMyNew (result.mSharedMapRoot, cMapRoot) ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_string GGS_resource_map::
reader_description (const PMSInt32 inIndentation) const {
  C_String s ;
  s << "<map @resource_map " ;
  if (isBuilt ()) {
    s.appendSigned (count ()) ;
    s << " object" << ((count () > 1) ? "s " : " ") ;
    cMapRoot * mapRoot = mSharedMapRoot ;
    PMSInt32 level = 0 ;
    while (mapRoot != NULL) {
      if (level > 0) {
        s << "\n" ;
        s.writeStringMultiple ("| ", inIndentation) ;
        s << "------- level " << cStringWithSigned (level) ;
      }
      macroValidPointer (mapRoot) ;
      cElement * p = (cElement *) mapRoot->mFirstItem ;
      PMSInt32 elementID = 0 ;
      while (p != NULL) {
        macroValidPointer (p) ;
        p->appendForMapDescription (elementID, s, inIndentation) ;
        p = p->nextObject () ;
        elementID ++ ;
      }
      mapRoot = mapRoot->mNextMap ;
      level ++ ;
    }
  }else{
    s << "not built" ;
  }
  s << "\n" ;
  s.writeStringMultiple ("| ", inIndentation) ;
  s << ">" ;
  return GGS_string (true, s) ;
}

//---------------------------------------------------------------------------*

/* const */ GGS_resource_obj  & GGS_resource_map::cEnumerator::_resource (LOCATION_ARGS) const {
  return ((cElement *) mObjectArray (mCurrentIndex COMMA_THERE))->mInfo.resource ;
}

//---------------------------------------------------------------------------*

GGS_object GGS_resource_map::reader_object (void) const {
  GGS_object result ;
  if (isBuilt ()) {
    GGS_resource_map * p = NULL ;
    macroMyNew (p, GGS_resource_map (*this)) ;
    result = GGS_object (p) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_resource_map GGS_resource_map::castFromObject (C_Compiler & inLexique,
                                   const GGS_object & inObject,
                                   const GGS_location & inErrorLocation
                                   COMMA_LOCATION_ARGS) {
  GGS_resource_map result ;
  const GGS__root * embeddedObject = inObject.embeddedObject () ;
  if (NULL != embeddedObject) {
    const GGS_resource_map * p = dynamic_cast <const GGS_resource_map *> (embeddedObject) ;
    if (NULL != p) {
      result = * p ;
    }else{
      castFromObjectErrorSignaling (inLexique, inErrorLocation, & kTypeDescriptor_GGS_resource_map, embeddedObject COMMA_THERE) ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*

const C_galgas_type_descriptorEX * GGS_resource_map::typeDescriptor (void) const {
  return & kTypeDescriptor_GGS_resource_map ;
}

//---------------------------------------------------------------------------*

GGS_resource_map GGS_resource_map::constructor_mapWithKeyAndValue (C_Compiler & inLexique,
                                             const GGS_lstring & inKey,
                                             const GGS_resource_obj & inValue0
                                             COMMA_LOCATION_ARGS) {
  GGS_resource_map result = constructor_emptyMap (inLexique COMMA_THERE) ;
  result.insertElement (inLexique,
                        0,
                        NULL,
                        inKey,
                        inValue0,
                        NULL
                        COMMA_THERE) ;
  return result ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                        class 'e_linked_resources'                         *
//                                                                           *
//---------------------------------------------------------------------------*

e_linked_resources::e_linked_resources (void) :
linked_resource () {
}

//---------------------------------------------------------------------------*
//                                                                           *
//                      class map '@linked_resources'                        *
//                                                                           *
//---------------------------------------------------------------------------*

const C_galgas_type_descriptorEX kTypeDescriptor_GGS_linked_resources ("linked_resources", false, NULL) ;

//---------------------------------------------------------------------------*

elementOf_GGS_linked_resources::
elementOf_GGS_linked_resources (const GGS_lstring & inKey,
              const PMSInt32 inIndex,
              const e_linked_resources & inInfo,
              const PMUInt32 inInitialState) :
AC_galgas_map_element (inKey, inIndex, inInitialState),
mInfo (inInfo) {
}

//---------------------------------------------------------------------------*

void elementOf_GGS_linked_resources::
appendForMapDescription (const PMSInt32 inElementIndex,
                         C_String & ioString,
                         const PMSInt32 inIndentation) const {
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "|-key " ;
  ioString.appendSigned (inElementIndex) ;
  ioString << ":" << mKey.reader_description (inIndentation + 1) ;
  ioString << (mIsDefined ? "" : "(not solved)") ;
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "|-value " ;
  ioString.appendSigned (inElementIndex) ;
  ioString << ":" << mInfo.linked_resource.reader_description (inIndentation + 1) ;
}

//---------------------------------------------------------------------------*

bool elementOf_GGS_linked_resources::
isEqualToMapElement (const AC_galgas_map_element * inOperand) const {
  const elementOf_GGS_linked_resources * ptr = dynamic_cast <const elementOf_GGS_linked_resources *> (inOperand) ;
  macroValidPointer (ptr) ;
  return (mInfo.linked_resource.operator_isEqual (ptr->mInfo.linked_resource)).boolValue () ;
}

//---------------------------------------------------------------------------*

AC_galgas_map_element * GGS_linked_resources::
new_element (const GGS_lstring & inKey, void * inInfo, const PMUInt32 inInitialState) {
  MF_Assert (reinterpret_cast <e_linked_resources *> (inInfo) != NULL, "Dynamic cast error", 0, 0) ;
  AC_galgas_map_element * p = NULL ;
  e_linked_resources * info = (e_linked_resources *) inInfo ;
  macroMyNew (p, cElement (inKey, nextIndex (), * info, inInitialState)) ;
  return p ;
}

//---------------------------------------------------------------------------*

void GGS_linked_resources::
assignInfo (AC_galgas_map_element * inPtr, void * inInfo) {
  MF_Assert (reinterpret_cast <cElement *> (inPtr) != NULL, "Dynamic cast error", 0, 0) ;
  MF_Assert (reinterpret_cast <e_linked_resources *> (inInfo) != NULL, "Dynamic cast error", 0, 0) ;
  cElement * p = (cElement *) inPtr ;
  e_linked_resources * info = (e_linked_resources *) inInfo ;
  p->mInfo = * info ;
}

//---------------------------------------------------------------------------*

GGS_linked_resources GGS_linked_resources::
constructor_emptyMap (C_Compiler & /* inLexique */ COMMA_UNUSED_LOCATION_ARGS) {
  GGS_linked_resources result ;
  macroMyNew (result.mSharedMapRoot, cMapRoot) ;
  return result ;
}

//---------------------------------------------------------------------------*

void GGS_linked_resources::
enterIndex (const GGS_string & inKey,
            AC_galgas_index_core & outIndex) {
  e_linked_resources info  ;
  internalEnterIndex (inKey,
                      (void *) & info,
                      outIndex) ;
}

//---------------------------------------------------------------------------*

GGS_bool GGS_linked_resources::
operator_isEqual (const GGS_linked_resources & inOperand) const {
  return GGS_bool (isBuilt () && inOperand.isBuilt (), isEqualToMap (inOperand)) ;
}

//---------------------------------------------------------------------------*

GGS_bool GGS_linked_resources::
operator_isNotEqual (const GGS_linked_resources & inOperand) const {
  return GGS_bool (isBuilt () && inOperand.isBuilt (), ! isEqualToMap (inOperand)) ;
}

//---------------------------------------------------------------------------*

void GGS_linked_resources::
internalInsertForDuplication (AC_galgas_map_element * inPtr) {
  MF_Assert (reinterpret_cast <cElement *> (inPtr) != NULL, "Dynamic cast error", 0, 0) ;
  cElement * p = (cElement *) inPtr ;
  PMSInt32 attributeIndex = -1 ; // Unused here
  GGS_location existingKeyLocation ; // Unused here
  internalInsert (p->mKey, (void *) & p->mInfo, attributeIndex, existingKeyLocation, p->mIsDefined, p->mCurrentState) ;
}

//---------------------------------------------------------------------------*

void GGS_linked_resources::
insertElement (C_Compiler & inLexique,
               const PMUInt32 inInitialState,
               const utf32 * inErrorMessage,
               const GGS_lstring & inKey,
               const GGS_lstring & inParameter0,
               GGS_luint * outIndex
               COMMA_LOCATION_ARGS) {
  PMSInt32 elementID = - 1 ;
  if (isBuilt ()
   && inParameter0.isBuilt ()
   && inKey.isBuilt ()) {
    insulateMap (THERE) ;
    e_linked_resources info  ;
    info.linked_resource = inParameter0 ;
    GGS_location existingKeyLocation ;
    internalInsert (inKey, (void *) & info, elementID, existingKeyLocation, true, inInitialState) ;
    if (elementID < 0) {
      emitInsertMapSemanticErrorMessage (inLexique, inKey, inErrorMessage, existingKeyLocation COMMA_THERE) ;
    }
  }
  if (outIndex != NULL) {
    * outIndex = GGS_luint (GGS_uint (elementID >= 0, (PMUInt32) elementID), inKey) ;
  }
}

//---------------------------------------------------------------------------*

void GGS_linked_resources::
searchElement (C_Compiler & inLexique,
               const PMUInt32 /* inActionIndex */,
               const utf32 * inErrorMessage,
               const GGS_lstring & inKey,
               GGS_lstring   & outParameter0,
               GGS_luint * outIndex
               COMMA_LOCATION_ARGS) const {
  cElement * node = NULL  ;
  if (isBuilt () && inKey.isBuilt ()) {
    AC_galgas_map_element * p = internal_search (inKey.string ()) ;
    MF_Assert ((p == NULL) || (reinterpret_cast <cElement *> (p) != NULL), "Dynamic cast error", 0, 0) ;
    node = (cElement *) p ;
    if (node == NULL) {
      inLexique.semanticErrorUsingPerCentK (inKey.string (), inKey, inErrorMessage COMMA_THERE) ;
    }
  }
  if (node == NULL) {
    outParameter0.drop () ;
    if (outIndex != NULL) {
      outIndex->drop () ;
    }
  }else{
    outParameter0 = node->mInfo.linked_resource ;
    if (outIndex != NULL) {
      * outIndex = GGS_luint (GGS_uint (true, (PMUInt32) node->mID), inKey) ;
    }
  }
}

//---------------------------------------------------------------------------*

const utf32 GGS_linked_resources::kInsertMessage_put [] = {
  TO_UNICODE ('R'),
  TO_UNICODE ('e'),
  TO_UNICODE ('s'),
  TO_UNICODE ('o'),
  TO_UNICODE ('u'),
  TO_UNICODE ('r'),
  TO_UNICODE ('c'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('%'),
  TO_UNICODE ('K'),
  TO_UNICODE (' '),
  TO_UNICODE ('('),
  TO_UNICODE ('%'),
  TO_UNICODE ('L'),
  TO_UNICODE (')'),
  TO_UNICODE (' '),
  TO_UNICODE ('i'),
  TO_UNICODE ('s'),
  TO_UNICODE (' '),
  TO_UNICODE ('p'),
  TO_UNICODE ('a'),
  TO_UNICODE ('r'),
  TO_UNICODE ('t'),
  TO_UNICODE (' '),
  TO_UNICODE ('o'),
  TO_UNICODE ('f'),
  TO_UNICODE (' '),
  TO_UNICODE ('a'),
  TO_UNICODE (' '),
  TO_UNICODE ('c'),
  TO_UNICODE ('y'),
  TO_UNICODE ('c'),
  TO_UNICODE ('l'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('o'),
  TO_UNICODE ('f'),
  TO_UNICODE (' '),
  TO_UNICODE ('l'),
  TO_UNICODE ('i'),
  TO_UNICODE ('n'),
  TO_UNICODE ('k'),
  TO_UNICODE ('e'),
  TO_UNICODE ('d'),
  TO_UNICODE (' '),
  TO_UNICODE ('r'),
  TO_UNICODE ('e'),
  TO_UNICODE ('s'),
  TO_UNICODE ('o'),
  TO_UNICODE ('u'),
  TO_UNICODE ('r'),
  TO_UNICODE ('c'),
  TO_UNICODE ('e'),
  TO_UNICODE ('s'),
  TO_UNICODE (0)
} ;

//---------------------------------------------------------------------------*

void GGS_linked_resources::
modifier_put (C_Compiler & inLexique,
                                const GGS_lstring & inKey,
                                const GGS_lstring & inParameter0 COMMA_LOCATION_ARGS) {
  insertElement (inLexique,
                 0,
                 kInsertMessage_put,
                 inKey,
                 inParameter0,
                NULL
                COMMA_THERE) ;
}

//---------------------------------------------------------------------------*

GGS_linked_resources GGS_linked_resources::
constructor_mapWithMapToOverride (C_Compiler & /* inLexique */,
                                  const GGS_linked_resources & inMapToOverride
                                  COMMA_UNUSED_LOCATION_ARGS) {
  GGS_linked_resources result ; // Not Built
  if (inMapToOverride.mSharedMapRoot != NULL) {
    macroValidPointer (inMapToOverride.mSharedMapRoot) ;
    macroMyNew (result.mSharedMapRoot, cMapRoot) ;
    result.mSharedMapRoot->mNextMap = inMapToOverride.mSharedMapRoot ;
    inMapToOverride.mSharedMapRoot->mReferenceCount ++ ;
    result.mSharedMapRoot->mSequenceNumber = inMapToOverride.mSharedMapRoot->mSequenceNumber ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_linked_resources GGS_linked_resources::
reader_overriddenMap (C_Compiler & /* inLexique */
                      COMMA_UNUSED_LOCATION_ARGS) const {
  GGS_linked_resources result ; // Not Built
  if (mSharedMapRoot != NULL) {
    macroValidPointer (mSharedMapRoot) ;
    result.mSharedMapRoot = mSharedMapRoot->mNextMap ;
    if (result.mSharedMapRoot != NULL) {
      macroValidPointer (result.mSharedMapRoot) ;
      result.mSharedMapRoot->mReferenceCount ++ ;
    }else{
      macroMyNew (result.mSharedMapRoot, cMapRoot) ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_string GGS_linked_resources::
reader_description (const PMSInt32 inIndentation) const {
  C_String s ;
  s << "<map @linked_resources " ;
  if (isBuilt ()) {
    s.appendSigned (count ()) ;
    s << " object" << ((count () > 1) ? "s " : " ") ;
    cMapRoot * mapRoot = mSharedMapRoot ;
    PMSInt32 level = 0 ;
    while (mapRoot != NULL) {
      if (level > 0) {
        s << "\n" ;
        s.writeStringMultiple ("| ", inIndentation) ;
        s << "------- level " << cStringWithSigned (level) ;
      }
      macroValidPointer (mapRoot) ;
      cElement * p = (cElement *) mapRoot->mFirstItem ;
      PMSInt32 elementID = 0 ;
      while (p != NULL) {
        macroValidPointer (p) ;
        p->appendForMapDescription (elementID, s, inIndentation) ;
        p = p->nextObject () ;
        elementID ++ ;
      }
      mapRoot = mapRoot->mNextMap ;
      level ++ ;
    }
  }else{
    s << "not built" ;
  }
  s << "\n" ;
  s.writeStringMultiple ("| ", inIndentation) ;
  s << ">" ;
  return GGS_string (true, s) ;
}

//---------------------------------------------------------------------------*

/* const */ GGS_lstring  & GGS_linked_resources::cEnumerator::_linked_resource (LOCATION_ARGS) const {
  return ((cElement *) mObjectArray (mCurrentIndex COMMA_THERE))->mInfo.linked_resource ;
}

//---------------------------------------------------------------------------*

GGS_object GGS_linked_resources::reader_object (void) const {
  GGS_object result ;
  if (isBuilt ()) {
    GGS_linked_resources * p = NULL ;
    macroMyNew (p, GGS_linked_resources (*this)) ;
    result = GGS_object (p) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_linked_resources GGS_linked_resources::castFromObject (C_Compiler & inLexique,
                                   const GGS_object & inObject,
                                   const GGS_location & inErrorLocation
                                   COMMA_LOCATION_ARGS) {
  GGS_linked_resources result ;
  const GGS__root * embeddedObject = inObject.embeddedObject () ;
  if (NULL != embeddedObject) {
    const GGS_linked_resources * p = dynamic_cast <const GGS_linked_resources *> (embeddedObject) ;
    if (NULL != p) {
      result = * p ;
    }else{
      castFromObjectErrorSignaling (inLexique, inErrorLocation, & kTypeDescriptor_GGS_linked_resources, embeddedObject COMMA_THERE) ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*

const C_galgas_type_descriptorEX * GGS_linked_resources::typeDescriptor (void) const {
  return & kTypeDescriptor_GGS_linked_resources ;
}

//---------------------------------------------------------------------------*

GGS_linked_resources GGS_linked_resources::constructor_mapWithKeyAndValue (C_Compiler & inLexique,
                                             const GGS_lstring & inKey,
                                             const GGS_lstring & inValue0
                                             COMMA_LOCATION_ARGS) {
  GGS_linked_resources result = constructor_emptyMap (inLexique COMMA_THERE) ;
  result.insertElement (inLexique,
                        0,
                        NULL,
                        inKey,
                        inValue0,
                        NULL
                        COMMA_THERE) ;
  return result ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//            Implementation of function "default_resource_obj"              *
//                                                                           *
//---------------------------------------------------------------------------*

GGS_resource_obj  function_default_resource_obj (C_Compiler & inLexique COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER function_default_resource_obj at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  GGS_resource_obj  var_cas_rez ;
  var_cas_rez = GGS_resource_obj ::constructor_new (inLexique, function_empty_lstring (inLexique COMMA_SOURCE_FILE_AT_LINE (48)), GGS_resource_property_void_obj ::constructor_new (inLexique, GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (49)), GGS_lstringlist ::constructor_emptyList () COMMA_SOURCE_FILE_AT_LINE (47)) ;
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE function_default_resource_obj\n") ;
  #endif
  return var_cas_rez ;
}

//---------------------------------------------------------------------------*

static GGS_object functionForGenericCall_default_resource_obj (C_Compiler & inLexique,
                           const GGS_objectlist & /* inEffectiveParameterArray */,
                           const GGS_location & /* inErrorLocation */
                           COMMA_LOCATION_ARGS) {
  const GGS_resource_obj  result = function_default_resource_obj (inLexique
                            COMMA_THERE) ;
  return result.reader_object () ;
}

//---------------------------------------------------------------------------*

const C_galgas_function_descriptorEX kFunction_descriptor_default_resource_obj ("default_resource_obj",
                              functionForGenericCall_default_resource_obj,
                              & kTypeDescriptor_GGS_resource_obj ,
                              0,
                              NULL) ;

//---------------------------------------------------------------------------*

