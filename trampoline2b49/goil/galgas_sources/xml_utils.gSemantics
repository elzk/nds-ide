semantics xml_utils:

import semantics xml_types in "xml_types.ggs";
import semantics goil_basic_types in "goil_basic_types.ggs";

function is_elem
  ??@xmlNode node
  ??@string  name
  ->@bool    res
:
  if [node type] == [@xmlNodeType element] & [[node name] string] == name then
    res := true;
  else
    res := false;
  end if;
end function;

function is_text
  ??@xmlNode node
  ??@string  name
  ->@bool    res
:
  if [node type] == [@xmlNodeType text] & [[node name] string] == name then
    res := true;
  else
    res := false;
  end if;
end function;

function is_not_void
  ??@xmlNode node
  ->@bool    res
:
  if [node type] == [@xmlNodeType void] then
    res := false;
  else
    res := true;
  end if;
end function;

function is_short_name
  ??@xmlNode node
  ??@string  name
  ->@bool    res
:
  if is_elem(!node!"SHORT-NAME") then 
    @xmlNodeList nl := [node nodeList];
    @xmlNode module_name;
    [nl first ?module_name];
    if is_text(!module_name!name) then
      res := true;
    else
      res := false;
    end if;
  else
    res := false;
  end if;
end function;

function elem_named
  ??@xmlNodeList nodes
  ??@string      name
  ->@xmlNode     elem
:
  elem := [@xmlNode new
    ![@xmlNodeType void]
    ![@lstring new !"" !here]
    ![@xmlAttributeMap emptyMap]
    ![@xmlNodeList emptyList]
  ];
  foreach nodes do
    if is_elem(!node!name) then
      elem := node;
    end if;
  end foreach;
end function;

function short_name
  ??@xmlNode node
  ->@lstring name
:
  name := [@lstring new !"" !here];
  if is_elem(!node!"SHORT-NAME") then 
#    message "SHORT-NAME";
    @xmlNodeList nl := [node nodeList];
    @xmlNode module_name;
    [nl first ?module_name];
    if [module_name type] == [@xmlNodeType text] then
      name := [module_name name];
#      message " name = ".[name string];
    end if;
#    message "\n";
  end if;  
end function;

function long_name
  ??@xmlNode node
  ->@lstring name
:
  name := [@lstring new !"" !here];
  if is_elem(!node!"LONG-NAME") then 
#    message "LONG-NAME";
    @xmlNodeList nl := [node nodeList];
    @xmlNode l4 := elem_named(!nl!"L-4");
    if is_not_void(!l4) then
      @xmlNodeList nl := [l4 nodeList];
      @xmlNode module_name;
      [nl first ?module_name];
      if [module_name type] == [@xmlNodeType text] then
        name := [module_name name];
#          message " name = ".[name string];
      end if;
    end if;
#    message "\n";
  end if;  
end function;

function container_long_name
  ??@xmlNode node
  ->@lstring name
:
  name := [@lstring new !"" !here];
  @xmlNode long_name := elem_named(![node nodeList]!"LONG-NAME");
  if is_not_void(!long_name) then 
#    message "LONG-NAME";
    @xmlNodeList nl := [long_name nodeList];
    @xmlNode l4 := elem_named(!nl!"L-4");
    if is_not_void(!l4) then
      @xmlNodeList nl := [l4 nodeList];
      @xmlNode module_name;
      [nl first ?module_name];
      if [module_name type] == [@xmlNodeType text] then
        name := [module_name name];
#          message " name = ".[name string];
      end if;
    end if;
#    message "\n";
  end if;  
end function;

function is_param
  ??@xmlNode node
  ??@string  name
  ->@bool res
:
  @xmlNodeList nl := [node nodeList];
  @xmlNode param_name;
  [nl first ?param_name];
  if is_elem(!param_name!"DEFINITION-REF") then
    nl := [param_name nodeList];
    @xmlNode param_text;
    [nl first ?param_text];
    @string pn := [[[param_text name] string] lastPathComponent];
    if pn == name then
      res := true;
    else
      res := false;
    end if;
  else
    res := false;
  end if;
end function;

function value_text
  ??@xmlNode node
  ->@lstring text
:
  text := [@lstring new !"" !here];
  @xmlNodeList nl := [node nodeList];
  @xmlNode text_val;
  [nl last ?text_val];
  if is_elem(!text_val!"VALUE") then
    nl := [text_val nodeList];
    @xmlNode text_text;
    [nl first ?text_text];
    text := [text_text name];
  else
    error [text_val name]: "VALUE expected";
  end if;
end function;

function ref_text
  ??@xmlNode node
  ->@lstring text
:
  text := [@lstring new !"" !here];
  @xmlNodeList nl := [node nodeList];
  @xmlNode text_val;
  [nl last ?text_val];
  if is_elem(!text_val!"VALUE-REF") then
    nl := [text_val nodeList];
    @xmlNode text_text;
    [nl first ?text_text];
    text := [text_text name];
  else
    error [text_val name]: "VALUE-REF expected";
  end if;
end function;

function lstring_param
  ??@xmlNode node
  ->@lstring param
:
  param := value_text(!node);
end function;

function bool_class_param
  ??@xmlNode    node
  ->@bool_class param
:
  @lstring lval := value_text(!node);
  @string val := [[lval string] uppercaseString];
  if val == "TRUE" then
    param := [@bool_class new ![lval location] !true ];
  elsif val == "FALSE" then
    param := [@bool_class new ![lval location] !false];
  else
    error lval: "boolean expected";
    param := [@bool_class new ![lval location] !false];
  end if;
end function;

function uint32_class_param
  ??@xmlNode      node
  ->@uint32_class param
:
  @lstring lval := value_text(!node);
  if [[lval string] isDecimalUnsignedNumber] then
    @uint val := [[lval string] decimalUnsignedNumber];
    param := [@uint32_class new ![lval location] !val];
  else
    error lval: "Unsigned number expected";
    param := [@uint32_class new ![lval location] !0];
  end if;
end function;

function uint64_class_param
  ??@xmlNode      node
  ->@uint64_class param
:
  @lstring lval := value_text(!node);
  if [[lval string] isDecimalUnsignedNumber] then
    @uint val := [[lval string] decimalUnsignedNumber];
    param := [@uint64_class new ![lval location] ![val uint64]];
  else
    error lval: "Unsigned number expected";
    param := [@uint64_class new ![lval location] !0L];
  end if;
end function;

function luint64_param
  ??@xmlNode node
  ->@luint64 param
:
  @lstring lval := value_text(!node);
  if [[lval string] isDecimalUnsignedNumber] then
    param := [@luint64 new ![[[lval string] decimalUnsignedNumber] uint64] ![lval location]];
  else
    error lval: "Unsigned number expected";
    param := [@luint64 new !0L ![lval location]];
  end if;
end function;

end semantics;
