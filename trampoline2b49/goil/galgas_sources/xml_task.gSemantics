#
# @file xml_task.ggs
#
# @section File description
#
# This file contains routine to parse a task container.
#
# @section Copyright
#
# Goil OIL compiler for Trampoline
#
# Goil is copyright (c) IRCCyN 2005+
# Goil is protected by the french law of intellectual property
#
# This software is distributed under the GNU Public Licence V2
#
# @section File informations
#
# $Date$
# $Rev$
# $Author$
# $URL$
#

semantics xml_task:

import semantics xml_types in "xml_types.ggs";
import semantics goil_types_root in "goil_types_root.ggs";
import semantics xml_utils in "xml_utils.ggs";

routine parse_task_autostart
  ??@xmlNodeList cont_elems
  ??@lstring     name
  ??@location    autoloc
  ?!@task_obj    task
:
  @xmlNode node := elem_named(!cont_elems!"REFERENCE-VALUES");
  if is_not_void(!node) then
    @xmlNodeList appmodes := [node nodeList];
    @stringset ams [emptySet];
    foreach appmodes do
      @string am := [[ref_text(!node) string] lastPathComponent];
      ams += !am;
    end foreach;
    [!?task setAutostart ![@task_autostart_true new !autoloc !ams]];
  else
    error name: "No REFERENCE-VALUES found in OsTaskAutostart";
  end if; 
end routine;

routine parse_task_subcontainer 
  ??@xmlNodeList cont_elems
  ??@lstring     name
  ?!@task_obj    task
:
  foreach cont_elems do
    @lstring elem_name := long_name(!node);
    if [elem_name string] == "OsTaskAutostart" then
      message "Autostart trouve\n";
      parse_task_autostart !cont_elems !name ![elem_name location] !?task;
    end if;
  end foreach;
end routine;

routine parse_task
  ??@lstring     name
  ??@xmlNodeList cont_elems
  ?!@root_obj    cpu
:
  @task_obj t := default_task_obj();
# get the level 0 attributes
  @xmlNode node := elem_named(!cont_elems!"PARAMETER-VALUES");
  if is_not_void(!node) then
    @xmlNodeList params := [node nodeList];
    foreach params do
      if    is_param(!node!"OsTaskPriority") then
        [!?t setPriority !uint32_class_param(!node)];
        p_bt ![t priority];
      elsif is_param(!node!"OsTaskSchedule") then
        [!?t setSchedule !lstring_param(!node)];
        message [[t schedule] string]."\n";
      elsif is_param(!node!"OsTaskActivation") then
        [!?t setActivation !uint32_class_param(!node)];
        p_bt ![t activation];
      elsif is_param(!node!"OsTaskActivation") then
        [!?t setActivation !uint32_class_param(!node)];
        p_bt ![t activation];
      elsif is_param(!node!"OsTaskResourceRef") then
        @lstringlist resources := [t resources];
        resources += !value_text(!node);
        [!?t setResources !resources];
        log resources;
      elsif is_param(!node!"OsTaskEventRef") then
        @lstringlist events := [t events];
        events += !value_text(!node);
        [!?t setEvents !events];
        log events;
      elsif is_param(!node!"OsTaskAccessingApplication") then
        @lstringlist acc_apps := [t acc_apps];
        acc_apps += !value_text(!node);
        [!?t setAcc_apps !acc_apps];
        log acc_apps;
      elsif is_param(!node!"OsTaskStackSize") then
        @ident_map others := [t others];
        @uint64_class ss := uint64_class_param(!node);
        [!?others put ![@lstring new !"STACKSIZE" ![ss location]] !ss];
      end if; 
    end foreach;  
  else
    error name : "Task does not have a PARAMETER-VALUES element";
  end if;
  node := elem_named(!cont_elems!"SUB-CONTAINERS");
  @xmlNodeList nl := [node nodeList];
  foreach nl do
    parse_task_subcontainer ![node nodeList] !name !?t;
  end foreach;
  @task_map tm := [cpu tasks];
  [!?tm put !name !t];
  [!?cpu setTasks !tm];
end routine;

end semantics;
