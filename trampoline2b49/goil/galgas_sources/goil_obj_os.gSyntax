#
# @file goil_obj_os.ggs
#
# @section File description
#
# @section Copyright
#
# Trampoline OS
#
# Trampoline is copyright (c) IRCCyN 2005+
# Trampoline est prot�g� par la loi sur la propri�t� intellectuelle
#
# This software is distributed under the GNU Public Licence
#
# @section File informations
#
# $Date$
# $Rev$
# $Author$
# $URL$
#

syntax goil_obj_os :
#--- Lexique Reference, used when grammar source file extension is .gGrammar
with "goil_lexique.gLexique";

import lexique goil_lexique in "goil_lexique.gLexique" ;
import option goil_options in "goil_options.gOption" ;
import semantics goil_semantics in "goil_semantics.gSemantics" ;
import semantics goil_types_os in "goil_types_os.gSemantics" ;

import "goil_options.gOption" ;
import "goil_semantics.gSemantics" ;
import "goil_types_os.gSemantics" ;

#
# local rules declaration
#
nonterminal <os>
  ?!@os_obj os 
label parse
;

#
# external rules 
#
nonterminal <description>
  !@lstring desc  
label parse
;
nonterminal <free_field>
  ?!@ident_map ids 
label parse
;
nonterminal <boolean>
  !@lbool val  
label parse
;
#
# local rules implementation
#
rule <os> 
  ?!@os_obj os
:
  @lstring     status  := [os status] ;
  @basic_type  startuphook := [os startuphook] ;
  @basic_type  shutdownhook := [os shutdownhook] ;
  @basic_type  errorhook := [os errorhook] ;
  @basic_type  pretaskhook := [os pretaskhook] ;
  @basic_type  posttaskhook := [os posttaskhook] ;
  @basic_type  protectionhook := [os protectionhook] ;     # AUTOSAR
  @lstring     scalabilityclass := [os scalabilityclass] ; # AUTOSAR
  @basic_type  stackmonitoring := [os stackmonitoring] ;   # AUTOSAR
  @basic_type  usegetserviceid := [os usegetserviceid] ;
  @basic_type  useparameteraccess := [os useparameteraccess] ;
  @basic_type  useresscheduler := [os useresscheduler] ;
  @basic_type  systemcall := [os systemcall] ;
  @basic_type  debug := [os debug] ;
  @basic_type  memmap := [os memmap] ;
  @lstringlist app_src := [os app_src] ;                  # Makefile
  @lstring     compiler := [os compiler];                 # Makefile
  @lstring     assembler := [os assembler];               # Makefile
  @lstring     linker := [os linker];                     # Makefile
  @lstringlist cflags := [os cflags] ;                    # Makefile
  @lstringlist cppflags := [os cppflags] ;                # Makefile
  @lstringlist asflags := [os asflags] ;                  # Makefile
  @lstringlist ldflags := [os ldflags] ;                  # Makefile
  @lstring     app_name := [os app_name] ;                # Makefile
  @lstring     tpl_base_path := [os tpl_base_path];       # Makefile
  @trace       trace := [os trace] ;
  @ident_map   others := [os others] ;

  $OS$ ;
  $idf$ ?* ;
  ${$ ;
  repeat
  while
    @lstring st ;
    $STATUS$ ; $=$ ;
    select
        $EXTENDED$ ; st := [@lstring new !"extended" !here] ;
    or
        $STANDARD$ ; st := [@lstring new !"standard" !here] ;
    end select ;
    <description> ?* ; $;$ ;
    set_lstring_if_empty !?status !st !"STATUS" ;
  while
    @lbool suh ;
    $STARTUPHOOK$ ; $=$ ; <boolean> ?suh ;
    set_bool !?startuphook !suh !"STARTUPHOOK" ;
    <description> ?* ; $;$ ;
  while
    @lbool sdh ;
    $SHUTDOWNHOOK$ ; $=$ ; <boolean> ?sdh ; <description> ?* ; $;$ ;
    set_bool !?shutdownhook !sdh !"SHUTDOWNHOOK" ;
  while
    @lbool eh ;
    $ERRORHOOK$ ; $=$ ; <boolean> ?eh ; <description> ?* ; $;$ ;
    set_bool !?errorhook !eh !"ERRORHOOK" ;
  while
    @lbool preth ;
    $PRETASKHOOK$ ; $=$ ; <boolean> ?preth ; <description> ?* ; $;$ ;
    set_bool !?pretaskhook !preth !"PRETASKHOOK" ;
  while
    @lbool posth ;
    $POSTTASKHOOK$ ; $=$ ; <boolean> ?posth ; <description> ?* ; $;$ ;
    set_bool !?posttaskhook !posth !"POSTTASKHOOK" ;
  while
    @lbool proth ;
    $PROTECTIONHOOK$ ; $=$ ; <boolean> ?proth ; <description> ?* ; $;$ ;
    if [option goil_options.autosar_on value] == FALSE then
        error here : "AUTOSAR flag is off, turn it on to use PROTECTIONHOOK attribute in OS object" ;
    end if ;
    set_bool !?protectionhook !proth !"PROTECTIONHOOK" ;
  while
    if [option goil_options.autosar_on value] == FALSE then
        error here : "AUTOSAR flag is off, turn it on to use SCALABILITYCLASS attribute in OS object" ;
    end if ;
    $SCALABILITYCLASS$ ; $=$ ;
    if [scalabilityclass string] != "" then
       error here : "SCALABILITYCLASS already defined for OS object" ;
    end if ;
    select
        $SC1$ ; scalabilityclass := [@lstring new !"sc1" !here] ;
    or
        $SC2$ ; scalabilityclass := [@lstring new !"sc2" !here] ;
    or
        $SC3$ ; scalabilityclass := [@lstring new !"sc3" !here] ;
    or
        $SC4$ ; scalabilityclass := [@lstring new !"sc4" !here] ;
    or
        $AUTO$ ; scalabilityclass := [@lstring new !"auto" !here] ;
    end select ;
    <description> ?* ; $;$ ;
  while
    if [option goil_options.autosar_on value] == FALSE then
        error here : "AUTOSAR flag is off, turn it on to use STACKMONITORING attribute in OS object" ;
    end if ;
    @lbool stackmon ;
    $STACKMONITORING$ ; $=$ ; <boolean> ?stackmon ;
    set_bool !?stackmonitoring !stackmon !"STACKMONITORING" ;
    <description> ?* ; $;$ ;
  while
    @lbool ugsi ;
    $USEGETSERVICEID$ ; $=$ ; <boolean> ?ugsi ;
    set_bool !?usegetserviceid !ugsi !"USEGETSERVICEID" ;
    <description> ?* ; $;$ ;
  while
    @lbool upa ;
    $USEPARAMETERACCESS$ ; $=$ ; <boolean> ?upa ;
    set_bool !?useparameteraccess !upa !"USEPARAMETERACCESS" ;
    <description> ?* ; $;$ ;
  while
    @lbool urs ;
    $USERESSCHEDULER$ ; $=$ ; <boolean> ?urs ;
    set_bool !?useresscheduler !urs !"USERESSCHEDULER" ;
    <description> ?* ; $;$ ;
  while
    @lbool sc ;
    $SYSTEM_CALL$ ; $=$ ; <boolean> ?sc ;
    set_bool !?systemcall !sc !"SYSTEM_CALL" ;
    <description> ?* ; $;$ ;
  while
    @lbool db ;
    $DEBUG$ ; $=$ ; <boolean> ?db ;
    set_bool !?debug !db !"DEBUG" ;
    <description> ?* ; $;$ ;
  while
    $MEMMAP$ ; $=$ ; 
    select
      $FALSE$;
      set_memmap !?memmap ![@memmap_false new !here] !"MEMMAP";
    or
      $TRUE$; 
      @basic_type lk := void_obj[];
      @lstring cc := empty_lstring[];
      @lstring as := empty_lstring[];
      @basic_type mp := void_obj[];      
      select 
        ${$;
        repeat while
          @lstring l;
          @lstring s := empty_lstring[];
          $LINKER$; $=$; $idf$ ?l; 
          select 
            ${$; $SCRIPT$; $=$ ; $string$ ?s; $;$; $}$; 
            set_linker !?lk ![@yes_linker new !here !l !s] !"LINKER";
          or
            set_linker !?lk ![@yes_linker new !here !l ![@lstring new !"script.ld" !here]] !"LINKER";
          end select;
          $;$;
        while
          @lstring c;
          $COMPILER$; $=$; $idf$ ?c; set_lstring_if_empty !?cc !c !"COMPILER"; $;$;
        while
          @lstring a;
          $ASSEMBLER$; $=$; $idf$ ?a; set_lstring_if_empty !?as !a !"ASSEMBLER"; $;$;
        while
          @lbool p;
          $MEMORY_PROTECTION$; $=$; <boolean> ?p; set_bool !?mp !p !"MEMORY_PROTECTION"; $;$;
        end repeat;
        $}$;
      or
      end select;
      set_memmap !?memmap ![@memmap_true new !here !cc !as !lk !mp] !"MEMMAP";
    end select;
    <description> ?*; $;$;
  while
    @lstring src ;
    $APP_SRC$ ; $=$ ; $string$ ?src ; <description> ?* ; $;$ ;
    checkFileExists !src;
    app_src += !src ;
  while
    @lstring flag ;
    $CFLAGS$ ; $=$ ; $string$ ?flag ; <description> ?* ; $;$ ;
    cflags += !flag ;
  while
    @lstring flag ;
    $CPPFLAGS$ ; $=$ ; $string$ ?flag ; <description> ?* ; $;$ ;
    cppflags += !flag ;
  while
    @lstring flag ;
    $ASFLAGS$ ; $=$ ; $string$ ?flag ; <description> ?* ; $;$ ;
    asflags += !flag ;
  while
    @lstring flag ;
    $LDFLAGS$ ; $=$ ; $string$ ?flag ; <description> ?* ; $;$ ;
    ldflags += !flag ;
  while
    @lstring an ;
    $APP_NAME$ ; $=$ ; $string$ ?an ; <description> ?* ; $;$ ;
    set_lstring_if_empty !?app_name !an !"APP_NAME" ;
  while
    @lstring tbp ;
    $TRAMPOLINE_BASE_PATH$ ; $=$ ; $string$ ?tbp ; <description> ?* ; $;$ ;
    set_lstring_if_empty !?tpl_base_path !tbp !"TRAMPOLINE_BASE_PATH" ;
  while
    @lstring cc;
    $COMPILER$; $=$; $string$ ?cc; <description> ?*; $;$;
    set_lstring_if_empty !?compiler !cc !"COMPILER";
  while
    @lstring as;
    $ASSEMBLER$; $=$; $string$ ?as; <description> ?*; $;$;
    set_lstring_if_empty !?assembler !as !"ASSEMBLER";
  while
    @lstring ld;
    $LINKER$; $=$; $string$ ?ld; <description> ?*; $;$;
    set_lstring_if_empty !?linker !ld !"LINKER";
  while
    @trace t ;
    $TRACE$ ; $=$ ;
    select
      $TRUE$ ; ${$ ; 
      @trace_method m := [@trace_void new !here] ;
      @lstring f := [@lstring new !"" !here] ;
      @void void_obj := [@void new !here] ;
      @basic_type tt := void_obj;
      @basic_type ti := void_obj;
      @basic_type tr := void_obj;
      @basic_type ta := void_obj;
      @basic_type tu := void_obj;
      @basic_type ds := void_obj;
      repeat
      while
        $METHOD$ ; $=$ ;
        @lstring file ;
        $FILE$ ; ${$ ; $NAME$ ; $=$ ; $string$ ?file ;
        set_method !?m ![@trace_file new !here !file] !"NAME" ;
        $;$ ;
        $}$ ; $;$ ;
      while
        @lstring fmt ;
        $FORMAT$ ; $=$ ; $idf$ ?fmt ;
        set_lstring_if_empty !?f !fmt !"FORMAT" ; $;$ ;
      while
        @lbool b ;
        $TRACE_TASK$ ; $=$ ; <boolean> ?b ;
        set_bool !?tt !b !"TRACE_TASK" ; $;$ ;
      while
        @lbool b ;
        $TRACE_ISR$ ; $=$ ; <boolean> ?b ;
        set_bool !?ti !b !"TRACE_ISR" ; $;$ ;
      while
        @lbool b ;
        $TRACE_RESOURCE$ ; $=$ ; <boolean> ?b ;
        set_bool !?tr !b !"TRACE_RESOURCE" ; $;$ ;
      while
        @lbool b ;
        $TRACE_ALARM$ ; $=$ ; <boolean> ?b ;
        set_bool !?ta !b !"TRACE_ALARM" ; $;$ ;
      while
        @lbool b ;
        $TRACE_USER$ ; $=$ ; <boolean> ?b ;
        set_bool !?tu !b !"TRACE_USER" ; $;$ ;
      while
        @lbool b;
        $DESCRIPTION$; $=$; <boolean> ?b;
        set_bool !?ds !b !"DESCRIPTION"; $;$;
      end repeat ;
      if [f string] == "" then
        error here : "Missing FORMAT in TRACE" ;
      end if ;
      cast m :
      when == @trace_void do
        error here : "Missing METHOD in TRACE";
      else end cast ;
      t := [@trace_on new
        !here
        !f
        !m
        !tt
        !ti
        !tr
        !ta
        !tu
        !ds
      ] ;
      $}$ ;
    or
      $FALSE$ ; t := [@trace_off new !here] ;
    end select ;
    $;$ ;
    cast trace :
    when == @trace do trace := t ;
    else
      error [t loc] : "Redefinition of TRACE" ;
      error [trace loc] : "was defined here" ;
    end cast ;
#  while
#    <free_field> !?others ; <description> ?* ; $;$ ;
  end repeat ;
  $}$ ;
  @lstring desc ;
  <description> ?desc ;
  $;$ ;

  os := [@os_obj new
    !desc
    !status
    !startuphook
    !shutdownhook
    !errorhook
    !pretaskhook
    !posttaskhook
    !protectionhook
    !scalabilityclass
    !stackmonitoring
    !usegetserviceid
    !useparameteraccess
    !useresscheduler
    !systemcall
    !debug
    !memmap
    !app_src
    !compiler
    !assembler
    !linker
    !cflags
    !cppflags
    !asflags
    !ldflags
    !app_name
    !tpl_base_path
    !trace
    !others
  ];
end rule ;

end syntax ;
