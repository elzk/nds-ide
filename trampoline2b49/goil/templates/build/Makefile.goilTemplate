#
# @file Makefile
#
# @section desc File description
#
# Makefile for application % !CPUNAME %
# automatically generated by goil on % !TIMESTAMP %
# from root OIL file % !OILFILENAME %
#
# @section copyright Copyright
#
# Trampoline OS
#
# Trampoline is copyright (c) IRCCyN 2005-2007
# Trampoline is protected by the French intellectual property law.
#
# This software is distributed under the Lesser GNU Public Licence
#
# @section infos File informations
#
# Do not modify directly this file, it can be overwritten by goil
# Instead, you can update your .oil file description.
#
# $Date$
# $Rev$
# $Author$
# $URL$
#
# make          : build application % !CPUNAME %
# make doc      : extract both dev and user docs from trampoline sources 
#                 (doxygen and dot required).
# make clean    : remove everything except the Makefile.
# 
# NOTE: dependancies are set by default. To turn off dependancies generation, 
#       use the NODEP symbol, i.e. : make clean NODEP=1
#

#############################################################################
# USER APPLICATION CONFIGURATION
#############################################################################

# Name of the generated executable
# it should be declared as APP_NAME in the OS section of the .oil file.
# if not, it defaults to 'trampoline'
EXEC = % !APPNAME %

# Name of the source OIL file
OIL_FILE = % !OILFILENAME %

# Source files of the application.
# it should be declared as APP_SRC in the OS section of the .oil file
# (many times allowed).
%
foreach SOURCEFILES
  before %SOURCES = %
  do !FILE
  between % %
  after %
%
end foreach
if USESYSTEMCALL then
%
SOURCES += tpl_dispatch_table.c
SOURCES += tpl_invoque.S
%
end if
%
# Trampoline generation flags
WITH_TRACE = % ! trueFalse(USETRACE) %
WITH_MEMMAP = % ! trueFalse(USEMEMORYMAPPING) %
WITH_LINKSCRIPT = % ! trueFalse(USELINKSCRIPT) %
WITH_MEMORY_PROTECTION = % ! trueFalse(USEMEMORYPROTECTION) %

%
foreach CFLAGS
  before %
# CFLAGS: flags used for the C compilation process
# it should be declared as CFLAGS in the OS section of the .oil file
# (many times allowed).
CFLAGS = %
  do !CFLAG
  between % %
  after %
%
end foreach
%
%
foreach CPPFLAGS
  before %
# CPPFLAGS: flags used for the C++ compilation process
# it should be declared as CPPFLAGS in the OS section of the .oil file
# (many times allowed).
CPPFLAGS = %
  do !CPPFLAG
  between % %
  after %
%
end foreach
%
# LDFLAGS: flags used for the link process
# it should be declared as LDFLAGS in the OS section of the .oil file
# (many times allowed).
%
foreach LDFLAGS
  before %LDFLAGS = %
  do !LDFLAG
  between % %
  after %
%
end foreach
%
%
if USELINKSCRIPT then
%LDFLAGS += -T % !PROJECT %/% !LINKSCRIPT % -Map % !PROJECT %.map
EXTRA_FILES_CLEAN += %!PROJECT %.map%
end if
if USETRACE then%
EXTRA_FILES_CLEAN += %!PROJECT %.desc%
end if
if USELOGFILE then%
EXTRA_FILES_CLEAN += goil.log%
end if
%
# ASFLAGS: flags used for the assembly process (if required)
# it should be declared as AS_FLAGS in the OS section of the .oil file
# (many times allowed).
%
foreach ASFLAGS
  before %ASFLAGS = %
  do !ASFLAG
  between % %
  after %
%
end foreach
%
# Default build directory
BUILD_DIR = build

# Autosar extension
# If 'true', Autosar extension are compiled in (schedule tables, ...)
AUTOSAR = % ! trueFalse(AUTOSAR) %
AUTOSAR_SC = % !SCALABILITYCLASS %
AUTOSAR_OSAPPLICATIONS = % !trueFalse(SCALABILITYCLASS == 3 | SCALABILITYCLASS == 4) %

# Interrupt vector generation
GENITVEC = % if USEINTERRUPTTABLE then %-i% end if%

#############################################################################
# COMPILER CONFIGURATION
#############################################################################

# Program used to compile files.
# it should be declared as COMPILER in the OS section of the .oil file.
# default is 'gcc'
CC = % !COMPILEREXE %

# Program used to link files during compilation process.
# it should be declared as LINKER in the OS section of the .oil file.
# default is 'gcc'
LD = % !LINKEREXE %

# Program used to link files during compilation process.
# it should be declared as ASSEMBLER in the OS section of the .oil file.
# default is 'as'
AS = % !ASSEMBLEREXE %

#############################################################################
# TRAMPOLINE CONFIGURATION
#############################################################################

# Trampoline root path to source code.
# it should be declared as TRAMPOLINE_BASE_PATH
# in the OS section of the .oil file.
TPL_BASE_PATH = % !TRAMPOLINEPATH %

# Target is given in goil command line when generating the Makefile. 
# If you update the target here, it will be taken into account, and 
# a new Makefile will be generated with the new target.
TARGET = % !TARGET %
ARCH = % !ARCH 
if CHIP != "" then %
CHIP = % !CHIP end if
if BOARD != "" then %
BOARD = % !BOARD end if %

# WITH_USECOM is true if COM is used
WITH_USECOM = % !trueFalse(USECOM) %

# WITH_USEDEBUG is true if DEBUG is used
WITH_USEDEBUG = % !trueFalse(USEDEBUG) %

# WITH_SYSTEM_CALL is true when compiling trampoline
# with system call support. It is false otherwise
WITH_SYSTEM_CALL = % !trueFalse(USESYSTEMCALL) %

#############################################################################
# OIL COMPILER CONFIGURATION
#############################################################################
# Goil OIL compiler tool configuration.
# If the GOIL_TEMPLATE_PATH is commented, the default template path is used
# (it can be saved in the .profile file).
GOIL_COMPILER = goil%
if TEMPLATEPATH != "" then %
GOIL_TEMPLATE_PATH = % !TEMPLATEPATH end if %

# if there is an interrupt generation, the oil file depends on target.cfg
# disabled by default as target.cfg can be provided by the port (can a
# dependency be optional in a Makefile ?)
#OIL_FILE_DEP = % if USEINTERRUPTTABLE then %target.cfg% end if%

#############################################################################
# DOCUMENTATION GENERATION
#############################################################################
# The doxygen tool is used to extract both user and developpment 
# documentation from the source code. 
# See http://www.stack.nl/~dimitri/doxygen/
# You should also install Graphviz dot tool to build dependancy graph in
# the documentation:
# see http://www.graphviz.org/
DOXYGEN = doxygen

#############################################################################
# TARGET SPECIFIC STUFF
#############################################################################
% template if exists Makefile_specific
%
#############################################################################
# call Trampoline makefile rules.
#############################################################################

# Call main Trampoline Makefile
OS_MAKE_PATH = $(TPL_BASE_PATH)/make
include $(OS_MAKE_PATH)/Makefile

# vim:ft=make
