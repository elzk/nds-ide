/*-----------------------------------------------------------------------------
 * Task % !NAME % descriptor
 */
#define APP_% !PROCESSKIND %_% !NAME %_START_SEC_CODE
#include "tpl_memmap.h"
/*
 * Task % !NAME % function prototype
 */
FUNC(void, OS_APPL_CODE) % !NAME %_function(void);
#define APP_% !PROCESSKIND %_% !NAME %_STOP_SEC_CODE
#include "tpl_memmap.h"

/*-----------------------------------------------------------------------------
 * Target specific structures
 */
%
template process_specific
%

#if WITH_AUTOSAR_TIMING_PROTECTION == YES
#define OS_START_SEC_VAR_UNSPECIFIED
#include "tpl_memmap.h"
%
# *TODO
%
#define OS_STOP_SEC_VAR_UNSPECIFIED
#include "tpl_memmap.h"
#endif


#define OS_START_SEC_CONST_UNSPECIFIED
#include "tpl_memmap.h"

%
if [RESOURCES length] > 0 then
%/*
 * Resources used by task % !NAME %
 *
 * %
foreach RESOURCES do
 !RESOURCENAME
between %, %
end foreach
%
 */
%end if%
/*
 * Static descriptor of task % !NAME %
 */
CONST(tpl_proc_static, OS_CONST) % !NAME %_task_stat_desc = {
  /* context                  */  % !NAME %_CONTEXT,
  /* stack                    */  % !NAME %_STACK,
  /* entry point (function)   */  % !NAME %_function,
  /* internal ressource       */  %
if USEINTERNALRESOURCE then
  %&%!INTERNALRESOURCE%_rez_desc,%
elsif NONPREEMPTABLE then
  %&INTERNAL_RES_SCHEDULER,%
else
  %NULL,%
end if
%
  /* task id                  */  % !NAME %_id,
#if WITH_OSAPPLICATION == YES
  /* OS application id        */  %
if AUTOSAR then
  if SCALABILITYCLASS >= 3 then
    if exists APPLICATION then
      !APPLICATION%_id,%
    else
      %INVALID_OSAPPLICATION_ID,%
    end if
  end if
end if
%
#endif
  /* task base priority       */  % !PRIORITY %,
  /* max activation count     */  % !ACTIVATION %,
  /* task type                */  TASK_%
if EXTENDEDTASK then
  %EXTENDED,%
else
  %BASIC,%
end if
%
#if WITH_AUTOSAR_TIMING_PROTECTION == YES
  /* pointer to the timing
     protection descriptor    */  $TIMING_PROT_REF$
#endif
};

#define OS_STOP_SEC_CONST_UNSPECIFIED
#include "tpl_memmap.h"


#define OS_START_SEC_VAR_UNSPECIFIED
#include "tpl_memmap.h"
/*
 * Dynamic descriptor of task % !NAME %
 */
VAR(tpl_proc, OS_VAR) % !NAME %_task_desc = {
  /* resources                      */  NULL,
#if WITH_MEMORY_PROTECTION == YES
  /* if > 0 the process is trusted  */  %
if AUTOSAR then
  if SCALABILITYCLASS > 2 then
    if exists TRUSTED default (false) then !1 else !0 end if
  end if
else
  !0
end if
%,    
#endif /* WITH_MEMORY_PROTECTION */
  /* activate count                 */  0,
  /* task priority                  */  % !PRIORITY %,
  /* task state                     */  %
if AUTOSTART then
  %AUTOSTART%
else
  %SUSPENDED%
end if 
%
#if WITH_AUTOSAR_TIMING_PROTECTION == YES
    /* activation allowed             */  ,TRUE
#endif
};
%
if EXTENDEDTASK then
%
/*
 * Event structure of task % !NAME %
 */
VAR(tpl_task_events, OS_VAR) % !NAME %_task_evts = {
  /* event set  */ 0,
  /* event wait */ 0
};
%
end if
%
#define OS_STOP_SEC_VAR_UNSPECIFIED
#include "tpl_memmap.h"

