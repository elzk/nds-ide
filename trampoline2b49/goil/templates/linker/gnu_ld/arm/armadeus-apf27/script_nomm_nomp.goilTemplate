MEMORY
{
		bootrom (rx) : ORIGIN = 0x00000000, LENGTH = 16K /* hard-wired into microcontroller */
		dram0 (wx)   : ORIGIN = 0xA0000000, LENGTH = 64M
		dram1 (wx)   : ORIGIN = 0xB0000000, LENGTH = 64M
		fvram (wx)   : ORIGIN = 0xFFF00000, LENGTH = 979K /* free (unused by system) VRAM memory */
		vvram (wx)   : ORIGIN = 0xFFFF4C00, LENGTH = 45K  /* vector RAM */
}

ENTRY (tpl_arm_bootstrap_entry)

SECTIONS
{
  .interrupt_table : {
		. = 0xfffffef0;
    KEEP (* (.exception_table))
		. = 0xffffff00;
		KEEP (* (.interrupt_table))
	} > vvram

  /*
   * code and consts of the operating system (Trampoline).
   * this section is not accessible from an untrusted process
   */
  . = ALIGN(4);
  ostext : {
    *(.osCode)
  } > dram0

  . = ALIGN(4);
  osconst : {
    *(.osConst)
  } > dram0
  
  /*
   * vars of the operating system (Trampoline)
   */
  . = ALIGN(4);
  osvars : {
    *(.osVar)
    *(.stacks) /* TODO : is it the best place ? */
  } > dram0

  /*
   * code and consts of the processes of the applications
   */
  apptext ALIGN(4) : {
    __SEG_START_APP_CODE_CONST_RGN = .;
    *(.osApiConst)  /* API constants    */
    *(.osApiCode)   /* API functions    */
    /* Sections for code of tasks and ISR */%
foreach PROCESSES do
%
    *(.% !PROCESSKIND %_% !NAME %Code)
%
end foreach
%
} > ram
  
  appconst ALIGN(16) : {
/* Sections for const of tasks and ISR */
%
foreach PROCESSES do
 for DATA_SIZE in "32BIT","16BIT","8BIT","BOOLEAN","UNSPECIFIED" do
  for SECTION_KIND in "_CONST_","_CALIB_","_CARTO_","_CONFIG_DATA_" do
%      *(.% !PROCESSKIND %_% !NAME %_SEC% !SECTION_KIND !DATA_SIZE %)
%
  end for
 end for
end foreach
%    
    . = ALIGN(16);
    __SEG_STOP_APP_CODE_CONST_RGN = . - 1;
  } > ram

  /*
   * private data of processes
   */
  procvars : {
%
foreach PROCESSES do
%    __SEG_START_% !PROCESSKIND %_% !NAME %_VAR_RGN = .;
/* Initialized variables section of % !PROCESSKIND % % !NAME % */
%
  for DATA_SIZE in "32BIT","16BIT","8BIT","BOOLEAN","UNSPECIFIED" do
    for SECTION_KIND in "_NOINIT_","_POWER_ON_INIT_","_FAST_","_" do
%    *(.% !PROCESSKIND %_% !NAME %_SEC_VAR% !SECTION_KIND !DATA_SIZE %)
%
    end for
  end for
%    __SEG_END_% !PROCESSKIND %_% !NAME %_VAR_RGN = ALIGN(16) - 1;
%
end foreach
%  } > ram

  /*
   * stack of processes
   */
  procstack : {
%
foreach PROCESSES do %
  /* Section of stack of % !PROCESSKIND % % !NAME %  */
    __SEG_START_% !PROCESSKIND %_% !NAME %_STACK_RGN = .;
    *(.% !PROCESSKIND %_% !NAME %Stack)
    __SEG_END_% !PROCESSKIND %_% !NAME %_STACK_RGN = ALIGN(16) - 1;
%
end foreach
%
 } > ram


  /*
   * os application data
   */
  appvars : {
 /* $APP_VARS */
  } > ram

  /*
   * remaining .text (ie no section given)
   */
  . = ALIGN(4);
  text_garbage : {
    *(.text*)
    . = ALIGN(16);
  } > ram

__ramtext_ram_start__ = ADDR(ostext);
__ramtext_ram_end__   = ADDR(text_garbage) + SIZEOF(text_garbage);
__ramtext_load_start__ = LOADADDR(ostext); 
__ramtext_load_end__ = __ramtext_load_start__ + SIZEOF(ostext) + SIZEOF(osconst) + SIZEOF(osvars) + SIZEOF(apptext) + SIZEOF(appconst) + SIZEOF(procvars) + SIZEOF(procstack) + SIZEOF(appvars) + SIZEOF(text_garbage) ;


  .data : {
    * (*.data *.data.*)
    *(.rodata)      /* litteral strings */
    *(.rodata*)
    . = ALIGN(16);
  } > ram 
 
  /*
   * bss data
   */
  .bss ALIGN(16) : {
    *(.bss)
    *(.bss*)
  } > ram
  . = ALIGN(16);
  
  /*
   * garbage
   */
  garbage : {
    *(COMMON)
  } > ram
  
  /* LOADADDR is the same as the ADDR if it is a ram build */
__data_ram_start__ = ADDR(.data);
__data_ram_end__   = ADDR(garbage) + SIZEOF(garbage);
__data_load_start__ = LOADADDR(.data); 
__data_load_end__ = __data_load_start__ + SIZEOF(.data) + SIZEOF(.bss) + SIZEOF(garbage) ;

  .comment : {
    *(.glue_7*)
    *(.comment) 
  } > ram
      
/*  debug : {
    *(.debug);
    . = ALIGN(4);
    *(.debug_srcinfo);
    . = ALIGN(4);
    *(.debug_sfnames);
    . = ALIGN(4);
    *(.debug_aranges*);
    . = ALIGN(4);
    *(.debug_pubnames*);
    . = ALIGN(4);
    *(.debug_info*);
    . = ALIGN(4);
    *(.debug_abbrev*);
    . = ALIGN(4);
    *(.debug_line*);
    . = ALIGN(4);
    *(.debug_frame*);
    . = ALIGN(4);
    *(.debug_str*);
    . = ALIGN(4);
    *(.debug_loc*);
    . = ALIGN(4);
    *(.debug_macinfo);
    . = ALIGN(4);
    *(.debug_weaknames);
    . = ALIGN(4);
    *(.debug_funcnames);
    . = ALIGN(4);
    *(.debug_typenames);
    . = ALIGN(4);
    *(.debug_varnames);
    . = ALIGN(4);  
  } > ram*/
  
}

